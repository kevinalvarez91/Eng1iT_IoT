
BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bba0  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  0800bdd8  0800bdd8  0000cdd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5a0  0800c5a0  0000e288  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5a0  0800c5a0  0000d5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5a8  0800c5a8  0000e288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c5a8  0800c5a8  0000d5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c5b0  0800c5b0  0000d5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800c5b8  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e50  20000288  0800c840  0000e288  2**2
                  ALLOC
 10 ._user_heap_stack 00001200  200010d8  0800c840  0000f0d8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e288  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002badd  00000000  00000000  0000e2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c04  00000000  00000000  00039d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002278  00000000  00000000  0003d9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a84  00000000  00000000  0003fc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00045535  00000000  00000000  0004169c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b5cb  00000000  00000000  00086bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001c24c1  00000000  00000000  000b219c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0027465d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ab18  00000000  00000000  002746a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  0027f1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000288 	.word	0x20000288
 8000254:	00000000 	.word	0x00000000
 8000258:	0800bdc0 	.word	0x0800bdc0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000028c 	.word	0x2000028c
 8000274:	0800bdc0 	.word	0x0800bdc0

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	460a      	mov	r2, r1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback,};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY,};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE,};

  if (Button != BUTTON_USER)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <BSP_PB_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c6a:	f06f 0301 	mvn.w	r3, #1
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c70:	e05c      	b.n	8000d2c <BSP_PB_Init+0xdc>
  }
  else
  {
    /* Enable the BUTTON clock*/
    BUTTON_USER_GPIO_CLK_ENABLE();
 8000c72:	4b31      	ldr	r3, [pc, #196]	@ (8000d38 <BSP_PB_Init+0xe8>)
 8000c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c78:	4a2f      	ldr	r2, [pc, #188]	@ (8000d38 <BSP_PB_Init+0xe8>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c82:	4b2d      	ldr	r3, [pc, #180]	@ (8000d38 <BSP_PB_Init+0xe8>)
 8000c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]

    gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000c90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c94:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000c96:	2302      	movs	r3, #2
 8000c98:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61fb      	str	r3, [r7, #28]

    if (ButtonMode == BUTTON_MODE_GPIO)
 8000c9e:	79bb      	ldrb	r3, [r7, #6]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10c      	bne.n	8000cbe <BSP_PB_Init+0x6e>
    {
      /* Configure Button pin as input */
      gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
      HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	4a24      	ldr	r2, [pc, #144]	@ (8000d3c <BSP_PB_Init+0xec>)
 8000cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb0:	f107 0210 	add.w	r2, r7, #16
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 f9aa 	bl	8005010 <HAL_GPIO_Init>
 8000cbc:	e036      	b.n	8000d2c <BSP_PB_Init+0xdc>
    }
    else /* (ButtonMode == BUTTON_MODE_EXTI) */
    {
      /* Configure Button pin as input with External interrupt */
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000cbe:	4b20      	ldr	r3, [pc, #128]	@ (8000d40 <BSP_PB_Init+0xf0>)
 8000cc0:	617b      	str	r3, [r7, #20]

      HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d3c <BSP_PB_Init+0xec>)
 8000cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cca:	f107 0210 	add.w	r2, r7, #16
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f004 f99d 	bl	8005010 <HAL_GPIO_Init>

      (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000cd6:	79fa      	ldrb	r2, [r7, #7]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4a18      	ldr	r2, [pc, #96]	@ (8000d44 <BSP_PB_Init+0xf4>)
 8000ce2:	441a      	add	r2, r3
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	4918      	ldr	r1, [pc, #96]	@ (8000d48 <BSP_PB_Init+0xf8>)
 8000ce8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cec:	4619      	mov	r1, r3
 8000cee:	4610      	mov	r0, r2
 8000cf0:	f004 f932 	bl	8004f58 <HAL_EXTI_GetHandle>
      (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000cf4:	79fa      	ldrb	r2, [r7, #7]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4a11      	ldr	r2, [pc, #68]	@ (8000d44 <BSP_PB_Init+0xf4>)
 8000d00:	1898      	adds	r0, r3, r2
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4a11      	ldr	r2, [pc, #68]	@ (8000d4c <BSP_PB_Init+0xfc>)
 8000d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f004 f8f7 	bl	8004f00 <HAL_EXTI_RegisterCallback>

      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000d12:	2018      	movs	r0, #24
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	4a0e      	ldr	r2, [pc, #56]	@ (8000d50 <BSP_PB_Init+0x100>)
 8000d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f003 fe6d 	bl	80049fe <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000d24:	2318      	movs	r3, #24
 8000d26:	4618      	mov	r0, r3
 8000d28:	f003 fe83 	bl	8004a32 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3728      	adds	r7, #40	@ 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	46020c00 	.word	0x46020c00
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	10110000 	.word	0x10110000
 8000d44:	200002a4 	.word	0x200002a4
 8000d48:	0800c040 	.word	0x0800c040
 8000d4c:	20000004 	.word	0x20000004
 8000d50:	20000008 	.word	0x20000008

08000d54 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f007 f86b 	bl	8007e34 <BSP_PB_Callback>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <BSP_AUDIO_IN_IRQHandler>:
  * @param  Instance Audio in instance.
  * @param  Device Device of the audio in stream.
  * @retval None.
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t Device)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  if (Instance == 0U)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d109      	bne.n	8000d88 <BSP_AUDIO_IN_IRQHandler+0x24>
  {
    if (Device == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d103      	bne.n	8000d82 <BSP_AUDIO_IN_IRQHandler+0x1e>
    {
      HAL_DMA_IRQHandler(&haudio_mdf[0]);
 8000d7a:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 8000d7c:	f003 ff4c 	bl	8004c18 <HAL_DMA_IRQHandler>
    else /* Device == AUDIO_IN_DEVICE_DIGITAL_MIC2 */
    {
      HAL_DMA_IRQHandler(&haudio_mdf[1]);
    }
  }
}
 8000d80:	e002      	b.n	8000d88 <BSP_AUDIO_IN_IRQHandler+0x24>
      HAL_DMA_IRQHandler(&haudio_mdf[1]);
 8000d82:	4804      	ldr	r0, [pc, #16]	@ (8000d94 <BSP_AUDIO_IN_IRQHandler+0x30>)
 8000d84:	f003 ff48 	bl	8004c18 <HAL_DMA_IRQHandler>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200002b0 	.word	0x200002b0
 8000d94:	20000328 	.word	0x20000328

08000d98 <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C2 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 8000da2:	4b16      	ldr	r3, [pc, #88]	@ (8000dfc <BSP_I2C2_Init+0x64>)
 8000da4:	4a16      	ldr	r2, [pc, #88]	@ (8000e00 <BSP_I2C2_Init+0x68>)
 8000da6:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8000da8:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <BSP_I2C2_Init+0x6c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d11f      	bne.n	8000df0 <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 8000db0:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <BSP_I2C2_Init+0x6c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	4a13      	ldr	r2, [pc, #76]	@ (8000e04 <BSP_I2C2_Init+0x6c>)
 8000db8:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 8000dba:	4810      	ldr	r0, [pc, #64]	@ (8000dfc <BSP_I2C2_Init+0x64>)
 8000dbc:	f004 fede 	bl	8005b7c <HAL_I2C_GetState>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d114      	bne.n	8000df0 <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8000dc6:	480d      	ldr	r0, [pc, #52]	@ (8000dfc <BSP_I2C2_Init+0x64>)
 8000dc8:	f000 fb60 	bl	800148c <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8000dcc:	f006 fd1a 	bl	8007804 <HAL_RCC_GetPCLK1Freq>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	490d      	ldr	r1, [pc, #52]	@ (8000e08 <BSP_I2C2_Init+0x70>)
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 f8e3 	bl	8000fa0 <I2C_GetTiming>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4807      	ldr	r0, [pc, #28]	@ (8000dfc <BSP_I2C2_Init+0x64>)
 8000de0:	f000 f838 	bl	8000e54 <MX_I2C2_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d002      	beq.n	8000df0 <BSP_I2C2_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000dea:	f06f 0307 	mvn.w	r3, #7
 8000dee:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
return ret;
 8000df0:	687b      	ldr	r3, [r7, #4]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000da8 	.word	0x20000da8
 8000e00:	40005800 	.word	0x40005800
 8000e04:	200003a0 	.word	0x200003a0
 8000e08:	000186a0 	.word	0x000186a0

08000e0c <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 8000e16:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <BSP_I2C2_DeInit+0x40>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e4c <BSP_I2C2_DeInit+0x40>)
 8000e1e:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 8000e20:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <BSP_I2C2_DeInit+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d10b      	bne.n	8000e40 <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 8000e28:	4809      	ldr	r0, [pc, #36]	@ (8000e50 <BSP_I2C2_DeInit+0x44>)
 8000e2a:	f000 fb95 	bl	8001558 <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 8000e2e:	4808      	ldr	r0, [pc, #32]	@ (8000e50 <BSP_I2C2_DeInit+0x44>)
 8000e30:	f004 fc33 	bl	800569a <HAL_I2C_DeInit>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d002      	beq.n	8000e40 <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8000e3a:	f06f 0307 	mvn.w	r3, #7
 8000e3e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8000e40:	687b      	ldr	r3, [r7, #4]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200003a0 	.word	0x200003a0
 8000e50:	20000da8 	.word	0x20000da8

08000e54 <MX_I2C2_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f004 fb72 	bl	800557c <HAL_I2C_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <MX_I2C2_Init+0x50>
  {
    status = HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	73fb      	strb	r3, [r7, #15]
 8000ea2:	e014      	b.n	8000ece <MX_I2C2_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f005 f926 	bl	80060fc <HAL_I2CEx_ConfigAnalogFilter>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <MX_I2C2_Init+0x68>
    {
      status = HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	e008      	b.n	8000ece <MX_I2C2_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f005 f967 	bl	8006192 <HAL_I2CEx_ConfigDigitalFilter>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_I2C2_Init+0x7a>
      {
        status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <BSP_I2C2_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	60ba      	str	r2, [r7, #8]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	81fb      	strh	r3, [r7, #14]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	81bb      	strh	r3, [r7, #12]
 8000eea:	4613      	mov	r3, r2
 8000eec:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8000eee:	89b9      	ldrh	r1, [r7, #12]
 8000ef0:	89f8      	ldrh	r0, [r7, #14]
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f000 fb4f 	bl	800159c <I2C2_WriteReg>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <BSP_I2C2_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e00c      	b.n	8000f24 <BSP_I2C2_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8000f0a:	4809      	ldr	r0, [pc, #36]	@ (8000f30 <BSP_I2C2_WriteReg+0x58>)
 8000f0c:	f004 fe44 	bl	8005b98 <HAL_I2C_GetError>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d103      	bne.n	8000f1e <BSP_I2C2_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000f16:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	e002      	b.n	8000f24 <BSP_I2C2_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000f1e:	f06f 0303 	mvn.w	r3, #3
 8000f22:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8000f24:	697b      	ldr	r3, [r7, #20]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000da8 	.word	0x20000da8

08000f34 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	60ba      	str	r2, [r7, #8]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4603      	mov	r3, r0
 8000f40:	81fb      	strh	r3, [r7, #14]
 8000f42:	460b      	mov	r3, r1
 8000f44:	81bb      	strh	r3, [r7, #12]
 8000f46:	4613      	mov	r3, r2
 8000f48:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8000f4a:	89b9      	ldrh	r1, [r7, #12]
 8000f4c:	89f8      	ldrh	r0, [r7, #14]
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	2201      	movs	r2, #1
 8000f56:	f000 fb47 	bl	80015e8 <I2C2_ReadReg>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <BSP_I2C2_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	e00c      	b.n	8000f80 <BSP_I2C2_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8000f66:	4809      	ldr	r0, [pc, #36]	@ (8000f8c <BSP_I2C2_ReadReg+0x58>)
 8000f68:	f004 fe16 	bl	8005b98 <HAL_I2C_GetError>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	d103      	bne.n	8000f7a <BSP_I2C2_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000f72:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	e002      	b.n	8000f80 <BSP_I2C2_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000f7a:	f06f 0303 	mvn.w	r3, #3
 8000f7e:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8000f80:	697b      	ldr	r3, [r7, #20]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000da8 	.word	0x20000da8

08000f90 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8000f94:	f003 fc28 	bl	80047e8 <HAL_GetTick>
 8000f98:	4603      	mov	r3, r0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d06b      	beq.n	800108c <I2C_GetTiming+0xec>
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d068      	beq.n	800108c <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	e060      	b.n	8001082 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8000fc0:	4a35      	ldr	r2, [pc, #212]	@ (8001098 <I2C_GetTiming+0xf8>)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	212c      	movs	r1, #44	@ 0x2c
 8000fc6:	fb01 f303 	mul.w	r3, r1, r3
 8000fca:	4413      	add	r3, r2
 8000fcc:	3304      	adds	r3, #4
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d352      	bcc.n	800107c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8000fd6:	4a30      	ldr	r2, [pc, #192]	@ (8001098 <I2C_GetTiming+0xf8>)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	212c      	movs	r1, #44	@ 0x2c
 8000fdc:	fb01 f303 	mul.w	r3, r1, r3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	3308      	adds	r3, #8
 8000fe4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d847      	bhi.n	800107c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8000fec:	6939      	ldr	r1, [r7, #16]
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f856 	bl	80010a0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8000ff4:	6939      	ldr	r1, [r7, #16]
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f940 	bl	800127c <I2C_Compute_SCLL_SCLH>
 8000ffc:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2b7f      	cmp	r3, #127	@ 0x7f
 8001002:	d842      	bhi.n	800108a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8001004:	4925      	ldr	r1, [pc, #148]	@ (800109c <I2C_GetTiming+0xfc>)
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4613      	mov	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	440b      	add	r3, r1
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8001016:	4821      	ldr	r0, [pc, #132]	@ (800109c <I2C_GetTiming+0xfc>)
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4403      	add	r3, r0
 8001024:	3304      	adds	r3, #4
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	051b      	lsls	r3, r3, #20
 800102a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 800102e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8001030:	481a      	ldr	r0, [pc, #104]	@ (800109c <I2C_GetTiming+0xfc>)
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4403      	add	r3, r0
 800103e:	3308      	adds	r3, #8
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	041b      	lsls	r3, r3, #16
 8001044:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8001048:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 800104a:	4814      	ldr	r0, [pc, #80]	@ (800109c <I2C_GetTiming+0xfc>)
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4403      	add	r3, r0
 8001058:	330c      	adds	r3, #12
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8001060:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8001062:	480e      	ldr	r0, [pc, #56]	@ (800109c <I2C_GetTiming+0xfc>)
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4403      	add	r3, r0
 8001070:	3310      	adds	r3, #16
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8001076:	430b      	orrs	r3, r1
 8001078:	617b      	str	r3, [r7, #20]
        }
        break;
 800107a:	e006      	b.n	800108a <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	3301      	adds	r3, #1
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d99b      	bls.n	8000fc0 <I2C_GetTiming+0x20>
 8001088:	e000      	b.n	800108c <I2C_GetTiming+0xec>
        break;
 800108a:	bf00      	nop
      }
    }
  }

  return ret;
 800108c:	697b      	ldr	r3, [r7, #20]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	0800c044 	.word	0x0800c044
 800109c:	200003a4 	.word	0x200003a4

080010a0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b08f      	sub	sp, #60	@ 0x3c
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80010aa:	2310      	movs	r3, #16
 80010ac:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	085a      	lsrs	r2, r3, #1
 80010b2:	4b6e      	ldr	r3, [pc, #440]	@ (800126c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80010b4:	4413      	add	r3, r2
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80010bc:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80010be:	2332      	movs	r3, #50	@ 0x32
 80010c0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80010c2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80010c6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80010c8:	4a69      	ldr	r2, [pc, #420]	@ (8001270 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	212c      	movs	r1, #44	@ 0x2c
 80010ce:	fb01 f303 	mul.w	r3, r1, r3
 80010d2:	4413      	add	r3, r2
 80010d4:	3324      	adds	r3, #36	@ 0x24
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	4a65      	ldr	r2, [pc, #404]	@ (8001270 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	212c      	movs	r1, #44	@ 0x2c
 80010e0:	fb01 f303 	mul.w	r3, r1, r3
 80010e4:	4413      	add	r3, r2
 80010e6:	330c      	adds	r3, #12
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80010ec:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80010ee:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80010f0:	495f      	ldr	r1, [pc, #380]	@ (8001270 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	202c      	movs	r0, #44	@ 0x2c
 80010f6:	fb00 f303 	mul.w	r3, r0, r3
 80010fa:	440b      	add	r3, r1
 80010fc:	3328      	adds	r3, #40	@ 0x28
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3303      	adds	r3, #3
 8001102:	69f9      	ldr	r1, [r7, #28]
 8001104:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800110c:	4a58      	ldr	r2, [pc, #352]	@ (8001270 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	212c      	movs	r1, #44	@ 0x2c
 8001112:	fb01 f303 	mul.w	r3, r1, r3
 8001116:	4413      	add	r3, r2
 8001118:	3310      	adds	r3, #16
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	4a54      	ldr	r2, [pc, #336]	@ (8001270 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	212c      	movs	r1, #44	@ 0x2c
 8001124:	fb01 f303 	mul.w	r3, r1, r3
 8001128:	4413      	add	r3, r2
 800112a:	3320      	adds	r3, #32
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8001130:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001132:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8001134:	494e      	ldr	r1, [pc, #312]	@ (8001270 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	202c      	movs	r0, #44	@ 0x2c
 800113a:	fb00 f303 	mul.w	r3, r0, r3
 800113e:	440b      	add	r3, r1
 8001140:	3328      	adds	r3, #40	@ 0x28
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	3304      	adds	r3, #4
 8001146:	69f9      	ldr	r1, [r7, #28]
 8001148:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8001150:	4a47      	ldr	r2, [pc, #284]	@ (8001270 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	212c      	movs	r1, #44	@ 0x2c
 8001156:	fb01 f303 	mul.w	r3, r1, r3
 800115a:	4413      	add	r3, r2
 800115c:	3320      	adds	r3, #32
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	4a43      	ldr	r2, [pc, #268]	@ (8001270 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	212c      	movs	r1, #44	@ 0x2c
 8001168:	fb01 f303 	mul.w	r3, r1, r3
 800116c:	4413      	add	r3, r2
 800116e:	3314      	adds	r3, #20
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4403      	add	r3, r0
 8001174:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8001176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001178:	2b00      	cmp	r3, #0
 800117a:	dc01      	bgt.n	8001180 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 8001180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001182:	2b00      	cmp	r3, #0
 8001184:	dc01      	bgt.n	800118a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800118a:	2300      	movs	r3, #0
 800118c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800118e:	e062      	b.n	8001256 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
 8001194:	e059      	b.n	800124a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8001196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001198:	3301      	adds	r3, #1
 800119a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800119c:	3201      	adds	r2, #1
 800119e:	fb03 f202 	mul.w	r2, r3, r2
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d348      	bcc.n	8001244 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
 80011b6:	e042      	b.n	800123e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80011b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ba:	3301      	adds	r3, #1
 80011bc:	6a3a      	ldr	r2, [r7, #32]
 80011be:	fb03 f202 	mul.w	r2, r3, r2
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fb02 f303 	mul.w	r3, r2, r3
 80011c8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80011ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d332      	bcc.n	8001238 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80011d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d82e      	bhi.n	8001238 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 80011da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011de:	429a      	cmp	r2, r3
 80011e0:	d02a      	beq.n	8001238 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80011e2:	4b24      	ldr	r3, [pc, #144]	@ (8001274 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4924      	ldr	r1, [pc, #144]	@ (8001278 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011f4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001274 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	491f      	ldr	r1, [pc, #124]	@ (8001278 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	3304      	adds	r3, #4
 8001208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800120a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800120c:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4919      	ldr	r1, [pc, #100]	@ (8001278 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	440b      	add	r3, r1
 800121c:	3308      	adds	r3, #8
 800121e:	6a3a      	ldr	r2, [r7, #32]
 8001220:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8001222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001224:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 8001226:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	4a11      	ldr	r2, [pc, #68]	@ (8001274 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800122e:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8001230:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b7f      	cmp	r3, #127	@ 0x7f
 8001236:	d812      	bhi.n	800125e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	3301      	adds	r3, #1
 800123c:	623b      	str	r3, [r7, #32]
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d9b9      	bls.n	80011b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001246:	3301      	adds	r3, #1
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	2b0f      	cmp	r3, #15
 800124e:	d9a2      	bls.n	8001196 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8001250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001252:	3301      	adds	r3, #1
 8001254:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d999      	bls.n	8001190 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800125c:	e000      	b.n	8001260 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800125e:	bf00      	nop
          }
        }
      }
    }
  }
}
 8001260:	373c      	adds	r7, #60	@ 0x3c
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	3b9aca00 	.word	0x3b9aca00
 8001270:	0800c044 	.word	0x0800c044
 8001274:	20000da4 	.word	0x20000da4
 8001278:	200003a4 	.word	0x200003a4

0800127c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800127c:	b480      	push	{r7}
 800127e:	b093      	sub	sp, #76	@ 0x4c
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800128a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	085a      	lsrs	r2, r3, #1
 8001290:	4b7a      	ldr	r3, [pc, #488]	@ (800147c <I2C_Compute_SCLL_SCLH+0x200>)
 8001292:	4413      	add	r3, r2
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	fbb3 f3f2 	udiv	r3, r3, r2
 800129a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 800129c:	4a78      	ldr	r2, [pc, #480]	@ (8001480 <I2C_Compute_SCLL_SCLH+0x204>)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	212c      	movs	r1, #44	@ 0x2c
 80012a2:	fb01 f303 	mul.w	r3, r1, r3
 80012a6:	4413      	add	r3, r2
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	085a      	lsrs	r2, r3, #1
 80012ac:	4b73      	ldr	r3, [pc, #460]	@ (800147c <I2C_Compute_SCLL_SCLH+0x200>)
 80012ae:	4413      	add	r3, r2
 80012b0:	4973      	ldr	r1, [pc, #460]	@ (8001480 <I2C_Compute_SCLL_SCLH+0x204>)
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	202c      	movs	r0, #44	@ 0x2c
 80012b6:	fb00 f202 	mul.w	r2, r0, r2
 80012ba:	440a      	add	r2, r1
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	fbb3 f3f2 	udiv	r3, r3, r2
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80012c4:	2332      	movs	r3, #50	@ 0x32
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80012c8:	4a6d      	ldr	r2, [pc, #436]	@ (8001480 <I2C_Compute_SCLL_SCLH+0x204>)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	212c      	movs	r1, #44	@ 0x2c
 80012ce:	fb01 f303 	mul.w	r3, r1, r3
 80012d2:	4413      	add	r3, r2
 80012d4:	3328      	adds	r3, #40	@ 0x28
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012da:	fb02 f303 	mul.w	r3, r2, r3
 80012de:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80012e0:	4a67      	ldr	r2, [pc, #412]	@ (8001480 <I2C_Compute_SCLL_SCLH+0x204>)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	212c      	movs	r1, #44	@ 0x2c
 80012e6:	fb01 f303 	mul.w	r3, r1, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	3304      	adds	r3, #4
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a62      	ldr	r2, [pc, #392]	@ (800147c <I2C_Compute_SCLL_SCLH+0x200>)
 80012f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80012f8:	4a61      	ldr	r2, [pc, #388]	@ (8001480 <I2C_Compute_SCLL_SCLH+0x204>)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	212c      	movs	r1, #44	@ 0x2c
 80012fe:	fb01 f303 	mul.w	r3, r1, r3
 8001302:	4413      	add	r3, r2
 8001304:	3308      	adds	r3, #8
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a5c      	ldr	r2, [pc, #368]	@ (800147c <I2C_Compute_SCLL_SCLH+0x200>)
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8001310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001312:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001314:	2300      	movs	r3, #0
 8001316:	637b      	str	r3, [r7, #52]	@ 0x34
 8001318:	e0a3      	b.n	8001462 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800131a:	495a      	ldr	r1, [pc, #360]	@ (8001484 <I2C_Compute_SCLL_SCLH+0x208>)
 800131c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	440b      	add	r3, r1
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001334:	2300      	movs	r3, #0
 8001336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001338:	e08c      	b.n	8001454 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800133a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	441a      	add	r2, r3
 8001340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001342:	3301      	adds	r3, #1
 8001344:	6979      	ldr	r1, [r7, #20]
 8001346:	fb03 f101 	mul.w	r1, r3, r1
 800134a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	440b      	add	r3, r1
 8001350:	4413      	add	r3, r2
 8001352:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8001354:	4a4a      	ldr	r2, [pc, #296]	@ (8001480 <I2C_Compute_SCLL_SCLH+0x204>)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	212c      	movs	r1, #44	@ 0x2c
 800135a:	fb01 f303 	mul.w	r3, r1, r3
 800135e:	4413      	add	r3, r2
 8001360:	3318      	adds	r3, #24
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	429a      	cmp	r2, r3
 8001368:	d971      	bls.n	800144e <I2C_Compute_SCLL_SCLH+0x1d2>
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136e:	1ad2      	subs	r2, r2, r3
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001378:	429a      	cmp	r2, r3
 800137a:	d268      	bcs.n	800144e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800137c:	2300      	movs	r3, #0
 800137e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001380:	e062      	b.n	8001448 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8001382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	441a      	add	r2, r3
 8001388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800138a:	3301      	adds	r3, #1
 800138c:	6979      	ldr	r1, [r7, #20]
 800138e:	fb03 f101 	mul.w	r1, r3, r1
 8001392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	440b      	add	r3, r1
 8001398:	4413      	add	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	441a      	add	r2, r3
 80013a2:	4937      	ldr	r1, [pc, #220]	@ (8001480 <I2C_Compute_SCLL_SCLH+0x204>)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	202c      	movs	r0, #44	@ 0x2c
 80013a8:	fb00 f303 	mul.w	r3, r0, r3
 80013ac:	440b      	add	r3, r1
 80013ae:	3320      	adds	r3, #32
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	441a      	add	r2, r3
 80013b4:	4932      	ldr	r1, [pc, #200]	@ (8001480 <I2C_Compute_SCLL_SCLH+0x204>)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	202c      	movs	r0, #44	@ 0x2c
 80013ba:	fb00 f303 	mul.w	r3, r0, r3
 80013be:	440b      	add	r3, r1
 80013c0:	3324      	adds	r3, #36	@ 0x24
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4413      	add	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min)
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d338      	bcc.n	8001442 <I2C_Compute_SCLL_SCLH+0x1c6>
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d834      	bhi.n	8001442 <I2C_Compute_SCLL_SCLH+0x1c6>
 80013d8:	4a29      	ldr	r2, [pc, #164]	@ (8001480 <I2C_Compute_SCLL_SCLH+0x204>)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	212c      	movs	r1, #44	@ 0x2c
 80013de:	fb01 f303 	mul.w	r3, r1, r3
 80013e2:	4413      	add	r3, r2
 80013e4:	331c      	adds	r3, #28
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d329      	bcc.n	8001442 <I2C_Compute_SCLL_SCLH+0x1c6>
              && (ti2cclk < tscl_h))
 80013ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d225      	bcs.n	8001442 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 80013fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001400:	2b00      	cmp	r3, #0
 8001402:	da02      	bge.n	800140a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8001404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001406:	425b      	negs	r3, r3
 8001408:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800140a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800140c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800140e:	429a      	cmp	r2, r3
 8001410:	d917      	bls.n	8001442 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8001412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001414:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 8001416:	491b      	ldr	r1, [pc, #108]	@ (8001484 <I2C_Compute_SCLL_SCLH+0x208>)
 8001418:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3310      	adds	r3, #16
 8001426:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001428:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800142a:	4916      	ldr	r1, [pc, #88]	@ (8001484 <I2C_Compute_SCLL_SCLH+0x208>)
 800142c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	330c      	adds	r3, #12
 800143a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800143c:	601a      	str	r2, [r3, #0]
              ret = count;
 800143e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001440:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8001442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001444:	3301      	adds	r3, #1
 8001446:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800144a:	2bff      	cmp	r3, #255	@ 0xff
 800144c:	d999      	bls.n	8001382 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800144e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001450:	3301      	adds	r3, #1
 8001452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001456:	2bff      	cmp	r3, #255	@ 0xff
 8001458:	f67f af6f 	bls.w	800133a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800145c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800145e:	3301      	adds	r3, #1
 8001460:	637b      	str	r3, [r7, #52]	@ 0x34
 8001462:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <I2C_Compute_SCLL_SCLH+0x20c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001468:	429a      	cmp	r2, r3
 800146a:	f4ff af56 	bcc.w	800131a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800146e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8001470:	4618      	mov	r0, r3
 8001472:	374c      	adds	r7, #76	@ 0x4c
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	3b9aca00 	.word	0x3b9aca00
 8001480:	0800c044 	.word	0x0800c044
 8001484:	200003a4 	.word	0x200003a4
 8001488:	20000da4 	.word	0x20000da4

0800148c <I2C2_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hI2c)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	@ 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 8001494:	4b2e      	ldr	r3, [pc, #184]	@ (8001550 <I2C2_MspInit+0xc4>)
 8001496:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800149a:	4a2d      	ldr	r2, [pc, #180]	@ (8001550 <I2C2_MspInit+0xc4>)
 800149c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001550 <I2C2_MspInit+0xc4>)
 80014a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 80014b2:	4b27      	ldr	r3, [pc, #156]	@ (8001550 <I2C2_MspInit+0xc4>)
 80014b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b8:	4a25      	ldr	r2, [pc, #148]	@ (8001550 <I2C2_MspInit+0xc4>)
 80014ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014c2:	4b23      	ldr	r3, [pc, #140]	@ (8001550 <I2C2_MspInit+0xc4>)
 80014c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SCL_PIN;
 80014d0:	2310      	movs	r3, #16
 80014d2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 80014d4:	2312      	movs	r3, #18
 80014d6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 80014d8:	2301      	movs	r3, #1
 80014da:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 80014dc:	2302      	movs	r3, #2
 80014de:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SCL_AF;
 80014e0:	2304      	movs	r3, #4
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	481a      	ldr	r0, [pc, #104]	@ (8001554 <I2C2_MspInit+0xc8>)
 80014ec:	f003 fd90 	bl	8005010 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SDA_PIN;
 80014f0:	2320      	movs	r3, #32
 80014f2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 80014f4:	2312      	movs	r3, #18
 80014f6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 80014fc:	2302      	movs	r3, #2
 80014fe:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SDA_AF;
 8001500:	2304      	movs	r3, #4
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4812      	ldr	r0, [pc, #72]	@ (8001554 <I2C2_MspInit+0xc8>)
 800150c:	f003 fd80 	bl	8005010 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 8001510:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <I2C2_MspInit+0xc4>)
 8001512:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001516:	4a0e      	ldr	r2, [pc, #56]	@ (8001550 <I2C2_MspInit+0xc4>)
 8001518:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800151c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001520:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <I2C2_MspInit+0xc4>)
 8001522:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 800152e:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <I2C2_MspInit+0xc4>)
 8001530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001532:	4a07      	ldr	r2, [pc, #28]	@ (8001550 <I2C2_MspInit+0xc4>)
 8001534:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001538:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 800153a:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <I2C2_MspInit+0xc4>)
 800153c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800153e:	4a04      	ldr	r2, [pc, #16]	@ (8001550 <I2C2_MspInit+0xc4>)
 8001540:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001544:	6753      	str	r3, [r2, #116]	@ 0x74
}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	@ 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	46020c00 	.word	0x46020c00
 8001554:	42021c00 	.word	0x42021c00

08001558 <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 8001560:	2310      	movs	r3, #16
 8001562:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4619      	mov	r1, r3
 8001568:	480a      	ldr	r0, [pc, #40]	@ (8001594 <I2C2_MspDeInit+0x3c>)
 800156a:	f003 ff29 	bl	80053c0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 800156e:	2320      	movs	r3, #32
 8001570:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4619      	mov	r1, r3
 8001576:	4807      	ldr	r0, [pc, #28]	@ (8001594 <I2C2_MspDeInit+0x3c>)
 8001578:	f003 ff22 	bl	80053c0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <I2C2_MspDeInit+0x40>)
 800157e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001582:	4a05      	ldr	r2, [pc, #20]	@ (8001598 <I2C2_MspDeInit+0x40>)
 8001584:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001588:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 800158c:	bf00      	nop
 800158e:	3720      	adds	r7, #32
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	42021c00 	.word	0x42021c00
 8001598:	46020c00 	.word	0x46020c00

0800159c <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af04      	add	r7, sp, #16
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	4603      	mov	r3, r0
 80015a6:	81fb      	strh	r3, [r7, #14]
 80015a8:	460b      	mov	r3, r1
 80015aa:	81bb      	strh	r3, [r7, #12]
 80015ac:	4613      	mov	r3, r2
 80015ae:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80015b0:	8978      	ldrh	r0, [r7, #10]
 80015b2:	89ba      	ldrh	r2, [r7, #12]
 80015b4:	89f9      	ldrh	r1, [r7, #14]
 80015b6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80015ba:	9302      	str	r3, [sp, #8]
 80015bc:	8b3b      	ldrh	r3, [r7, #24]
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	4603      	mov	r3, r0
 80015c6:	4807      	ldr	r0, [pc, #28]	@ (80015e4 <I2C2_WriteReg+0x48>)
 80015c8:	f004 f8aa 	bl	8005720 <HAL_I2C_Mem_Write>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e001      	b.n	80015da <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80015d6:	f06f 0307 	mvn.w	r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000da8 	.word	0x20000da8

080015e8 <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af04      	add	r7, sp, #16
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	4603      	mov	r3, r0
 80015f2:	81fb      	strh	r3, [r7, #14]
 80015f4:	460b      	mov	r3, r1
 80015f6:	81bb      	strh	r3, [r7, #12]
 80015f8:	4613      	mov	r3, r2
 80015fa:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80015fc:	8978      	ldrh	r0, [r7, #10]
 80015fe:	89ba      	ldrh	r2, [r7, #12]
 8001600:	89f9      	ldrh	r1, [r7, #14]
 8001602:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001606:	9302      	str	r3, [sp, #8]
 8001608:	8b3b      	ldrh	r3, [r7, #24]
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	4603      	mov	r3, r0
 8001612:	4807      	ldr	r0, [pc, #28]	@ (8001630 <I2C2_ReadReg+0x48>)
 8001614:	f004 f998 	bl	8005948 <HAL_I2C_Mem_Read>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800161e:	2300      	movs	r3, #0
 8001620:	e001      	b.n	8001626 <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8001622:	f06f 0307 	mvn.w	r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000da8 	.word	0x20000da8

08001634 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <BSP_CAMERA_FrameEventCallback>:
  * @brief  Frame Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_FrameEventCallback(uint32_t Instance)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff ffd1 	bl	8001634 <BSP_CAMERA_LineEventCallback>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff ffd0 	bl	8001648 <BSP_CAMERA_FrameEventCallback>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff ffcf 	bl	800165c <BSP_CAMERA_VsyncEventCallback>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f7ff ffce 	bl	8001670 <BSP_CAMERA_ErrorCallback>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_GYRO and/or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d903      	bls.n	80016f8 <BSP_MOTION_SENSOR_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80016f0:	f06f 0301 	mvn.w	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	e03a      	b.n	800176e <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 0U) && ((Functions & MOTION_MAGNETO) != 0U))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d108      	bne.n	8001710 <BSP_MOTION_SENSOR_Init+0x34>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <BSP_MOTION_SENSOR_Init+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001708:	f06f 030a 	mvn.w	r3, #10
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	e02e      	b.n	800176e <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 1U) && ((Functions & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d108      	bne.n	8001728 <BSP_MOTION_SENSOR_Init+0x4c>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <BSP_MOTION_SENSOR_Init+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001720:	f06f 030a 	mvn.w	r3, #10
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e022      	b.n	800176e <BSP_MOTION_SENSOR_Init+0x92>
  }
  else
  {
    /* Probe the motion sensor */
    if (Instance == 0U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <BSP_MOTION_SENSOR_Init+0x66>
    {
      /* Probe the ISM330DHCX sensor */
      if (ISM330DHCX_Probe(Functions) != BSP_ERROR_NONE)
 800172e:	6838      	ldr	r0, [r7, #0]
 8001730:	f000 fb50 	bl	8001dd4 <ISM330DHCX_Probe>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00c      	beq.n	8001754 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 800173a:	f06f 0304 	mvn.w	r3, #4
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	e008      	b.n	8001754 <BSP_MOTION_SENSOR_Init+0x78>
      }
    }
    else /* Instance = 1 */
    {
      /* Probe the IIS2MDC sensor */
      if (IIS2MDC_Probe(Functions) != BSP_ERROR_NONE)
 8001742:	6838      	ldr	r0, [r7, #0]
 8001744:	f000 fbbc 	bl	8001ec0 <IIS2MDC_Probe>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 800174e:	f06f 0304 	mvn.w	r3, #4
 8001752:	60fb      	str	r3, [r7, #12]
      }
    }

    if (status == BSP_ERROR_NONE)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <BSP_MOTION_SENSOR_Init+0x92>
    {
      /* Store current initialized functions */
      Motion_Sensor_Ctx[Instance].Functions |= Functions;
 800175a:	4a07      	ldr	r2, [pc, #28]	@ (8001778 <BSP_MOTION_SENSOR_Init+0x9c>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	431a      	orrs	r2, r3
 8001766:	4904      	ldr	r1, [pc, #16]	@ (8001778 <BSP_MOTION_SENSOR_Init+0x9c>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }
  return status;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000e44 	.word	0x20000e44

0800177c <BSP_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance.
  * @param  Capabilities Pointer to motion sensor capabilities.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetCapabilities(uint32_t Instance, MOTION_SENSOR_Capabilities_t *Capabilities)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Capabilities == NULL))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d802      	bhi.n	8001796 <BSP_MOTION_SENSOR_GetCapabilities+0x1a>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d103      	bne.n	800179e <BSP_MOTION_SENSOR_GetCapabilities+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001796:	f06f 0301 	mvn.w	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	e01b      	b.n	80017d6 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
  }
  else if (Motion_Sensor_Ctx[Instance].Functions == 0U)
 800179e:	4a10      	ldr	r2, [pc, #64]	@ (80017e0 <BSP_MOTION_SENSOR_GetCapabilities+0x64>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d103      	bne.n	80017b2 <BSP_MOTION_SENSOR_GetCapabilities+0x36>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	e011      	b.n	80017d6 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
  }
  else
  {
    /* Get the capabilities of the motion sensor */
    if (Motion_Sensor_Drv[Instance]->GetCapabilities(Motion_Sensor_CompObj[Instance], Capabilities) < 0)
 80017b2:	4a0c      	ldr	r2, [pc, #48]	@ (80017e4 <BSP_MOTION_SENSOR_GetCapabilities+0x68>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	490a      	ldr	r1, [pc, #40]	@ (80017e8 <BSP_MOTION_SENSOR_GetCapabilities+0x6c>)
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80017c4:	6839      	ldr	r1, [r7, #0]
 80017c6:	4610      	mov	r0, r2
 80017c8:	4798      	blx	r3
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	da02      	bge.n	80017d6 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80017d0:	f06f 0304 	mvn.w	r3, #4
 80017d4:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000e44 	.word	0x20000e44
 80017e4:	20000e54 	.word	0x20000e54
 80017e8:	20000e4c 	.word	0x20000e4c

080017ec <BSP_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance.
  * @param  Id Pointer to motion sensor ID.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Id == NULL))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d802      	bhi.n	8001806 <BSP_MOTION_SENSOR_ReadID+0x1a>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d103      	bne.n	800180e <BSP_MOTION_SENSOR_ReadID+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001806:	f06f 0301 	mvn.w	r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e01b      	b.n	8001846 <BSP_MOTION_SENSOR_ReadID+0x5a>
  }
  else if (Motion_Sensor_Ctx[Instance].Functions == 0U)
 800180e:	4a10      	ldr	r2, [pc, #64]	@ (8001850 <BSP_MOTION_SENSOR_ReadID+0x64>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d103      	bne.n	8001822 <BSP_MOTION_SENSOR_ReadID+0x36>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e011      	b.n	8001846 <BSP_MOTION_SENSOR_ReadID+0x5a>
  }
  else
  {
    /* Read the motion sensor ID */
    if (Motion_Sensor_Drv[Instance]->ReadID(Motion_Sensor_CompObj[Instance], Id) < 0)
 8001822:	4a0c      	ldr	r2, [pc, #48]	@ (8001854 <BSP_MOTION_SENSOR_ReadID+0x68>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	490a      	ldr	r1, [pc, #40]	@ (8001858 <BSP_MOTION_SENSOR_ReadID+0x6c>)
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001834:	6839      	ldr	r1, [r7, #0]
 8001836:	4610      	mov	r0, r2
 8001838:	4798      	blx	r3
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	da02      	bge.n	8001846 <BSP_MOTION_SENSOR_ReadID+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001840:	f06f 0304 	mvn.w	r3, #4
 8001844:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000e44 	.word	0x20000e44
 8001854:	20000e54 	.word	0x20000e54
 8001858:	20000e4c 	.word	0x20000e4c

0800185c <BSP_MOTION_SENSOR_Enable>:
  *         - MOTION_GYRO or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d903      	bls.n	8001878 <BSP_MOTION_SENSOR_Enable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001870:	f06f 0301 	mvn.w	r3, #1
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	e045      	b.n	8001904 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d108      	bne.n	8001890 <BSP_MOTION_SENSOR_Enable+0x34>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <BSP_MOTION_SENSOR_Enable+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001888:	f06f 030a 	mvn.w	r3, #10
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e039      	b.n	8001904 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d108      	bne.n	80018a8 <BSP_MOTION_SENSOR_Enable+0x4c>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <BSP_MOTION_SENSOR_Enable+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80018a0:	f06f 030a 	mvn.w	r3, #10
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	e02d      	b.n	8001904 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 80018a8:	4a19      	ldr	r2, [pc, #100]	@ (8001910 <BSP_MOTION_SENSOR_Enable+0xb4>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d103      	bne.n	80018c0 <BSP_MOTION_SENSOR_Enable+0x64>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	e021      	b.n	8001904 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else
  {
    /* Enable the motion sensor function */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d006      	beq.n	80018d4 <BSP_MOTION_SENSOR_Enable+0x78>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d101      	bne.n	80018d0 <BSP_MOTION_SENSOR_Enable+0x74>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e002      	b.n	80018d6 <BSP_MOTION_SENSOR_Enable+0x7a>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e000      	b.n	80018d6 <BSP_MOTION_SENSOR_Enable+0x7a>
 80018d4:	2300      	movs	r3, #0
 80018d6:	72fb      	strb	r3, [r7, #11]
    if (Motion_Sensor_FuncDrv[Instance][index]->Enable(Motion_Sensor_CompObj[Instance]) < 0)
 80018d8:	7af9      	ldrb	r1, [r7, #11]
 80018da:	480e      	ldr	r0, [pc, #56]	@ (8001914 <BSP_MOTION_SENSOR_Enable+0xb8>)
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	440b      	add	r3, r1
 80018e6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	490a      	ldr	r1, [pc, #40]	@ (8001918 <BSP_MOTION_SENSOR_Enable+0xbc>)
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80018f4:	4610      	mov	r0, r2
 80018f6:	4798      	blx	r3
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	da02      	bge.n	8001904 <BSP_MOTION_SENSOR_Enable+0xa8>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80018fe:	f06f 0304 	mvn.w	r3, #4
 8001902:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8001904:	68fb      	ldr	r3, [r7, #12]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000e44 	.word	0x20000e44
 8001914:	20000e5c 	.word	0x20000e5c
 8001918:	20000e4c 	.word	0x20000e4c

0800191c <BSP_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Axes Pointer to motion sensor axes.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_Axes_t *Axes)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Axes == NULL))
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d802      	bhi.n	8001938 <BSP_MOTION_SENSOR_GetAxes+0x1c>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d103      	bne.n	8001940 <BSP_MOTION_SENSOR_GetAxes+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001938:	f06f 0301 	mvn.w	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e046      	b.n	80019ce <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d108      	bne.n	8001958 <BSP_MOTION_SENSOR_GetAxes+0x3c>
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <BSP_MOTION_SENSOR_GetAxes+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001950:	f06f 030a 	mvn.w	r3, #10
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e03a      	b.n	80019ce <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d108      	bne.n	8001970 <BSP_MOTION_SENSOR_GetAxes+0x54>
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <BSP_MOTION_SENSOR_GetAxes+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001968:	f06f 030a 	mvn.w	r3, #10
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e02e      	b.n	80019ce <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001970:	4a19      	ldr	r2, [pc, #100]	@ (80019d8 <BSP_MOTION_SENSOR_GetAxes+0xbc>)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d103      	bne.n	8001988 <BSP_MOTION_SENSOR_GetAxes+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e022      	b.n	80019ce <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else
  {
    /* Get the motion sensor axes */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d006      	beq.n	800199c <BSP_MOTION_SENSOR_GetAxes+0x80>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d101      	bne.n	8001998 <BSP_MOTION_SENSOR_GetAxes+0x7c>
 8001994:	2301      	movs	r3, #1
 8001996:	e002      	b.n	800199e <BSP_MOTION_SENSOR_GetAxes+0x82>
 8001998:	2302      	movs	r3, #2
 800199a:	e000      	b.n	800199e <BSP_MOTION_SENSOR_GetAxes+0x82>
 800199c:	2300      	movs	r3, #0
 800199e:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetAxes(Motion_Sensor_CompObj[Instance], Axes) < 0)
 80019a0:	7cf9      	ldrb	r1, [r7, #19]
 80019a2:	480e      	ldr	r0, [pc, #56]	@ (80019dc <BSP_MOTION_SENSOR_GetAxes+0xc0>)
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	490a      	ldr	r1, [pc, #40]	@ (80019e0 <BSP_MOTION_SENSOR_GetAxes+0xc4>)
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4610      	mov	r0, r2
 80019c0:	4798      	blx	r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	da02      	bge.n	80019ce <BSP_MOTION_SENSOR_GetAxes+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80019c8:	f06f 0304 	mvn.w	r3, #4
 80019cc:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 80019ce:	697b      	ldr	r3, [r7, #20]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000e44 	.word	0x20000e44
 80019dc:	20000e5c 	.word	0x20000e5c
 80019e0:	20000e4c 	.word	0x20000e4c

080019e4 <BSP_MOTION_SENSOR_GetSensitivity>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Sensitivity Pointer to sensitivity.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetSensitivity(uint32_t Instance, uint32_t Function, float_t *Sensitivity)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Sensitivity == NULL))
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d802      	bhi.n	8001a00 <BSP_MOTION_SENSOR_GetSensitivity+0x1c>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d103      	bne.n	8001a08 <BSP_MOTION_SENSOR_GetSensitivity+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001a00:	f06f 0301 	mvn.w	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e046      	b.n	8001a96 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d108      	bne.n	8001a20 <BSP_MOTION_SENSOR_GetSensitivity+0x3c>
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <BSP_MOTION_SENSOR_GetSensitivity+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001a18:	f06f 030a 	mvn.w	r3, #10
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	e03a      	b.n	8001a96 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d108      	bne.n	8001a38 <BSP_MOTION_SENSOR_GetSensitivity+0x54>
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <BSP_MOTION_SENSOR_GetSensitivity+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001a30:	f06f 030a 	mvn.w	r3, #10
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e02e      	b.n	8001a96 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001a38:	4a19      	ldr	r2, [pc, #100]	@ (8001aa0 <BSP_MOTION_SENSOR_GetSensitivity+0xbc>)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d103      	bne.n	8001a50 <BSP_MOTION_SENSOR_GetSensitivity+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	e022      	b.n	8001a96 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else
  {
    /* Get the motion sensor sensitivity */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d006      	beq.n	8001a64 <BSP_MOTION_SENSOR_GetSensitivity+0x80>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d101      	bne.n	8001a60 <BSP_MOTION_SENSOR_GetSensitivity+0x7c>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e002      	b.n	8001a66 <BSP_MOTION_SENSOR_GetSensitivity+0x82>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e000      	b.n	8001a66 <BSP_MOTION_SENSOR_GetSensitivity+0x82>
 8001a64:	2300      	movs	r3, #0
 8001a66:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetSensitivity(Motion_Sensor_CompObj[Instance], Sensitivity) < 0)
 8001a68:	7cf9      	ldrb	r1, [r7, #19]
 8001a6a:	480e      	ldr	r0, [pc, #56]	@ (8001aa4 <BSP_MOTION_SENSOR_GetSensitivity+0xc0>)
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	490a      	ldr	r1, [pc, #40]	@ (8001aa8 <BSP_MOTION_SENSOR_GetSensitivity+0xc4>)
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4610      	mov	r0, r2
 8001a88:	4798      	blx	r3
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	da02      	bge.n	8001a96 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001a90:	f06f 0304 	mvn.w	r3, #4
 8001a94:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001a96:	697b      	ldr	r3, [r7, #20]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000e44 	.word	0x20000e44
 8001aa4:	20000e5c 	.word	0x20000e5c
 8001aa8:	20000e4c 	.word	0x20000e4c

08001aac <BSP_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Pointer to output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Odr == NULL))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d802      	bhi.n	8001ac8 <BSP_MOTION_SENSOR_GetOutputDataRate+0x1c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d103      	bne.n	8001ad0 <BSP_MOTION_SENSOR_GetOutputDataRate+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001ac8:	f06f 0301 	mvn.w	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e046      	b.n	8001b5e <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d108      	bne.n	8001ae8 <BSP_MOTION_SENSOR_GetOutputDataRate+0x3c>
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <BSP_MOTION_SENSOR_GetOutputDataRate+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001ae0:	f06f 030a 	mvn.w	r3, #10
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e03a      	b.n	8001b5e <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d108      	bne.n	8001b00 <BSP_MOTION_SENSOR_GetOutputDataRate+0x54>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <BSP_MOTION_SENSOR_GetOutputDataRate+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001af8:	f06f 030a 	mvn.w	r3, #10
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e02e      	b.n	8001b5e <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001b00:	4a19      	ldr	r2, [pc, #100]	@ (8001b68 <BSP_MOTION_SENSOR_GetOutputDataRate+0xbc>)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d103      	bne.n	8001b18 <BSP_MOTION_SENSOR_GetOutputDataRate+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8001b10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	e022      	b.n	8001b5e <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else
  {
    /* Get the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d006      	beq.n	8001b2c <BSP_MOTION_SENSOR_GetOutputDataRate+0x80>
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d101      	bne.n	8001b28 <BSP_MOTION_SENSOR_GetOutputDataRate+0x7c>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e002      	b.n	8001b2e <BSP_MOTION_SENSOR_GetOutputDataRate+0x82>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e000      	b.n	8001b2e <BSP_MOTION_SENSOR_GetOutputDataRate+0x82>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 8001b30:	7cf9      	ldrb	r1, [r7, #19]
 8001b32:	480e      	ldr	r0, [pc, #56]	@ (8001b6c <BSP_MOTION_SENSOR_GetOutputDataRate+0xc0>)
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	490a      	ldr	r1, [pc, #40]	@ (8001b70 <BSP_MOTION_SENSOR_GetOutputDataRate+0xc4>)
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4798      	blx	r3
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	da02      	bge.n	8001b5e <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001b58:	f06f 0304 	mvn.w	r3, #4
 8001b5c:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001b5e:	697b      	ldr	r3, [r7, #20]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000e44 	.word	0x20000e44
 8001b6c:	20000e5c 	.word	0x20000e5c
 8001b70:	20000e4c 	.word	0x20000e4c

08001b74 <BSP_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d903      	bls.n	8001b94 <BSP_MOTION_SENSOR_SetOutputDataRate+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001b8c:	f06f 0301 	mvn.w	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	e047      	b.n	8001c24 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d108      	bne.n	8001bac <BSP_MOTION_SENSOR_SetOutputDataRate+0x38>
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <BSP_MOTION_SENSOR_SetOutputDataRate+0x38>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001ba4:	f06f 030a 	mvn.w	r3, #10
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	e03b      	b.n	8001c24 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d108      	bne.n	8001bc4 <BSP_MOTION_SENSOR_SetOutputDataRate+0x50>
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <BSP_MOTION_SENSOR_SetOutputDataRate+0x50>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001bbc:	f06f 030a 	mvn.w	r3, #10
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e02f      	b.n	8001c24 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c30 <BSP_MOTION_SENSOR_SetOutputDataRate+0xbc>)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d103      	bne.n	8001bdc <BSP_MOTION_SENSOR_SetOutputDataRate+0x68>
  {
    status = BSP_ERROR_NO_INIT;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	e023      	b.n	8001c24 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else
  {
    /* Set the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d006      	beq.n	8001bf0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x7c>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d101      	bne.n	8001bec <BSP_MOTION_SENSOR_SetOutputDataRate+0x78>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e002      	b.n	8001bf2 <BSP_MOTION_SENSOR_SetOutputDataRate+0x7e>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e000      	b.n	8001bf2 <BSP_MOTION_SENSOR_SetOutputDataRate+0x7e>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->SetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 8001bf4:	7cf9      	ldrb	r1, [r7, #19]
 8001bf6:	480f      	ldr	r0, [pc, #60]	@ (8001c34 <BSP_MOTION_SENSOR_SetOutputDataRate+0xc0>)
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	490b      	ldr	r1, [pc, #44]	@ (8001c38 <BSP_MOTION_SENSOR_SetOutputDataRate+0xc4>)
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c10:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c14:	4610      	mov	r0, r2
 8001c16:	4798      	blx	r3
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da02      	bge.n	8001c24 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001c1e:	f06f 0304 	mvn.w	r3, #4
 8001c22:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001c24:	697b      	ldr	r3, [r7, #20]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000e44 	.word	0x20000e44
 8001c34:	20000e5c 	.word	0x20000e5c
 8001c38:	20000e4c 	.word	0x20000e4c

08001c3c <BSP_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Pointer to full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Fullscale == NULL))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d802      	bhi.n	8001c58 <BSP_MOTION_SENSOR_GetFullScale+0x1c>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d103      	bne.n	8001c60 <BSP_MOTION_SENSOR_GetFullScale+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001c58:	f06f 0301 	mvn.w	r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e046      	b.n	8001cee <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d108      	bne.n	8001c78 <BSP_MOTION_SENSOR_GetFullScale+0x3c>
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <BSP_MOTION_SENSOR_GetFullScale+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001c70:	f06f 030a 	mvn.w	r3, #10
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e03a      	b.n	8001cee <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d108      	bne.n	8001c90 <BSP_MOTION_SENSOR_GetFullScale+0x54>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <BSP_MOTION_SENSOR_GetFullScale+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001c88:	f06f 030a 	mvn.w	r3, #10
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e02e      	b.n	8001cee <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001c90:	4a19      	ldr	r2, [pc, #100]	@ (8001cf8 <BSP_MOTION_SENSOR_GetFullScale+0xbc>)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d103      	bne.n	8001ca8 <BSP_MOTION_SENSOR_GetFullScale+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e022      	b.n	8001cee <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else
  {
    /* Get the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d006      	beq.n	8001cbc <BSP_MOTION_SENSOR_GetFullScale+0x80>
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d101      	bne.n	8001cb8 <BSP_MOTION_SENSOR_GetFullScale+0x7c>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e002      	b.n	8001cbe <BSP_MOTION_SENSOR_GetFullScale+0x82>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e000      	b.n	8001cbe <BSP_MOTION_SENSOR_GetFullScale+0x82>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 8001cc0:	7cf9      	ldrb	r1, [r7, #19]
 8001cc2:	480e      	ldr	r0, [pc, #56]	@ (8001cfc <BSP_MOTION_SENSOR_GetFullScale+0xc0>)
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	490a      	ldr	r1, [pc, #40]	@ (8001d00 <BSP_MOTION_SENSOR_GetFullScale+0xc4>)
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4798      	blx	r3
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	da02      	bge.n	8001cee <BSP_MOTION_SENSOR_GetFullScale+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001ce8:	f06f 0304 	mvn.w	r3, #4
 8001cec:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001cee:	697b      	ldr	r3, [r7, #20]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000e44 	.word	0x20000e44
 8001cfc:	20000e5c 	.word	0x20000e5c
 8001d00:	20000e4c 	.word	0x20000e4c

08001d04 <BSP_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d903      	bls.n	8001d22 <BSP_MOTION_SENSOR_SetFullScale+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001d1a:	f06f 0301 	mvn.w	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	e04d      	b.n	8001dbe <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d108      	bne.n	8001d3a <BSP_MOTION_SENSOR_SetFullScale+0x36>
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <BSP_MOTION_SENSOR_SetFullScale+0x36>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001d32:	f06f 030a 	mvn.w	r3, #10
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	e041      	b.n	8001dbe <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d108      	bne.n	8001d52 <BSP_MOTION_SENSOR_SetFullScale+0x4e>
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <BSP_MOTION_SENSOR_SetFullScale+0x4e>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001d4a:	f06f 030a 	mvn.w	r3, #10
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	e035      	b.n	8001dbe <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001d52:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc8 <BSP_MOTION_SENSOR_SetFullScale+0xc4>)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d103      	bne.n	8001d6a <BSP_MOTION_SENSOR_SetFullScale+0x66>
  {
    status = BSP_ERROR_NO_INIT;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	e029      	b.n	8001dbe <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else
  {
    /* Set the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d006      	beq.n	8001d7e <BSP_MOTION_SENSOR_SetFullScale+0x7a>
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d101      	bne.n	8001d7a <BSP_MOTION_SENSOR_SetFullScale+0x76>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e002      	b.n	8001d80 <BSP_MOTION_SENSOR_SetFullScale+0x7c>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e000      	b.n	8001d80 <BSP_MOTION_SENSOR_SetFullScale+0x7c>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	74fb      	strb	r3, [r7, #19]
    if (index == MAGNETO_ID)
 8001d82:	7cfb      	ldrb	r3, [r7, #19]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d103      	bne.n	8001d90 <BSP_MOTION_SENSOR_SetFullScale+0x8c>
    {
      /* Feature not supported for Magneto */
      status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001d88:	f06f 030a 	mvn.w	r3, #10
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	e016      	b.n	8001dbe <BSP_MOTION_SENSOR_SetFullScale+0xba>
    }
    else
    {
      if (Motion_Sensor_FuncDrv[Instance][index]->SetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 8001d90:	7cf9      	ldrb	r1, [r7, #19]
 8001d92:	480e      	ldr	r0, [pc, #56]	@ (8001dcc <BSP_MOTION_SENSOR_SetFullScale+0xc8>)
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	490a      	ldr	r1, [pc, #40]	@ (8001dd0 <BSP_MOTION_SENSOR_SetFullScale+0xcc>)
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4610      	mov	r0, r2
 8001db0:	4798      	blx	r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	da02      	bge.n	8001dbe <BSP_MOTION_SENSOR_SetFullScale+0xba>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8001db8:	f06f 0304 	mvn.w	r3, #4
 8001dbc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return status;
 8001dbe:	697b      	ldr	r3, [r7, #20]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000e44 	.word	0x20000e44
 8001dcc:	20000e5c 	.word	0x20000e5c
 8001dd0:	20000e4c 	.word	0x20000e4c

08001dd4 <ISM330DHCX_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status.
  */
static int32_t ISM330DHCX_Probe(uint32_t Functions)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08c      	sub	sp, #48	@ 0x30
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ISM330DHCX_IO_t            IOCtx;
  uint8_t                 ism330dlc_id;
  static ISM330DHCX_Object_t ISM330DHCX_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = ISM330DHCX_I2C_BUS;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = ISM330DHCX_I2C_ADD_H;
 8001de4:	23d7      	movs	r3, #215	@ 0xd7
 8001de6:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8001de8:	4b29      	ldr	r3, [pc, #164]	@ (8001e90 <ISM330DHCX_Probe+0xbc>)
 8001dea:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8001dec:	4b29      	ldr	r3, [pc, #164]	@ (8001e94 <ISM330DHCX_Probe+0xc0>)
 8001dee:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8001df0:	4b29      	ldr	r3, [pc, #164]	@ (8001e98 <ISM330DHCX_Probe+0xc4>)
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8001df4:	4b29      	ldr	r3, [pc, #164]	@ (8001e9c <ISM330DHCX_Probe+0xc8>)
 8001df6:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 8001df8:	4b29      	ldr	r3, [pc, #164]	@ (8001ea0 <ISM330DHCX_Probe+0xcc>)
 8001dfa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Register Component Bus IO operations */
  if (ISM330DHCX_RegisterBusIO(&ISM330DHCX_Obj, &IOCtx) != ISM330DHCX_OK)
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	4619      	mov	r1, r3
 8001e02:	4828      	ldr	r0, [pc, #160]	@ (8001ea4 <ISM330DHCX_Probe+0xd0>)
 8001e04:	f000 fd08 	bl	8002818 <ISM330DHCX_RegisterBusIO>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <ISM330DHCX_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8001e0e:	f06f 0307 	mvn.w	r3, #7
 8001e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e14:	e037      	b.n	8001e86 <ISM330DHCX_Probe+0xb2>
  }
  /* Read the sensor ID */
  else if (ISM330DHCX_ReadID(&ISM330DHCX_Obj, &ism330dlc_id) != ISM330DHCX_OK)
 8001e16:	f107 030f 	add.w	r3, r7, #15
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4821      	ldr	r0, [pc, #132]	@ (8001ea4 <ISM330DHCX_Probe+0xd0>)
 8001e1e:	f000 fe15 	bl	8002a4c <ISM330DHCX_ReadID>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <ISM330DHCX_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8001e28:	f06f 0304 	mvn.w	r3, #4
 8001e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e2e:	e02a      	b.n	8001e86 <ISM330DHCX_Probe+0xb2>
  }
  /* Check if the returned sensor ID is correct */
  else if (ism330dlc_id != ISM330DHCX_ID)
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	2b6b      	cmp	r3, #107	@ 0x6b
 8001e34:	d003      	beq.n	8001e3e <ISM330DHCX_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8001e36:	f06f 0306 	mvn.w	r3, #6
 8001e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e3c:	e023      	b.n	8001e86 <ISM330DHCX_Probe+0xb2>
  }
  else
  {
    Motion_Sensor_CompObj[0] = &ISM330DHCX_Obj;
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea8 <ISM330DHCX_Probe+0xd4>)
 8001e40:	4a18      	ldr	r2, [pc, #96]	@ (8001ea4 <ISM330DHCX_Probe+0xd0>)
 8001e42:	601a      	str	r2, [r3, #0]
    Motion_Sensor_Drv[0]     = (MOTION_SENSOR_CommonDrv_t *) &ISM330DHCX_COMMON_Driver;
 8001e44:	4b19      	ldr	r3, [pc, #100]	@ (8001eac <ISM330DHCX_Probe+0xd8>)
 8001e46:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb0 <ISM330DHCX_Probe+0xdc>)
 8001e48:	601a      	str	r2, [r3, #0]
    /* Initialize the component */
    if (Motion_Sensor_Drv[0]->Init(Motion_Sensor_CompObj[0]) < 0)
 8001e4a:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <ISM330DHCX_Probe+0xd8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a15      	ldr	r2, [pc, #84]	@ (8001ea8 <ISM330DHCX_Probe+0xd4>)
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	4610      	mov	r0, r2
 8001e56:	4798      	blx	r3
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	da03      	bge.n	8001e66 <ISM330DHCX_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001e5e:	f06f 0304 	mvn.w	r3, #4
 8001e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e64:	e00f      	b.n	8001e86 <ISM330DHCX_Probe+0xb2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_GYRO) != 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <ISM330DHCX_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[0][GYRO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_GYRO_Driver;
 8001e70:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <ISM330DHCX_Probe+0xe0>)
 8001e72:	4a11      	ldr	r2, [pc, #68]	@ (8001eb8 <ISM330DHCX_Probe+0xe4>)
 8001e74:	601a      	str	r2, [r3, #0]
      }
      if ((Functions & MOTION_ACCELERO) != 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <ISM330DHCX_Probe+0xb2>
      {
        Motion_Sensor_FuncDrv[0][ACCELERO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_ACC_Driver;
 8001e80:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <ISM330DHCX_Probe+0xe0>)
 8001e82:	4a0e      	ldr	r2, [pc, #56]	@ (8001ebc <ISM330DHCX_Probe+0xe8>)
 8001e84:	605a      	str	r2, [r3, #4]
      }
    }
  }

  return status;
 8001e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3730      	adds	r7, #48	@ 0x30
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	08000d99 	.word	0x08000d99
 8001e94:	08000e0d 	.word	0x08000e0d
 8001e98:	08000f35 	.word	0x08000f35
 8001e9c:	08000ed9 	.word	0x08000ed9
 8001ea0:	08000f91 	.word	0x08000f91
 8001ea4:	20000e74 	.word	0x20000e74
 8001ea8:	20000e4c 	.word	0x20000e4c
 8001eac:	20000e54 	.word	0x20000e54
 8001eb0:	20000040 	.word	0x20000040
 8001eb4:	20000e5c 	.word	0x20000e5c
 8001eb8:	20000074 	.word	0x20000074
 8001ebc:	20000050 	.word	0x20000050

08001ec0 <IIS2MDC_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status.
  */
static int32_t IIS2MDC_Probe(uint32_t Functions)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08c      	sub	sp, #48	@ 0x30
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  IIS2MDC_IO_t            IOCtx;
  uint8_t                 iis2mdc_id;
  static IIS2MDC_Object_t IIS2MDC_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = IIS2MDC_I2C_BUS;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = IIS2MDC_I2C_ADD;
 8001ed0:	233d      	movs	r3, #61	@ 0x3d
 8001ed2:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8001ed4:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <IIS2MDC_Probe+0xac>)
 8001ed6:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8001ed8:	4b25      	ldr	r3, [pc, #148]	@ (8001f70 <IIS2MDC_Probe+0xb0>)
 8001eda:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8001edc:	4b25      	ldr	r3, [pc, #148]	@ (8001f74 <IIS2MDC_Probe+0xb4>)
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8001ee0:	4b25      	ldr	r3, [pc, #148]	@ (8001f78 <IIS2MDC_Probe+0xb8>)
 8001ee2:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 8001ee4:	4b25      	ldr	r3, [pc, #148]	@ (8001f7c <IIS2MDC_Probe+0xbc>)
 8001ee6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Register Component Bus IO operations */
  if (IIS2MDC_RegisterBusIO(&IIS2MDC_Obj, &IOCtx) != IIS2MDC_OK)
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	4619      	mov	r1, r3
 8001eee:	4824      	ldr	r0, [pc, #144]	@ (8001f80 <IIS2MDC_Probe+0xc0>)
 8001ef0:	f000 f852 	bl	8001f98 <IIS2MDC_RegisterBusIO>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <IIS2MDC_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8001efa:	f06f 0307 	mvn.w	r3, #7
 8001efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f00:	e02f      	b.n	8001f62 <IIS2MDC_Probe+0xa2>
  }
  /* Read the sensor ID */
  else if (IIS2MDC_ReadID(&IIS2MDC_Obj, &iis2mdc_id) != IIS2MDC_OK)
 8001f02:	f107 030f 	add.w	r3, r7, #15
 8001f06:	4619      	mov	r1, r3
 8001f08:	481d      	ldr	r0, [pc, #116]	@ (8001f80 <IIS2MDC_Probe+0xc0>)
 8001f0a:	f000 f8fc 	bl	8002106 <IIS2MDC_ReadID>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <IIS2MDC_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8001f14:	f06f 0304 	mvn.w	r3, #4
 8001f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f1a:	e022      	b.n	8001f62 <IIS2MDC_Probe+0xa2>
  }
  /* Check if the returned sensor ID is correct */
  else if (iis2mdc_id != IIS2MDC_ID)
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	2b40      	cmp	r3, #64	@ 0x40
 8001f20:	d003      	beq.n	8001f2a <IIS2MDC_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8001f22:	f06f 0306 	mvn.w	r3, #6
 8001f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f28:	e01b      	b.n	8001f62 <IIS2MDC_Probe+0xa2>
  }
  else
  {
    Motion_Sensor_CompObj[1] = &IIS2MDC_Obj;
 8001f2a:	4b16      	ldr	r3, [pc, #88]	@ (8001f84 <IIS2MDC_Probe+0xc4>)
 8001f2c:	4a14      	ldr	r2, [pc, #80]	@ (8001f80 <IIS2MDC_Probe+0xc0>)
 8001f2e:	605a      	str	r2, [r3, #4]
    Motion_Sensor_Drv[1]     = (MOTION_SENSOR_CommonDrv_t *) &IIS2MDC_COMMON_Driver;
 8001f30:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <IIS2MDC_Probe+0xc8>)
 8001f32:	4a16      	ldr	r2, [pc, #88]	@ (8001f8c <IIS2MDC_Probe+0xcc>)
 8001f34:	605a      	str	r2, [r3, #4]
    /* Initialize the component */
    if (Motion_Sensor_Drv[1]->Init(Motion_Sensor_CompObj[1]) < 0)
 8001f36:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <IIS2MDC_Probe+0xc8>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a11      	ldr	r2, [pc, #68]	@ (8001f84 <IIS2MDC_Probe+0xc4>)
 8001f3e:	6852      	ldr	r2, [r2, #4]
 8001f40:	4610      	mov	r0, r2
 8001f42:	4798      	blx	r3
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	da03      	bge.n	8001f52 <IIS2MDC_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001f4a:	f06f 0304 	mvn.w	r3, #4
 8001f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f50:	e007      	b.n	8001f62 <IIS2MDC_Probe+0xa2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_MAGNETO) != 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <IIS2MDC_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[1][MAGNETO_ID] = (MOTION_SENSOR_FuncDrv_t *) &IIS2MDC_MAG_Driver;
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <IIS2MDC_Probe+0xd0>)
 8001f5e:	4a0d      	ldr	r2, [pc, #52]	@ (8001f94 <IIS2MDC_Probe+0xd4>)
 8001f60:	615a      	str	r2, [r3, #20]
      }
    }
  }

  return status;
 8001f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3730      	adds	r7, #48	@ 0x30
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	08000d99 	.word	0x08000d99
 8001f70:	08000e0d 	.word	0x08000e0d
 8001f74:	08000f35 	.word	0x08000f35
 8001f78:	08000ed9 	.word	0x08000ed9
 8001f7c:	08000f91 	.word	0x08000f91
 8001f80:	20000ea4 	.word	0x20000ea4
 8001f84:	20000e4c 	.word	0x20000e4c
 8001f88:	20000e54 	.word	0x20000e54
 8001f8c:	2000000c 	.word	0x2000000c
 8001f90:	20000e5c 	.word	0x20000e5c
 8001f94:	2000001c 	.word	0x2000001c

08001f98 <IIS2MDC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d103      	bne.n	8001fb4 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 8001fac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e04b      	b.n	800204c <IIS2MDC_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	7b1a      	ldrb	r2, [r3, #12]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	699a      	ldr	r2, [r3, #24]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a1a      	ldr	r2, [pc, #104]	@ (8002058 <IIS2MDC_RegisterBusIO+0xc0>)
 8001ff0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	@ (800205c <IIS2MDC_RegisterBusIO+0xc4>)
 8001ff6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d103      	bne.n	800200e <IIS2MDC_RegisterBusIO+0x76>
    {
      ret = IIS2MDC_ERROR;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	e01e      	b.n	800204c <IIS2MDC_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4798      	blx	r3
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <IIS2MDC_RegisterBusIO+0x8a>
    {
      ret = IIS2MDC_ERROR;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	e014      	b.n	800204c <IIS2MDC_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d010      	beq.n	800204c <IIS2MDC_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10b      	bne.n	800204c <IIS2MDC_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	331c      	adds	r3, #28
 8002038:	2101      	movs	r1, #1
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fbc5 	bl	80027ca <iis2mdc_i2c_interface_set>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <IIS2MDC_RegisterBusIO+0xb4>
          {
            ret = IIS2MDC_ERROR;
 8002046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800204a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800204c:	68fb      	ldr	r3, [r7, #12]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	08002453 	.word	0x08002453
 800205c:	080024b5 	.word	0x080024b5

08002060 <IIS2MDC_Init>:
 * @brief  Initialize the IIS2MDC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	331c      	adds	r3, #28
 800206c:	2101      	movs	r1, #1
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fb06 	bl	8002680 <iis2mdc_block_data_update_set>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 800207a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800207e:	e028      	b.n	80020d2 <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	331c      	adds	r3, #28
 8002084:	2102      	movs	r1, #2
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fa75 	bl	8002576 <iis2mdc_operating_mode_set>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002096:	e01c      	b.n	80020d2 <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	331c      	adds	r3, #28
 800209c:	2103      	movs	r1, #3
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fa8f 	bl	80025c2 <iis2mdc_data_rate_set>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020ae:	e010      	b.n	80020d2 <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	331c      	adds	r3, #28
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 fb61 	bl	800277e <iis2mdc_self_test_set>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020c6:	e004      	b.n	80020d2 <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return IIS2MDC_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <IIS2MDC_DeInit>:
 * @brief  Deinitialize the IIS2MDC magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_DeInit(IIS2MDC_Object_t *pObj)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f874 	bl	80021d0 <IIS2MDC_MAG_Disable>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <IIS2MDC_DeInit+0x1a>
  {
    return IIS2MDC_ERROR;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020f2:	e004      	b.n	80020fe <IIS2MDC_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return IIS2MDC_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <IIS2MDC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_ReadID(IIS2MDC_Object_t *pObj, uint8_t *Id)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	331c      	adds	r3, #28
 8002114:	6839      	ldr	r1, [r7, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fb20 	bl	800275c <iis2mdc_device_id_get>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <IIS2MDC_ReadID+0x22>
  {
    return IIS2MDC_ERROR;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002126:	e000      	b.n	800212a <IIS2MDC_ReadID+0x24>
  }

  return IIS2MDC_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <IIS2MDC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
 * @retval Component status
 */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2200      	movs	r2, #0
 8002148:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2201      	movs	r2, #1
 800214e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2200      	movs	r2, #0
 8002154:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2200      	movs	r2, #0
 800215a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2232      	movs	r2, #50	@ 0x32
 8002166:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4a04      	ldr	r2, [pc, #16]	@ (800218c <IIS2MDC_GetCapabilities+0x58>)
 800217c:	619a      	str	r2, [r3, #24]
  return IIS2MDC_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	42c80000 	.word	0x42c80000

08002190 <IIS2MDC_MAG_Enable>:
 * @brief Enable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e010      	b.n	80021c8 <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	331c      	adds	r3, #28
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 f9e2 	bl	8002576 <iis2mdc_operating_mode_set>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 80021b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021bc:	e004      	b.n	80021c8 <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return IIS2MDC_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <IIS2MDC_MAG_Disable>:
 * @brief Disable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Disable(IIS2MDC_Object_t *pObj)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <IIS2MDC_MAG_Disable+0x16>
  {
    return IIS2MDC_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e010      	b.n	8002208 <IIS2MDC_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	331c      	adds	r3, #28
 80021ea:	2102      	movs	r1, #2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f9c2 	bl	8002576 <iis2mdc_operating_mode_set>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <IIS2MDC_MAG_Disable+0x2e>
  {
    return IIS2MDC_ERROR;
 80021f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021fc:	e004      	b.n	8002208 <IIS2MDC_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return IIS2MDC_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <IIS2MDC_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8002220:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <IIS2MDC_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetOutputDataRate(IIS2MDC_Object_t *pObj, float *Odr)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
  iis2mdc_odr_t odr_low_level;

  /* Get current output data rate. */
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	331c      	adds	r3, #28
 8002242:	f107 020b 	add.w	r2, r7, #11
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f000 f9e1 	bl	8002610 <iis2mdc_data_rate_get>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <IIS2MDC_MAG_GetOutputDataRate+0x2a>
  {
    return IIS2MDC_ERROR;
 8002254:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002258:	e023      	b.n	80022a2 <IIS2MDC_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800225a:	7afb      	ldrb	r3, [r7, #11]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d81b      	bhi.n	8002298 <IIS2MDC_MAG_GetOutputDataRate+0x68>
 8002260:	a201      	add	r2, pc, #4	@ (adr r2, 8002268 <IIS2MDC_MAG_GetOutputDataRate+0x38>)
 8002262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002266:	bf00      	nop
 8002268:	08002279 	.word	0x08002279
 800226c:	08002281 	.word	0x08002281
 8002270:	08002289 	.word	0x08002289
 8002274:	08002291 	.word	0x08002291
  {
    case IIS2MDC_ODR_10Hz:
      *Odr = 10.0f;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4a0c      	ldr	r2, [pc, #48]	@ (80022ac <IIS2MDC_MAG_GetOutputDataRate+0x7c>)
 800227c:	601a      	str	r2, [r3, #0]
      break;
 800227e:	e00f      	b.n	80022a0 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_20Hz:
      *Odr = 20.0f;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4a0b      	ldr	r2, [pc, #44]	@ (80022b0 <IIS2MDC_MAG_GetOutputDataRate+0x80>)
 8002284:	601a      	str	r2, [r3, #0]
      break;
 8002286:	e00b      	b.n	80022a0 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_50Hz:
      *Odr = 50.0f;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4a0a      	ldr	r2, [pc, #40]	@ (80022b4 <IIS2MDC_MAG_GetOutputDataRate+0x84>)
 800228c:	601a      	str	r2, [r3, #0]
      break;
 800228e:	e007      	b.n	80022a0 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_100Hz:
      *Odr = 100.0f;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4a09      	ldr	r2, [pc, #36]	@ (80022b8 <IIS2MDC_MAG_GetOutputDataRate+0x88>)
 8002294:	601a      	str	r2, [r3, #0]
      break;
 8002296:	e003      	b.n	80022a0 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    default:
      ret = IIS2MDC_ERROR;
 8002298:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800229c:	60fb      	str	r3, [r7, #12]
      break;
 800229e:	bf00      	nop
  }

  return ret;
 80022a0:	68fb      	ldr	r3, [r7, #12]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	41200000 	.word	0x41200000
 80022b0:	41a00000 	.word	0x41a00000
 80022b4:	42480000 	.word	0x42480000
 80022b8:	42c80000 	.word	0x42c80000

080022bc <IIS2MDC_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetOutputDataRate(IIS2MDC_Object_t *pObj, float Odr)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	ed87 0a00 	vstr	s0, [r7]
  iis2mdc_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 80022c8:	edd7 7a00 	vldr	s15, [r7]
 80022cc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80022d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	d801      	bhi.n	80022de <IIS2MDC_MAG_SetOutputDataRate+0x22>
 80022da:	2300      	movs	r3, #0
 80022dc:	e016      	b.n	800230c <IIS2MDC_MAG_SetOutputDataRate+0x50>
 80022de:	edd7 7a00 	vldr	s15, [r7]
 80022e2:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80022e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ee:	d801      	bhi.n	80022f4 <IIS2MDC_MAG_SetOutputDataRate+0x38>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e00b      	b.n	800230c <IIS2MDC_MAG_SetOutputDataRate+0x50>
 80022f4:	edd7 7a00 	vldr	s15, [r7]
 80022f8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002334 <IIS2MDC_MAG_SetOutputDataRate+0x78>
 80022fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002304:	d801      	bhi.n	800230a <IIS2MDC_MAG_SetOutputDataRate+0x4e>
 8002306:	2302      	movs	r3, #2
 8002308:	e000      	b.n	800230c <IIS2MDC_MAG_SetOutputDataRate+0x50>
 800230a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
 800230c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? IIS2MDC_ODR_50Hz
            :                    IIS2MDC_ODR_100Hz;

  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	331c      	adds	r3, #28
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	4611      	mov	r1, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f953 	bl	80025c2 <iis2mdc_data_rate_set>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <IIS2MDC_MAG_SetOutputDataRate+0x6c>
  {
    return IIS2MDC_ERROR;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002326:	e000      	b.n	800232a <IIS2MDC_MAG_SetOutputDataRate+0x6e>
  }

  return IIS2MDC_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	42480000 	.word	0x42480000

08002338 <IIS2MDC_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *FullScale = 50;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2232      	movs	r2, #50	@ 0x32
 8002346:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <IIS2MDC_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <IIS2MDC_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	331c      	adds	r3, #28
 800237c:	f107 0208 	add.w	r2, r7, #8
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f9a2 	bl	80026cc <iis2mdc_magnetic_raw_get>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <IIS2MDC_MAG_GetAxesRaw+0x26>
  {
    return IIS2MDC_ERROR;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002392:	e00c      	b.n	80023ae <IIS2MDC_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002394:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800239c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80023a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	809a      	strh	r2, [r3, #4]

  return IIS2MDC_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <IIS2MDC_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	331c      	adds	r3, #28
 80023c4:	f107 0210 	add.w	r2, r7, #16
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f97e 	bl	80026cc <iis2mdc_magnetic_raw_get>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023da:	e036      	b.n	800244a <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	4619      	mov	r1, r3
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff ff14 	bl	8002210 <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80023e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023ec:	ee07 3a90 	vmov	s15, r3
 80023f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80023f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002400:	ee17 2a90 	vmov	r2, s15
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002408:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800240c:	ee07 3a90 	vmov	s15, r3
 8002410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002414:	edd7 7a03 	vldr	s15, [r7, #12]
 8002418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002420:	ee17 2a90 	vmov	r2, s15
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002428:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800242c:	ee07 3a90 	vmov	s15, r3
 8002430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002434:	edd7 7a03 	vldr	s15, [r7, #12]
 8002438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002440:	ee17 2a90 	vmov	r2, s15
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002452:	b590      	push	{r4, r7, lr}
 8002454:	b087      	sub	sp, #28
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	461a      	mov	r2, r3
 800245e:	460b      	mov	r3, r1
 8002460:	72fb      	strb	r3, [r7, #11]
 8002462:	4613      	mov	r3, r2
 8002464:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10e      	bne.n	8002490 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	695c      	ldr	r4, [r3, #20]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	7b1b      	ldrb	r3, [r3, #12]
 800247a:	4618      	mov	r0, r3
 800247c:	7afb      	ldrb	r3, [r7, #11]
 800247e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002482:	b2db      	uxtb	r3, r3
 8002484:	4619      	mov	r1, r3
 8002486:	893b      	ldrh	r3, [r7, #8]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	47a0      	blx	r4
 800248c:	4603      	mov	r3, r0
 800248e:	e00d      	b.n	80024ac <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	695c      	ldr	r4, [r3, #20]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	7b1b      	ldrb	r3, [r3, #12]
 8002498:	4618      	mov	r0, r3
 800249a:	7afb      	ldrb	r3, [r7, #11]
 800249c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	4619      	mov	r1, r3
 80024a4:	893b      	ldrh	r3, [r7, #8]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	47a0      	blx	r4
 80024aa:	4603      	mov	r3, r0
  }
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	371c      	adds	r7, #28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd90      	pop	{r4, r7, pc}

080024b4 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	461a      	mov	r2, r3
 80024c0:	460b      	mov	r3, r1
 80024c2:	72fb      	strb	r3, [r7, #11]
 80024c4:	4613      	mov	r3, r2
 80024c6:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10e      	bne.n	80024f2 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	691c      	ldr	r4, [r3, #16]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	7b1b      	ldrb	r3, [r3, #12]
 80024dc:	4618      	mov	r0, r3
 80024de:	7afb      	ldrb	r3, [r7, #11]
 80024e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	4619      	mov	r1, r3
 80024e8:	893b      	ldrh	r3, [r7, #8]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	47a0      	blx	r4
 80024ee:	4603      	mov	r3, r0
 80024f0:	e00d      	b.n	800250e <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	691c      	ldr	r4, [r3, #16]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	7b1b      	ldrb	r3, [r3, #12]
 80024fa:	4618      	mov	r0, r3
 80024fc:	7afb      	ldrb	r3, [r7, #11]
 80024fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002502:	b2db      	uxtb	r3, r3
 8002504:	4619      	mov	r1, r3
 8002506:	893b      	ldrh	r3, [r7, #8]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	47a0      	blx	r4
 800250c:	4603      	mov	r3, r0
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	bd90      	pop	{r4, r7, pc}

08002516 <iis2mdc_read_reg>:
  *
  */
int32_t iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002516:	b590      	push	{r4, r7, lr}
 8002518:	b087      	sub	sp, #28
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	461a      	mov	r2, r3
 8002522:	460b      	mov	r3, r1
 8002524:	72fb      	strb	r3, [r7, #11]
 8002526:	4613      	mov	r3, r2
 8002528:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	685c      	ldr	r4, [r3, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6898      	ldr	r0, [r3, #8]
 8002532:	893b      	ldrh	r3, [r7, #8]
 8002534:	7af9      	ldrb	r1, [r7, #11]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	47a0      	blx	r4
 800253a:	6178      	str	r0, [r7, #20]
  return ret;
 800253c:	697b      	ldr	r3, [r7, #20]
}
 800253e:	4618      	mov	r0, r3
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	bd90      	pop	{r4, r7, pc}

08002546 <iis2mdc_write_reg>:
  *
  */
int32_t iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002546:	b590      	push	{r4, r7, lr}
 8002548:	b087      	sub	sp, #28
 800254a:	af00      	add	r7, sp, #0
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	461a      	mov	r2, r3
 8002552:	460b      	mov	r3, r1
 8002554:	72fb      	strb	r3, [r7, #11]
 8002556:	4613      	mov	r3, r2
 8002558:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681c      	ldr	r4, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6898      	ldr	r0, [r3, #8]
 8002562:	893b      	ldrh	r3, [r7, #8]
 8002564:	7af9      	ldrb	r1, [r7, #11]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	47a0      	blx	r4
 800256a:	6178      	str	r0, [r7, #20]
  return ret;
 800256c:	697b      	ldr	r3, [r7, #20]
}
 800256e:	4618      	mov	r0, r3
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	bd90      	pop	{r4, r7, pc}

08002576 <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002582:	f107 0208 	add.w	r2, r7, #8
 8002586:	2301      	movs	r3, #1
 8002588:	2160      	movs	r1, #96	@ 0x60
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ffc3 	bl	8002516 <iis2mdc_read_reg>
 8002590:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10f      	bne.n	80025b8 <iis2mdc_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	7a3b      	ldrb	r3, [r7, #8]
 80025a2:	f362 0301 	bfi	r3, r2, #0, #2
 80025a6:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80025a8:	f107 0208 	add.w	r2, r7, #8
 80025ac:	2301      	movs	r3, #1
 80025ae:	2160      	movs	r1, #96	@ 0x60
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff ffc8 	bl	8002546 <iis2mdc_write_reg>
 80025b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80025b8:	68fb      	ldr	r3, [r7, #12]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	460b      	mov	r3, r1
 80025cc:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80025ce:	f107 0208 	add.w	r2, r7, #8
 80025d2:	2301      	movs	r3, #1
 80025d4:	2160      	movs	r1, #96	@ 0x60
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ff9d 	bl	8002516 <iis2mdc_read_reg>
 80025dc:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10f      	bne.n	8002604 <iis2mdc_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	7a3b      	ldrb	r3, [r7, #8]
 80025ee:	f362 0383 	bfi	r3, r2, #2, #2
 80025f2:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80025f4:	f107 0208 	add.w	r2, r7, #8
 80025f8:	2301      	movs	r3, #1
 80025fa:	2160      	movs	r1, #96	@ 0x60
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ffa2 	bl	8002546 <iis2mdc_write_reg>
 8002602:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002604:	68fb      	ldr	r3, [r7, #12]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800261a:	f107 0208 	add.w	r2, r7, #8
 800261e:	2301      	movs	r3, #1
 8002620:	2160      	movs	r1, #96	@ 0x60
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff77 	bl	8002516 <iis2mdc_read_reg>
 8002628:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 800262a:	7a3b      	ldrb	r3, [r7, #8]
 800262c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b03      	cmp	r3, #3
 8002634:	d81a      	bhi.n	800266c <iis2mdc_data_rate_get+0x5c>
 8002636:	a201      	add	r2, pc, #4	@ (adr r2, 800263c <iis2mdc_data_rate_get+0x2c>)
 8002638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263c:	0800264d 	.word	0x0800264d
 8002640:	08002655 	.word	0x08002655
 8002644:	0800265d 	.word	0x0800265d
 8002648:	08002665 	.word	0x08002665
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
      break;
 8002652:	e00f      	b.n	8002674 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_20Hz:
      *val = IIS2MDC_ODR_20Hz;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
      break;
 800265a:	e00b      	b.n	8002674 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_50Hz:
      *val = IIS2MDC_ODR_50Hz;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2202      	movs	r2, #2
 8002660:	701a      	strb	r2, [r3, #0]
      break;
 8002662:	e007      	b.n	8002674 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_100Hz:
      *val = IIS2MDC_ODR_100Hz;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2203      	movs	r2, #3
 8002668:	701a      	strb	r2, [r3, #0]
      break;
 800266a:	e003      	b.n	8002674 <iis2mdc_data_rate_get+0x64>

    default:
      *val = IIS2MDC_ODR_10Hz;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
      break;
 8002672:	bf00      	nop
  }

  return ret;
 8002674:	68fb      	ldr	r3, [r7, #12]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop

08002680 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800268c:	f107 0208 	add.w	r2, r7, #8
 8002690:	2301      	movs	r3, #1
 8002692:	2162      	movs	r1, #98	@ 0x62
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff ff3e 	bl	8002516 <iis2mdc_read_reg>
 800269a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10f      	bne.n	80026c2 <iis2mdc_block_data_update_set+0x42>
    reg.bdu = val;
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	7a3b      	ldrb	r3, [r7, #8]
 80026ac:	f362 1304 	bfi	r3, r2, #4, #1
 80026b0:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80026b2:	f107 0208 	add.w	r2, r7, #8
 80026b6:	2301      	movs	r3, #1
 80026b8:	2162      	movs	r1, #98	@ 0x62
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff ff43 	bl	8002546 <iis2mdc_write_reg>
 80026c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80026c2:	68fb      	ldr	r3, [r7, #12]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 80026d6:	f107 020c 	add.w	r2, r7, #12
 80026da:	2306      	movs	r3, #6
 80026dc:	2168      	movs	r1, #104	@ 0x68
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ff19 	bl	8002516 <iis2mdc_read_reg>
 80026e4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80026e6:	7b7b      	ldrb	r3, [r7, #13]
 80026e8:	b21a      	sxth	r2, r3
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	7b3a      	ldrb	r2, [r7, #12]
 80026fc:	4413      	add	r3, r2
 80026fe:	b29b      	uxth	r3, r3
 8002700:	b21a      	sxth	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	3302      	adds	r3, #2
 800270c:	b212      	sxth	r2, r2
 800270e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	3302      	adds	r3, #2
 8002714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002718:	b29b      	uxth	r3, r3
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	b29b      	uxth	r3, r3
 800271e:	7bba      	ldrb	r2, [r7, #14]
 8002720:	4413      	add	r3, r2
 8002722:	b29a      	uxth	r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	3302      	adds	r3, #2
 8002728:	b212      	sxth	r2, r2
 800272a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800272c:	7c7a      	ldrb	r2, [r7, #17]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	3304      	adds	r3, #4
 8002732:	b212      	sxth	r2, r2
 8002734:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	3304      	adds	r3, #4
 800273a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800273e:	b29b      	uxth	r3, r3
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	b29b      	uxth	r3, r3
 8002744:	7c3a      	ldrb	r2, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	b29a      	uxth	r2, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	3304      	adds	r3, #4
 800274e:	b212      	sxth	r2, r2
 8002750:	801a      	strh	r2, [r3, #0]
  return ret;
 8002752:	697b      	ldr	r3, [r7, #20]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 8002766:	2301      	movs	r3, #1
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	214f      	movs	r1, #79	@ 0x4f
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff fed2 	bl	8002516 <iis2mdc_read_reg>
 8002772:	60f8      	str	r0, [r7, #12]
  return ret;
 8002774:	68fb      	ldr	r3, [r7, #12]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800278a:	f107 0208 	add.w	r2, r7, #8
 800278e:	2301      	movs	r3, #1
 8002790:	2162      	movs	r1, #98	@ 0x62
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff febf 	bl	8002516 <iis2mdc_read_reg>
 8002798:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10f      	bne.n	80027c0 <iis2mdc_self_test_set+0x42>
    reg.self_test = val;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	7a3b      	ldrb	r3, [r7, #8]
 80027aa:	f362 0341 	bfi	r3, r2, #1, #1
 80027ae:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80027b0:	f107 0208 	add.w	r2, r7, #8
 80027b4:	2301      	movs	r3, #1
 80027b6:	2162      	movs	r1, #98	@ 0x62
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff fec4 	bl	8002546 <iis2mdc_write_reg>
 80027be:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80027c0:	68fb      	ldr	r3, [r7, #12]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80027d6:	f107 0208 	add.w	r2, r7, #8
 80027da:	2301      	movs	r3, #1
 80027dc:	2162      	movs	r1, #98	@ 0x62
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff fe99 	bl	8002516 <iis2mdc_read_reg>
 80027e4:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10f      	bne.n	800280c <iis2mdc_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	7a3b      	ldrb	r3, [r7, #8]
 80027f6:	f362 1345 	bfi	r3, r2, #5, #1
 80027fa:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80027fc:	f107 0208 	add.w	r2, r7, #8
 8002800:	2301      	movs	r3, #1
 8002802:	2162      	movs	r1, #98	@ 0x62
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff fe9e 	bl	8002546 <iis2mdc_write_reg>
 800280a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800280c:	68fb      	ldr	r3, [r7, #12]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <ISM330DHCX_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d103      	bne.n	8002834 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 800282c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	e04d      	b.n	80028d0 <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	7b1a      	ldrb	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a1b      	ldr	r2, [pc, #108]	@ (80028dc <ISM330DHCX_RegisterBusIO+0xc4>)
 8002870:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a1a      	ldr	r2, [pc, #104]	@ (80028e0 <ISM330DHCX_RegisterBusIO+0xc8>)
 8002876:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d103      	bne.n	800288e <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 8002886:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	e020      	b.n	80028d0 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4798      	blx	r3
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	e016      	b.n	80028d0 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d112      	bne.n	80028d0 <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10d      	bne.n	80028d0 <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80028b4:	230c      	movs	r3, #12
 80028b6:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 80028b8:	7afb      	ldrb	r3, [r7, #11]
 80028ba:	461a      	mov	r2, r3
 80028bc:	2112      	movs	r1, #18
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fd61 	bl	8003386 <ISM330DHCX_Write_Reg>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028ce:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80028d0:	68fb      	ldr	r3, [r7, #12]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	080037f5 	.word	0x080037f5
 80028e0:	0800382b 	.word	0x0800382b

080028e4 <ISM330DHCX_Init>:
 * @brief  Initialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	331c      	adds	r3, #28
 80028f0:	2101      	movs	r1, #1
 80028f2:	4618      	mov	r0, r3
 80028f4:	f001 fd12 	bl	800431c <ism330dhcx_device_conf_set>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002902:	e078      	b.n	80029f6 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	331c      	adds	r3, #28
 8002908:	2101      	movs	r1, #1
 800290a:	4618      	mov	r0, r3
 800290c:	f001 fd89 	bl	8004422 <ism330dhcx_auto_increment_set>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800291a:	e06c      	b.n	80029f6 <ISM330DHCX_Init+0x112>
  }

    /* SW reset */
  if ( ism330dhcx_reset_set( &(pObj->Ctx), PROPERTY_ENABLE)!= ISM330DHCX_OK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	331c      	adds	r3, #28
 8002920:	2101      	movs	r1, #1
 8002922:	4618      	mov	r0, r3
 8002924:	f001 fd57 	bl	80043d6 <ism330dhcx_reset_set>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002932:	e060      	b.n	80029f6 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if ( ism330dhcx_auto_increment_set( &(pObj->Ctx), PROPERTY_ENABLE ) != ISM330DHCX_OK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	331c      	adds	r3, #28
 8002938:	2101      	movs	r1, #1
 800293a:	4618      	mov	r0, r3
 800293c:	f001 fd71 	bl	8004422 <ism330dhcx_auto_increment_set>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800294a:	e054      	b.n	80029f6 <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	331c      	adds	r3, #28
 8002950:	2101      	movs	r1, #1
 8002952:	4618      	mov	r0, r3
 8002954:	f001 fc2c 	bl	80041b0 <ism330dhcx_block_data_update_set>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002962:	e048      	b.n	80029f6 <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	331c      	adds	r3, #28
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f001 fd7f 	bl	800446e <ism330dhcx_fifo_mode_set>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 8002976:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800297a:	e03c      	b.n	80029f6 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2204      	movs	r2, #4
 8002980:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	331c      	adds	r3, #28
 8002988:	2100      	movs	r1, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fff6 	bl	800397c <ism330dhcx_xl_data_rate_set>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 8002996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800299a:	e02c      	b.n	80029f6 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	331c      	adds	r3, #28
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 ff8c 	bl	80038c0 <ism330dhcx_xl_full_scale_set>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029b2:	e020      	b.n	80029f6 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2204      	movs	r2, #4
 80029b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	331c      	adds	r3, #28
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f001 fa26 	bl	8003e14 <ism330dhcx_gy_data_rate_set>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 80029ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029d2:	e010      	b.n	80029f6 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	331c      	adds	r3, #28
 80029d8:	210c      	movs	r1, #12
 80029da:	4618      	mov	r0, r3
 80029dc:	f001 f9a2 	bl	8003d24 <ism330dhcx_gy_full_scale_set>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029ea:	e004      	b.n	80029f6 <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return ISM330DHCX_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <ISM330DHCX_DeInit>:
 * @brief  Deinitialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f888 	bl	8002b1c <ISM330DHCX_ACC_Disable>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 8002a12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a16:	e015      	b.n	8002a44 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 fa92 	bl	8002f42 <ISM330DHCX_GYRO_Disable>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 8002a24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a28:	e00c      	b.n	8002a44 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  pObj->is_initialized = 0;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return ISM330DHCX_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <ISM330DHCX_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	331c      	adds	r3, #28
 8002a5a:	6839      	ldr	r1, [r7, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f001 fca9 	bl	80043b4 <ism330dhcx_device_id_get>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 8002a68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a6c:	e000      	b.n	8002a70 <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <ISM330DHCX_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to ISM330DHCX sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2201      	movs	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2200      	movs	r2, #0
 8002a92:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2200      	movs	r2, #0
 8002a98:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002aa0:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	4a07      	ldr	r2, [pc, #28]	@ (8002ad0 <ISM330DHCX_GetCapabilities+0x58>)
 8002ab2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4a06      	ldr	r2, [pc, #24]	@ (8002ad0 <ISM330DHCX_GetCapabilities+0x58>)
 8002ab8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	45d05800 	.word	0x45d05800

08002ad4 <ISM330DHCX_ACC_Enable>:
 * @brief  Enable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e014      	b.n	8002b14 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f103 021c 	add.w	r2, r3, #28
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f000 ff3f 	bl	800397c <ism330dhcx_xl_data_rate_set>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8002b04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b08:	e004      	b.n	8002b14 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return ISM330DHCX_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <ISM330DHCX_ACC_Disable>:
 * @brief  Disable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e01f      	b.n	8002b72 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f103 021c 	add.w	r2, r3, #28
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	332b      	adds	r3, #43	@ 0x2b
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	f001 f888 	bl	8003c54 <ism330dhcx_xl_data_rate_get>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8002b4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b4e:	e010      	b.n	8002b72 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	331c      	adds	r3, #28
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 ff10 	bl	800397c <ism330dhcx_xl_data_rate_set>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b66:	e004      	b.n	8002b72 <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return ISM330DHCX_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <ISM330DHCX_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	331c      	adds	r3, #28
 8002b8e:	f107 020b 	add.w	r2, r7, #11
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 feb9 	bl	800390c <ism330dhcx_xl_full_scale_get>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002ba0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ba4:	e023      	b.n	8002bee <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8002ba6:	7afb      	ldrb	r3, [r7, #11]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d81b      	bhi.n	8002be4 <ISM330DHCX_ACC_GetSensitivity+0x68>
 8002bac:	a201      	add	r2, pc, #4	@ (adr r2, 8002bb4 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 8002bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb2:	bf00      	nop
 8002bb4:	08002bc5 	.word	0x08002bc5
 8002bb8:	08002bdd 	.word	0x08002bdd
 8002bbc:	08002bcd 	.word	0x08002bcd
 8002bc0:	08002bd5 	.word	0x08002bd5
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf8 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8002bc8:	601a      	str	r2, [r3, #0]
      break;
 8002bca:	e00f      	b.n	8002bec <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4a0b      	ldr	r2, [pc, #44]	@ (8002bfc <ISM330DHCX_ACC_GetSensitivity+0x80>)
 8002bd0:	601a      	str	r2, [r3, #0]
      break;
 8002bd2:	e00b      	b.n	8002bec <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c00 <ISM330DHCX_ACC_GetSensitivity+0x84>)
 8002bd8:	601a      	str	r2, [r3, #0]
      break;
 8002bda:	e007      	b.n	8002bec <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	4a09      	ldr	r2, [pc, #36]	@ (8002c04 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 8002be0:	601a      	str	r2, [r3, #0]
      break;
 8002be2:	e003      	b.n	8002bec <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002be8:	60fb      	str	r3, [r7, #12]
      break;
 8002bea:	bf00      	nop
  }

  return ret;
 8002bec:	68fb      	ldr	r3, [r7, #12]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	3d79db23 	.word	0x3d79db23
 8002bfc:	3df9db23 	.word	0x3df9db23
 8002c00:	3e79db23 	.word	0x3e79db23
 8002c04:	3ef9db23 	.word	0x3ef9db23

08002c08 <ISM330DHCX_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	331c      	adds	r3, #28
 8002c1a:	f107 020b 	add.w	r2, r7, #11
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 f817 	bl	8003c54 <ism330dhcx_xl_data_rate_get>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002c2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c30:	e04e      	b.n	8002cd0 <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8002c32:	7afb      	ldrb	r3, [r7, #11]
 8002c34:	2b0a      	cmp	r3, #10
 8002c36:	d846      	bhi.n	8002cc6 <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 8002c38:	a201      	add	r2, pc, #4	@ (adr r2, 8002c40 <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002c6d 	.word	0x08002c6d
 8002c44:	08002c77 	.word	0x08002c77
 8002c48:	08002c7f 	.word	0x08002c7f
 8002c4c:	08002c87 	.word	0x08002c87
 8002c50:	08002c8f 	.word	0x08002c8f
 8002c54:	08002c97 	.word	0x08002c97
 8002c58:	08002c9f 	.word	0x08002c9f
 8002c5c:	08002ca7 	.word	0x08002ca7
 8002c60:	08002caf 	.word	0x08002caf
 8002c64:	08002cb7 	.word	0x08002cb7
 8002c68:	08002cbf 	.word	0x08002cbf
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
      break;
 8002c74:	e02b      	b.n	8002cce <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	4a17      	ldr	r2, [pc, #92]	@ (8002cd8 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 8002c7a:	601a      	str	r2, [r3, #0]
      break;
 8002c7c:	e027      	b.n	8002cce <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	4a16      	ldr	r2, [pc, #88]	@ (8002cdc <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 8002c82:	601a      	str	r2, [r3, #0]
      break;
 8002c84:	e023      	b.n	8002cce <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	4a15      	ldr	r2, [pc, #84]	@ (8002ce0 <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 8002c8a:	601a      	str	r2, [r3, #0]
      break;
 8002c8c:	e01f      	b.n	8002cce <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	4a14      	ldr	r2, [pc, #80]	@ (8002ce4 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 8002c92:	601a      	str	r2, [r3, #0]
      break;
 8002c94:	e01b      	b.n	8002cce <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	4a13      	ldr	r2, [pc, #76]	@ (8002ce8 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 8002c9a:	601a      	str	r2, [r3, #0]
      break;
 8002c9c:	e017      	b.n	8002cce <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_417Hz:
      *Odr = 417.0f;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	4a12      	ldr	r2, [pc, #72]	@ (8002cec <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 8002ca2:	601a      	str	r2, [r3, #0]
      break;
 8002ca4:	e013      	b.n	8002cce <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	4a11      	ldr	r2, [pc, #68]	@ (8002cf0 <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 8002caa:	601a      	str	r2, [r3, #0]
      break;
 8002cac:	e00f      	b.n	8002cce <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	4a10      	ldr	r2, [pc, #64]	@ (8002cf4 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 8002cb2:	601a      	str	r2, [r3, #0]
      break;
 8002cb4:	e00b      	b.n	8002cce <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	4a0f      	ldr	r2, [pc, #60]	@ (8002cf8 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 8002cba:	601a      	str	r2, [r3, #0]
      break;
 8002cbc:	e007      	b.n	8002cce <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	4a0e      	ldr	r2, [pc, #56]	@ (8002cfc <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 8002cc2:	601a      	str	r2, [r3, #0]
      break;
 8002cc4:	e003      	b.n	8002cce <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cca:	60fb      	str	r3, [r7, #12]
      break;
 8002ccc:	bf00      	nop
  }

  return ret;
 8002cce:	68fb      	ldr	r3, [r7, #12]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	41480000 	.word	0x41480000
 8002cdc:	41d00000 	.word	0x41d00000
 8002ce0:	42500000 	.word	0x42500000
 8002ce4:	42d00000 	.word	0x42d00000
 8002ce8:	43500000 	.word	0x43500000
 8002cec:	43d08000 	.word	0x43d08000
 8002cf0:	44504000 	.word	0x44504000
 8002cf4:	44d06000 	.word	0x44d06000
 8002cf8:	45505000 	.word	0x45505000
 8002cfc:	45d05800 	.word	0x45d05800

08002d00 <ISM330DHCX_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d106      	bne.n	8002d24 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002d16:	ed97 0a00 	vldr	s0, [r7]
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fb4e 	bl	80033bc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 8002d20:	4603      	mov	r3, r0
 8002d22:	e005      	b.n	8002d30 <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002d24:	ed97 0a00 	vldr	s0, [r7]
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fbd3 	bl	80034d4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 8002d2e:	4603      	mov	r3, r0
  }
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <ISM330DHCX_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	331c      	adds	r3, #28
 8002d4a:	f107 020b 	add.w	r2, r7, #11
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fddb 	bl	800390c <ism330dhcx_xl_full_scale_get>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002d5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d60:	e023      	b.n	8002daa <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002d62:	7afb      	ldrb	r3, [r7, #11]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d81b      	bhi.n	8002da0 <ISM330DHCX_ACC_GetFullScale+0x68>
 8002d68:	a201      	add	r2, pc, #4	@ (adr r2, 8002d70 <ISM330DHCX_ACC_GetFullScale+0x38>)
 8002d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002d81 	.word	0x08002d81
 8002d74:	08002d99 	.word	0x08002d99
 8002d78:	08002d89 	.word	0x08002d89
 8002d7c:	08002d91 	.word	0x08002d91
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2202      	movs	r2, #2
 8002d84:	601a      	str	r2, [r3, #0]
      break;
 8002d86:	e00f      	b.n	8002da8 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	601a      	str	r2, [r3, #0]
      break;
 8002d8e:	e00b      	b.n	8002da8 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2208      	movs	r2, #8
 8002d94:	601a      	str	r2, [r3, #0]
      break;
 8002d96:	e007      	b.n	8002da8 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	601a      	str	r2, [r3, #0]
      break;
 8002d9e:	e003      	b.n	8002da8 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8002da0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002da4:	60fb      	str	r3, [r7, #12]
      break;
 8002da6:	bf00      	nop
  }

  return ret;
 8002da8:	68fb      	ldr	r3, [r7, #12]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop

08002db4 <ISM330DHCX_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	dd0b      	ble.n	8002ddc <ISM330DHCX_ACC_SetFullScale+0x28>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	dd06      	ble.n	8002dd8 <ISM330DHCX_ACC_SetFullScale+0x24>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	dc01      	bgt.n	8002dd4 <ISM330DHCX_ACC_SetFullScale+0x20>
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e004      	b.n	8002dde <ISM330DHCX_ACC_SetFullScale+0x2a>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e002      	b.n	8002dde <ISM330DHCX_ACC_SetFullScale+0x2a>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e000      	b.n	8002dde <ISM330DHCX_ACC_SetFullScale+0x2a>
 8002ddc:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 8002dde:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	331c      	adds	r3, #28
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fd69 	bl	80038c0 <ism330dhcx_xl_full_scale_set>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 8002df4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002df8:	e000      	b.n	8002dfc <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <ISM330DHCX_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	331c      	adds	r3, #28
 8002e12:	f107 0208 	add.w	r2, r7, #8
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f001 fa37 	bl	800428c <ism330dhcx_acceleration_raw_get>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8002e24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e28:	e00c      	b.n	8002e44 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002e2a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002e32:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002e3a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <ISM330DHCX_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	331c      	adds	r3, #28
 8002e60:	f107 0210 	add.w	r2, r7, #16
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f001 fa10 	bl	800428c <ism330dhcx_acceleration_raw_get>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e76:	e03c      	b.n	8002ef2 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8002e78:	f107 030c 	add.w	r3, r7, #12
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fe7c 	bl	8002b7c <ISM330DHCX_ACC_GetSensitivity>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e8e:	e030      	b.n	8002ef2 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002e90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002e94:	ee07 3a90 	vmov	s15, r3
 8002e98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ea8:	ee17 2a90 	vmov	r2, s15
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002eb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002eb4:	ee07 3a90 	vmov	s15, r3
 8002eb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ebc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ec8:	ee17 2a90 	vmov	r2, s15
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002ed0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ed4:	ee07 3a90 	vmov	s15, r3
 8002ed8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002edc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ee8:	ee17 2a90 	vmov	r2, s15
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <ISM330DHCX_GYRO_Enable>:
 * @brief  Enable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e014      	b.n	8002f3a <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f103 021c 	add.w	r2, r3, #28
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f000 ff78 	bl	8003e14 <ism330dhcx_gy_data_rate_set>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8002f2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f2e:	e004      	b.n	8002f3a <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return ISM330DHCX_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <ISM330DHCX_GYRO_Disable>:
 * @brief  Disable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e01f      	b.n	8002f98 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f103 021c 	add.w	r2, r3, #28
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	332c      	adds	r3, #44	@ 0x2c
 8002f62:	4619      	mov	r1, r3
 8002f64:	4610      	mov	r0, r2
 8002f66:	f001 f8c1 	bl	80040ec <ism330dhcx_gy_data_rate_get>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f74:	e010      	b.n	8002f98 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	331c      	adds	r3, #28
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 ff49 	bl	8003e14 <ism330dhcx_gy_data_rate_set>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8002f88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f8c:	e004      	b.n	8002f98 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return ISM330DHCX_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <ISM330DHCX_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	331c      	adds	r3, #28
 8002fb2:	f107 020b 	add.w	r2, r7, #11
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fed9 	bl	8003d70 <ism330dhcx_gy_full_scale_get>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002fc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fc8:	e039      	b.n	800303e <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8002fca:	7afb      	ldrb	r3, [r7, #11]
 8002fcc:	2b0c      	cmp	r3, #12
 8002fce:	d831      	bhi.n	8003034 <ISM330DHCX_GYRO_GetSensitivity+0x94>
 8002fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd8 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	08003015 	.word	0x08003015
 8002fdc:	08003035 	.word	0x08003035
 8002fe0:	0800300d 	.word	0x0800300d
 8002fe4:	08003035 	.word	0x08003035
 8002fe8:	0800301d 	.word	0x0800301d
 8002fec:	08003035 	.word	0x08003035
 8002ff0:	08003035 	.word	0x08003035
 8002ff4:	08003035 	.word	0x08003035
 8002ff8:	08003025 	.word	0x08003025
 8002ffc:	08003035 	.word	0x08003035
 8003000:	08003035 	.word	0x08003035
 8003004:	08003035 	.word	0x08003035
 8003008:	0800302d 	.word	0x0800302d
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	4a0e      	ldr	r2, [pc, #56]	@ (8003048 <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 8003010:	601a      	str	r2, [r3, #0]
      break;
 8003012:	e013      	b.n	800303c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	4a0d      	ldr	r2, [pc, #52]	@ (800304c <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 8003018:	601a      	str	r2, [r3, #0]
      break;
 800301a:	e00f      	b.n	800303c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	4a0c      	ldr	r2, [pc, #48]	@ (8003050 <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 8003020:	601a      	str	r2, [r3, #0]
      break;
 8003022:	e00b      	b.n	800303c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4a0b      	ldr	r2, [pc, #44]	@ (8003054 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 8003028:	601a      	str	r2, [r3, #0]
      break;
 800302a:	e007      	b.n	800303c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4a0a      	ldr	r2, [pc, #40]	@ (8003058 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 8003030:	601a      	str	r2, [r3, #0]
      break;
 8003032:	e003      	b.n	800303c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 8003034:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003038:	60fb      	str	r3, [r7, #12]
      break;
 800303a:	bf00      	nop
  }

  return ret;
 800303c:	68fb      	ldr	r3, [r7, #12]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	408c0000 	.word	0x408c0000
 800304c:	410c0000 	.word	0x410c0000
 8003050:	418c0000 	.word	0x418c0000
 8003054:	420c0000 	.word	0x420c0000
 8003058:	428c0000 	.word	0x428c0000

0800305c <ISM330DHCX_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	331c      	adds	r3, #28
 800306e:	f107 020b 	add.w	r2, r7, #11
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f001 f839 	bl	80040ec <ism330dhcx_gy_data_rate_get>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003080:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003084:	e04e      	b.n	8003124 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003086:	7afb      	ldrb	r3, [r7, #11]
 8003088:	2b0a      	cmp	r3, #10
 800308a:	d846      	bhi.n	800311a <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 800308c:	a201      	add	r2, pc, #4	@ (adr r2, 8003094 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 800308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003092:	bf00      	nop
 8003094:	080030c1 	.word	0x080030c1
 8003098:	080030cb 	.word	0x080030cb
 800309c:	080030d3 	.word	0x080030d3
 80030a0:	080030db 	.word	0x080030db
 80030a4:	080030e3 	.word	0x080030e3
 80030a8:	080030eb 	.word	0x080030eb
 80030ac:	080030f3 	.word	0x080030f3
 80030b0:	080030fb 	.word	0x080030fb
 80030b4:	08003103 	.word	0x08003103
 80030b8:	0800310b 	.word	0x0800310b
 80030bc:	08003113 	.word	0x08003113
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
      break;
 80030c8:	e02b      	b.n	8003122 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	4a17      	ldr	r2, [pc, #92]	@ (800312c <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 80030ce:	601a      	str	r2, [r3, #0]
      break;
 80030d0:	e027      	b.n	8003122 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	4a16      	ldr	r2, [pc, #88]	@ (8003130 <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 80030d6:	601a      	str	r2, [r3, #0]
      break;
 80030d8:	e023      	b.n	8003122 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	4a15      	ldr	r2, [pc, #84]	@ (8003134 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 80030de:	601a      	str	r2, [r3, #0]
      break;
 80030e0:	e01f      	b.n	8003122 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	4a14      	ldr	r2, [pc, #80]	@ (8003138 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 80030e6:	601a      	str	r2, [r3, #0]
      break;
 80030e8:	e01b      	b.n	8003122 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	4a13      	ldr	r2, [pc, #76]	@ (800313c <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 80030ee:	601a      	str	r2, [r3, #0]
      break;
 80030f0:	e017      	b.n	8003122 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_417Hz:
      *Odr = 417.0f;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	4a12      	ldr	r2, [pc, #72]	@ (8003140 <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 80030f6:	601a      	str	r2, [r3, #0]
      break;
 80030f8:	e013      	b.n	8003122 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	4a11      	ldr	r2, [pc, #68]	@ (8003144 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 80030fe:	601a      	str	r2, [r3, #0]
      break;
 8003100:	e00f      	b.n	8003122 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	4a10      	ldr	r2, [pc, #64]	@ (8003148 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 8003106:	601a      	str	r2, [r3, #0]
      break;
 8003108:	e00b      	b.n	8003122 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	4a0f      	ldr	r2, [pc, #60]	@ (800314c <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 800310e:	601a      	str	r2, [r3, #0]
      break;
 8003110:	e007      	b.n	8003122 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	4a0e      	ldr	r2, [pc, #56]	@ (8003150 <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 8003116:	601a      	str	r2, [r3, #0]
      break;
 8003118:	e003      	b.n	8003122 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 800311a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800311e:	60fb      	str	r3, [r7, #12]
      break;
 8003120:	bf00      	nop
  }

  return ret;
 8003122:	68fb      	ldr	r3, [r7, #12]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	41480000 	.word	0x41480000
 8003130:	41d00000 	.word	0x41d00000
 8003134:	42500000 	.word	0x42500000
 8003138:	42d00000 	.word	0x42d00000
 800313c:	43500000 	.word	0x43500000
 8003140:	43d08000 	.word	0x43d08000
 8003144:	44504000 	.word	0x44504000
 8003148:	44d06000 	.word	0x44d06000
 800314c:	45505000 	.word	0x45505000
 8003150:	45d05800 	.word	0x45d05800

08003154 <ISM330DHCX_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003166:	2b01      	cmp	r3, #1
 8003168:	d106      	bne.n	8003178 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800316a:	ed97 0a00 	vldr	s0, [r7]
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fa32 	bl	80035d8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8003174:	4603      	mov	r3, r0
 8003176:	e005      	b.n	8003184 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003178:	ed97 0a00 	vldr	s0, [r7]
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fab7 	bl	80036f0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 8003182:	4603      	mov	r3, r0
  }
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <ISM330DHCX_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	331c      	adds	r3, #28
 800319e:	f107 020b 	add.w	r2, r7, #11
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fde3 	bl	8003d70 <ism330dhcx_gy_full_scale_get>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 80031b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031b4:	e03c      	b.n	8003230 <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 80031b6:	7afb      	ldrb	r3, [r7, #11]
 80031b8:	2b0c      	cmp	r3, #12
 80031ba:	d834      	bhi.n	8003226 <ISM330DHCX_GYRO_GetFullScale+0x9a>
 80031bc:	a201      	add	r2, pc, #4	@ (adr r2, 80031c4 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	08003201 	.word	0x08003201
 80031c8:	08003227 	.word	0x08003227
 80031cc:	080031f9 	.word	0x080031f9
 80031d0:	08003227 	.word	0x08003227
 80031d4:	08003209 	.word	0x08003209
 80031d8:	08003227 	.word	0x08003227
 80031dc:	08003227 	.word	0x08003227
 80031e0:	08003227 	.word	0x08003227
 80031e4:	08003213 	.word	0x08003213
 80031e8:	08003227 	.word	0x08003227
 80031ec:	08003227 	.word	0x08003227
 80031f0:	08003227 	.word	0x08003227
 80031f4:	0800321d 	.word	0x0800321d
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	227d      	movs	r2, #125	@ 0x7d
 80031fc:	601a      	str	r2, [r3, #0]
      break;
 80031fe:	e016      	b.n	800322e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	22fa      	movs	r2, #250	@ 0xfa
 8003204:	601a      	str	r2, [r3, #0]
      break;
 8003206:	e012      	b.n	800322e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800320e:	601a      	str	r2, [r3, #0]
      break;
 8003210:	e00d      	b.n	800322e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003218:	601a      	str	r2, [r3, #0]
      break;
 800321a:	e008      	b.n	800322e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003222:	601a      	str	r2, [r3, #0]
      break;
 8003224:	e003      	b.n	800322e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 8003226:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800322a:	60fb      	str	r3, [r7, #12]
      break;
 800322c:	bf00      	nop
  }

  return ret;
 800322e:	68fb      	ldr	r3, [r7, #12]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <ISM330DHCX_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b7d      	cmp	r3, #125	@ 0x7d
 8003246:	dd12      	ble.n	800326e <ISM330DHCX_GYRO_SetFullScale+0x36>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	2bfa      	cmp	r3, #250	@ 0xfa
 800324c:	dd0d      	ble.n	800326a <ISM330DHCX_GYRO_SetFullScale+0x32>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003254:	dd07      	ble.n	8003266 <ISM330DHCX_GYRO_SetFullScale+0x2e>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800325c:	dc01      	bgt.n	8003262 <ISM330DHCX_GYRO_SetFullScale+0x2a>
 800325e:	2308      	movs	r3, #8
 8003260:	e006      	b.n	8003270 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8003262:	230c      	movs	r3, #12
 8003264:	e004      	b.n	8003270 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8003266:	2304      	movs	r3, #4
 8003268:	e002      	b.n	8003270 <ISM330DHCX_GYRO_SetFullScale+0x38>
 800326a:	2300      	movs	r3, #0
 800326c:	e000      	b.n	8003270 <ISM330DHCX_GYRO_SetFullScale+0x38>
 800326e:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 8003270:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	331c      	adds	r3, #28
 8003276:	7bfa      	ldrb	r2, [r7, #15]
 8003278:	4611      	mov	r1, r2
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fd52 	bl	8003d24 <ism330dhcx_gy_full_scale_set>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 8003286:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800328a:	e000      	b.n	800328e <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <ISM330DHCX_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	331c      	adds	r3, #28
 80032a4:	f107 0208 	add.w	r2, r7, #8
 80032a8:	4611      	mov	r1, r2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 ffa6 	bl	80041fc <ism330dhcx_angular_rate_raw_get>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032ba:	e00c      	b.n	80032d6 <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80032bc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80032c4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80032cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <ISM330DHCX_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b086      	sub	sp, #24
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	331c      	adds	r3, #28
 80032ec:	f107 0210 	add.w	r2, r7, #16
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 ff82 	bl	80041fc <ism330dhcx_angular_rate_raw_get>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003302:	e03c      	b.n	800337e <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8003304:	f107 030c 	add.w	r3, r7, #12
 8003308:	4619      	mov	r1, r3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff fe48 	bl	8002fa0 <ISM330DHCX_GYRO_GetSensitivity>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 8003316:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800331a:	e030      	b.n	800337e <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800331c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003320:	ee07 3a90 	vmov	s15, r3
 8003324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003328:	edd7 7a03 	vldr	s15, [r7, #12]
 800332c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003334:	ee17 2a90 	vmov	r2, s15
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800333c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003340:	ee07 3a90 	vmov	s15, r3
 8003344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003348:	edd7 7a03 	vldr	s15, [r7, #12]
 800334c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003354:	ee17 2a90 	vmov	r2, s15
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800335c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003360:	ee07 3a90 	vmov	s15, r3
 8003364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003368:	edd7 7a03 	vldr	s15, [r7, #12]
 800336c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003374:	ee17 2a90 	vmov	r2, s15
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <ISM330DHCX_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	460b      	mov	r3, r1
 8003390:	70fb      	strb	r3, [r7, #3]
 8003392:	4613      	mov	r3, r2
 8003394:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f103 001c 	add.w	r0, r3, #28
 800339c:	1cba      	adds	r2, r7, #2
 800339e:	78f9      	ldrb	r1, [r7, #3]
 80033a0:	2301      	movs	r3, #1
 80033a2:	f000 fa75 	bl	8003890 <ism330dhcx_write_reg>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 80033ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033b0:	e000      	b.n	80033b4 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80033c8:	edd7 7a00 	vldr	s15, [r7]
 80033cc:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80033d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d8:	d801      	bhi.n	80033de <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 80033da:	2301      	movs	r3, #1
 80033dc:	e058      	b.n	8003490 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80033de:	edd7 7a00 	vldr	s15, [r7]
 80033e2:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80033e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	d801      	bhi.n	80033f4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e04d      	b.n	8003490 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80033f4:	edd7 7a00 	vldr	s15, [r7]
 80033f8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80034b8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80033fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003404:	d801      	bhi.n	800340a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003406:	2303      	movs	r3, #3
 8003408:	e042      	b.n	8003490 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800340a:	edd7 7a00 	vldr	s15, [r7]
 800340e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80034bc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 8003412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341a:	d801      	bhi.n	8003420 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 800341c:	2304      	movs	r3, #4
 800341e:	e037      	b.n	8003490 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003420:	edd7 7a00 	vldr	s15, [r7]
 8003424:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80034c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 8003428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800342c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003430:	d801      	bhi.n	8003436 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003432:	2305      	movs	r3, #5
 8003434:	e02c      	b.n	8003490 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003436:	edd7 7a00 	vldr	s15, [r7]
 800343a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80034c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 800343e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003446:	d801      	bhi.n	800344c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003448:	2306      	movs	r3, #6
 800344a:	e021      	b.n	8003490 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800344c:	edd7 7a00 	vldr	s15, [r7]
 8003450:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80034c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8003454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345c:	d801      	bhi.n	8003462 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800345e:	2307      	movs	r3, #7
 8003460:	e016      	b.n	8003490 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003462:	edd7 7a00 	vldr	s15, [r7]
 8003466:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80034cc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 800346a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800346e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003472:	d801      	bhi.n	8003478 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003474:	2308      	movs	r3, #8
 8003476:	e00b      	b.n	8003490 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003478:	edd7 7a00 	vldr	s15, [r7]
 800347c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80034d0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8003480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003488:	d801      	bhi.n	800348e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800348a:	2309      	movs	r3, #9
 800348c:	e000      	b.n	8003490 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800348e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8003490:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
          :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	331c      	adds	r3, #28
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	4611      	mov	r1, r2
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fa6e 	bl	800397c <ism330dhcx_xl_data_rate_set>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 80034a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034aa:	e000      	b.n	80034ae <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	42500000 	.word	0x42500000
 80034bc:	42d00000 	.word	0x42d00000
 80034c0:	43500000 	.word	0x43500000
 80034c4:	43d08000 	.word	0x43d08000
 80034c8:	44504000 	.word	0x44504000
 80034cc:	44d06000 	.word	0x44d06000
 80034d0:	45505000 	.word	0x45505000

080034d4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80034e0:	edd7 7a00 	vldr	s15, [r7]
 80034e4:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80034e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f0:	d801      	bhi.n	80034f6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e058      	b.n	80035a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80034f6:	edd7 7a00 	vldr	s15, [r7]
 80034fa:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80034fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003506:	d801      	bhi.n	800350c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003508:	2302      	movs	r3, #2
 800350a:	e04d      	b.n	80035a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800350c:	edd7 7a00 	vldr	s15, [r7]
 8003510:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80035bc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8003514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351c:	d801      	bhi.n	8003522 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800351e:	2303      	movs	r3, #3
 8003520:	e042      	b.n	80035a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003522:	edd7 7a00 	vldr	s15, [r7]
 8003526:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80035c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 800352a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800352e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003532:	d801      	bhi.n	8003538 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003534:	2304      	movs	r3, #4
 8003536:	e037      	b.n	80035a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003538:	edd7 7a00 	vldr	s15, [r7]
 800353c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80035c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8003540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003548:	d801      	bhi.n	800354e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800354a:	2305      	movs	r3, #5
 800354c:	e02c      	b.n	80035a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800354e:	edd7 7a00 	vldr	s15, [r7]
 8003552:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80035c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800355a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355e:	d801      	bhi.n	8003564 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003560:	2306      	movs	r3, #6
 8003562:	e021      	b.n	80035a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003564:	edd7 7a00 	vldr	s15, [r7]
 8003568:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80035cc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800356c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003574:	d801      	bhi.n	800357a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8003576:	2307      	movs	r3, #7
 8003578:	e016      	b.n	80035a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800357a:	edd7 7a00 	vldr	s15, [r7]
 800357e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80035d0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8003582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358a:	d801      	bhi.n	8003590 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800358c:	2308      	movs	r3, #8
 800358e:	e00b      	b.n	80035a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003590:	edd7 7a00 	vldr	s15, [r7]
 8003594:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80035d4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 8003598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800359c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a0:	d801      	bhi.n	80035a6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80035a2:	2309      	movs	r3, #9
 80035a4:	e000      	b.n	80035a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80035a6:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
                : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
                :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	42500000 	.word	0x42500000
 80035c0:	42d00000 	.word	0x42d00000
 80035c4:	43500000 	.word	0x43500000
 80035c8:	43d08000 	.word	0x43d08000
 80035cc:	44504000 	.word	0x44504000
 80035d0:	44d06000 	.word	0x44d06000
 80035d4:	45505000 	.word	0x45505000

080035d8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80035e4:	edd7 7a00 	vldr	s15, [r7]
 80035e8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80035ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f4:	d801      	bhi.n	80035fa <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e058      	b.n	80036ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80035fa:	edd7 7a00 	vldr	s15, [r7]
 80035fe:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8003602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360a:	d801      	bhi.n	8003610 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800360c:	2302      	movs	r3, #2
 800360e:	e04d      	b.n	80036ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003610:	edd7 7a00 	vldr	s15, [r7]
 8003614:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80036d4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8003618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800361c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003620:	d801      	bhi.n	8003626 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8003622:	2303      	movs	r3, #3
 8003624:	e042      	b.n	80036ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003626:	edd7 7a00 	vldr	s15, [r7]
 800362a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80036d8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800362e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003636:	d801      	bhi.n	800363c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8003638:	2304      	movs	r3, #4
 800363a:	e037      	b.n	80036ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800363c:	edd7 7a00 	vldr	s15, [r7]
 8003640:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80036dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8003644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364c:	d801      	bhi.n	8003652 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800364e:	2305      	movs	r3, #5
 8003650:	e02c      	b.n	80036ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003652:	edd7 7a00 	vldr	s15, [r7]
 8003656:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80036e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800365a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800365e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003662:	d801      	bhi.n	8003668 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8003664:	2306      	movs	r3, #6
 8003666:	e021      	b.n	80036ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003668:	edd7 7a00 	vldr	s15, [r7]
 800366c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80036e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8003670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003678:	d801      	bhi.n	800367e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800367a:	2307      	movs	r3, #7
 800367c:	e016      	b.n	80036ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800367e:	edd7 7a00 	vldr	s15, [r7]
 8003682:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80036e8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8003686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800368a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368e:	d801      	bhi.n	8003694 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8003690:	2308      	movs	r3, #8
 8003692:	e00b      	b.n	80036ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003694:	edd7 7a00 	vldr	s15, [r7]
 8003698:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80036ec <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800369c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a4:	d801      	bhi.n	80036aa <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80036a6:	2309      	movs	r3, #9
 80036a8:	e000      	b.n	80036ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80036aa:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 80036ac:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
          :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	331c      	adds	r3, #28
 80036b2:	7bfa      	ldrb	r2, [r7, #15]
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fbac 	bl	8003e14 <ism330dhcx_gy_data_rate_set>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 80036c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036c6:	e000      	b.n	80036ca <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	42500000 	.word	0x42500000
 80036d8:	42d00000 	.word	0x42d00000
 80036dc:	43500000 	.word	0x43500000
 80036e0:	43d08000 	.word	0x43d08000
 80036e4:	44504000 	.word	0x44504000
 80036e8:	44d06000 	.word	0x44d06000
 80036ec:	45505000 	.word	0x45505000

080036f0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80036fc:	edd7 7a00 	vldr	s15, [r7]
 8003700:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370c:	d801      	bhi.n	8003712 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800370e:	2301      	movs	r3, #1
 8003710:	e058      	b.n	80037c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003712:	edd7 7a00 	vldr	s15, [r7]
 8003716:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800371a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800371e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003722:	d801      	bhi.n	8003728 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8003724:	2302      	movs	r3, #2
 8003726:	e04d      	b.n	80037c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003728:	edd7 7a00 	vldr	s15, [r7]
 800372c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80037d8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8003730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003738:	d801      	bhi.n	800373e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800373a:	2303      	movs	r3, #3
 800373c:	e042      	b.n	80037c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800373e:	edd7 7a00 	vldr	s15, [r7]
 8003742:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80037dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8003746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800374a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374e:	d801      	bhi.n	8003754 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8003750:	2304      	movs	r3, #4
 8003752:	e037      	b.n	80037c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003754:	edd7 7a00 	vldr	s15, [r7]
 8003758:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80037e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800375c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003764:	d801      	bhi.n	800376a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8003766:	2305      	movs	r3, #5
 8003768:	e02c      	b.n	80037c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800376a:	edd7 7a00 	vldr	s15, [r7]
 800376e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80037e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8003772:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377a:	d801      	bhi.n	8003780 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800377c:	2306      	movs	r3, #6
 800377e:	e021      	b.n	80037c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003780:	edd7 7a00 	vldr	s15, [r7]
 8003784:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80037e8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8003788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800378c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003790:	d801      	bhi.n	8003796 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8003792:	2307      	movs	r3, #7
 8003794:	e016      	b.n	80037c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003796:	edd7 7a00 	vldr	s15, [r7]
 800379a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80037ec <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800379e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a6:	d801      	bhi.n	80037ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80037a8:	2308      	movs	r3, #8
 80037aa:	e00b      	b.n	80037c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80037ac:	edd7 7a00 	vldr	s15, [r7]
 80037b0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80037f0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80037b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037bc:	d801      	bhi.n	80037c2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80037be:	2309      	movs	r3, #9
 80037c0:	e000      	b.n	80037c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80037c2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
                 : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
                 :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	42500000 	.word	0x42500000
 80037dc:	42d00000 	.word	0x42d00000
 80037e0:	43500000 	.word	0x43500000
 80037e4:	43d08000 	.word	0x43d08000
 80037e8:	44504000 	.word	0x44504000
 80037ec:	44d06000 	.word	0x44d06000
 80037f0:	45505000 	.word	0x45505000

080037f4 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	461a      	mov	r2, r3
 8003800:	460b      	mov	r3, r1
 8003802:	72fb      	strb	r3, [r7, #11]
 8003804:	4613      	mov	r3, r2
 8003806:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	695c      	ldr	r4, [r3, #20]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	7b1b      	ldrb	r3, [r3, #12]
 8003814:	4618      	mov	r0, r3
 8003816:	7afb      	ldrb	r3, [r7, #11]
 8003818:	b299      	uxth	r1, r3
 800381a:	893b      	ldrh	r3, [r7, #8]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	47a0      	blx	r4
 8003820:	4603      	mov	r3, r0
}
 8003822:	4618      	mov	r0, r3
 8003824:	371c      	adds	r7, #28
 8003826:	46bd      	mov	sp, r7
 8003828:	bd90      	pop	{r4, r7, pc}

0800382a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800382a:	b590      	push	{r4, r7, lr}
 800382c:	b087      	sub	sp, #28
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	461a      	mov	r2, r3
 8003836:	460b      	mov	r3, r1
 8003838:	72fb      	strb	r3, [r7, #11]
 800383a:	4613      	mov	r3, r2
 800383c:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	691c      	ldr	r4, [r3, #16]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	7b1b      	ldrb	r3, [r3, #12]
 800384a:	4618      	mov	r0, r3
 800384c:	7afb      	ldrb	r3, [r7, #11]
 800384e:	b299      	uxth	r1, r3
 8003850:	893b      	ldrh	r3, [r7, #8]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	47a0      	blx	r4
 8003856:	4603      	mov	r3, r0
}
 8003858:	4618      	mov	r0, r3
 800385a:	371c      	adds	r7, #28
 800385c:	46bd      	mov	sp, r7
 800385e:	bd90      	pop	{r4, r7, pc}

08003860 <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	461a      	mov	r2, r3
 800386c:	460b      	mov	r3, r1
 800386e:	72fb      	strb	r3, [r7, #11]
 8003870:	4613      	mov	r3, r2
 8003872:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	685c      	ldr	r4, [r3, #4]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6898      	ldr	r0, [r3, #8]
 800387c:	893b      	ldrh	r3, [r7, #8]
 800387e:	7af9      	ldrb	r1, [r7, #11]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	47a0      	blx	r4
 8003884:	6178      	str	r0, [r7, #20]
  return ret;
 8003886:	697b      	ldr	r3, [r7, #20]
}
 8003888:	4618      	mov	r0, r3
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	bd90      	pop	{r4, r7, pc}

08003890 <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 8003890:	b590      	push	{r4, r7, lr}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	461a      	mov	r2, r3
 800389c:	460b      	mov	r3, r1
 800389e:	72fb      	strb	r3, [r7, #11]
 80038a0:	4613      	mov	r3, r2
 80038a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681c      	ldr	r4, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6898      	ldr	r0, [r3, #8]
 80038ac:	893b      	ldrh	r3, [r7, #8]
 80038ae:	7af9      	ldrb	r1, [r7, #11]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	47a0      	blx	r4
 80038b4:	6178      	str	r0, [r7, #20]
  return ret;
 80038b6:	697b      	ldr	r3, [r7, #20]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd90      	pop	{r4, r7, pc}

080038c0 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80038cc:	f107 0208 	add.w	r2, r7, #8
 80038d0:	2301      	movs	r3, #1
 80038d2:	2110      	movs	r1, #16
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff ffc3 	bl	8003860 <ism330dhcx_read_reg>
 80038da:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0) {
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10f      	bne.n	8003902 <ism330dhcx_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	7a3b      	ldrb	r3, [r7, #8]
 80038ec:	f362 0383 	bfi	r3, r2, #2, #2
 80038f0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 80038f2:	f107 0208 	add.w	r2, r7, #8
 80038f6:	2301      	movs	r3, #1
 80038f8:	2110      	movs	r1, #16
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ffc8 	bl	8003890 <ism330dhcx_write_reg>
 8003900:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003902:	68fb      	ldr	r3, [r7, #12]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003916:	f107 0208 	add.w	r2, r7, #8
 800391a:	2301      	movs	r3, #1
 800391c:	2110      	movs	r1, #16
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff ff9e 	bl	8003860 <ism330dhcx_read_reg>
 8003924:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl) {
 8003926:	7a3b      	ldrb	r3, [r7, #8]
 8003928:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b03      	cmp	r3, #3
 8003930:	d81a      	bhi.n	8003968 <ism330dhcx_xl_full_scale_get+0x5c>
 8003932:	a201      	add	r2, pc, #4	@ (adr r2, 8003938 <ism330dhcx_xl_full_scale_get+0x2c>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	08003949 	.word	0x08003949
 800393c:	08003951 	.word	0x08003951
 8003940:	08003959 	.word	0x08003959
 8003944:	08003961 	.word	0x08003961
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
      break;
 800394e:	e00f      	b.n	8003970 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2201      	movs	r2, #1
 8003954:	701a      	strb	r2, [r3, #0]
      break;
 8003956:	e00b      	b.n	8003970 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2202      	movs	r2, #2
 800395c:	701a      	strb	r2, [r3, #0]
      break;
 800395e:	e007      	b.n	8003970 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2203      	movs	r2, #3
 8003964:	701a      	strb	r2, [r3, #0]
      break;
 8003966:	e003      	b.n	8003970 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2200      	movs	r2, #0
 800396c:	701a      	strb	r2, [r3, #0]
      break;
 800396e:	bf00      	nop
  }

  return ret;
 8003970:	68fb      	ldr	r3, [r7, #12]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop

0800397c <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 800398c:	f107 030c 	add.w	r3, r7, #12
 8003990:	4619      	mov	r1, r3
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fd91 	bl	80044ba <ism330dhcx_fsm_enable_get>
 8003998:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	f040 80c4 	bne.w	8003b2a <ism330dhcx_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80039a2:	7b3b      	ldrb	r3, [r7, #12]
 80039a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80039a8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80039aa:	7b3b      	ldrb	r3, [r7, #12]
 80039ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80039b0:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80039b2:	4313      	orrs	r3, r2
 80039b4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80039b6:	7b3b      	ldrb	r3, [r7, #12]
 80039b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80039bc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80039be:	4313      	orrs	r3, r2
 80039c0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80039c2:	7b3b      	ldrb	r3, [r7, #12]
 80039c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80039c8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80039ca:	4313      	orrs	r3, r2
 80039cc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80039ce:	7b3b      	ldrb	r3, [r7, #12]
 80039d0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80039d4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80039d6:	4313      	orrs	r3, r2
 80039d8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80039da:	7b3b      	ldrb	r3, [r7, #12]
 80039dc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80039e0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80039e2:	4313      	orrs	r3, r2
 80039e4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80039e6:	7b3b      	ldrb	r3, [r7, #12]
 80039e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80039ec:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80039ee:	4313      	orrs	r3, r2
 80039f0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80039f2:	7b3b      	ldrb	r3, [r7, #12]
 80039f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80039f8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80039fa:	4313      	orrs	r3, r2
 80039fc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80039fe:	7b7b      	ldrb	r3, [r7, #13]
 8003a00:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a04:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003a06:	4313      	orrs	r3, r2
 8003a08:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003a0a:	7b7b      	ldrb	r3, [r7, #13]
 8003a0c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003a10:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003a12:	4313      	orrs	r3, r2
 8003a14:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003a16:	7b7b      	ldrb	r3, [r7, #13]
 8003a18:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003a1c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003a22:	7b7b      	ldrb	r3, [r7, #13]
 8003a24:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003a28:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003a2e:	7b7b      	ldrb	r3, [r7, #13]
 8003a30:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003a34:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003a36:	4313      	orrs	r3, r2
 8003a38:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8003a3a:	7b7b      	ldrb	r3, [r7, #13]
 8003a3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003a40:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003a42:	4313      	orrs	r3, r2
 8003a44:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8003a46:	7b7b      	ldrb	r3, [r7, #13]
 8003a48:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003a4c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8003a52:	7b7b      	ldrb	r3, [r7, #13]
 8003a54:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003a58:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d163      	bne.n	8003b2a <ism330dhcx_xl_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8003a62:	f107 030b 	add.w	r3, r7, #11
 8003a66:	4619      	mov	r1, r3
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fd53 	bl	8004514 <ism330dhcx_fsm_data_rate_get>
 8003a6e:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d159      	bne.n	8003b2a <ism330dhcx_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8003a76:	7afb      	ldrb	r3, [r7, #11]
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d853      	bhi.n	8003b24 <ism330dhcx_xl_data_rate_set+0x1a8>
 8003a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a84 <ism330dhcx_xl_data_rate_set+0x108>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	08003a95 	.word	0x08003a95
 8003a88:	08003aa7 	.word	0x08003aa7
 8003a8c:	08003ac5 	.word	0x08003ac5
 8003a90:	08003aef 	.word	0x08003aef
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d102      	bne.n	8003aa0 <ism330dhcx_xl_data_rate_set+0x124>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003a9e:	e044      	b.n	8003b2a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	75fb      	strb	r3, [r7, #23]
            break;
 8003aa4:	e041      	b.n	8003b2a <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d102      	bne.n	8003ab2 <ism330dhcx_xl_data_rate_set+0x136>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003aac:	2302      	movs	r3, #2
 8003aae:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003ab0:	e03b      	b.n	8003b2a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d102      	bne.n	8003abe <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003ab8:	2302      	movs	r3, #2
 8003aba:	75fb      	strb	r3, [r7, #23]
            break;
 8003abc:	e035      	b.n	8003b2a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	75fb      	strb	r3, [r7, #23]
            break;
 8003ac2:	e032      	b.n	8003b2a <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d102      	bne.n	8003ad0 <ism330dhcx_xl_data_rate_set+0x154>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003aca:	2303      	movs	r3, #3
 8003acc:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003ace:	e02c      	b.n	8003b2a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d102      	bne.n	8003adc <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	75fb      	strb	r3, [r7, #23]
            break;
 8003ada:	e026      	b.n	8003b2a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d102      	bne.n	8003ae8 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	75fb      	strb	r3, [r7, #23]
            break;
 8003ae6:	e020      	b.n	8003b2a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	75fb      	strb	r3, [r7, #23]
            break;
 8003aec:	e01d      	b.n	8003b2a <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d102      	bne.n	8003afa <ism330dhcx_xl_data_rate_set+0x17e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003af4:	2304      	movs	r3, #4
 8003af6:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003af8:	e017      	b.n	8003b2a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d102      	bne.n	8003b06 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003b00:	2304      	movs	r3, #4
 8003b02:	75fb      	strb	r3, [r7, #23]
            break;
 8003b04:	e011      	b.n	8003b2a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d102      	bne.n	8003b12 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003b0c:	2304      	movs	r3, #4
 8003b0e:	75fb      	strb	r3, [r7, #23]
            break;
 8003b10:	e00b      	b.n	8003b2a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8003b12:	78fb      	ldrb	r3, [r7, #3]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d102      	bne.n	8003b1e <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003b18:	2304      	movs	r3, #4
 8003b1a:	75fb      	strb	r3, [r7, #23]
            break;
 8003b1c:	e005      	b.n	8003b2a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	75fb      	strb	r3, [r7, #23]
            break;
 8003b22:	e002      	b.n	8003b2a <ism330dhcx_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	75fb      	strb	r3, [r7, #23]
            break;
 8003b28:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d16c      	bne.n	8003c0e <ism330dhcx_xl_data_rate_set+0x292>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8003b34:	f107 030a 	add.w	r3, r7, #10
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fd32 	bl	80045a4 <ism330dhcx_mlc_get>
 8003b40:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 8003b42:	7abb      	ldrb	r3, [r7, #10]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d162      	bne.n	8003c0e <ism330dhcx_xl_data_rate_set+0x292>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8003b48:	f107 0309 	add.w	r3, r7, #9
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fd52 	bl	80045f8 <ism330dhcx_mlc_data_rate_get>
 8003b54:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d158      	bne.n	8003c0e <ism330dhcx_xl_data_rate_set+0x292>
        switch (mlc_odr) {
 8003b5c:	7a7b      	ldrb	r3, [r7, #9]
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d852      	bhi.n	8003c08 <ism330dhcx_xl_data_rate_set+0x28c>
 8003b62:	a201      	add	r2, pc, #4	@ (adr r2, 8003b68 <ism330dhcx_xl_data_rate_set+0x1ec>)
 8003b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b68:	08003b79 	.word	0x08003b79
 8003b6c:	08003b8b 	.word	0x08003b8b
 8003b70:	08003ba9 	.word	0x08003ba9
 8003b74:	08003bd3 	.word	0x08003bd3
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <ism330dhcx_xl_data_rate_set+0x208>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003b82:	e044      	b.n	8003c0e <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	75fb      	strb	r3, [r7, #23]
            break;
 8003b88:	e041      	b.n	8003c0e <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <ism330dhcx_xl_data_rate_set+0x21a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003b90:	2302      	movs	r3, #2
 8003b92:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003b94:	e03b      	b.n	8003c0e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003b96:	78fb      	ldrb	r3, [r7, #3]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d102      	bne.n	8003ba2 <ism330dhcx_xl_data_rate_set+0x226>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	75fb      	strb	r3, [r7, #23]
            break;
 8003ba0:	e035      	b.n	8003c0e <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003ba2:	78fb      	ldrb	r3, [r7, #3]
 8003ba4:	75fb      	strb	r3, [r7, #23]
            break;
 8003ba6:	e032      	b.n	8003c0e <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <ism330dhcx_xl_data_rate_set+0x238>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003bb2:	e02c      	b.n	8003c0e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d102      	bne.n	8003bc0 <ism330dhcx_xl_data_rate_set+0x244>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	75fb      	strb	r3, [r7, #23]
            break;
 8003bbe:	e026      	b.n	8003c0e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d102      	bne.n	8003bcc <ism330dhcx_xl_data_rate_set+0x250>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	75fb      	strb	r3, [r7, #23]
            break;
 8003bca:	e020      	b.n	8003c0e <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	75fb      	strb	r3, [r7, #23]
            break;
 8003bd0:	e01d      	b.n	8003c0e <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d102      	bne.n	8003bde <ism330dhcx_xl_data_rate_set+0x262>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003bd8:	2304      	movs	r3, #4
 8003bda:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003bdc:	e017      	b.n	8003c0e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d102      	bne.n	8003bea <ism330dhcx_xl_data_rate_set+0x26e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003be4:	2304      	movs	r3, #4
 8003be6:	75fb      	strb	r3, [r7, #23]
            break;
 8003be8:	e011      	b.n	8003c0e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d102      	bne.n	8003bf6 <ism330dhcx_xl_data_rate_set+0x27a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	75fb      	strb	r3, [r7, #23]
            break;
 8003bf4:	e00b      	b.n	8003c0e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d102      	bne.n	8003c02 <ism330dhcx_xl_data_rate_set+0x286>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	75fb      	strb	r3, [r7, #23]
            break;
 8003c00:	e005      	b.n	8003c0e <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	75fb      	strb	r3, [r7, #23]
            break;
 8003c06:	e002      	b.n	8003c0e <ism330dhcx_xl_data_rate_set+0x292>

          default:
            odr_xl = val;
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	75fb      	strb	r3, [r7, #23]
            break;
 8003c0c:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0) {
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d107      	bne.n	8003c24 <ism330dhcx_xl_data_rate_set+0x2a8>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003c14:	f107 0208 	add.w	r2, r7, #8
 8003c18:	2301      	movs	r3, #1
 8003c1a:	2110      	movs	r1, #16
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff fe1f 	bl	8003860 <ism330dhcx_read_reg>
 8003c22:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0) {
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10f      	bne.n	8003c4a <ism330dhcx_xl_data_rate_set+0x2ce>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	7a3b      	ldrb	r3, [r7, #8]
 8003c34:	f362 1307 	bfi	r3, r2, #4, #4
 8003c38:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003c3a:	f107 0208 	add.w	r2, r7, #8
 8003c3e:	2301      	movs	r3, #1
 8003c40:	2110      	movs	r1, #16
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff fe24 	bl	8003890 <ism330dhcx_write_reg>
 8003c48:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003c4a:	693b      	ldr	r3, [r7, #16]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003c5e:	f107 0208 	add.w	r2, r7, #8
 8003c62:	2301      	movs	r3, #1
 8003c64:	2110      	movs	r1, #16
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff fdfa 	bl	8003860 <ism330dhcx_read_reg>
 8003c6c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl) {
 8003c6e:	7a3b      	ldrb	r3, [r7, #8]
 8003c70:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b0b      	cmp	r3, #11
 8003c78:	d84a      	bhi.n	8003d10 <ism330dhcx_xl_data_rate_get+0xbc>
 8003c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c80 <ism330dhcx_xl_data_rate_get+0x2c>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003cb1 	.word	0x08003cb1
 8003c84:	08003cb9 	.word	0x08003cb9
 8003c88:	08003cc1 	.word	0x08003cc1
 8003c8c:	08003cc9 	.word	0x08003cc9
 8003c90:	08003cd1 	.word	0x08003cd1
 8003c94:	08003cd9 	.word	0x08003cd9
 8003c98:	08003ce1 	.word	0x08003ce1
 8003c9c:	08003ce9 	.word	0x08003ce9
 8003ca0:	08003cf1 	.word	0x08003cf1
 8003ca4:	08003cf9 	.word	0x08003cf9
 8003ca8:	08003d01 	.word	0x08003d01
 8003cac:	08003d09 	.word	0x08003d09
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	701a      	strb	r2, [r3, #0]
      break;
 8003cb6:	e02f      	b.n	8003d18 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	701a      	strb	r2, [r3, #0]
      break;
 8003cbe:	e02b      	b.n	8003d18 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	701a      	strb	r2, [r3, #0]
      break;
 8003cc6:	e027      	b.n	8003d18 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2203      	movs	r2, #3
 8003ccc:	701a      	strb	r2, [r3, #0]
      break;
 8003cce:	e023      	b.n	8003d18 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	701a      	strb	r2, [r3, #0]
      break;
 8003cd6:	e01f      	b.n	8003d18 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2205      	movs	r2, #5
 8003cdc:	701a      	strb	r2, [r3, #0]
      break;
 8003cde:	e01b      	b.n	8003d18 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_417Hz:
      *val = ISM330DHCX_XL_ODR_417Hz;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2206      	movs	r2, #6
 8003ce4:	701a      	strb	r2, [r3, #0]
      break;
 8003ce6:	e017      	b.n	8003d18 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2207      	movs	r2, #7
 8003cec:	701a      	strb	r2, [r3, #0]
      break;
 8003cee:	e013      	b.n	8003d18 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1667Hz:
      *val = ISM330DHCX_XL_ODR_1667Hz;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2208      	movs	r2, #8
 8003cf4:	701a      	strb	r2, [r3, #0]
      break;
 8003cf6:	e00f      	b.n	8003d18 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3333Hz:
      *val = ISM330DHCX_XL_ODR_3333Hz;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2209      	movs	r2, #9
 8003cfc:	701a      	strb	r2, [r3, #0]
      break;
 8003cfe:	e00b      	b.n	8003d18 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	220a      	movs	r2, #10
 8003d04:	701a      	strb	r2, [r3, #0]
      break;
 8003d06:	e007      	b.n	8003d18 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6Hz5:
      *val = ISM330DHCX_XL_ODR_6Hz5;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	220b      	movs	r2, #11
 8003d0c:	701a      	strb	r2, [r3, #0]
      break;
 8003d0e:	e003      	b.n	8003d18 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2200      	movs	r2, #0
 8003d14:	701a      	strb	r2, [r3, #0]
      break;
 8003d16:	bf00      	nop
  }

  return ret;
 8003d18:	68fb      	ldr	r3, [r7, #12]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop

08003d24 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8003d30:	f107 0208 	add.w	r2, r7, #8
 8003d34:	2301      	movs	r3, #1
 8003d36:	2111      	movs	r1, #17
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff fd91 	bl	8003860 <ism330dhcx_read_reg>
 8003d3e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0) {
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10f      	bne.n	8003d66 <ism330dhcx_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	7a3b      	ldrb	r3, [r7, #8]
 8003d50:	f362 0303 	bfi	r3, r2, #0, #4
 8003d54:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8003d56:	f107 0208 	add.w	r2, r7, #8
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	2111      	movs	r1, #17
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff fd96 	bl	8003890 <ism330dhcx_write_reg>
 8003d64:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8003d66:	68fb      	ldr	r3, [r7, #12]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8003d7a:	f107 0208 	add.w	r2, r7, #8
 8003d7e:	2301      	movs	r3, #1
 8003d80:	2111      	movs	r1, #17
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff fd6c 	bl	8003860 <ism330dhcx_read_reg>
 8003d88:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g) {
 8003d8a:	7a3b      	ldrb	r3, [r7, #8]
 8003d8c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d834      	bhi.n	8003e00 <ism330dhcx_gy_full_scale_get+0x90>
 8003d96:	a201      	add	r2, pc, #4	@ (adr r2, 8003d9c <ism330dhcx_gy_full_scale_get+0x2c>)
 8003d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9c:	08003dd9 	.word	0x08003dd9
 8003da0:	08003df9 	.word	0x08003df9
 8003da4:	08003dd1 	.word	0x08003dd1
 8003da8:	08003e01 	.word	0x08003e01
 8003dac:	08003de1 	.word	0x08003de1
 8003db0:	08003e01 	.word	0x08003e01
 8003db4:	08003e01 	.word	0x08003e01
 8003db8:	08003e01 	.word	0x08003e01
 8003dbc:	08003de9 	.word	0x08003de9
 8003dc0:	08003e01 	.word	0x08003e01
 8003dc4:	08003e01 	.word	0x08003e01
 8003dc8:	08003e01 	.word	0x08003e01
 8003dcc:	08003df1 	.word	0x08003df1
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	701a      	strb	r2, [r3, #0]
      break;
 8003dd6:	e017      	b.n	8003e08 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	701a      	strb	r2, [r3, #0]
      break;
 8003dde:	e013      	b.n	8003e08 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2204      	movs	r2, #4
 8003de4:	701a      	strb	r2, [r3, #0]
      break;
 8003de6:	e00f      	b.n	8003e08 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2208      	movs	r2, #8
 8003dec:	701a      	strb	r2, [r3, #0]
      break;
 8003dee:	e00b      	b.n	8003e08 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	220c      	movs	r2, #12
 8003df4:	701a      	strb	r2, [r3, #0]
      break;
 8003df6:	e007      	b.n	8003e08 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]
      break;
 8003dfe:	e003      	b.n	8003e08 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2202      	movs	r2, #2
 8003e04:	701a      	strb	r2, [r3, #0]
      break;
 8003e06:	bf00      	nop
  }

  return ret;
 8003e08:	68fb      	ldr	r3, [r7, #12]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop

08003e14 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8003e24:	f107 030c 	add.w	r3, r7, #12
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fb45 	bl	80044ba <ism330dhcx_fsm_enable_get>
 8003e30:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f040 80c4 	bne.w	8003fc2 <ism330dhcx_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003e3a:	7b3b      	ldrb	r3, [r7, #12]
 8003e3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003e40:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8003e42:	7b3b      	ldrb	r3, [r7, #12]
 8003e44:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003e48:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8003e4e:	7b3b      	ldrb	r3, [r7, #12]
 8003e50:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003e54:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8003e56:	4313      	orrs	r3, r2
 8003e58:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003e5a:	7b3b      	ldrb	r3, [r7, #12]
 8003e5c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003e60:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8003e62:	4313      	orrs	r3, r2
 8003e64:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003e66:	7b3b      	ldrb	r3, [r7, #12]
 8003e68:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e6c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8003e72:	7b3b      	ldrb	r3, [r7, #12]
 8003e74:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003e78:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8003e7e:	7b3b      	ldrb	r3, [r7, #12]
 8003e80:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003e84:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8003e86:	4313      	orrs	r3, r2
 8003e88:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003e8a:	7b3b      	ldrb	r3, [r7, #12]
 8003e8c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003e90:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8003e92:	4313      	orrs	r3, r2
 8003e94:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003e96:	7b7b      	ldrb	r3, [r7, #13]
 8003e98:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003e9c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003ea2:	7b7b      	ldrb	r3, [r7, #13]
 8003ea4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ea8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003eae:	7b7b      	ldrb	r3, [r7, #13]
 8003eb0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003eb4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003eba:	7b7b      	ldrb	r3, [r7, #13]
 8003ebc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003ec0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003ec6:	7b7b      	ldrb	r3, [r7, #13]
 8003ec8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003ecc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8003ed2:	7b7b      	ldrb	r3, [r7, #13]
 8003ed4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003ed8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003eda:	4313      	orrs	r3, r2
 8003edc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8003ede:	7b7b      	ldrb	r3, [r7, #13]
 8003ee0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003ee4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8003eea:	7b7b      	ldrb	r3, [r7, #13]
 8003eec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003ef0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d163      	bne.n	8003fc2 <ism330dhcx_gy_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8003efa:	f107 030b 	add.w	r3, r7, #11
 8003efe:	4619      	mov	r1, r3
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fb07 	bl	8004514 <ism330dhcx_fsm_data_rate_get>
 8003f06:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d159      	bne.n	8003fc2 <ism330dhcx_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8003f0e:	7afb      	ldrb	r3, [r7, #11]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d853      	bhi.n	8003fbc <ism330dhcx_gy_data_rate_set+0x1a8>
 8003f14:	a201      	add	r2, pc, #4	@ (adr r2, 8003f1c <ism330dhcx_gy_data_rate_set+0x108>)
 8003f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1a:	bf00      	nop
 8003f1c:	08003f2d 	.word	0x08003f2d
 8003f20:	08003f3f 	.word	0x08003f3f
 8003f24:	08003f5d 	.word	0x08003f5d
 8003f28:	08003f87 	.word	0x08003f87
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d102      	bne.n	8003f38 <ism330dhcx_gy_data_rate_set+0x124>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8003f32:	2301      	movs	r3, #1
 8003f34:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003f36:	e044      	b.n	8003fc2 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8003f38:	78fb      	ldrb	r3, [r7, #3]
 8003f3a:	75fb      	strb	r3, [r7, #23]
            break;
 8003f3c:	e041      	b.n	8003fc2 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <ism330dhcx_gy_data_rate_set+0x136>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8003f44:	2302      	movs	r3, #2
 8003f46:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003f48:	e03b      	b.n	8003fc2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8003f4a:	78fb      	ldrb	r3, [r7, #3]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d102      	bne.n	8003f56 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8003f50:	2302      	movs	r3, #2
 8003f52:	75fb      	strb	r3, [r7, #23]
            break;
 8003f54:	e035      	b.n	8003fc2 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	75fb      	strb	r3, [r7, #23]
            break;
 8003f5a:	e032      	b.n	8003fc2 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d102      	bne.n	8003f68 <ism330dhcx_gy_data_rate_set+0x154>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003f62:	2303      	movs	r3, #3
 8003f64:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003f66:	e02c      	b.n	8003fc2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d102      	bne.n	8003f74 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	75fb      	strb	r3, [r7, #23]
            break;
 8003f72:	e026      	b.n	8003fc2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d102      	bne.n	8003f80 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	75fb      	strb	r3, [r7, #23]
            break;
 8003f7e:	e020      	b.n	8003fc2 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	75fb      	strb	r3, [r7, #23]
            break;
 8003f84:	e01d      	b.n	8003fc2 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d102      	bne.n	8003f92 <ism330dhcx_gy_data_rate_set+0x17e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003f90:	e017      	b.n	8003fc2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d102      	bne.n	8003f9e <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003f98:	2304      	movs	r3, #4
 8003f9a:	75fb      	strb	r3, [r7, #23]
            break;
 8003f9c:	e011      	b.n	8003fc2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d102      	bne.n	8003faa <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003fa4:	2304      	movs	r3, #4
 8003fa6:	75fb      	strb	r3, [r7, #23]
            break;
 8003fa8:	e00b      	b.n	8003fc2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d102      	bne.n	8003fb6 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	75fb      	strb	r3, [r7, #23]
            break;
 8003fb4:	e005      	b.n	8003fc2 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8003fb6:	78fb      	ldrb	r3, [r7, #3]
 8003fb8:	75fb      	strb	r3, [r7, #23]
            break;
 8003fba:	e002      	b.n	8003fc2 <ism330dhcx_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	75fb      	strb	r3, [r7, #23]
            break;
 8003fc0:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d16c      	bne.n	80040a6 <ism330dhcx_gy_data_rate_set+0x292>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8003fcc:	f107 030a 	add.w	r3, r7, #10
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fae6 	bl	80045a4 <ism330dhcx_mlc_get>
 8003fd8:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 8003fda:	7abb      	ldrb	r3, [r7, #10]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d162      	bne.n	80040a6 <ism330dhcx_gy_data_rate_set+0x292>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8003fe0:	f107 0309 	add.w	r3, r7, #9
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fb06 	bl	80045f8 <ism330dhcx_mlc_data_rate_get>
 8003fec:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d158      	bne.n	80040a6 <ism330dhcx_gy_data_rate_set+0x292>
        switch (mlc_odr) {
 8003ff4:	7a7b      	ldrb	r3, [r7, #9]
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d852      	bhi.n	80040a0 <ism330dhcx_gy_data_rate_set+0x28c>
 8003ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8004000 <ism330dhcx_gy_data_rate_set+0x1ec>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	08004011 	.word	0x08004011
 8004004:	08004023 	.word	0x08004023
 8004008:	08004041 	.word	0x08004041
 800400c:	0800406b 	.word	0x0800406b
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d102      	bne.n	800401c <ism330dhcx_gy_data_rate_set+0x208>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8004016:	2301      	movs	r3, #1
 8004018:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800401a:	e044      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	75fb      	strb	r3, [r7, #23]
            break;
 8004020:	e041      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <ism330dhcx_gy_data_rate_set+0x21a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004028:	2302      	movs	r3, #2
 800402a:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800402c:	e03b      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 800402e:	78fb      	ldrb	r3, [r7, #3]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d102      	bne.n	800403a <ism330dhcx_gy_data_rate_set+0x226>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004034:	2302      	movs	r3, #2
 8004036:	75fb      	strb	r3, [r7, #23]
            break;
 8004038:	e035      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 800403a:	78fb      	ldrb	r3, [r7, #3]
 800403c:	75fb      	strb	r3, [r7, #23]
            break;
 800403e:	e032      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004040:	78fb      	ldrb	r3, [r7, #3]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d102      	bne.n	800404c <ism330dhcx_gy_data_rate_set+0x238>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004046:	2303      	movs	r3, #3
 8004048:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800404a:	e02c      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d102      	bne.n	8004058 <ism330dhcx_gy_data_rate_set+0x244>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004052:	2303      	movs	r3, #3
 8004054:	75fb      	strb	r3, [r7, #23]
            break;
 8004056:	e026      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d102      	bne.n	8004064 <ism330dhcx_gy_data_rate_set+0x250>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800405e:	2303      	movs	r3, #3
 8004060:	75fb      	strb	r3, [r7, #23]
            break;
 8004062:	e020      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	75fb      	strb	r3, [r7, #23]
            break;
 8004068:	e01d      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 800406a:	78fb      	ldrb	r3, [r7, #3]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d102      	bne.n	8004076 <ism330dhcx_gy_data_rate_set+0x262>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004070:	2304      	movs	r3, #4
 8004072:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004074:	e017      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d102      	bne.n	8004082 <ism330dhcx_gy_data_rate_set+0x26e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800407c:	2304      	movs	r3, #4
 800407e:	75fb      	strb	r3, [r7, #23]
            break;
 8004080:	e011      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d102      	bne.n	800408e <ism330dhcx_gy_data_rate_set+0x27a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004088:	2304      	movs	r3, #4
 800408a:	75fb      	strb	r3, [r7, #23]
            break;
 800408c:	e00b      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	2b03      	cmp	r3, #3
 8004092:	d102      	bne.n	800409a <ism330dhcx_gy_data_rate_set+0x286>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004094:	2304      	movs	r3, #4
 8004096:	75fb      	strb	r3, [r7, #23]
            break;
 8004098:	e005      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	75fb      	strb	r3, [r7, #23]
            break;
 800409e:	e002      	b.n	80040a6 <ism330dhcx_gy_data_rate_set+0x292>

          default:
            odr_gy = val;
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	75fb      	strb	r3, [r7, #23]
            break;
 80040a4:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0) {
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d107      	bne.n	80040bc <ism330dhcx_gy_data_rate_set+0x2a8>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80040ac:	f107 0208 	add.w	r2, r7, #8
 80040b0:	2301      	movs	r3, #1
 80040b2:	2111      	movs	r1, #17
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff fbd3 	bl	8003860 <ism330dhcx_read_reg>
 80040ba:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0) {
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10f      	bne.n	80040e2 <ism330dhcx_gy_data_rate_set+0x2ce>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80040c2:	7dfb      	ldrb	r3, [r7, #23]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	7a3b      	ldrb	r3, [r7, #8]
 80040cc:	f362 1307 	bfi	r3, r2, #4, #4
 80040d0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 80040d2:	f107 0208 	add.w	r2, r7, #8
 80040d6:	2301      	movs	r3, #1
 80040d8:	2111      	movs	r1, #17
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff fbd8 	bl	8003890 <ism330dhcx_write_reg>
 80040e0:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 80040e2:	693b      	ldr	r3, [r7, #16]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80040f6:	f107 0208 	add.w	r2, r7, #8
 80040fa:	2301      	movs	r3, #1
 80040fc:	2111      	movs	r1, #17
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff fbae 	bl	8003860 <ism330dhcx_read_reg>
 8004104:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g) {
 8004106:	7a3b      	ldrb	r3, [r7, #8]
 8004108:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b0a      	cmp	r3, #10
 8004110:	d844      	bhi.n	800419c <ism330dhcx_gy_data_rate_get+0xb0>
 8004112:	a201      	add	r2, pc, #4	@ (adr r2, 8004118 <ism330dhcx_gy_data_rate_get+0x2c>)
 8004114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004118:	08004145 	.word	0x08004145
 800411c:	0800414d 	.word	0x0800414d
 8004120:	08004155 	.word	0x08004155
 8004124:	0800415d 	.word	0x0800415d
 8004128:	08004165 	.word	0x08004165
 800412c:	0800416d 	.word	0x0800416d
 8004130:	08004175 	.word	0x08004175
 8004134:	0800417d 	.word	0x0800417d
 8004138:	08004185 	.word	0x08004185
 800413c:	0800418d 	.word	0x0800418d
 8004140:	08004195 	.word	0x08004195
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]
      break;
 800414a:	e02b      	b.n	80041a4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
      break;
 8004152:	e027      	b.n	80041a4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2202      	movs	r2, #2
 8004158:	701a      	strb	r2, [r3, #0]
      break;
 800415a:	e023      	b.n	80041a4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2203      	movs	r2, #3
 8004160:	701a      	strb	r2, [r3, #0]
      break;
 8004162:	e01f      	b.n	80041a4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2204      	movs	r2, #4
 8004168:	701a      	strb	r2, [r3, #0]
      break;
 800416a:	e01b      	b.n	80041a4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2205      	movs	r2, #5
 8004170:	701a      	strb	r2, [r3, #0]
      break;
 8004172:	e017      	b.n	80041a4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_417Hz:
      *val = ISM330DHCX_GY_ODR_417Hz;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2206      	movs	r2, #6
 8004178:	701a      	strb	r2, [r3, #0]
      break;
 800417a:	e013      	b.n	80041a4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2207      	movs	r2, #7
 8004180:	701a      	strb	r2, [r3, #0]
      break;
 8004182:	e00f      	b.n	80041a4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1667Hz:
      *val = ISM330DHCX_GY_ODR_1667Hz;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2208      	movs	r2, #8
 8004188:	701a      	strb	r2, [r3, #0]
      break;
 800418a:	e00b      	b.n	80041a4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3333Hz:
      *val = ISM330DHCX_GY_ODR_3333Hz;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2209      	movs	r2, #9
 8004190:	701a      	strb	r2, [r3, #0]
      break;
 8004192:	e007      	b.n	80041a4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	220a      	movs	r2, #10
 8004198:	701a      	strb	r2, [r3, #0]
      break;
 800419a:	e003      	b.n	80041a4 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2200      	movs	r2, #0
 80041a0:	701a      	strb	r2, [r3, #0]
      break;
 80041a2:	bf00      	nop
  }

  return ret;
 80041a4:	68fb      	ldr	r3, [r7, #12]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop

080041b0 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80041bc:	f107 0208 	add.w	r2, r7, #8
 80041c0:	2301      	movs	r3, #1
 80041c2:	2112      	movs	r1, #18
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff fb4b 	bl	8003860 <ism330dhcx_read_reg>
 80041ca:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <ism330dhcx_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	7a3b      	ldrb	r3, [r7, #8]
 80041dc:	f362 1386 	bfi	r3, r2, #6, #1
 80041e0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80041e2:	f107 0208 	add.w	r2, r7, #8
 80041e6:	2301      	movs	r3, #1
 80041e8:	2112      	movs	r1, #18
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff fb50 	bl	8003890 <ism330dhcx_write_reg>
 80041f0:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80041f2:	68fb      	ldr	r3, [r7, #12]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8004206:	f107 020c 	add.w	r2, r7, #12
 800420a:	2306      	movs	r3, #6
 800420c:	2122      	movs	r1, #34	@ 0x22
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff fb26 	bl	8003860 <ism330dhcx_read_reg>
 8004214:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004216:	7b7b      	ldrb	r3, [r7, #13]
 8004218:	b21a      	sxth	r2, r3
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004224:	b29b      	uxth	r3, r3
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	b29b      	uxth	r3, r3
 800422a:	7b3a      	ldrb	r2, [r7, #12]
 800422c:	4413      	add	r3, r2
 800422e:	b29b      	uxth	r3, r3
 8004230:	b21a      	sxth	r2, r3
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004236:	7bfa      	ldrb	r2, [r7, #15]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	3302      	adds	r3, #2
 800423c:	b212      	sxth	r2, r2
 800423e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	3302      	adds	r3, #2
 8004244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004248:	b29b      	uxth	r3, r3
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	b29b      	uxth	r3, r3
 800424e:	7bba      	ldrb	r2, [r7, #14]
 8004250:	4413      	add	r3, r2
 8004252:	b29a      	uxth	r2, r3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	3302      	adds	r3, #2
 8004258:	b212      	sxth	r2, r2
 800425a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800425c:	7c7a      	ldrb	r2, [r7, #17]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	3304      	adds	r3, #4
 8004262:	b212      	sxth	r2, r2
 8004264:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	3304      	adds	r3, #4
 800426a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800426e:	b29b      	uxth	r3, r3
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	b29b      	uxth	r3, r3
 8004274:	7c3a      	ldrb	r2, [r7, #16]
 8004276:	4413      	add	r3, r2
 8004278:	b29a      	uxth	r2, r3
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	3304      	adds	r3, #4
 800427e:	b212      	sxth	r2, r2
 8004280:	801a      	strh	r2, [r3, #0]
  return ret;
 8004282:	697b      	ldr	r3, [r7, #20]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8004296:	f107 020c 	add.w	r2, r7, #12
 800429a:	2306      	movs	r3, #6
 800429c:	2128      	movs	r1, #40	@ 0x28
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff fade 	bl	8003860 <ism330dhcx_read_reg>
 80042a4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80042a6:	7b7b      	ldrb	r3, [r7, #13]
 80042a8:	b21a      	sxth	r2, r3
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	021b      	lsls	r3, r3, #8
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	7b3a      	ldrb	r2, [r7, #12]
 80042bc:	4413      	add	r3, r2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	b21a      	sxth	r2, r3
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80042c6:	7bfa      	ldrb	r2, [r7, #15]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	3302      	adds	r3, #2
 80042cc:	b212      	sxth	r2, r2
 80042ce:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	3302      	adds	r3, #2
 80042d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	b29b      	uxth	r3, r3
 80042de:	7bba      	ldrb	r2, [r7, #14]
 80042e0:	4413      	add	r3, r2
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	3302      	adds	r3, #2
 80042e8:	b212      	sxth	r2, r2
 80042ea:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80042ec:	7c7a      	ldrb	r2, [r7, #17]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	3304      	adds	r3, #4
 80042f2:	b212      	sxth	r2, r2
 80042f4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	3304      	adds	r3, #4
 80042fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	b29b      	uxth	r3, r3
 8004304:	7c3a      	ldrb	r2, [r7, #16]
 8004306:	4413      	add	r3, r2
 8004308:	b29a      	uxth	r2, r3
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	3304      	adds	r3, #4
 800430e:	b212      	sxth	r2, r2
 8004310:	801a      	strh	r2, [r3, #0]
  return ret;
 8004312:	697b      	ldr	r3, [r7, #20]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 8004328:	f107 0208 	add.w	r2, r7, #8
 800432c:	2301      	movs	r3, #1
 800432e:	2118      	movs	r1, #24
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff fa95 	bl	8003860 <ism330dhcx_read_reg>
 8004336:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0) {
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10f      	bne.n	800435e <ism330dhcx_device_conf_set+0x42>
    ctrl9_xl.device_conf = (uint8_t)val;
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	b2da      	uxtb	r2, r3
 8004346:	7a3b      	ldrb	r3, [r7, #8]
 8004348:	f362 0341 	bfi	r3, r2, #1, #1
 800434c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 800434e:	f107 0208 	add.w	r2, r7, #8
 8004352:	2301      	movs	r3, #1
 8004354:	2118      	movs	r1, #24
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff fa9a 	bl	8003890 <ism330dhcx_write_reg>
 800435c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 800435e:	68fb      	ldr	r3, [r7, #12]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8004374:	f107 0208 	add.w	r2, r7, #8
 8004378:	2301      	movs	r3, #1
 800437a:	2101      	movs	r1, #1
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff fa6f 	bl	8003860 <ism330dhcx_read_reg>
 8004382:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10f      	bne.n	80043aa <ism330dhcx_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	b2da      	uxtb	r2, r3
 8004392:	7a3b      	ldrb	r3, [r7, #8]
 8004394:	f362 1387 	bfi	r3, r2, #6, #2
 8004398:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 800439a:	f107 0208 	add.w	r2, r7, #8
 800439e:	2301      	movs	r3, #1
 80043a0:	2101      	movs	r1, #1
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff fa74 	bl	8003890 <ism330dhcx_write_reg>
 80043a8:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80043aa:	68fb      	ldr	r3, [r7, #12]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 80043be:	2301      	movs	r3, #1
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	210f      	movs	r1, #15
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff fa4b 	bl	8003860 <ism330dhcx_read_reg>
 80043ca:	60f8      	str	r0, [r7, #12]
  return ret;
 80043cc:	68fb      	ldr	r3, [r7, #12]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	460b      	mov	r3, r1
 80043e0:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80043e2:	f107 0208 	add.w	r2, r7, #8
 80043e6:	2301      	movs	r3, #1
 80043e8:	2112      	movs	r1, #18
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff fa38 	bl	8003860 <ism330dhcx_read_reg>
 80043f0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10f      	bne.n	8004418 <ism330dhcx_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	7a3b      	ldrb	r3, [r7, #8]
 8004402:	f362 0300 	bfi	r3, r2, #0, #1
 8004406:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8004408:	f107 0208 	add.w	r2, r7, #8
 800440c:	2301      	movs	r3, #1
 800440e:	2112      	movs	r1, #18
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff fa3d 	bl	8003890 <ism330dhcx_write_reg>
 8004416:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004418:	68fb      	ldr	r3, [r7, #12]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	460b      	mov	r3, r1
 800442c:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800442e:	f107 0208 	add.w	r2, r7, #8
 8004432:	2301      	movs	r3, #1
 8004434:	2112      	movs	r1, #18
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff fa12 	bl	8003860 <ism330dhcx_read_reg>
 800443c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10f      	bne.n	8004464 <ism330dhcx_auto_increment_set+0x42>
    ctrl3_c.if_inc = (uint8_t)val;
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	b2da      	uxtb	r2, r3
 800444c:	7a3b      	ldrb	r3, [r7, #8]
 800444e:	f362 0382 	bfi	r3, r2, #2, #1
 8004452:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8004454:	f107 0208 	add.w	r2, r7, #8
 8004458:	2301      	movs	r3, #1
 800445a:	2112      	movs	r1, #18
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff fa17 	bl	8003890 <ism330dhcx_write_reg>
 8004462:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004464:	68fb      	ldr	r3, [r7, #12]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b084      	sub	sp, #16
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	460b      	mov	r3, r1
 8004478:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 800447a:	f107 0208 	add.w	r2, r7, #8
 800447e:	2301      	movs	r3, #1
 8004480:	210a      	movs	r1, #10
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff f9ec 	bl	8003860 <ism330dhcx_read_reg>
 8004488:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10f      	bne.n	80044b0 <ism330dhcx_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	b2da      	uxtb	r2, r3
 8004498:	7a3b      	ldrb	r3, [r7, #8]
 800449a:	f362 0302 	bfi	r3, r2, #0, #3
 800449e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80044a0:	f107 0208 	add.w	r2, r7, #8
 80044a4:	2301      	movs	r3, #1
 80044a6:	210a      	movs	r1, #10
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff f9f1 	bl	8003890 <ism330dhcx_write_reg>
 80044ae:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 80044b0:	68fb      	ldr	r3, [r7, #12]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80044c4:	2102      	movs	r1, #2
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff ff4e 	bl	8004368 <ism330dhcx_mem_bank_set>
 80044cc:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d106      	bne.n	80044e2 <ism330dhcx_fsm_enable_get+0x28>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 80044d4:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 80044d6:	2301      	movs	r3, #1
 80044d8:	2146      	movs	r1, #70	@ 0x46
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff f9c0 	bl	8003860 <ism330dhcx_read_reg>
 80044e0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d107      	bne.n	80044f8 <ism330dhcx_fsm_enable_get+0x3e>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 80044ec:	2301      	movs	r3, #1
 80044ee:	2147      	movs	r1, #71	@ 0x47
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff f9b5 	bl	8003860 <ism330dhcx_read_reg>
 80044f6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d104      	bne.n	8004508 <ism330dhcx_fsm_enable_get+0x4e>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80044fe:	2100      	movs	r1, #0
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff ff31 	bl	8004368 <ism330dhcx_mem_bank_set>
 8004506:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004508:	68fb      	ldr	r3, [r7, #12]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800451e:	2102      	movs	r1, #2
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff ff21 	bl	8004368 <ism330dhcx_mem_bank_set>
 8004526:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d107      	bne.n	800453e <ism330dhcx_fsm_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 800452e:	f107 0208 	add.w	r2, r7, #8
 8004532:	2301      	movs	r3, #1
 8004534:	215f      	movs	r1, #95	@ 0x5f
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff f992 	bl	8003860 <ism330dhcx_read_reg>
 800453c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d104      	bne.n	800454e <ism330dhcx_fsm_data_rate_get+0x3a>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004544:	2100      	movs	r1, #0
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff ff0e 	bl	8004368 <ism330dhcx_mem_bank_set>
 800454c:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 800454e:	7a3b      	ldrb	r3, [r7, #8]
 8004550:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b03      	cmp	r3, #3
 8004558:	d81a      	bhi.n	8004590 <ism330dhcx_fsm_data_rate_get+0x7c>
 800455a:	a201      	add	r2, pc, #4	@ (adr r2, 8004560 <ism330dhcx_fsm_data_rate_get+0x4c>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	08004571 	.word	0x08004571
 8004564:	08004579 	.word	0x08004579
 8004568:	08004581 	.word	0x08004581
 800456c:	08004589 	.word	0x08004589
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
      break;
 8004576:	e00f      	b.n	8004598 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2201      	movs	r2, #1
 800457c:	701a      	strb	r2, [r3, #0]
      break;
 800457e:	e00b      	b.n	8004598 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2202      	movs	r2, #2
 8004584:	701a      	strb	r2, [r3, #0]
      break;
 8004586:	e007      	b.n	8004598 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2203      	movs	r2, #3
 800458c:	701a      	strb	r2, [r3, #0]
      break;
 800458e:	e003      	b.n	8004598 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]
      break;
 8004596:	bf00      	nop
  }

  return ret;
 8004598:	68fb      	ldr	r3, [r7, #12]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop

080045a4 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80045ae:	2102      	movs	r1, #2
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff fed9 	bl	8004368 <ism330dhcx_mem_bank_set>
 80045b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d107      	bne.n	80045ce <ism330dhcx_mlc_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 80045be:	f107 0208 	add.w	r2, r7, #8
 80045c2:	2301      	movs	r3, #1
 80045c4:	2105      	movs	r1, #5
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff f94a 	bl	8003860 <ism330dhcx_read_reg>
 80045cc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10b      	bne.n	80045ec <ism330dhcx_mlc_get+0x48>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80045d4:	2100      	movs	r1, #0
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7ff fec6 	bl	8004368 <ism330dhcx_mem_bank_set>
 80045dc:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 80045de:	7a3b      	ldrb	r3, [r7, #8]
 80045e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80045ec:	68fb      	ldr	r3, [r7, #12]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8004602:	2102      	movs	r1, #2
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff feaf 	bl	8004368 <ism330dhcx_mem_bank_set>
 800460a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d107      	bne.n	8004622 <ism330dhcx_mlc_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8004612:	f107 0208 	add.w	r2, r7, #8
 8004616:	2301      	movs	r3, #1
 8004618:	2160      	movs	r1, #96	@ 0x60
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff f920 	bl	8003860 <ism330dhcx_read_reg>
 8004620:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d12a      	bne.n	800467e <ism330dhcx_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 8004628:	7a3b      	ldrb	r3, [r7, #8]
 800462a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b03      	cmp	r3, #3
 8004632:	d81b      	bhi.n	800466c <ism330dhcx_mlc_data_rate_get+0x74>
 8004634:	a201      	add	r2, pc, #4	@ (adr r2, 800463c <ism330dhcx_mlc_data_rate_get+0x44>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	0800464d 	.word	0x0800464d
 8004640:	08004655 	.word	0x08004655
 8004644:	0800465d 	.word	0x0800465d
 8004648:	08004665 	.word	0x08004665
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
        break;
 8004652:	e00f      	b.n	8004674 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2201      	movs	r2, #1
 8004658:	701a      	strb	r2, [r3, #0]
        break;
 800465a:	e00b      	b.n	8004674 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2202      	movs	r2, #2
 8004660:	701a      	strb	r2, [r3, #0]
        break;
 8004662:	e007      	b.n	8004674 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2203      	movs	r2, #3
 8004668:	701a      	strb	r2, [r3, #0]
        break;
 800466a:	e003      	b.n	8004674 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
        break;
 8004672:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004674:	2100      	movs	r1, #0
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff fe76 	bl	8004368 <ism330dhcx_mem_bank_set>
 800467c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800467e:	68fb      	ldr	r3, [r7, #12]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800468c:	4b18      	ldr	r3, [pc, #96]	@ (80046f0 <SystemInit+0x68>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004692:	4a17      	ldr	r2, [pc, #92]	@ (80046f0 <SystemInit+0x68>)
 8004694:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004698:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800469c:	4b15      	ldr	r3, [pc, #84]	@ (80046f4 <SystemInit+0x6c>)
 800469e:	2201      	movs	r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80046a2:	4b14      	ldr	r3, [pc, #80]	@ (80046f4 <SystemInit+0x6c>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80046a8:	4b12      	ldr	r3, [pc, #72]	@ (80046f4 <SystemInit+0x6c>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80046ae:	4b11      	ldr	r3, [pc, #68]	@ (80046f4 <SystemInit+0x6c>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80046b4:	4b0f      	ldr	r3, [pc, #60]	@ (80046f4 <SystemInit+0x6c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a0e      	ldr	r2, [pc, #56]	@ (80046f4 <SystemInit+0x6c>)
 80046ba:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80046be:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80046c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80046c4:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <SystemInit+0x6c>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80046ca:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <SystemInit+0x6c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a09      	ldr	r2, [pc, #36]	@ (80046f4 <SystemInit+0x6c>)
 80046d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80046d6:	4b07      	ldr	r3, [pc, #28]	@ (80046f4 <SystemInit+0x6c>)
 80046d8:	2200      	movs	r2, #0
 80046da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046dc:	4b04      	ldr	r3, [pc, #16]	@ (80046f0 <SystemInit+0x68>)
 80046de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80046e2:	609a      	str	r2, [r3, #8]
  #endif
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	e000ed00 	.word	0xe000ed00
 80046f4:	46020c00 	.word	0x46020c00

080046f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046fc:	4b11      	ldr	r3, [pc, #68]	@ (8004744 <HAL_Init+0x4c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a10      	ldr	r2, [pc, #64]	@ (8004744 <HAL_Init+0x4c>)
 8004702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004708:	2003      	movs	r0, #3
 800470a:	f000 f96d 	bl	80049e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800470e:	f002 ff57 	bl	80075c0 <HAL_RCC_GetSysClockFreq>
 8004712:	4602      	mov	r2, r0
 8004714:	4b0c      	ldr	r3, [pc, #48]	@ (8004748 <HAL_Init+0x50>)
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	490b      	ldr	r1, [pc, #44]	@ (800474c <HAL_Init+0x54>)
 800471e:	5ccb      	ldrb	r3, [r1, r3]
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
 8004724:	4a0a      	ldr	r2, [pc, #40]	@ (8004750 <HAL_Init+0x58>)
 8004726:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004728:	200f      	movs	r0, #15
 800472a:	f000 f813 	bl	8004754 <HAL_InitTick>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e002      	b.n	800473e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004738:	f003 fc8a 	bl	8008050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40022000 	.word	0x40022000
 8004748:	46020c00 	.word	0x46020c00
 800474c:	0800c0c8 	.word	0x0800c0c8
 8004750:	20000098 	.word	0x20000098

08004754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800475c:	4b15      	ldr	r3, [pc, #84]	@ (80047b4 <HAL_InitTick+0x60>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e021      	b.n	80047ac <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004768:	4b13      	ldr	r3, [pc, #76]	@ (80047b8 <HAL_InitTick+0x64>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <HAL_InitTick+0x60>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	4619      	mov	r1, r3
 8004772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004776:	fbb3 f3f1 	udiv	r3, r3, r1
 800477a:	fbb2 f3f3 	udiv	r3, r2, r3
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f965 	bl	8004a4e <HAL_SYSTICK_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e00e      	b.n	80047ac <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b0f      	cmp	r3, #15
 8004792:	d80a      	bhi.n	80047aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004794:	2200      	movs	r2, #0
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800479c:	f000 f92f 	bl	80049fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047a0:	4a06      	ldr	r2, [pc, #24]	@ (80047bc <HAL_InitTick+0x68>)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	200000a0 	.word	0x200000a0
 80047b8:	20000098 	.word	0x20000098
 80047bc:	2000009c 	.word	0x2000009c

080047c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80047c4:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <HAL_IncTick+0x20>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	4b06      	ldr	r3, [pc, #24]	@ (80047e4 <HAL_IncTick+0x24>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4413      	add	r3, r2
 80047d0:	4a04      	ldr	r2, [pc, #16]	@ (80047e4 <HAL_IncTick+0x24>)
 80047d2:	6013      	str	r3, [r2, #0]
}
 80047d4:	bf00      	nop
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	200000a0 	.word	0x200000a0
 80047e4:	20000ed0 	.word	0x20000ed0

080047e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  return uwTick;
 80047ec:	4b03      	ldr	r3, [pc, #12]	@ (80047fc <HAL_GetTick+0x14>)
 80047ee:	681b      	ldr	r3, [r3, #0]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20000ed0 	.word	0x20000ed0

08004800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004808:	f7ff ffee 	bl	80047e8 <HAL_GetTick>
 800480c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004818:	d005      	beq.n	8004826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800481a:	4b0a      	ldr	r3, [pc, #40]	@ (8004844 <HAL_Delay+0x44>)
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4413      	add	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004826:	bf00      	nop
 8004828:	f7ff ffde 	bl	80047e8 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	429a      	cmp	r2, r3
 8004836:	d8f7      	bhi.n	8004828 <HAL_Delay+0x28>
  {
  }
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	200000a0 	.word	0x200000a0

08004848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004858:	4b0c      	ldr	r3, [pc, #48]	@ (800488c <__NVIC_SetPriorityGrouping+0x44>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004864:	4013      	ands	r3, r2
 8004866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004870:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800487a:	4a04      	ldr	r2, [pc, #16]	@ (800488c <__NVIC_SetPriorityGrouping+0x44>)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	60d3      	str	r3, [r2, #12]
}
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	e000ed00 	.word	0xe000ed00

08004890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004894:	4b04      	ldr	r3, [pc, #16]	@ (80048a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	0a1b      	lsrs	r3, r3, #8
 800489a:	f003 0307 	and.w	r3, r3, #7
}
 800489e:	4618      	mov	r0, r3
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	e000ed00 	.word	0xe000ed00

080048ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	db0b      	blt.n	80048d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	f003 021f 	and.w	r2, r3, #31
 80048c4:	4907      	ldr	r1, [pc, #28]	@ (80048e4 <__NVIC_EnableIRQ+0x38>)
 80048c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	2001      	movs	r0, #1
 80048ce:	fa00 f202 	lsl.w	r2, r0, r2
 80048d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	e000e100 	.word	0xe000e100

080048e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	6039      	str	r1, [r7, #0]
 80048f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	db0a      	blt.n	8004912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	490c      	ldr	r1, [pc, #48]	@ (8004934 <__NVIC_SetPriority+0x4c>)
 8004902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004906:	0112      	lsls	r2, r2, #4
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	440b      	add	r3, r1
 800490c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004910:	e00a      	b.n	8004928 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	b2da      	uxtb	r2, r3
 8004916:	4908      	ldr	r1, [pc, #32]	@ (8004938 <__NVIC_SetPriority+0x50>)
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	3b04      	subs	r3, #4
 8004920:	0112      	lsls	r2, r2, #4
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	440b      	add	r3, r1
 8004926:	761a      	strb	r2, [r3, #24]
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	e000e100 	.word	0xe000e100
 8004938:	e000ed00 	.word	0xe000ed00

0800493c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800493c:	b480      	push	{r7}
 800493e:	b089      	sub	sp, #36	@ 0x24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f1c3 0307 	rsb	r3, r3, #7
 8004956:	2b04      	cmp	r3, #4
 8004958:	bf28      	it	cs
 800495a:	2304      	movcs	r3, #4
 800495c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	3304      	adds	r3, #4
 8004962:	2b06      	cmp	r3, #6
 8004964:	d902      	bls.n	800496c <NVIC_EncodePriority+0x30>
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	3b03      	subs	r3, #3
 800496a:	e000      	b.n	800496e <NVIC_EncodePriority+0x32>
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004970:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43da      	mvns	r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	401a      	ands	r2, r3
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004984:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	fa01 f303 	lsl.w	r3, r1, r3
 800498e:	43d9      	mvns	r1, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004994:	4313      	orrs	r3, r2
         );
}
 8004996:	4618      	mov	r0, r3
 8004998:	3724      	adds	r7, #36	@ 0x24
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
	...

080049a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049b4:	d301      	bcc.n	80049ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049b6:	2301      	movs	r3, #1
 80049b8:	e00f      	b.n	80049da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049ba:	4a0a      	ldr	r2, [pc, #40]	@ (80049e4 <SysTick_Config+0x40>)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3b01      	subs	r3, #1
 80049c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049c2:	210f      	movs	r1, #15
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049c8:	f7ff ff8e 	bl	80048e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049cc:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <SysTick_Config+0x40>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049d2:	4b04      	ldr	r3, [pc, #16]	@ (80049e4 <SysTick_Config+0x40>)
 80049d4:	2207      	movs	r2, #7
 80049d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	e000e010 	.word	0xe000e010

080049e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff ff29 	bl	8004848 <__NVIC_SetPriorityGrouping>
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b086      	sub	sp, #24
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	4603      	mov	r3, r0
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	607a      	str	r2, [r7, #4]
 8004a0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a0c:	f7ff ff40 	bl	8004890 <__NVIC_GetPriorityGrouping>
 8004a10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	6978      	ldr	r0, [r7, #20]
 8004a18:	f7ff ff90 	bl	800493c <NVIC_EncodePriority>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a22:	4611      	mov	r1, r2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff ff5f 	bl	80048e8 <__NVIC_SetPriority>
}
 8004a2a:	bf00      	nop
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	4603      	mov	r3, r0
 8004a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff ff33 	bl	80048ac <__NVIC_EnableIRQ>
}
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff ffa4 	bl	80049a4 <SysTick_Config>
 8004a5c:	4603      	mov	r3, r0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01e      	beq.n	8004ac0 <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2204      	movs	r2, #4
 8004a88:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a8e:	f043 0202 	orr.w	r2, r3, #2
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2204      	movs	r2, #4
 8004a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa2:	4a39      	ldr	r2, [pc, #228]	@ (8004b88 <HAL_DCMI_IRQHandler+0x120>)
 8004aa4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 f88b 	bl	8004bc6 <HAL_DMA_Abort_IT>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d004      	beq.n	8004ac0 <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f866 	bl	8004b8c <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d01e      	beq.n	8004b08 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ad6:	f043 0201 	orr.w	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2204      	movs	r2, #4
 8004ae2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aea:	4a27      	ldr	r2, [pc, #156]	@ (8004b88 <HAL_DCMI_IRQHandler+0x120>)
 8004aec:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 f867 	bl	8004bc6 <HAL_DMA_Abort_IT>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d004      	beq.n	8004b08 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f842 	bl	8004b8c <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d006      	beq.n	8004b20 <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2210      	movs	r2, #16
 8004b18:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fc fdb2 	bl	8001684 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d006      	beq.n	8004b38 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2208      	movs	r2, #8
 8004b30:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fc fdbc 	bl	80016b0 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d01d      	beq.n	8004b7e <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d107      	bne.n	8004b60 <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 021e 	bic.w	r2, r2, #30
 8004b5e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0201 	bic.w	r2, r2, #1
 8004b6e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2201      	movs	r2, #1
 8004b76:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7fc fd8e 	bl	800169a <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	08004b8d 	.word	0x08004b8d

08004b8c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b98:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_ULE)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d009      	beq.n	8004bb8 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7fc fd84 	bl	80016c6 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8004bbe:	bf00      	nop
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e019      	b.n	8004c0c <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d004      	beq.n	8004bee <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2220      	movs	r2, #32
 8004be8:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e00e      	b.n	8004c0c <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2204      	movs	r2, #4
 8004bf2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6812      	ldr	r2, [r2, #0]
 8004c00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004c04:	f043 0304 	orr.w	r3, r3, #4
 8004c08:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004c28:	f023 030f 	bic.w	r3, r3, #15
 8004c2c:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c36:	3b50      	subs	r3, #80	@ 0x50
 8004c38:	09db      	lsrs	r3, r3, #7
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	2201      	movs	r2, #1
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 8150 	beq.w	8004ef4 <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d011      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c78:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7e:	f043 0201 	orr.w	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d011      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004caa:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb0:	f043 0202 	orr.w	r2, r3, #2
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d011      	beq.n	8004cea <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004cdc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce2:	f043 0204 	orr.w	r2, r3, #4
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d011      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004d0e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d14:	f043 0208 	orr.w	r2, r3, #8
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d013      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00c      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d40:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d055      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d04e      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d76:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d137      	bne.n	8004df4 <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d92:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0202 	orr.w	r2, r2, #2
 8004da2:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d004      	beq.n	8004dbc <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2203      	movs	r2, #3
 8004db6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004dba:	e003      	b.n	8004dc4 <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 8087 	beq.w	8004ef8 <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	4798      	blx	r3
        }

        return;
 8004df2:	e081      	b.n	8004ef8 <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2205      	movs	r2, #5
 8004df8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d039      	beq.n	8004e8e <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d032      	beq.n	8004e8e <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d012      	beq.n	8004e5a <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d116      	bne.n	8004e6c <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d111      	bne.n	8004e6c <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e54:	2201      	movs	r2, #1
 8004e56:	731a      	strb	r2, [r3, #12]
 8004e58:	e008      	b.n	8004e6c <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d103      	bne.n	8004e6c <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004e74:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d031      	beq.n	8004efa <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695a      	ldr	r2, [r3, #20]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0202 	orr.w	r2, r2, #2
 8004ea4:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d004      	beq.n	8004ebe <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004ebc:	e003      	b.n	8004ec6 <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d007      	beq.n	8004efa <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	4798      	blx	r3
 8004ef2:	e002      	b.n	8004efa <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8004ef4:	bf00      	nop
 8004ef6:	e000      	b.n	8004efa <HAL_DMA_IRQHandler+0x2e2>
        return;
 8004ef8:	bf00      	nop
    }
  }
}
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004f12:	7afb      	ldrb	r3, [r7, #11]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d011      	beq.n	8004f3c <HAL_EXTI_RegisterCallback+0x3c>
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	dc13      	bgt.n	8004f44 <HAL_EXTI_RegisterCallback+0x44>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <HAL_EXTI_RegisterCallback+0x26>
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d007      	beq.n	8004f34 <HAL_EXTI_RegisterCallback+0x34>
 8004f24:	e00e      	b.n	8004f44 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	609a      	str	r2, [r3, #8]
      break;
 8004f32:	e00a      	b.n	8004f4a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	605a      	str	r2, [r3, #4]
      break;
 8004f3a:	e006      	b.n	8004f4a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	609a      	str	r2, [r3, #8]
      break;
 8004f42:	e002      	b.n	8004f4a <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	75fb      	strb	r3, [r7, #23]
      break;
 8004f48:	bf00      	nop
  }

  return status;
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	371c      	adds	r7, #28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e003      	b.n	8004f74 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004f72:	2300      	movs	r3, #0
  }
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	0c1b      	lsrs	r3, r3, #16
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	4b17      	ldr	r3, [pc, #92]	@ (8005008 <HAL_EXTI_IRQHandler+0x88>)
 8004faa:	4413      	add	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800500c <HAL_EXTI_IRQHandler+0x8c>)
 8004fd8:	4413      	add	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d009      	beq.n	8005000 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	4798      	blx	r3
    }
  }
}
 8005000:	bf00      	nop
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	4602200c 	.word	0x4602200c
 800500c:	46022010 	.word	0x46022010

08005010 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005010:	b480      	push	{r7}
 8005012:	b089      	sub	sp, #36	@ 0x24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005022:	e1ba      	b.n	800539a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	2101      	movs	r1, #1
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	fa01 f303 	lsl.w	r3, r1, r3
 8005030:	4013      	ands	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 81aa 	beq.w	8005394 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a55      	ldr	r2, [pc, #340]	@ (8005198 <HAL_GPIO_Init+0x188>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d15d      	bne.n	8005104 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800504e:	2201      	movs	r2, #1
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	43db      	mvns	r3, r3
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	4013      	ands	r3, r2
 800505c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f003 0201 	and.w	r2, r3, #1
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	4313      	orrs	r3, r2
 8005070:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8005078:	4a48      	ldr	r2, [pc, #288]	@ (800519c <HAL_GPIO_Init+0x18c>)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005080:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8005082:	4a46      	ldr	r2, [pc, #280]	@ (800519c <HAL_GPIO_Init+0x18c>)
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4413      	add	r3, r2
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	08da      	lsrs	r2, r3, #3
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	3208      	adds	r2, #8
 8005096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800509a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	220f      	movs	r2, #15
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	43db      	mvns	r3, r3
 80050ac:	69fa      	ldr	r2, [r7, #28]
 80050ae:	4013      	ands	r3, r2
 80050b0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	220b      	movs	r2, #11
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	08da      	lsrs	r2, r3, #3
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	3208      	adds	r2, #8
 80050ce:	69f9      	ldr	r1, [r7, #28]
 80050d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	2203      	movs	r2, #3
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	43db      	mvns	r3, r3
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	4013      	ands	r3, r2
 80050ea:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	2202      	movs	r2, #2
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	69fa      	ldr	r2, [r7, #28]
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	e067      	b.n	80051d4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b02      	cmp	r3, #2
 800510a:	d003      	beq.n	8005114 <HAL_GPIO_Init+0x104>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b12      	cmp	r3, #18
 8005112:	d145      	bne.n	80051a0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	08da      	lsrs	r2, r3, #3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3208      	adds	r2, #8
 800511c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005120:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	220f      	movs	r2, #15
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	43db      	mvns	r3, r3
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	4013      	ands	r3, r2
 8005136:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f003 020f 	and.w	r2, r3, #15
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	4313      	orrs	r3, r2
 8005150:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	08da      	lsrs	r2, r3, #3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3208      	adds	r2, #8
 800515a:	69f9      	ldr	r1, [r7, #28]
 800515c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	2203      	movs	r2, #3
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	43db      	mvns	r3, r3
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	4013      	ands	r3, r2
 8005176:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f003 0203 	and.w	r2, r3, #3
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	4313      	orrs	r3, r2
 800518c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	e01e      	b.n	80051d4 <HAL_GPIO_Init+0x1c4>
 8005196:	bf00      	nop
 8005198:	46020000 	.word	0x46020000
 800519c:	0800c120 	.word	0x0800c120
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	2203      	movs	r2, #3
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	43db      	mvns	r3, r3
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	4013      	ands	r3, r2
 80051b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 0203 	and.w	r2, r3, #3
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d00b      	beq.n	80051f4 <HAL_GPIO_Init+0x1e4>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d007      	beq.n	80051f4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051e8:	2b11      	cmp	r3, #17
 80051ea:	d003      	beq.n	80051f4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b12      	cmp	r3, #18
 80051f2:	d130      	bne.n	8005256 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	2203      	movs	r2, #3
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	43db      	mvns	r3, r3
 8005206:	69fa      	ldr	r2, [r7, #28]
 8005208:	4013      	ands	r3, r2
 800520a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	4313      	orrs	r3, r2
 800521c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800522a:	2201      	movs	r2, #1
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	43db      	mvns	r3, r3
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	4013      	ands	r3, r2
 8005238:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	091b      	lsrs	r3, r3, #4
 8005240:	f003 0201 	and.w	r2, r3, #1
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	4313      	orrs	r3, r2
 800524e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2b03      	cmp	r3, #3
 800525c:	d017      	beq.n	800528e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	2203      	movs	r2, #3
 800526a:	fa02 f303 	lsl.w	r3, r2, r3
 800526e:	43db      	mvns	r3, r3
 8005270:	69fa      	ldr	r2, [r7, #28]
 8005272:	4013      	ands	r3, r2
 8005274:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	4313      	orrs	r3, r2
 8005286:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d07c      	beq.n	8005394 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800529a:	4a47      	ldr	r2, [pc, #284]	@ (80053b8 <HAL_GPIO_Init+0x3a8>)
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	089b      	lsrs	r3, r3, #2
 80052a0:	3318      	adds	r3, #24
 80052a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	220f      	movs	r2, #15
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	43db      	mvns	r3, r3
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	4013      	ands	r3, r2
 80052bc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	0a9a      	lsrs	r2, r3, #10
 80052c2:	4b3e      	ldr	r3, [pc, #248]	@ (80053bc <HAL_GPIO_Init+0x3ac>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	f002 0203 	and.w	r2, r2, #3
 80052cc:	00d2      	lsls	r2, r2, #3
 80052ce:	4093      	lsls	r3, r2
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80052d6:	4938      	ldr	r1, [pc, #224]	@ (80053b8 <HAL_GPIO_Init+0x3a8>)
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	089b      	lsrs	r3, r3, #2
 80052dc:	3318      	adds	r3, #24
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80052e4:	4b34      	ldr	r3, [pc, #208]	@ (80053b8 <HAL_GPIO_Init+0x3a8>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	43db      	mvns	r3, r3
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	4013      	ands	r3, r2
 80052f2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005308:	4a2b      	ldr	r2, [pc, #172]	@ (80053b8 <HAL_GPIO_Init+0x3a8>)
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800530e:	4b2a      	ldr	r3, [pc, #168]	@ (80053b8 <HAL_GPIO_Init+0x3a8>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	43db      	mvns	r3, r3
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	4013      	ands	r3, r2
 800531c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8005332:	4a21      	ldr	r2, [pc, #132]	@ (80053b8 <HAL_GPIO_Init+0x3a8>)
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005338:	4b1f      	ldr	r3, [pc, #124]	@ (80053b8 <HAL_GPIO_Init+0x3a8>)
 800533a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800533e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	43db      	mvns	r3, r3
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	4013      	ands	r3, r2
 8005348:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800535e:	4a16      	ldr	r2, [pc, #88]	@ (80053b8 <HAL_GPIO_Init+0x3a8>)
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8005366:	4b14      	ldr	r3, [pc, #80]	@ (80053b8 <HAL_GPIO_Init+0x3a8>)
 8005368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800536c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	43db      	mvns	r3, r3
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	4013      	ands	r3, r2
 8005376:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800538c:	4a0a      	ldr	r2, [pc, #40]	@ (80053b8 <HAL_GPIO_Init+0x3a8>)
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	3301      	adds	r3, #1
 8005398:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f47f ae3d 	bne.w	8005024 <HAL_GPIO_Init+0x14>
  }
}
 80053aa:	bf00      	nop
 80053ac:	bf00      	nop
 80053ae:	3724      	adds	r7, #36	@ 0x24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	46022000 	.word	0x46022000
 80053bc:	002f7f7f 	.word	0x002f7f7f

080053c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b089      	sub	sp, #36	@ 0x24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80053d2:	e0bc      	b.n	800554e <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80053d4:	2201      	movs	r2, #1
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	4013      	ands	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 80ad 	beq.w	8005548 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a5e      	ldr	r2, [pc, #376]	@ (800556c <HAL_GPIO_DeInit+0x1ac>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d115      	bne.n	8005422 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 80053f6:	4a5e      	ldr	r2, [pc, #376]	@ (8005570 <HAL_GPIO_DeInit+0x1b0>)
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053fe:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8005400:	4a5b      	ldr	r2, [pc, #364]	@ (8005570 <HAL_GPIO_DeInit+0x1b0>)
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4413      	add	r3, r2
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 800540c:	4b57      	ldr	r3, [pc, #348]	@ (800556c <HAL_GPIO_DeInit+0x1ac>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	2101      	movs	r1, #1
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	fa01 f303 	lsl.w	r3, r1, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	4954      	ldr	r1, [pc, #336]	@ (800556c <HAL_GPIO_DeInit+0x1ac>)
 800541c:	4013      	ands	r3, r2
 800541e:	600b      	str	r3, [r1, #0]
 8005420:	e053      	b.n	80054ca <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8005422:	4a54      	ldr	r2, [pc, #336]	@ (8005574 <HAL_GPIO_DeInit+0x1b4>)
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	089b      	lsrs	r3, r3, #2
 8005428:	3318      	adds	r3, #24
 800542a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542e:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	220f      	movs	r2, #15
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4013      	ands	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	0a9a      	lsrs	r2, r3, #10
 8005448:	4b4b      	ldr	r3, [pc, #300]	@ (8005578 <HAL_GPIO_DeInit+0x1b8>)
 800544a:	4013      	ands	r3, r2
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	f002 0203 	and.w	r2, r2, #3
 8005452:	00d2      	lsls	r2, r2, #3
 8005454:	4093      	lsls	r3, r2
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	429a      	cmp	r2, r3
 800545a:	d136      	bne.n	80054ca <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 800545c:	4b45      	ldr	r3, [pc, #276]	@ (8005574 <HAL_GPIO_DeInit+0x1b4>)
 800545e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	43db      	mvns	r3, r3
 8005466:	4943      	ldr	r1, [pc, #268]	@ (8005574 <HAL_GPIO_DeInit+0x1b4>)
 8005468:	4013      	ands	r3, r2
 800546a:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800546e:	4b41      	ldr	r3, [pc, #260]	@ (8005574 <HAL_GPIO_DeInit+0x1b4>)
 8005470:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	43db      	mvns	r3, r3
 8005478:	493e      	ldr	r1, [pc, #248]	@ (8005574 <HAL_GPIO_DeInit+0x1b4>)
 800547a:	4013      	ands	r3, r2
 800547c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8005480:	4b3c      	ldr	r3, [pc, #240]	@ (8005574 <HAL_GPIO_DeInit+0x1b4>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	43db      	mvns	r3, r3
 8005488:	493a      	ldr	r1, [pc, #232]	@ (8005574 <HAL_GPIO_DeInit+0x1b4>)
 800548a:	4013      	ands	r3, r2
 800548c:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800548e:	4b39      	ldr	r3, [pc, #228]	@ (8005574 <HAL_GPIO_DeInit+0x1b4>)
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	43db      	mvns	r3, r3
 8005496:	4937      	ldr	r1, [pc, #220]	@ (8005574 <HAL_GPIO_DeInit+0x1b4>)
 8005498:	4013      	ands	r3, r2
 800549a:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	220f      	movs	r2, #15
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 80054ac:	4a31      	ldr	r2, [pc, #196]	@ (8005574 <HAL_GPIO_DeInit+0x1b4>)
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	089b      	lsrs	r3, r3, #2
 80054b2:	3318      	adds	r3, #24
 80054b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	43da      	mvns	r2, r3
 80054bc:	482d      	ldr	r0, [pc, #180]	@ (8005574 <HAL_GPIO_DeInit+0x1b4>)
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	089b      	lsrs	r3, r3, #2
 80054c2:	400a      	ands	r2, r1
 80054c4:	3318      	adds	r3, #24
 80054c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	2103      	movs	r1, #3
 80054d4:	fa01 f303 	lsl.w	r3, r1, r3
 80054d8:	431a      	orrs	r2, r3
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	08da      	lsrs	r2, r3, #3
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	3208      	adds	r2, #8
 80054e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	220f      	movs	r2, #15
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	43db      	mvns	r3, r3
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	08d2      	lsrs	r2, r2, #3
 80054fe:	4019      	ands	r1, r3
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	3208      	adds	r2, #8
 8005504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	2103      	movs	r1, #3
 8005512:	fa01 f303 	lsl.w	r3, r1, r3
 8005516:	43db      	mvns	r3, r3
 8005518:	401a      	ands	r2, r3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	2101      	movs	r1, #1
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	fa01 f303 	lsl.w	r3, r1, r3
 800552a:	43db      	mvns	r3, r3
 800552c:	401a      	ands	r2, r3
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	2103      	movs	r1, #3
 800553c:	fa01 f303 	lsl.w	r3, r1, r3
 8005540:	43db      	mvns	r3, r3
 8005542:	401a      	ands	r2, r3
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	3301      	adds	r3, #1
 800554c:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	fa22 f303 	lsr.w	r3, r2, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	f47f af3c 	bne.w	80053d4 <HAL_GPIO_DeInit+0x14>
  }
}
 800555c:	bf00      	nop
 800555e:	bf00      	nop
 8005560:	3724      	adds	r7, #36	@ 0x24
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	46020000 	.word	0x46020000
 8005570:	0800c120 	.word	0x0800c120
 8005574:	46022000 	.word	0x46022000
 8005578:	002f7f7f 	.word	0x002f7f7f

0800557c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e081      	b.n	8005692 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f8a8 	bl	80056f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2224      	movs	r2, #36	@ 0x24
 80055ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0201 	bic.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80055cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d107      	bne.n	80055f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055f2:	609a      	str	r2, [r3, #8]
 80055f4:	e006      	b.n	8005604 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005602:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d104      	bne.n	8005616 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005614:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005624:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005628:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005638:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	69d9      	ldr	r1, [r3, #28]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a1a      	ldr	r2, [r3, #32]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e021      	b.n	80056f0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2224      	movs	r2, #36	@ 0x24
 80056b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0201 	bic.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f821 	bl	800570c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af02      	add	r7, sp, #8
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	4608      	mov	r0, r1
 800572a:	4611      	mov	r1, r2
 800572c:	461a      	mov	r2, r3
 800572e:	4603      	mov	r3, r0
 8005730:	817b      	strh	r3, [r7, #10]
 8005732:	460b      	mov	r3, r1
 8005734:	813b      	strh	r3, [r7, #8]
 8005736:	4613      	mov	r3, r2
 8005738:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b20      	cmp	r3, #32
 8005744:	f040 80f9 	bne.w	800593a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <HAL_I2C_Mem_Write+0x34>
 800574e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005750:	2b00      	cmp	r3, #0
 8005752:	d105      	bne.n	8005760 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800575a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e0ed      	b.n	800593c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <HAL_I2C_Mem_Write+0x4e>
 800576a:	2302      	movs	r3, #2
 800576c:	e0e6      	b.n	800593c <HAL_I2C_Mem_Write+0x21c>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005776:	f7ff f837 	bl	80047e8 <HAL_GetTick>
 800577a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	2319      	movs	r3, #25
 8005782:	2201      	movs	r2, #1
 8005784:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 fadd 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e0d1      	b.n	800593c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2221      	movs	r2, #33	@ 0x21
 800579c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2240      	movs	r2, #64	@ 0x40
 80057a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a3a      	ldr	r2, [r7, #32]
 80057b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80057b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057c0:	88f8      	ldrh	r0, [r7, #6]
 80057c2:	893a      	ldrh	r2, [r7, #8]
 80057c4:	8979      	ldrh	r1, [r7, #10]
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	9301      	str	r3, [sp, #4]
 80057ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	4603      	mov	r3, r0
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f9ed 	bl	8005bb0 <I2C_RequestMemoryWrite>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0a9      	b.n	800593c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2bff      	cmp	r3, #255	@ 0xff
 80057f0:	d90e      	bls.n	8005810 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	22ff      	movs	r2, #255	@ 0xff
 80057f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	8979      	ldrh	r1, [r7, #10]
 8005800:	2300      	movs	r3, #0
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 fc45 	bl	8006098 <I2C_TransferConfig>
 800580e:	e00f      	b.n	8005830 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800581e:	b2da      	uxtb	r2, r3
 8005820:	8979      	ldrh	r1, [r7, #10]
 8005822:	2300      	movs	r3, #0
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fc34 	bl	8006098 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 fac7 	bl	8005dc8 <I2C_WaitOnTXISFlagUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e07b      	b.n	800593c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005848:	781a      	ldrb	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800585e:	b29b      	uxth	r3, r3
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005878:	b29b      	uxth	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d034      	beq.n	80058e8 <HAL_I2C_Mem_Write+0x1c8>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005882:	2b00      	cmp	r3, #0
 8005884:	d130      	bne.n	80058e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588c:	2200      	movs	r2, #0
 800588e:	2180      	movs	r1, #128	@ 0x80
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 fa59 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e04d      	b.n	800593c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2bff      	cmp	r3, #255	@ 0xff
 80058a8:	d90e      	bls.n	80058c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	22ff      	movs	r2, #255	@ 0xff
 80058ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	8979      	ldrh	r1, [r7, #10]
 80058b8:	2300      	movs	r3, #0
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fbe9 	bl	8006098 <I2C_TransferConfig>
 80058c6:	e00f      	b.n	80058e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	8979      	ldrh	r1, [r7, #10]
 80058da:	2300      	movs	r3, #0
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 fbd8 	bl	8006098 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d19e      	bne.n	8005830 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 faa6 	bl	8005e48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e01a      	b.n	800593c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2220      	movs	r2, #32
 800590c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6859      	ldr	r1, [r3, #4]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	4b0a      	ldr	r3, [pc, #40]	@ (8005944 <HAL_I2C_Mem_Write+0x224>)
 800591a:	400b      	ands	r3, r1
 800591c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2220      	movs	r2, #32
 8005922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005936:	2300      	movs	r3, #0
 8005938:	e000      	b.n	800593c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800593a:	2302      	movs	r3, #2
  }
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	fe00e800 	.word	0xfe00e800

08005948 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af02      	add	r7, sp, #8
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	4608      	mov	r0, r1
 8005952:	4611      	mov	r1, r2
 8005954:	461a      	mov	r2, r3
 8005956:	4603      	mov	r3, r0
 8005958:	817b      	strh	r3, [r7, #10]
 800595a:	460b      	mov	r3, r1
 800595c:	813b      	strh	r3, [r7, #8]
 800595e:	4613      	mov	r3, r2
 8005960:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b20      	cmp	r3, #32
 800596c:	f040 80fd 	bne.w	8005b6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <HAL_I2C_Mem_Read+0x34>
 8005976:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	d105      	bne.n	8005988 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005982:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e0f1      	b.n	8005b6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800598e:	2b01      	cmp	r3, #1
 8005990:	d101      	bne.n	8005996 <HAL_I2C_Mem_Read+0x4e>
 8005992:	2302      	movs	r3, #2
 8005994:	e0ea      	b.n	8005b6c <HAL_I2C_Mem_Read+0x224>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800599e:	f7fe ff23 	bl	80047e8 <HAL_GetTick>
 80059a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	2319      	movs	r3, #25
 80059aa:	2201      	movs	r2, #1
 80059ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f9c9 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e0d5      	b.n	8005b6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2222      	movs	r2, #34	@ 0x22
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2240      	movs	r2, #64	@ 0x40
 80059cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a3a      	ldr	r2, [r7, #32]
 80059da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80059e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059e8:	88f8      	ldrh	r0, [r7, #6]
 80059ea:	893a      	ldrh	r2, [r7, #8]
 80059ec:	8979      	ldrh	r1, [r7, #10]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	9301      	str	r3, [sp, #4]
 80059f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	4603      	mov	r3, r0
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f92d 	bl	8005c58 <I2C_RequestMemoryRead>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0ad      	b.n	8005b6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2bff      	cmp	r3, #255	@ 0xff
 8005a18:	d90e      	bls.n	8005a38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	22ff      	movs	r2, #255	@ 0xff
 8005a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	8979      	ldrh	r1, [r7, #10]
 8005a28:	4b52      	ldr	r3, [pc, #328]	@ (8005b74 <HAL_I2C_Mem_Read+0x22c>)
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 fb31 	bl	8006098 <I2C_TransferConfig>
 8005a36:	e00f      	b.n	8005a58 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	8979      	ldrh	r1, [r7, #10]
 8005a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8005b74 <HAL_I2C_Mem_Read+0x22c>)
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 fb20 	bl	8006098 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2104      	movs	r1, #4
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 f970 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e07c      	b.n	8005b6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d034      	beq.n	8005b18 <HAL_I2C_Mem_Read+0x1d0>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d130      	bne.n	8005b18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abc:	2200      	movs	r2, #0
 8005abe:	2180      	movs	r1, #128	@ 0x80
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f941 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e04d      	b.n	8005b6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2bff      	cmp	r3, #255	@ 0xff
 8005ad8:	d90e      	bls.n	8005af8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	22ff      	movs	r2, #255	@ 0xff
 8005ade:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	8979      	ldrh	r1, [r7, #10]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 fad1 	bl	8006098 <I2C_TransferConfig>
 8005af6:	e00f      	b.n	8005b18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	8979      	ldrh	r1, [r7, #10]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 fac0 	bl	8006098 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d19a      	bne.n	8005a58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 f98e 	bl	8005e48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e01a      	b.n	8005b6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6859      	ldr	r1, [r3, #4]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	4b0b      	ldr	r3, [pc, #44]	@ (8005b78 <HAL_I2C_Mem_Read+0x230>)
 8005b4a:	400b      	ands	r3, r1
 8005b4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	e000      	b.n	8005b6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005b6a:	2302      	movs	r3, #2
  }
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	80002400 	.word	0x80002400
 8005b78:	fe00e800 	.word	0xfe00e800

08005b7c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b8a:	b2db      	uxtb	r3, r3
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	4608      	mov	r0, r1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	817b      	strh	r3, [r7, #10]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	813b      	strh	r3, [r7, #8]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	8979      	ldrh	r1, [r7, #10]
 8005bd0:	4b20      	ldr	r3, [pc, #128]	@ (8005c54 <I2C_RequestMemoryWrite+0xa4>)
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 fa5d 	bl	8006098 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bde:	69fa      	ldr	r2, [r7, #28]
 8005be0:	69b9      	ldr	r1, [r7, #24]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 f8f0 	bl	8005dc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e02c      	b.n	8005c4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d105      	bne.n	8005c04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bf8:	893b      	ldrh	r3, [r7, #8]
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c02:	e015      	b.n	8005c30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c04:	893b      	ldrh	r3, [r7, #8]
 8005c06:	0a1b      	lsrs	r3, r3, #8
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	69b9      	ldr	r1, [r7, #24]
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 f8d6 	bl	8005dc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e012      	b.n	8005c4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c26:	893b      	ldrh	r3, [r7, #8]
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	2200      	movs	r2, #0
 8005c38:	2180      	movs	r1, #128	@ 0x80
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 f884 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	80002000 	.word	0x80002000

08005c58 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af02      	add	r7, sp, #8
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	4608      	mov	r0, r1
 8005c62:	4611      	mov	r1, r2
 8005c64:	461a      	mov	r2, r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	817b      	strh	r3, [r7, #10]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	813b      	strh	r3, [r7, #8]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c72:	88fb      	ldrh	r3, [r7, #6]
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	8979      	ldrh	r1, [r7, #10]
 8005c78:	4b20      	ldr	r3, [pc, #128]	@ (8005cfc <I2C_RequestMemoryRead+0xa4>)
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 fa0a 	bl	8006098 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c84:	69fa      	ldr	r2, [r7, #28]
 8005c86:	69b9      	ldr	r1, [r7, #24]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 f89d 	bl	8005dc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e02c      	b.n	8005cf2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d105      	bne.n	8005caa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c9e:	893b      	ldrh	r3, [r7, #8]
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ca8:	e015      	b.n	8005cd6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005caa:	893b      	ldrh	r3, [r7, #8]
 8005cac:	0a1b      	lsrs	r3, r3, #8
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	69b9      	ldr	r1, [r7, #24]
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 f883 	bl	8005dc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e012      	b.n	8005cf2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ccc:	893b      	ldrh	r3, [r7, #8]
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2140      	movs	r1, #64	@ 0x40
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f831 	bl	8005d48 <I2C_WaitOnFlagUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e000      	b.n	8005cf2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	80002000 	.word	0x80002000

08005d00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d103      	bne.n	8005d1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d007      	beq.n	8005d3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0201 	orr.w	r2, r2, #1
 8005d3a:	619a      	str	r2, [r3, #24]
  }
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	4613      	mov	r3, r2
 8005d56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d58:	e022      	b.n	8005da0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d60:	d01e      	beq.n	8005da0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d62:	f7fe fd41 	bl	80047e8 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d302      	bcc.n	8005d78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d113      	bne.n	8005da0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d7c:	f043 0220 	orr.w	r2, r3, #32
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e00f      	b.n	8005dc0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	4013      	ands	r3, r2
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	bf0c      	ite	eq
 8005db0:	2301      	moveq	r3, #1
 8005db2:	2300      	movne	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	461a      	mov	r2, r3
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d0cd      	beq.n	8005d5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005dd4:	e02c      	b.n	8005e30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 f870 	bl	8005ec0 <I2C_IsErrorOccurred>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e02a      	b.n	8005e40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005df0:	d01e      	beq.n	8005e30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df2:	f7fe fcf9 	bl	80047e8 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d302      	bcc.n	8005e08 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d113      	bne.n	8005e30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e0c:	f043 0220 	orr.w	r2, r3, #32
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e007      	b.n	8005e40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d1cb      	bne.n	8005dd6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e54:	e028      	b.n	8005ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	68b9      	ldr	r1, [r7, #8]
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 f830 	bl	8005ec0 <I2C_IsErrorOccurred>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e026      	b.n	8005eb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e6a:	f7fe fcbd 	bl	80047e8 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d302      	bcc.n	8005e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d113      	bne.n	8005ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e84:	f043 0220 	orr.w	r2, r3, #32
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e007      	b.n	8005eb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d1cf      	bne.n	8005e56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08a      	sub	sp, #40	@ 0x28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f003 0310 	and.w	r3, r3, #16
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d075      	beq.n	8005fd8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2210      	movs	r2, #16
 8005ef2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ef4:	e056      	b.n	8005fa4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005efc:	d052      	beq.n	8005fa4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005efe:	f7fe fc73 	bl	80047e8 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d302      	bcc.n	8005f14 <I2C_IsErrorOccurred+0x54>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d147      	bne.n	8005fa4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f36:	d12e      	bne.n	8005f96 <I2C_IsErrorOccurred+0xd6>
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f3e:	d02a      	beq.n	8005f96 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005f40:	7cfb      	ldrb	r3, [r7, #19]
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	d027      	beq.n	8005f96 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005f56:	f7fe fc47 	bl	80047e8 <HAL_GetTick>
 8005f5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f5c:	e01b      	b.n	8005f96 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005f5e:	f7fe fc43 	bl	80047e8 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b19      	cmp	r3, #25
 8005f6a:	d914      	bls.n	8005f96 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f70:	f043 0220 	orr.w	r2, r3, #32
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

              status = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d1dc      	bne.n	8005f5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d003      	beq.n	8005fba <I2C_IsErrorOccurred+0xfa>
 8005fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d09d      	beq.n	8005ef6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005fba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d103      	bne.n	8005fca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	f043 0304 	orr.w	r3, r3, #4
 8005fd0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00b      	beq.n	8006002 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	f043 0301 	orr.w	r3, r3, #1
 8005ff0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ffa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00b      	beq.n	8006024 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	f043 0308 	orr.w	r3, r3, #8
 8006012:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800601c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	f043 0302 	orr.w	r3, r3, #2
 8006034:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800603e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006046:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800604a:	2b00      	cmp	r3, #0
 800604c:	d01c      	beq.n	8006088 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f7ff fe56 	bl	8005d00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6859      	ldr	r1, [r3, #4]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	4b0d      	ldr	r3, [pc, #52]	@ (8006094 <I2C_IsErrorOccurred+0x1d4>)
 8006060:	400b      	ands	r3, r1
 8006062:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	431a      	orrs	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800608c:	4618      	mov	r0, r3
 800608e:	3728      	adds	r7, #40	@ 0x28
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	fe00e800 	.word	0xfe00e800

08006098 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	607b      	str	r3, [r7, #4]
 80060a2:	460b      	mov	r3, r1
 80060a4:	817b      	strh	r3, [r7, #10]
 80060a6:	4613      	mov	r3, r2
 80060a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060aa:	897b      	ldrh	r3, [r7, #10]
 80060ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060b0:	7a7b      	ldrb	r3, [r7, #9]
 80060b2:	041b      	lsls	r3, r3, #16
 80060b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	0d5b      	lsrs	r3, r3, #21
 80060d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80060d6:	4b08      	ldr	r3, [pc, #32]	@ (80060f8 <I2C_TransferConfig+0x60>)
 80060d8:	430b      	orrs	r3, r1
 80060da:	43db      	mvns	r3, r3
 80060dc:	ea02 0103 	and.w	r1, r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	03ff63ff 	.word	0x03ff63ff

080060fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b20      	cmp	r3, #32
 8006110:	d138      	bne.n	8006184 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800611c:	2302      	movs	r3, #2
 800611e:	e032      	b.n	8006186 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2224      	movs	r2, #36	@ 0x24
 800612c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0201 	bic.w	r2, r2, #1
 800613e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800614e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6819      	ldr	r1, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2220      	movs	r2, #32
 8006174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	e000      	b.n	8006186 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006184:	2302      	movs	r3, #2
  }
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006192:	b480      	push	{r7}
 8006194:	b085      	sub	sp, #20
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	d139      	bne.n	800621c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d101      	bne.n	80061b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061b2:	2302      	movs	r3, #2
 80061b4:	e033      	b.n	800621e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2224      	movs	r2, #36	@ 0x24
 80061c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0201 	bic.w	r2, r2, #1
 80061d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80061e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	021b      	lsls	r3, r3, #8
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0201 	orr.w	r2, r2, #1
 8006206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	e000      	b.n	800621e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800621c:	2302      	movs	r3, #2
  }
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
	...

0800622c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006238:	4b0b      	ldr	r3, [pc, #44]	@ (8006268 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	73fb      	strb	r3, [r7, #15]
 8006248:	e007      	b.n	800625a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800624a:	4b07      	ldr	r3, [pc, #28]	@ (8006268 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f023 0204 	bic.w	r2, r3, #4
 8006252:	4905      	ldr	r1, [pc, #20]	@ (8006268 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4313      	orrs	r3, r2
 8006258:	600b      	str	r3, [r1, #0]
  }

  return status;
 800625a:	7bfb      	ldrb	r3, [r7, #15]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	40030400 	.word	0x40030400

0800626c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8006270:	4b05      	ldr	r3, [pc, #20]	@ (8006288 <HAL_ICACHE_Enable+0x1c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a04      	ldr	r2, [pc, #16]	@ (8006288 <HAL_ICACHE_Enable+0x1c>)
 8006276:	f043 0301 	orr.w	r3, r3, #1
 800627a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	40030400 	.word	0x40030400

0800628c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8006294:	4b34      	ldr	r3, [pc, #208]	@ (8006368 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006298:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800629c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d101      	bne.n	80062aa <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	e057      	b.n	800635a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062b0:	d90a      	bls.n	80062c8 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80062b2:	4b2d      	ldr	r3, [pc, #180]	@ (8006368 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4313      	orrs	r3, r2
 80062be:	4a2a      	ldr	r2, [pc, #168]	@ (8006368 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80062c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062c4:	60d3      	str	r3, [r2, #12]
 80062c6:	e007      	b.n	80062d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80062c8:	4b27      	ldr	r3, [pc, #156]	@ (8006368 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80062d0:	4925      	ldr	r1, [pc, #148]	@ (8006368 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80062d8:	4b24      	ldr	r3, [pc, #144]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a24      	ldr	r2, [pc, #144]	@ (8006370 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80062de:	fba2 2303 	umull	r2, r3, r2, r3
 80062e2:	099b      	lsrs	r3, r3, #6
 80062e4:	2232      	movs	r2, #50	@ 0x32
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	4a21      	ldr	r2, [pc, #132]	@ (8006370 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80062ec:	fba2 2303 	umull	r2, r3, r2, r3
 80062f0:	099b      	lsrs	r3, r3, #6
 80062f2:	3301      	adds	r3, #1
 80062f4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80062f6:	e002      	b.n	80062fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80062fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006368 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d102      	bne.n	8006310 <HAL_PWREx_ControlVoltageScaling+0x84>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1f3      	bne.n	80062f8 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d01b      	beq.n	800634e <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006316:	4b15      	ldr	r3, [pc, #84]	@ (800636c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a15      	ldr	r2, [pc, #84]	@ (8006370 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800631c:	fba2 2303 	umull	r2, r3, r2, r3
 8006320:	099b      	lsrs	r3, r3, #6
 8006322:	2232      	movs	r2, #50	@ 0x32
 8006324:	fb02 f303 	mul.w	r3, r2, r3
 8006328:	4a11      	ldr	r2, [pc, #68]	@ (8006370 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800632a:	fba2 2303 	umull	r2, r3, r2, r3
 800632e:	099b      	lsrs	r3, r3, #6
 8006330:	3301      	adds	r3, #1
 8006332:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006334:	e002      	b.n	800633c <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3b01      	subs	r3, #1
 800633a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800633c:	4b0a      	ldr	r3, [pc, #40]	@ (8006368 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800633e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006340:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d102      	bne.n	800634e <HAL_PWREx_ControlVoltageScaling+0xc2>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f3      	bne.n	8006336 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e000      	b.n	800635a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	46020800 	.word	0x46020800
 800636c:	20000098 	.word	0x20000098
 8006370:	10624dd3 	.word	0x10624dd3

08006374 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8006378:	4b04      	ldr	r3, [pc, #16]	@ (800638c <HAL_PWREx_GetVoltageRange+0x18>)
 800637a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800637c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8006380:	4618      	mov	r0, r3
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	46020800 	.word	0x46020800

08006390 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006398:	4b22      	ldr	r3, [pc, #136]	@ (8006424 <HAL_PWREx_ConfigSupply+0x94>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a22      	ldr	r2, [pc, #136]	@ (8006428 <HAL_PWREx_ConfigSupply+0x98>)
 800639e:	fba2 2303 	umull	r2, r3, r2, r3
 80063a2:	099b      	lsrs	r3, r3, #6
 80063a4:	2232      	movs	r2, #50	@ 0x32
 80063a6:	fb02 f303 	mul.w	r3, r2, r3
 80063aa:	4a1f      	ldr	r2, [pc, #124]	@ (8006428 <HAL_PWREx_ConfigSupply+0x98>)
 80063ac:	fba2 2303 	umull	r2, r3, r2, r3
 80063b0:	099b      	lsrs	r3, r3, #6
 80063b2:	3301      	adds	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d113      	bne.n	80063e4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80063bc:	4b1b      	ldr	r3, [pc, #108]	@ (800642c <HAL_PWREx_ConfigSupply+0x9c>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	4a1a      	ldr	r2, [pc, #104]	@ (800642c <HAL_PWREx_ConfigSupply+0x9c>)
 80063c2:	f023 0302 	bic.w	r3, r3, #2
 80063c6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80063c8:	e002      	b.n	80063d0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80063d0:	4b16      	ldr	r3, [pc, #88]	@ (800642c <HAL_PWREx_ConfigSupply+0x9c>)
 80063d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d116      	bne.n	800640a <HAL_PWREx_ConfigSupply+0x7a>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f3      	bne.n	80063ca <HAL_PWREx_ConfigSupply+0x3a>
 80063e2:	e012      	b.n	800640a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80063e4:	4b11      	ldr	r3, [pc, #68]	@ (800642c <HAL_PWREx_ConfigSupply+0x9c>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	4a10      	ldr	r2, [pc, #64]	@ (800642c <HAL_PWREx_ConfigSupply+0x9c>)
 80063ea:	f043 0302 	orr.w	r3, r3, #2
 80063ee:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80063f0:	e002      	b.n	80063f8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80063f8:	4b0c      	ldr	r3, [pc, #48]	@ (800642c <HAL_PWREx_ConfigSupply+0x9c>)
 80063fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d102      	bne.n	800640a <HAL_PWREx_ConfigSupply+0x7a>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f3      	bne.n	80063f2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e000      	b.n	8006416 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	20000098 	.word	0x20000098
 8006428:	10624dd3 	.word	0x10624dd3
 800642c:	46020800 	.word	0x46020800

08006430 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08e      	sub	sp, #56	@ 0x38
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006438:	2300      	movs	r3, #0
 800643a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d102      	bne.n	800644a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	f000 bec3 	b.w	80071d0 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800644a:	4b9c      	ldr	r3, [pc, #624]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	f003 030c 	and.w	r3, r3, #12
 8006452:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006454:	4b99      	ldr	r3, [pc, #612]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 8006456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006458:	f003 0303 	and.w	r3, r3, #3
 800645c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0310 	and.w	r3, r3, #16
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 8172 	beq.w	8006750 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800646c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646e:	2b00      	cmp	r3, #0
 8006470:	d007      	beq.n	8006482 <HAL_RCC_OscConfig+0x52>
 8006472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006474:	2b0c      	cmp	r3, #12
 8006476:	f040 80e4 	bne.w	8006642 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800647a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647c:	2b01      	cmp	r3, #1
 800647e:	f040 80e0 	bne.w	8006642 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006482:	4b8e      	ldr	r3, [pc, #568]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d006      	beq.n	800649c <HAL_RCC_OscConfig+0x6c>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d102      	bne.n	800649c <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	f000 be9a 	b.w	80071d0 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064a0:	4b86      	ldr	r3, [pc, #536]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d004      	beq.n	80064b6 <HAL_RCC_OscConfig+0x86>
 80064ac:	4b83      	ldr	r3, [pc, #524]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80064b4:	e005      	b.n	80064c2 <HAL_RCC_OscConfig+0x92>
 80064b6:	4b81      	ldr	r3, [pc, #516]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 80064b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064bc:	041b      	lsls	r3, r3, #16
 80064be:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d255      	bcs.n	8006572 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80064c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10a      	bne.n	80064e2 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d0:	4618      	mov	r0, r3
 80064d2:	f001 f9ab 	bl	800782c <RCC_SetFlashLatencyFromMSIRange>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	f000 be77 	b.w	80071d0 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80064e2:	4b76      	ldr	r3, [pc, #472]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	4a75      	ldr	r2, [pc, #468]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 80064e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80064ec:	6093      	str	r3, [r2, #8]
 80064ee:	4b73      	ldr	r3, [pc, #460]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fa:	4970      	ldr	r1, [pc, #448]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006504:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006508:	d309      	bcc.n	800651e <HAL_RCC_OscConfig+0xee>
 800650a:	4b6c      	ldr	r3, [pc, #432]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f023 021f 	bic.w	r2, r3, #31
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	4969      	ldr	r1, [pc, #420]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 8006518:	4313      	orrs	r3, r2
 800651a:	60cb      	str	r3, [r1, #12]
 800651c:	e07e      	b.n	800661c <HAL_RCC_OscConfig+0x1ec>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006522:	2b00      	cmp	r3, #0
 8006524:	da0a      	bge.n	800653c <HAL_RCC_OscConfig+0x10c>
 8006526:	4b65      	ldr	r3, [pc, #404]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	015b      	lsls	r3, r3, #5
 8006534:	4961      	ldr	r1, [pc, #388]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 8006536:	4313      	orrs	r3, r2
 8006538:	60cb      	str	r3, [r1, #12]
 800653a:	e06f      	b.n	800661c <HAL_RCC_OscConfig+0x1ec>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006544:	d30a      	bcc.n	800655c <HAL_RCC_OscConfig+0x12c>
 8006546:	4b5d      	ldr	r3, [pc, #372]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	029b      	lsls	r3, r3, #10
 8006554:	4959      	ldr	r1, [pc, #356]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 8006556:	4313      	orrs	r3, r2
 8006558:	60cb      	str	r3, [r1, #12]
 800655a:	e05f      	b.n	800661c <HAL_RCC_OscConfig+0x1ec>
 800655c:	4b57      	ldr	r3, [pc, #348]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	03db      	lsls	r3, r3, #15
 800656a:	4954      	ldr	r1, [pc, #336]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 800656c:	4313      	orrs	r3, r2
 800656e:	60cb      	str	r3, [r1, #12]
 8006570:	e054      	b.n	800661c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006572:	4b52      	ldr	r3, [pc, #328]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	4a51      	ldr	r2, [pc, #324]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 8006578:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800657c:	6093      	str	r3, [r2, #8]
 800657e:	4b4f      	ldr	r3, [pc, #316]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658a:	494c      	ldr	r1, [pc, #304]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 800658c:	4313      	orrs	r3, r2
 800658e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006594:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006598:	d309      	bcc.n	80065ae <HAL_RCC_OscConfig+0x17e>
 800659a:	4b48      	ldr	r3, [pc, #288]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f023 021f 	bic.w	r2, r3, #31
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	4945      	ldr	r1, [pc, #276]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	60cb      	str	r3, [r1, #12]
 80065ac:	e028      	b.n	8006600 <HAL_RCC_OscConfig+0x1d0>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	da0a      	bge.n	80065cc <HAL_RCC_OscConfig+0x19c>
 80065b6:	4b41      	ldr	r3, [pc, #260]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	015b      	lsls	r3, r3, #5
 80065c4:	493d      	ldr	r1, [pc, #244]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60cb      	str	r3, [r1, #12]
 80065ca:	e019      	b.n	8006600 <HAL_RCC_OscConfig+0x1d0>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d4:	d30a      	bcc.n	80065ec <HAL_RCC_OscConfig+0x1bc>
 80065d6:	4b39      	ldr	r3, [pc, #228]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	029b      	lsls	r3, r3, #10
 80065e4:	4935      	ldr	r1, [pc, #212]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60cb      	str	r3, [r1, #12]
 80065ea:	e009      	b.n	8006600 <HAL_RCC_OscConfig+0x1d0>
 80065ec:	4b33      	ldr	r3, [pc, #204]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	03db      	lsls	r3, r3, #15
 80065fa:	4930      	ldr	r1, [pc, #192]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10a      	bne.n	800661c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660a:	4618      	mov	r0, r3
 800660c:	f001 f90e 	bl	800782c <RCC_SetFlashLatencyFromMSIRange>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	f000 bdda 	b.w	80071d0 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800661c:	f001 f8d8 	bl	80077d0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006620:	4b27      	ldr	r3, [pc, #156]	@ (80066c0 <HAL_RCC_OscConfig+0x290>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f7fe f895 	bl	8004754 <HAL_InitTick>
 800662a:	4603      	mov	r3, r0
 800662c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8006630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 808a 	beq.w	800674e <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800663a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800663e:	f000 bdc7 	b.w	80071d0 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d066      	beq.n	8006718 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800664a:	4b1c      	ldr	r3, [pc, #112]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a1b      	ldr	r2, [pc, #108]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 8006650:	f043 0301 	orr.w	r3, r3, #1
 8006654:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006656:	f7fe f8c7 	bl	80047e8 <HAL_GetTick>
 800665a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800665c:	e009      	b.n	8006672 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800665e:	f7fe f8c3 	bl	80047e8 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d902      	bls.n	8006672 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	f000 bdaf 	b.w	80071d0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006672:	4b12      	ldr	r3, [pc, #72]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0ef      	beq.n	800665e <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800667e:	4b0f      	ldr	r3, [pc, #60]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	4a0e      	ldr	r2, [pc, #56]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 8006684:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006688:	6093      	str	r3, [r2, #8]
 800668a:	4b0c      	ldr	r3, [pc, #48]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006696:	4909      	ldr	r1, [pc, #36]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 8006698:	4313      	orrs	r3, r2
 800669a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80066a4:	d30e      	bcc.n	80066c4 <HAL_RCC_OscConfig+0x294>
 80066a6:	4b05      	ldr	r3, [pc, #20]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f023 021f 	bic.w	r2, r3, #31
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	4902      	ldr	r1, [pc, #8]	@ (80066bc <HAL_RCC_OscConfig+0x28c>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60cb      	str	r3, [r1, #12]
 80066b8:	e04a      	b.n	8006750 <HAL_RCC_OscConfig+0x320>
 80066ba:	bf00      	nop
 80066bc:	46020c00 	.word	0x46020c00
 80066c0:	2000009c 	.word	0x2000009c
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	da0a      	bge.n	80066e2 <HAL_RCC_OscConfig+0x2b2>
 80066cc:	4b9b      	ldr	r3, [pc, #620]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	015b      	lsls	r3, r3, #5
 80066da:	4998      	ldr	r1, [pc, #608]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	60cb      	str	r3, [r1, #12]
 80066e0:	e036      	b.n	8006750 <HAL_RCC_OscConfig+0x320>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ea:	d30a      	bcc.n	8006702 <HAL_RCC_OscConfig+0x2d2>
 80066ec:	4b93      	ldr	r3, [pc, #588]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	029b      	lsls	r3, r3, #10
 80066fa:	4990      	ldr	r1, [pc, #576]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	60cb      	str	r3, [r1, #12]
 8006700:	e026      	b.n	8006750 <HAL_RCC_OscConfig+0x320>
 8006702:	4b8e      	ldr	r3, [pc, #568]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	03db      	lsls	r3, r3, #15
 8006710:	498a      	ldr	r1, [pc, #552]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 8006712:	4313      	orrs	r3, r2
 8006714:	60cb      	str	r3, [r1, #12]
 8006716:	e01b      	b.n	8006750 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8006718:	4b88      	ldr	r3, [pc, #544]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a87      	ldr	r2, [pc, #540]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 800671e:	f023 0301 	bic.w	r3, r3, #1
 8006722:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006724:	f7fe f860 	bl	80047e8 <HAL_GetTick>
 8006728:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800672a:	e009      	b.n	8006740 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800672c:	f7fe f85c 	bl	80047e8 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d902      	bls.n	8006740 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	f000 bd48 	b.w	80071d0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006740:	4b7e      	ldr	r3, [pc, #504]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1ef      	bne.n	800672c <HAL_RCC_OscConfig+0x2fc>
 800674c:	e000      	b.n	8006750 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800674e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 8094 	beq.w	8006886 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800675e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006760:	2b08      	cmp	r3, #8
 8006762:	d005      	beq.n	8006770 <HAL_RCC_OscConfig+0x340>
 8006764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006766:	2b0c      	cmp	r3, #12
 8006768:	d110      	bne.n	800678c <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800676a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676c:	2b03      	cmp	r3, #3
 800676e:	d10d      	bne.n	800678c <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006770:	4b72      	ldr	r3, [pc, #456]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 8083 	beq.w	8006884 <HAL_RCC_OscConfig+0x454>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d17e      	bne.n	8006884 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	f000 bd22 	b.w	80071d0 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006794:	d106      	bne.n	80067a4 <HAL_RCC_OscConfig+0x374>
 8006796:	4b69      	ldr	r3, [pc, #420]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a68      	ldr	r2, [pc, #416]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 800679c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	e041      	b.n	8006828 <HAL_RCC_OscConfig+0x3f8>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067ac:	d112      	bne.n	80067d4 <HAL_RCC_OscConfig+0x3a4>
 80067ae:	4b63      	ldr	r3, [pc, #396]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a62      	ldr	r2, [pc, #392]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80067b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	4b60      	ldr	r3, [pc, #384]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a5f      	ldr	r2, [pc, #380]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80067c0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	4b5d      	ldr	r3, [pc, #372]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a5c      	ldr	r2, [pc, #368]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80067cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067d0:	6013      	str	r3, [r2, #0]
 80067d2:	e029      	b.n	8006828 <HAL_RCC_OscConfig+0x3f8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80067dc:	d112      	bne.n	8006804 <HAL_RCC_OscConfig+0x3d4>
 80067de:	4b57      	ldr	r3, [pc, #348]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a56      	ldr	r2, [pc, #344]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80067e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	4b54      	ldr	r3, [pc, #336]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a53      	ldr	r2, [pc, #332]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80067f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	4b51      	ldr	r3, [pc, #324]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a50      	ldr	r2, [pc, #320]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80067fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006800:	6013      	str	r3, [r2, #0]
 8006802:	e011      	b.n	8006828 <HAL_RCC_OscConfig+0x3f8>
 8006804:	4b4d      	ldr	r3, [pc, #308]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a4c      	ldr	r2, [pc, #304]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 800680a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	4b4a      	ldr	r3, [pc, #296]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a49      	ldr	r2, [pc, #292]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 8006816:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	4b47      	ldr	r3, [pc, #284]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a46      	ldr	r2, [pc, #280]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 8006822:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d014      	beq.n	800685a <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8006830:	f7fd ffda 	bl	80047e8 <HAL_GetTick>
 8006834:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006836:	e009      	b.n	800684c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006838:	f7fd ffd6 	bl	80047e8 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b64      	cmp	r3, #100	@ 0x64
 8006844:	d902      	bls.n	800684c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	f000 bcc2 	b.w	80071d0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800684c:	4b3b      	ldr	r3, [pc, #236]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0ef      	beq.n	8006838 <HAL_RCC_OscConfig+0x408>
 8006858:	e015      	b.n	8006886 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800685a:	f7fd ffc5 	bl	80047e8 <HAL_GetTick>
 800685e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006860:	e009      	b.n	8006876 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006862:	f7fd ffc1 	bl	80047e8 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b64      	cmp	r3, #100	@ 0x64
 800686e:	d902      	bls.n	8006876 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	f000 bcad 	b.w	80071d0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006876:	4b31      	ldr	r3, [pc, #196]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1ef      	bne.n	8006862 <HAL_RCC_OscConfig+0x432>
 8006882:	e000      	b.n	8006886 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d066      	beq.n	8006960 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006894:	2b04      	cmp	r3, #4
 8006896:	d005      	beq.n	80068a4 <HAL_RCC_OscConfig+0x474>
 8006898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689a:	2b0c      	cmp	r3, #12
 800689c:	d11a      	bne.n	80068d4 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800689e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d117      	bne.n	80068d4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068a4:	4b25      	ldr	r3, [pc, #148]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d006      	beq.n	80068be <HAL_RCC_OscConfig+0x48e>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d102      	bne.n	80068be <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	f000 bc89 	b.w	80071d0 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80068be:	4b1f      	ldr	r3, [pc, #124]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	041b      	lsls	r3, r3, #16
 80068cc:	491b      	ldr	r1, [pc, #108]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068d2:	e045      	b.n	8006960 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d024      	beq.n	8006926 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80068dc:	4b17      	ldr	r3, [pc, #92]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a16      	ldr	r2, [pc, #88]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 80068e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068e6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80068e8:	f7fd ff7e 	bl	80047e8 <HAL_GetTick>
 80068ec:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068ee:	e009      	b.n	8006904 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068f0:	f7fd ff7a 	bl	80047e8 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d902      	bls.n	8006904 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	f000 bc66 	b.w	80071d0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006904:	4b0d      	ldr	r3, [pc, #52]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0ef      	beq.n	80068f0 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006910:	4b0a      	ldr	r3, [pc, #40]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	041b      	lsls	r3, r3, #16
 800691e:	4907      	ldr	r1, [pc, #28]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 8006920:	4313      	orrs	r3, r2
 8006922:	610b      	str	r3, [r1, #16]
 8006924:	e01c      	b.n	8006960 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006926:	4b05      	ldr	r3, [pc, #20]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a04      	ldr	r2, [pc, #16]	@ (800693c <HAL_RCC_OscConfig+0x50c>)
 800692c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006930:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006932:	f7fd ff59 	bl	80047e8 <HAL_GetTick>
 8006936:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006938:	e00c      	b.n	8006954 <HAL_RCC_OscConfig+0x524>
 800693a:	bf00      	nop
 800693c:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006940:	f7fd ff52 	bl	80047e8 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d902      	bls.n	8006954 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	f000 bc3e 	b.w	80071d0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006954:	4baf      	ldr	r3, [pc, #700]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1ef      	bne.n	8006940 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0308 	and.w	r3, r3, #8
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 80c7 	beq.w	8006afc <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800696e:	2300      	movs	r3, #0
 8006970:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006974:	4ba7      	ldr	r3, [pc, #668]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006976:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	2b00      	cmp	r3, #0
 8006980:	d111      	bne.n	80069a6 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006982:	4ba4      	ldr	r3, [pc, #656]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006984:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006988:	4aa2      	ldr	r2, [pc, #648]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 800698a:	f043 0304 	orr.w	r3, r3, #4
 800698e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006992:	4ba0      	ldr	r3, [pc, #640]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80069a0:	2301      	movs	r3, #1
 80069a2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80069a6:	4b9c      	ldr	r3, [pc, #624]	@ (8006c18 <HAL_RCC_OscConfig+0x7e8>)
 80069a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d118      	bne.n	80069e4 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80069b2:	4b99      	ldr	r3, [pc, #612]	@ (8006c18 <HAL_RCC_OscConfig+0x7e8>)
 80069b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b6:	4a98      	ldr	r2, [pc, #608]	@ (8006c18 <HAL_RCC_OscConfig+0x7e8>)
 80069b8:	f043 0301 	orr.w	r3, r3, #1
 80069bc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069be:	f7fd ff13 	bl	80047e8 <HAL_GetTick>
 80069c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80069c4:	e008      	b.n	80069d8 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069c6:	f7fd ff0f 	bl	80047e8 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e3fb      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80069d8:	4b8f      	ldr	r3, [pc, #572]	@ (8006c18 <HAL_RCC_OscConfig+0x7e8>)
 80069da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0f0      	beq.n	80069c6 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d05f      	beq.n	8006aac <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80069ec:	4b89      	ldr	r3, [pc, #548]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 80069ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069f2:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	699a      	ldr	r2, [r3, #24]
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d037      	beq.n	8006a72 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d006      	beq.n	8006a1a <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e3da      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01b      	beq.n	8006a5c <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8006a24:	4b7b      	ldr	r3, [pc, #492]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a2a:	4a7a      	ldr	r2, [pc, #488]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006a2c:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006a30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8006a34:	f7fd fed8 	bl	80047e8 <HAL_GetTick>
 8006a38:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006a3a:	e008      	b.n	8006a4e <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a3c:	f7fd fed4 	bl	80047e8 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e3c0      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006a4e:	4b71      	ldr	r3, [pc, #452]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1ef      	bne.n	8006a3c <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006a5c:	4b6d      	ldr	r3, [pc, #436]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006a5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a62:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	496a      	ldr	r1, [pc, #424]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006a72:	4b68      	ldr	r3, [pc, #416]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006a74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a78:	4a66      	ldr	r2, [pc, #408]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006a7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006a82:	f7fd feb1 	bl	80047e8 <HAL_GetTick>
 8006a86:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a8a:	f7fd fead 	bl	80047e8 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e399      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006a9c:	4b5d      	ldr	r3, [pc, #372]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0ef      	beq.n	8006a8a <HAL_RCC_OscConfig+0x65a>
 8006aaa:	e01b      	b.n	8006ae4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006aac:	4b59      	ldr	r3, [pc, #356]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006aae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ab2:	4a58      	ldr	r2, [pc, #352]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006ab4:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006ab8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006abc:	f7fd fe94 	bl	80047e8 <HAL_GetTick>
 8006ac0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006ac2:	e008      	b.n	8006ad6 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ac4:	f7fd fe90 	bl	80047e8 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e37c      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006adc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1ef      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ae4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d107      	bne.n	8006afc <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006aec:	4b49      	ldr	r3, [pc, #292]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006af2:	4a48      	ldr	r2, [pc, #288]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006af4:	f023 0304 	bic.w	r3, r3, #4
 8006af8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8112 	beq.w	8006d2e <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b10:	4b40      	ldr	r3, [pc, #256]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b16:	f003 0304 	and.w	r3, r3, #4
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d111      	bne.n	8006b42 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b24:	4a3b      	ldr	r2, [pc, #236]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006b26:	f043 0304 	orr.w	r3, r3, #4
 8006b2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006b2e:	4b39      	ldr	r3, [pc, #228]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b42:	4b35      	ldr	r3, [pc, #212]	@ (8006c18 <HAL_RCC_OscConfig+0x7e8>)
 8006b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d118      	bne.n	8006b80 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006b4e:	4b32      	ldr	r3, [pc, #200]	@ (8006c18 <HAL_RCC_OscConfig+0x7e8>)
 8006b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b52:	4a31      	ldr	r2, [pc, #196]	@ (8006c18 <HAL_RCC_OscConfig+0x7e8>)
 8006b54:	f043 0301 	orr.w	r3, r3, #1
 8006b58:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b5a:	f7fd fe45 	bl	80047e8 <HAL_GetTick>
 8006b5e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b60:	e008      	b.n	8006b74 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b62:	f7fd fe41 	bl	80047e8 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e32d      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b74:	4b28      	ldr	r3, [pc, #160]	@ (8006c18 <HAL_RCC_OscConfig+0x7e8>)
 8006b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0f0      	beq.n	8006b62 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01f      	beq.n	8006bcc <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d010      	beq.n	8006bba <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006b98:	4b1e      	ldr	r3, [pc, #120]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006ba0:	f043 0304 	orr.w	r3, r3, #4
 8006ba4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bae:	4a19      	ldr	r2, [pc, #100]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006bb0:	f043 0301 	orr.w	r3, r3, #1
 8006bb4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006bb8:	e018      	b.n	8006bec <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006bba:	4b16      	ldr	r3, [pc, #88]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bc0:	4a14      	ldr	r2, [pc, #80]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006bc2:	f043 0301 	orr.w	r3, r3, #1
 8006bc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006bca:	e00f      	b.n	8006bec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006bcc:	4b11      	ldr	r3, [pc, #68]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006bce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bd2:	4a10      	ldr	r2, [pc, #64]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006bd4:	f023 0301 	bic.w	r3, r3, #1
 8006bd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006bde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006be2:	4a0c      	ldr	r2, [pc, #48]	@ (8006c14 <HAL_RCC_OscConfig+0x7e4>)
 8006be4:	f023 0304 	bic.w	r3, r3, #4
 8006be8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d058      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8006bf4:	f7fd fdf8 	bl	80047e8 <HAL_GetTick>
 8006bf8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bfa:	e00f      	b.n	8006c1c <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bfc:	f7fd fdf4 	bl	80047e8 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d906      	bls.n	8006c1c <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e2de      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
 8006c12:	bf00      	nop
 8006c14:	46020c00 	.word	0x46020c00
 8006c18:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c1c:	4b9c      	ldr	r3, [pc, #624]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006c1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0e8      	beq.n	8006bfc <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01b      	beq.n	8006c6e <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006c36:	4b96      	ldr	r3, [pc, #600]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c3c:	4a94      	ldr	r2, [pc, #592]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006c46:	e00a      	b.n	8006c5e <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c48:	f7fd fdce 	bl	80047e8 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e2b8      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006c5e:	4b8c      	ldr	r3, [pc, #560]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0ed      	beq.n	8006c48 <HAL_RCC_OscConfig+0x818>
 8006c6c:	e053      	b.n	8006d16 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006c6e:	4b88      	ldr	r3, [pc, #544]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c74:	4a86      	ldr	r2, [pc, #536]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006c76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006c7e:	e00a      	b.n	8006c96 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c80:	f7fd fdb2 	bl	80047e8 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e29c      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006c96:	4b7e      	ldr	r3, [pc, #504]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1ed      	bne.n	8006c80 <HAL_RCC_OscConfig+0x850>
 8006ca4:	e037      	b.n	8006d16 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006ca6:	f7fd fd9f 	bl	80047e8 <HAL_GetTick>
 8006caa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cac:	e00a      	b.n	8006cc4 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cae:	f7fd fd9b 	bl	80047e8 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d901      	bls.n	8006cc4 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e285      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cc4:	4b72      	ldr	r3, [pc, #456]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006cc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1ed      	bne.n	8006cae <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006cd2:	4b6f      	ldr	r3, [pc, #444]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d01a      	beq.n	8006d16 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006ce0:	4b6b      	ldr	r3, [pc, #428]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ce6:	4a6a      	ldr	r2, [pc, #424]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006ce8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006cf0:	e00a      	b.n	8006d08 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cf2:	f7fd fd79 	bl	80047e8 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e263      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006d08:	4b61      	ldr	r3, [pc, #388]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006d0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1ed      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d16:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d107      	bne.n	8006d2e <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d1e:	4b5c      	ldr	r3, [pc, #368]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d24:	4a5a      	ldr	r2, [pc, #360]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006d26:	f023 0304 	bic.w	r3, r3, #4
 8006d2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d036      	beq.n	8006da8 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d019      	beq.n	8006d76 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006d42:	4b53      	ldr	r3, [pc, #332]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a52      	ldr	r2, [pc, #328]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006d48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006d4c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006d4e:	f7fd fd4b 	bl	80047e8 <HAL_GetTick>
 8006d52:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006d54:	e008      	b.n	8006d68 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d56:	f7fd fd47 	bl	80047e8 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d901      	bls.n	8006d68 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e233      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006d68:	4b49      	ldr	r3, [pc, #292]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0f0      	beq.n	8006d56 <HAL_RCC_OscConfig+0x926>
 8006d74:	e018      	b.n	8006da8 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006d76:	4b46      	ldr	r3, [pc, #280]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a45      	ldr	r2, [pc, #276]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006d7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d80:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006d82:	f7fd fd31 	bl	80047e8 <HAL_GetTick>
 8006d86:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d8a:	f7fd fd2d 	bl	80047e8 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e219      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006d9c:	4b3c      	ldr	r3, [pc, #240]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1f0      	bne.n	8006d8a <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d036      	beq.n	8006e22 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d019      	beq.n	8006df0 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006dbc:	4b34      	ldr	r3, [pc, #208]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a33      	ldr	r2, [pc, #204]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006dc6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006dc8:	f7fd fd0e 	bl	80047e8 <HAL_GetTick>
 8006dcc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006dd0:	f7fd fd0a 	bl	80047e8 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e1f6      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006de2:	4b2b      	ldr	r3, [pc, #172]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0f0      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x9a0>
 8006dee:	e018      	b.n	8006e22 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006df0:	4b27      	ldr	r3, [pc, #156]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a26      	ldr	r2, [pc, #152]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006df6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dfa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006dfc:	f7fd fcf4 	bl	80047e8 <HAL_GetTick>
 8006e00:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006e04:	f7fd fcf0 	bl	80047e8 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e1dc      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006e16:	4b1e      	ldr	r3, [pc, #120]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f0      	bne.n	8006e04 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d07f      	beq.n	8006f2e <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d062      	beq.n	8006efc <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006e36:	4b16      	ldr	r3, [pc, #88]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	4a15      	ldr	r2, [pc, #84]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006e3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e40:	6093      	str	r3, [r2, #8]
 8006e42:	4b13      	ldr	r3, [pc, #76]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4e:	4910      	ldr	r1, [pc, #64]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e58:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006e5c:	d309      	bcc.n	8006e72 <HAL_RCC_OscConfig+0xa42>
 8006e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f023 021f 	bic.w	r2, r3, #31
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	4909      	ldr	r1, [pc, #36]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	60cb      	str	r3, [r1, #12]
 8006e70:	e02a      	b.n	8006ec8 <HAL_RCC_OscConfig+0xa98>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	da0c      	bge.n	8006e94 <HAL_RCC_OscConfig+0xa64>
 8006e7a:	4b05      	ldr	r3, [pc, #20]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	015b      	lsls	r3, r3, #5
 8006e88:	4901      	ldr	r1, [pc, #4]	@ (8006e90 <HAL_RCC_OscConfig+0xa60>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60cb      	str	r3, [r1, #12]
 8006e8e:	e01b      	b.n	8006ec8 <HAL_RCC_OscConfig+0xa98>
 8006e90:	46020c00 	.word	0x46020c00
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e9c:	d30a      	bcc.n	8006eb4 <HAL_RCC_OscConfig+0xa84>
 8006e9e:	4ba5      	ldr	r3, [pc, #660]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	029b      	lsls	r3, r3, #10
 8006eac:	49a1      	ldr	r1, [pc, #644]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60cb      	str	r3, [r1, #12]
 8006eb2:	e009      	b.n	8006ec8 <HAL_RCC_OscConfig+0xa98>
 8006eb4:	4b9f      	ldr	r3, [pc, #636]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	03db      	lsls	r3, r3, #15
 8006ec2:	499c      	ldr	r1, [pc, #624]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006ec8:	4b9a      	ldr	r3, [pc, #616]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a99      	ldr	r2, [pc, #612]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006ece:	f043 0310 	orr.w	r3, r3, #16
 8006ed2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006ed4:	f7fd fc88 	bl	80047e8 <HAL_GetTick>
 8006ed8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006eda:	e008      	b.n	8006eee <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006edc:	f7fd fc84 	bl	80047e8 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e170      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006eee:	4b91      	ldr	r3, [pc, #580]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0320 	and.w	r3, r3, #32
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0f0      	beq.n	8006edc <HAL_RCC_OscConfig+0xaac>
 8006efa:	e018      	b.n	8006f2e <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006efc:	4b8d      	ldr	r3, [pc, #564]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a8c      	ldr	r2, [pc, #560]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006f02:	f023 0310 	bic.w	r3, r3, #16
 8006f06:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006f08:	f7fd fc6e 	bl	80047e8 <HAL_GetTick>
 8006f0c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006f0e:	e008      	b.n	8006f22 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006f10:	f7fd fc6a 	bl	80047e8 <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d901      	bls.n	8006f22 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e156      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006f22:	4b84      	ldr	r3, [pc, #528]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0320 	and.w	r3, r3, #32
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1f0      	bne.n	8006f10 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 814b 	beq.w	80071ce <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f3e:	4b7d      	ldr	r3, [pc, #500]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	f003 030c 	and.w	r3, r3, #12
 8006f46:	2b0c      	cmp	r3, #12
 8006f48:	f000 80fa 	beq.w	8007140 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	f040 80cc 	bne.w	80070ee <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006f56:	4b77      	ldr	r3, [pc, #476]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a76      	ldr	r2, [pc, #472]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006f5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f60:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006f62:	f7fd fc41 	bl	80047e8 <HAL_GetTick>
 8006f66:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006f68:	e008      	b.n	8006f7c <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f6a:	f7fd fc3d 	bl	80047e8 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d901      	bls.n	8006f7c <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e129      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006f7c:	4b6d      	ldr	r3, [pc, #436]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1f0      	bne.n	8006f6a <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f88:	4b6a      	ldr	r3, [pc, #424]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f8e:	f003 0304 	and.w	r3, r3, #4
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d111      	bne.n	8006fba <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006f96:	4b67      	ldr	r3, [pc, #412]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f9c:	4a65      	ldr	r2, [pc, #404]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006f9e:	f043 0304 	orr.w	r3, r3, #4
 8006fa2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006fa6:	4b63      	ldr	r3, [pc, #396]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006fba:	4b5f      	ldr	r3, [pc, #380]	@ (8007138 <HAL_RCC_OscConfig+0xd08>)
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fc6:	d102      	bne.n	8006fce <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006fce:	4b5a      	ldr	r3, [pc, #360]	@ (8007138 <HAL_RCC_OscConfig+0xd08>)
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	4a59      	ldr	r2, [pc, #356]	@ (8007138 <HAL_RCC_OscConfig+0xd08>)
 8006fd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fd8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006fda:	4b56      	ldr	r3, [pc, #344]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fe2:	f023 0303 	bic.w	r3, r3, #3
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006fee:	3a01      	subs	r2, #1
 8006ff0:	0212      	lsls	r2, r2, #8
 8006ff2:	4311      	orrs	r1, r2
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	494e      	ldr	r1, [pc, #312]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	628b      	str	r3, [r1, #40]	@ 0x28
 8007000:	4b4c      	ldr	r3, [pc, #304]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8007002:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007004:	4b4d      	ldr	r3, [pc, #308]	@ (800713c <HAL_RCC_OscConfig+0xd0c>)
 8007006:	4013      	ands	r3, r2
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800700c:	3a01      	subs	r2, #1
 800700e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007016:	3a01      	subs	r2, #1
 8007018:	0252      	lsls	r2, r2, #9
 800701a:	b292      	uxth	r2, r2
 800701c:	4311      	orrs	r1, r2
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007022:	3a01      	subs	r2, #1
 8007024:	0412      	lsls	r2, r2, #16
 8007026:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800702a:	4311      	orrs	r1, r2
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007030:	3a01      	subs	r2, #1
 8007032:	0612      	lsls	r2, r2, #24
 8007034:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007038:	430a      	orrs	r2, r1
 800703a:	493e      	ldr	r1, [pc, #248]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 800703c:	4313      	orrs	r3, r2
 800703e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007040:	4b3c      	ldr	r3, [pc, #240]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8007042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007044:	4a3b      	ldr	r2, [pc, #236]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8007046:	f023 0310 	bic.w	r3, r3, #16
 800704a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800704c:	4b39      	ldr	r3, [pc, #228]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 800704e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007050:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007054:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800705c:	00d2      	lsls	r2, r2, #3
 800705e:	4935      	ldr	r1, [pc, #212]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8007060:	4313      	orrs	r3, r2
 8007062:	638b      	str	r3, [r1, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007064:	4b33      	ldr	r3, [pc, #204]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8007066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007068:	4a32      	ldr	r2, [pc, #200]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 800706a:	f043 0310 	orr.w	r3, r3, #16
 800706e:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8007070:	4b30      	ldr	r3, [pc, #192]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8007072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007074:	f023 020c 	bic.w	r2, r3, #12
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800707c:	492d      	ldr	r1, [pc, #180]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 800707e:	4313      	orrs	r3, r2
 8007080:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8007082:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007086:	2b01      	cmp	r3, #1
 8007088:	d105      	bne.n	8007096 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800708a:	4b2b      	ldr	r3, [pc, #172]	@ (8007138 <HAL_RCC_OscConfig+0xd08>)
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	4a2a      	ldr	r2, [pc, #168]	@ (8007138 <HAL_RCC_OscConfig+0xd08>)
 8007090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007094:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8007096:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800709a:	2b01      	cmp	r3, #1
 800709c:	d107      	bne.n	80070ae <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800709e:	4b25      	ldr	r3, [pc, #148]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 80070a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070a4:	4a23      	ldr	r2, [pc, #140]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 80070a6:	f023 0304 	bic.w	r3, r3, #4
 80070aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80070ae:	4b21      	ldr	r3, [pc, #132]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 80070b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b2:	4a20      	ldr	r2, [pc, #128]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 80070b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070b8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80070ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a1d      	ldr	r2, [pc, #116]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 80070c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070c4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80070c6:	f7fd fb8f 	bl	80047e8 <HAL_GetTick>
 80070ca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80070cc:	e008      	b.n	80070e0 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ce:	f7fd fb8b 	bl	80047e8 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e077      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80070e0:	4b14      	ldr	r3, [pc, #80]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d0f0      	beq.n	80070ce <HAL_RCC_OscConfig+0xc9e>
 80070ec:	e06f      	b.n	80071ce <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80070ee:	4b11      	ldr	r3, [pc, #68]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a10      	ldr	r2, [pc, #64]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 80070f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070f8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80070fa:	f7fd fb75 	bl	80047e8 <HAL_GetTick>
 80070fe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007100:	e008      	b.n	8007114 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007102:	f7fd fb71 	bl	80047e8 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d901      	bls.n	8007114 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e05d      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007114:	4b07      	ldr	r3, [pc, #28]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1f0      	bne.n	8007102 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007120:	4b04      	ldr	r3, [pc, #16]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8007122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007124:	4a03      	ldr	r2, [pc, #12]	@ (8007134 <HAL_RCC_OscConfig+0xd04>)
 8007126:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800712a:	f023 0303 	bic.w	r3, r3, #3
 800712e:	6293      	str	r3, [r2, #40]	@ 0x28
 8007130:	e04d      	b.n	80071ce <HAL_RCC_OscConfig+0xd9e>
 8007132:	bf00      	nop
 8007134:	46020c00 	.word	0x46020c00
 8007138:	46020800 	.word	0x46020800
 800713c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007140:	4b25      	ldr	r3, [pc, #148]	@ (80071d8 <HAL_RCC_OscConfig+0xda8>)
 8007142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007144:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007146:	4b24      	ldr	r3, [pc, #144]	@ (80071d8 <HAL_RCC_OscConfig+0xda8>)
 8007148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800714a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007150:	2b01      	cmp	r3, #1
 8007152:	d03a      	beq.n	80071ca <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	f003 0203 	and.w	r2, r3, #3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800715e:	429a      	cmp	r2, r3
 8007160:	d133      	bne.n	80071ca <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	0a1b      	lsrs	r3, r3, #8
 8007166:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007170:	429a      	cmp	r2, r3
 8007172:	d12a      	bne.n	80071ca <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	0b1b      	lsrs	r3, r3, #12
 8007178:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007180:	429a      	cmp	r2, r3
 8007182:	d122      	bne.n	80071ca <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800718e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007190:	429a      	cmp	r2, r3
 8007192:	d11a      	bne.n	80071ca <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	0a5b      	lsrs	r3, r3, #9
 8007198:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071a0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d111      	bne.n	80071ca <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	0c1b      	lsrs	r3, r3, #16
 80071aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071b2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d108      	bne.n	80071ca <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	0e1b      	lsrs	r3, r3, #24
 80071bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071c4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d001      	beq.n	80071ce <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e000      	b.n	80071d0 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3738      	adds	r7, #56	@ 0x38
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	46020c00 	.word	0x46020c00

080071dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e1d9      	b.n	80075a4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071f0:	4b9b      	ldr	r3, [pc, #620]	@ (8007460 <HAL_RCC_ClockConfig+0x284>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 030f 	and.w	r3, r3, #15
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d910      	bls.n	8007220 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071fe:	4b98      	ldr	r3, [pc, #608]	@ (8007460 <HAL_RCC_ClockConfig+0x284>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f023 020f 	bic.w	r2, r3, #15
 8007206:	4996      	ldr	r1, [pc, #600]	@ (8007460 <HAL_RCC_ClockConfig+0x284>)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	4313      	orrs	r3, r2
 800720c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800720e:	4b94      	ldr	r3, [pc, #592]	@ (8007460 <HAL_RCC_ClockConfig+0x284>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 030f 	and.w	r3, r3, #15
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	429a      	cmp	r2, r3
 800721a:	d001      	beq.n	8007220 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e1c1      	b.n	80075a4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	2b00      	cmp	r3, #0
 800722a:	d010      	beq.n	800724e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	695a      	ldr	r2, [r3, #20]
 8007230:	4b8c      	ldr	r3, [pc, #560]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 8007232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007234:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007238:	429a      	cmp	r2, r3
 800723a:	d908      	bls.n	800724e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800723c:	4b89      	ldr	r3, [pc, #548]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 800723e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007240:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	4986      	ldr	r1, [pc, #536]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 800724a:	4313      	orrs	r3, r2
 800724c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0308 	and.w	r3, r3, #8
 8007256:	2b00      	cmp	r3, #0
 8007258:	d012      	beq.n	8007280 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691a      	ldr	r2, [r3, #16]
 800725e:	4b81      	ldr	r3, [pc, #516]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	091b      	lsrs	r3, r3, #4
 8007264:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007268:	429a      	cmp	r2, r3
 800726a:	d909      	bls.n	8007280 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800726c:	4b7d      	ldr	r3, [pc, #500]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	011b      	lsls	r3, r3, #4
 800727a:	497a      	ldr	r1, [pc, #488]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 800727c:	4313      	orrs	r3, r2
 800727e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b00      	cmp	r3, #0
 800728a:	d010      	beq.n	80072ae <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	4b74      	ldr	r3, [pc, #464]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007298:	429a      	cmp	r2, r3
 800729a:	d908      	bls.n	80072ae <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800729c:	4b71      	ldr	r3, [pc, #452]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	496e      	ldr	r1, [pc, #440]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d010      	beq.n	80072dc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689a      	ldr	r2, [r3, #8]
 80072be:	4b69      	ldr	r3, [pc, #420]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f003 030f 	and.w	r3, r3, #15
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d908      	bls.n	80072dc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80072ca:	4b66      	ldr	r3, [pc, #408]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	f023 020f 	bic.w	r2, r3, #15
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	4963      	ldr	r1, [pc, #396]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 80d2 	beq.w	800748e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80072ea:	2300      	movs	r3, #0
 80072ec:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d143      	bne.n	800737e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072f6:	4b5b      	ldr	r3, [pc, #364]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 80072f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b00      	cmp	r3, #0
 8007302:	d110      	bne.n	8007326 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007304:	4b57      	ldr	r3, [pc, #348]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 8007306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800730a:	4a56      	ldr	r2, [pc, #344]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 800730c:	f043 0304 	orr.w	r3, r3, #4
 8007310:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007314:	4b53      	ldr	r3, [pc, #332]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 8007316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800731a:	f003 0304 	and.w	r3, r3, #4
 800731e:	60bb      	str	r3, [r7, #8]
 8007320:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007322:	2301      	movs	r3, #1
 8007324:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007326:	f7fd fa5f 	bl	80047e8 <HAL_GetTick>
 800732a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800732c:	4b4e      	ldr	r3, [pc, #312]	@ (8007468 <HAL_RCC_ClockConfig+0x28c>)
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00f      	beq.n	8007358 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007338:	e008      	b.n	800734c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800733a:	f7fd fa55 	bl	80047e8 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b02      	cmp	r3, #2
 8007346:	d901      	bls.n	800734c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e12b      	b.n	80075a4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800734c:	4b46      	ldr	r3, [pc, #280]	@ (8007468 <HAL_RCC_ClockConfig+0x28c>)
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d0f0      	beq.n	800733a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d107      	bne.n	800736e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800735e:	4b41      	ldr	r3, [pc, #260]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 8007360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007364:	4a3f      	ldr	r2, [pc, #252]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 8007366:	f023 0304 	bic.w	r3, r3, #4
 800736a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800736e:	4b3d      	ldr	r3, [pc, #244]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d121      	bne.n	80073be <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e112      	b.n	80075a4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d107      	bne.n	8007396 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007386:	4b37      	ldr	r3, [pc, #220]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d115      	bne.n	80073be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e106      	b.n	80075a4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d107      	bne.n	80073ae <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800739e:	4b31      	ldr	r3, [pc, #196]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0304 	and.w	r3, r3, #4
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d109      	bne.n	80073be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e0fa      	b.n	80075a4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073ae:	4b2d      	ldr	r3, [pc, #180]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e0f2      	b.n	80075a4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80073be:	4b29      	ldr	r3, [pc, #164]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	f023 0203 	bic.w	r2, r3, #3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	4926      	ldr	r1, [pc, #152]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80073d0:	f7fd fa0a 	bl	80047e8 <HAL_GetTick>
 80073d4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d112      	bne.n	8007404 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073de:	e00a      	b.n	80073f6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073e0:	f7fd fa02 	bl	80047e8 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d901      	bls.n	80073f6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e0d6      	b.n	80075a4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	f003 030c 	and.w	r3, r3, #12
 80073fe:	2b0c      	cmp	r3, #12
 8007400:	d1ee      	bne.n	80073e0 <HAL_RCC_ClockConfig+0x204>
 8007402:	e044      	b.n	800748e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2b02      	cmp	r3, #2
 800740a:	d112      	bne.n	8007432 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800740c:	e00a      	b.n	8007424 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800740e:	f7fd f9eb 	bl	80047e8 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800741c:	4293      	cmp	r3, r2
 800741e:	d901      	bls.n	8007424 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e0bf      	b.n	80075a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007424:	4b0f      	ldr	r3, [pc, #60]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	f003 030c 	and.w	r3, r3, #12
 800742c:	2b08      	cmp	r3, #8
 800742e:	d1ee      	bne.n	800740e <HAL_RCC_ClockConfig+0x232>
 8007430:	e02d      	b.n	800748e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d123      	bne.n	8007482 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800743a:	e00a      	b.n	8007452 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800743c:	f7fd f9d4 	bl	80047e8 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800744a:	4293      	cmp	r3, r2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e0a8      	b.n	80075a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007452:	4b04      	ldr	r3, [pc, #16]	@ (8007464 <HAL_RCC_ClockConfig+0x288>)
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f003 030c 	and.w	r3, r3, #12
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1ee      	bne.n	800743c <HAL_RCC_ClockConfig+0x260>
 800745e:	e016      	b.n	800748e <HAL_RCC_ClockConfig+0x2b2>
 8007460:	40022000 	.word	0x40022000
 8007464:	46020c00 	.word	0x46020c00
 8007468:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800746c:	f7fd f9bc 	bl	80047e8 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800747a:	4293      	cmp	r3, r2
 800747c:	d901      	bls.n	8007482 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e090      	b.n	80075a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007482:	4b4a      	ldr	r3, [pc, #296]	@ (80075ac <HAL_RCC_ClockConfig+0x3d0>)
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	f003 030c 	and.w	r3, r3, #12
 800748a:	2b04      	cmp	r3, #4
 800748c:	d1ee      	bne.n	800746c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d010      	beq.n	80074bc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689a      	ldr	r2, [r3, #8]
 800749e:	4b43      	ldr	r3, [pc, #268]	@ (80075ac <HAL_RCC_ClockConfig+0x3d0>)
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	f003 030f 	and.w	r3, r3, #15
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d208      	bcs.n	80074bc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80074aa:	4b40      	ldr	r3, [pc, #256]	@ (80075ac <HAL_RCC_ClockConfig+0x3d0>)
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	f023 020f 	bic.w	r2, r3, #15
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	493d      	ldr	r1, [pc, #244]	@ (80075ac <HAL_RCC_ClockConfig+0x3d0>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074bc:	4b3c      	ldr	r3, [pc, #240]	@ (80075b0 <HAL_RCC_ClockConfig+0x3d4>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 030f 	and.w	r3, r3, #15
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d210      	bcs.n	80074ec <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ca:	4b39      	ldr	r3, [pc, #228]	@ (80075b0 <HAL_RCC_ClockConfig+0x3d4>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f023 020f 	bic.w	r2, r3, #15
 80074d2:	4937      	ldr	r1, [pc, #220]	@ (80075b0 <HAL_RCC_ClockConfig+0x3d4>)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074da:	4b35      	ldr	r3, [pc, #212]	@ (80075b0 <HAL_RCC_ClockConfig+0x3d4>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 030f 	and.w	r3, r3, #15
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d001      	beq.n	80074ec <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e05b      	b.n	80075a4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d010      	beq.n	800751a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68da      	ldr	r2, [r3, #12]
 80074fc:	4b2b      	ldr	r3, [pc, #172]	@ (80075ac <HAL_RCC_ClockConfig+0x3d0>)
 80074fe:	6a1b      	ldr	r3, [r3, #32]
 8007500:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007504:	429a      	cmp	r2, r3
 8007506:	d208      	bcs.n	800751a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007508:	4b28      	ldr	r3, [pc, #160]	@ (80075ac <HAL_RCC_ClockConfig+0x3d0>)
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	4925      	ldr	r1, [pc, #148]	@ (80075ac <HAL_RCC_ClockConfig+0x3d0>)
 8007516:	4313      	orrs	r3, r2
 8007518:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d012      	beq.n	800754c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691a      	ldr	r2, [r3, #16]
 800752a:	4b20      	ldr	r3, [pc, #128]	@ (80075ac <HAL_RCC_ClockConfig+0x3d0>)
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	091b      	lsrs	r3, r3, #4
 8007530:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007534:	429a      	cmp	r2, r3
 8007536:	d209      	bcs.n	800754c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007538:	4b1c      	ldr	r3, [pc, #112]	@ (80075ac <HAL_RCC_ClockConfig+0x3d0>)
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	011b      	lsls	r3, r3, #4
 8007546:	4919      	ldr	r1, [pc, #100]	@ (80075ac <HAL_RCC_ClockConfig+0x3d0>)
 8007548:	4313      	orrs	r3, r2
 800754a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0310 	and.w	r3, r3, #16
 8007554:	2b00      	cmp	r3, #0
 8007556:	d010      	beq.n	800757a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	695a      	ldr	r2, [r3, #20]
 800755c:	4b13      	ldr	r3, [pc, #76]	@ (80075ac <HAL_RCC_ClockConfig+0x3d0>)
 800755e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007560:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007564:	429a      	cmp	r2, r3
 8007566:	d208      	bcs.n	800757a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007568:	4b10      	ldr	r3, [pc, #64]	@ (80075ac <HAL_RCC_ClockConfig+0x3d0>)
 800756a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	490d      	ldr	r1, [pc, #52]	@ (80075ac <HAL_RCC_ClockConfig+0x3d0>)
 8007576:	4313      	orrs	r3, r2
 8007578:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800757a:	f000 f821 	bl	80075c0 <HAL_RCC_GetSysClockFreq>
 800757e:	4602      	mov	r2, r0
 8007580:	4b0a      	ldr	r3, [pc, #40]	@ (80075ac <HAL_RCC_ClockConfig+0x3d0>)
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	f003 030f 	and.w	r3, r3, #15
 8007588:	490a      	ldr	r1, [pc, #40]	@ (80075b4 <HAL_RCC_ClockConfig+0x3d8>)
 800758a:	5ccb      	ldrb	r3, [r1, r3]
 800758c:	fa22 f303 	lsr.w	r3, r2, r3
 8007590:	4a09      	ldr	r2, [pc, #36]	@ (80075b8 <HAL_RCC_ClockConfig+0x3dc>)
 8007592:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007594:	4b09      	ldr	r3, [pc, #36]	@ (80075bc <HAL_RCC_ClockConfig+0x3e0>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4618      	mov	r0, r3
 800759a:	f7fd f8db 	bl	8004754 <HAL_InitTick>
 800759e:	4603      	mov	r3, r0
 80075a0:	73fb      	strb	r3, [r7, #15]

  return status;
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	46020c00 	.word	0x46020c00
 80075b0:	40022000 	.word	0x40022000
 80075b4:	0800c0c8 	.word	0x0800c0c8
 80075b8:	20000098 	.word	0x20000098
 80075bc:	2000009c 	.word	0x2000009c

080075c0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b08b      	sub	sp, #44	@ 0x2c
 80075c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075ce:	4b7b      	ldr	r3, [pc, #492]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x1fc>)
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	f003 030c 	and.w	r3, r3, #12
 80075d6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075d8:	4b78      	ldr	r3, [pc, #480]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x1fc>)
 80075da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075dc:	f003 0303 	and.w	r3, r3, #3
 80075e0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d005      	beq.n	80075f4 <HAL_RCC_GetSysClockFreq+0x34>
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	2b0c      	cmp	r3, #12
 80075ec:	d121      	bne.n	8007632 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d11e      	bne.n	8007632 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80075f4:	4b71      	ldr	r3, [pc, #452]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x1fc>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d107      	bne.n	8007610 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8007600:	4b6e      	ldr	r3, [pc, #440]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007602:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007606:	0b1b      	lsrs	r3, r3, #12
 8007608:	f003 030f 	and.w	r3, r3, #15
 800760c:	627b      	str	r3, [r7, #36]	@ 0x24
 800760e:	e005      	b.n	800761c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8007610:	4b6a      	ldr	r3, [pc, #424]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	0f1b      	lsrs	r3, r3, #28
 8007616:	f003 030f 	and.w	r3, r3, #15
 800761a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800761c:	4a68      	ldr	r2, [pc, #416]	@ (80077c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007624:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d110      	bne.n	800764e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800762c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007630:	e00d      	b.n	800764e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007632:	4b62      	ldr	r3, [pc, #392]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	f003 030c 	and.w	r3, r3, #12
 800763a:	2b04      	cmp	r3, #4
 800763c:	d102      	bne.n	8007644 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800763e:	4b61      	ldr	r3, [pc, #388]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007640:	623b      	str	r3, [r7, #32]
 8007642:	e004      	b.n	800764e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	2b08      	cmp	r3, #8
 8007648:	d101      	bne.n	800764e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800764a:	4b5e      	ldr	r3, [pc, #376]	@ (80077c4 <HAL_RCC_GetSysClockFreq+0x204>)
 800764c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	2b0c      	cmp	r3, #12
 8007652:	f040 80ac 	bne.w	80077ae <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007656:	4b59      	ldr	r3, [pc, #356]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765a:	f003 0303 	and.w	r3, r3, #3
 800765e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007660:	4b56      	ldr	r3, [pc, #344]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007664:	0a1b      	lsrs	r3, r3, #8
 8007666:	f003 030f 	and.w	r3, r3, #15
 800766a:	3301      	adds	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800766e:	4b53      	ldr	r3, [pc, #332]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007672:	091b      	lsrs	r3, r3, #4
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800767a:	4b50      	ldr	r3, [pc, #320]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800767c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767e:	08db      	lsrs	r3, r3, #3
 8007680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	fb02 f303 	mul.w	r3, r2, r3
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007692:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 8086 	beq.w	80077aa <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d003      	beq.n	80076ac <HAL_RCC_GetSysClockFreq+0xec>
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d022      	beq.n	80076f0 <HAL_RCC_GetSysClockFreq+0x130>
 80076aa:	e043      	b.n	8007734 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b6:	eddf 6a44 	vldr	s13, [pc, #272]	@ 80077c8 <HAL_RCC_GetSysClockFreq+0x208>
 80076ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076be:	4b3f      	ldr	r3, [pc, #252]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x1fc>)
 80076c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80076ce:	ed97 6a01 	vldr	s12, [r7, #4]
 80076d2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80077cc <HAL_RCC_GetSysClockFreq+0x20c>
 80076d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80076da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80076de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80076e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ea:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80076ee:	e046      	b.n	800777e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fa:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80077c8 <HAL_RCC_GetSysClockFreq+0x208>
 80076fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007702:	4b2e      	ldr	r3, [pc, #184]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007712:	ed97 6a01 	vldr	s12, [r7, #4]
 8007716:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80077cc <HAL_RCC_GetSysClockFreq+0x20c>
 800771a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800771e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007726:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800772a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800772e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8007732:	e024      	b.n	800777e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	ee07 3a90 	vmov	s15, r3
 8007744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007748:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800774c:	4b1b      	ldr	r3, [pc, #108]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800774e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007754:	ee07 3a90 	vmov	s15, r3
 8007758:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800775c:	ed97 6a01 	vldr	s12, [r7, #4]
 8007760:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 80077cc <HAL_RCC_GetSysClockFreq+0x20c>
 8007764:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007768:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800776c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007770:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007778:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800777c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800777e:	4b0f      	ldr	r3, [pc, #60]	@ (80077bc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007782:	0e1b      	lsrs	r3, r3, #24
 8007784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007788:	3301      	adds	r3, #1
 800778a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007796:	edd7 6a07 	vldr	s13, [r7, #28]
 800779a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800779e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a2:	ee17 3a90 	vmov	r3, s15
 80077a6:	623b      	str	r3, [r7, #32]
 80077a8:	e001      	b.n	80077ae <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80077aa:	2300      	movs	r3, #0
 80077ac:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80077ae:	6a3b      	ldr	r3, [r7, #32]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	372c      	adds	r7, #44	@ 0x2c
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	46020c00 	.word	0x46020c00
 80077c0:	0800c0e0 	.word	0x0800c0e0
 80077c4:	00f42400 	.word	0x00f42400
 80077c8:	4b742400 	.word	0x4b742400
 80077cc:	46000000 	.word	0x46000000

080077d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80077d4:	f7ff fef4 	bl	80075c0 <HAL_RCC_GetSysClockFreq>
 80077d8:	4602      	mov	r2, r0
 80077da:	4b07      	ldr	r3, [pc, #28]	@ (80077f8 <HAL_RCC_GetHCLKFreq+0x28>)
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	f003 030f 	and.w	r3, r3, #15
 80077e2:	4906      	ldr	r1, [pc, #24]	@ (80077fc <HAL_RCC_GetHCLKFreq+0x2c>)
 80077e4:	5ccb      	ldrb	r3, [r1, r3]
 80077e6:	fa22 f303 	lsr.w	r3, r2, r3
 80077ea:	4a05      	ldr	r2, [pc, #20]	@ (8007800 <HAL_RCC_GetHCLKFreq+0x30>)
 80077ec:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80077ee:	4b04      	ldr	r3, [pc, #16]	@ (8007800 <HAL_RCC_GetHCLKFreq+0x30>)
 80077f0:	681b      	ldr	r3, [r3, #0]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	46020c00 	.word	0x46020c00
 80077fc:	0800c0c8 	.word	0x0800c0c8
 8007800:	20000098 	.word	0x20000098

08007804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007808:	f7ff ffe2 	bl	80077d0 <HAL_RCC_GetHCLKFreq>
 800780c:	4602      	mov	r2, r0
 800780e:	4b05      	ldr	r3, [pc, #20]	@ (8007824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	091b      	lsrs	r3, r3, #4
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	4903      	ldr	r1, [pc, #12]	@ (8007828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800781a:	5ccb      	ldrb	r3, [r1, r3]
 800781c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007820:	4618      	mov	r0, r3
 8007822:	bd80      	pop	{r7, pc}
 8007824:	46020c00 	.word	0x46020c00
 8007828:	0800c0d8 	.word	0x0800c0d8

0800782c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007834:	4b3e      	ldr	r3, [pc, #248]	@ (8007930 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007836:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800783a:	f003 0304 	and.w	r3, r3, #4
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007842:	f7fe fd97 	bl	8006374 <HAL_PWREx_GetVoltageRange>
 8007846:	6178      	str	r0, [r7, #20]
 8007848:	e019      	b.n	800787e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800784a:	4b39      	ldr	r3, [pc, #228]	@ (8007930 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800784c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007850:	4a37      	ldr	r2, [pc, #220]	@ (8007930 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007852:	f043 0304 	orr.w	r3, r3, #4
 8007856:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800785a:	4b35      	ldr	r3, [pc, #212]	@ (8007930 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800785c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	60fb      	str	r3, [r7, #12]
 8007866:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007868:	f7fe fd84 	bl	8006374 <HAL_PWREx_GetVoltageRange>
 800786c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800786e:	4b30      	ldr	r3, [pc, #192]	@ (8007930 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007870:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007874:	4a2e      	ldr	r2, [pc, #184]	@ (8007930 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007876:	f023 0304 	bic.w	r3, r3, #4
 800787a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007884:	d003      	beq.n	800788e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800788c:	d109      	bne.n	80078a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007894:	d202      	bcs.n	800789c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007896:	2301      	movs	r3, #1
 8007898:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800789a:	e033      	b.n	8007904 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800789c:	2300      	movs	r3, #0
 800789e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80078a0:	e030      	b.n	8007904 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078a8:	d208      	bcs.n	80078bc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078b0:	d102      	bne.n	80078b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80078b2:	2303      	movs	r3, #3
 80078b4:	613b      	str	r3, [r7, #16]
 80078b6:	e025      	b.n	8007904 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e035      	b.n	8007928 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078c2:	d90f      	bls.n	80078e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d109      	bne.n	80078de <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078d0:	d902      	bls.n	80078d8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80078d2:	2300      	movs	r3, #0
 80078d4:	613b      	str	r3, [r7, #16]
 80078d6:	e015      	b.n	8007904 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80078d8:	2301      	movs	r3, #1
 80078da:	613b      	str	r3, [r7, #16]
 80078dc:	e012      	b.n	8007904 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80078de:	2300      	movs	r3, #0
 80078e0:	613b      	str	r3, [r7, #16]
 80078e2:	e00f      	b.n	8007904 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078ea:	d109      	bne.n	8007900 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078f2:	d102      	bne.n	80078fa <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80078f4:	2301      	movs	r3, #1
 80078f6:	613b      	str	r3, [r7, #16]
 80078f8:	e004      	b.n	8007904 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80078fa:	2302      	movs	r3, #2
 80078fc:	613b      	str	r3, [r7, #16]
 80078fe:	e001      	b.n	8007904 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007900:	2301      	movs	r3, #1
 8007902:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007904:	4b0b      	ldr	r3, [pc, #44]	@ (8007934 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f023 020f 	bic.w	r2, r3, #15
 800790c:	4909      	ldr	r1, [pc, #36]	@ (8007934 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	4313      	orrs	r3, r2
 8007912:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007914:	4b07      	ldr	r3, [pc, #28]	@ (8007934 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 030f 	and.w	r3, r3, #15
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	429a      	cmp	r2, r3
 8007920:	d001      	beq.n	8007926 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e000      	b.n	8007928 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3718      	adds	r7, #24
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	46020c00 	.word	0x46020c00
 8007934:	40022000 	.word	0x40022000

08007938 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8007938:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007970 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800793c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800793e:	e003      	b.n	8007948 <LoopCopyDataInit>

08007940 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007940:	4b0c      	ldr	r3, [pc, #48]	@ (8007974 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007942:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007944:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007946:	3104      	adds	r1, #4

08007948 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007948:	480b      	ldr	r0, [pc, #44]	@ (8007978 <LoopForever+0xa>)
	ldr	r3, =_edata
 800794a:	4b0c      	ldr	r3, [pc, #48]	@ (800797c <LoopForever+0xe>)
	adds	r2, r0, r1
 800794c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800794e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007950:	d3f6      	bcc.n	8007940 <CopyDataInit>
	ldr	r2, =_sbss
 8007952:	4a0b      	ldr	r2, [pc, #44]	@ (8007980 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007954:	e002      	b.n	800795c <LoopFillZerobss>

08007956 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007956:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007958:	f842 3b04 	str.w	r3, [r2], #4

0800795c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800795c:	4b09      	ldr	r3, [pc, #36]	@ (8007984 <LoopForever+0x16>)
	cmp	r2, r3
 800795e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007960:	d3f9      	bcc.n	8007956 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007962:	f7fc fe91 	bl	8004688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007966:	f001 f9ad 	bl	8008cc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800796a:	f000 f80f 	bl	800798c <main>

0800796e <LoopForever>:

LoopForever:
    b LoopForever
 800796e:	e7fe      	b.n	800796e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8007970:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8007974:	0800c5b8 	.word	0x0800c5b8
	ldr	r0, =_sdata
 8007978:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800797c:	20000288 	.word	0x20000288
	ldr	r2, =_sbss
 8007980:	20000288 	.word	0x20000288
	ldr	r3, = _ebss
 8007984:	200010d8 	.word	0x200010d8

08007988 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007988:	e7fe      	b.n	8007988 <ADC1_IRQHandler>
	...

0800798c <main>:
 * @param  None
 * @retval None
 */

int main(void)
{
 800798c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007990:	b09a      	sub	sp, #104	@ 0x68
 8007992:	af04      	add	r7, sp, #16
	int32_t  result = 0;
 8007994:	2300      	movs	r3, #0
 8007996:	657b      	str	r3, [r7, #84]	@ 0x54
	BSP_MOTION_SENSOR_Axes_t axes;

	uint32_t msTick, msTickPrev = 0;
 8007998:	2300      	movs	r3, #0
 800799a:	653b      	str	r3, [r7, #80]	@ 0x50

	float r, theta, phi;
	float Acc_X, Acc_Y, Acc_Z;
	float Acc_Z_Norm;
	const float RADIAN = 57.298;
 800799c:	4bb2      	ldr	r3, [pc, #712]	@ (8007c68 <main+0x2dc>)
 800799e:	643b      	str	r3, [r7, #64]	@ 0x40

	int32_t accel_mag;

	int32_t state;
	int32_t msTickStateChange;
	int32_t msTickStateChange_1 = 1;
 80079a0:	2301      	movs	r3, #1
 80079a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int32_t msTickDwell_Max = 5000;
 80079a4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80079a8:	63bb      	str	r3, [r7, #56]	@ 0x38
	int32_t msTickDwell_Min = 1500;
 80079aa:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80079ae:	637b      	str	r3, [r7, #52]	@ 0x34
	int32_t Z_Threshold = 800;
 80079b0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80079b4:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t state_prev;



	initialise_monitor_handles();	/*rtt*/
 80079b6:	f003 fb75 	bl	800b0a4 <initialise_monitor_handles>
       - Configure the Flash prefetch
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 3
       - Low Level Initialization
	 */
	HAL_Init();
 80079ba:	f7fc fe9d 	bl	80046f8 <HAL_Init>
	/* Enable the Instruction Cache */
	CACHE_Enable();
 80079be:	f000 fa2f 	bl	8007e20 <CACHE_Enable>

	/* Configure the System clock to have a frequency of 160 MHz */
	SystemClock_Config();
 80079c2:	f000 f9bb 	bl	8007d3c <SystemClock_Config>

	/* Initialize User Button */

	result = Ms_Button_Init();
 80079c6:	f000 fb13 	bl	8007ff0 <Ms_Button_Init>
 80079ca:	6578      	str	r0, [r7, #84]	@ 0x54
	if (result < 0){
 80079cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	da03      	bge.n	80079da <main+0x4e>
		printf("Initialization Error %i\n", result);
 80079d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079d4:	48a5      	ldr	r0, [pc, #660]	@ (8007c6c <main+0x2e0>)
 80079d6:	f001 f8eb 	bl	8008bb0 <iprintf>
	}


	printf("\n\nPlatform Angle Computation in Spherical Coordinates: Start and Stop with User Button Click\n");
 80079da:	48a5      	ldr	r0, [pc, #660]	@ (8007c70 <main+0x2e4>)
 80079dc:	f001 f958 	bl	8008c90 <puts>
	User_Button_Wait();
 80079e0:	f000 fb1a 	bl	8008018 <User_Button_Wait>

	result = Ms_Accel_Init();
 80079e4:	f000 fa3a 	bl	8007e5c <Ms_Accel_Init>
 80079e8:	6578      	str	r0, [r7, #84]	@ 0x54
	if (result < 0){
 80079ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f280 80ce 	bge.w	8007b8e <main+0x202>
		printf("Initialization Error %i\n", result);
 80079f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079f4:	489d      	ldr	r0, [pc, #628]	@ (8007c6c <main+0x2e0>)
 80079f6:	f001 f8db 	bl	8008bb0 <iprintf>
	}

	while (UserButtonPressed == 0)
 80079fa:	e0c8      	b.n	8007b8e <main+0x202>
	{

		if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_ACCELERO, &axes) != BSP_ERROR_NONE) result--;
 80079fc:	1d3b      	adds	r3, r7, #4
 80079fe:	461a      	mov	r2, r3
 8007a00:	2102      	movs	r1, #2
 8007a02:	2000      	movs	r0, #0
 8007a04:	f7f9 ff8a 	bl	800191c <BSP_MOTION_SENSOR_GetAxes>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d002      	beq.n	8007a14 <main+0x88>
 8007a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a10:	3b01      	subs	r3, #1
 8007a12:	657b      	str	r3, [r7, #84]	@ 0x54
		if (result < 0){
 8007a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	da03      	bge.n	8007a22 <main+0x96>
			printf("Sampling Error %i\n", result);
 8007a1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a1c:	4895      	ldr	r0, [pc, #596]	@ (8007c74 <main+0x2e8>)
 8007a1e:	f001 f8c7 	bl	8008bb0 <iprintf>
		}

		HAL_Delay(500);
 8007a22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007a26:	f7fc feeb 	bl	8004800 <HAL_Delay>

		/* Enter Sensor Sampling and Sensor Orientation Computation Here */

		/* Start of Segment */
		/****************************************************************/
		Acc_X = (float)axes.xval;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	ee07 3a90 	vmov	s15, r3
 8007a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a34:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		Acc_Y = (float)axes.yval;
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	ee07 3a90 	vmov	s15, r3
 8007a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a42:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		Acc_Z = (float)axes.zval;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	ee07 3a90 	vmov	s15, r3
 8007a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a50:	edc7 7a08 	vstr	s15, [r7, #32]

		accel_mag = axes.xval*axes.xval + axes.yval*axes.yval + axes.zval*axes.zval;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	fb03 f202 	mul.w	r2, r3, r2
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	68b9      	ldr	r1, [r7, #8]
 8007a60:	fb01 f303 	mul.w	r3, r1, r3
 8007a64:	441a      	add	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	68f9      	ldr	r1, [r7, #12]
 8007a6a:	fb01 f303 	mul.w	r3, r1, r3
 8007a6e:	4413      	add	r3, r2
 8007a70:	61fb      	str	r3, [r7, #28]
		accel_mag = sqrt(accel_mag);
 8007a72:	69f8      	ldr	r0, [r7, #28]
 8007a74:	f7f8 fd5a 	bl	800052c <__aeabi_i2d>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	ec43 2b10 	vmov	d0, r2, r3
 8007a80:	f003 fee8 	bl	800b854 <sqrt>
 8007a84:	ec53 2b10 	vmov	r2, r3, d0
 8007a88:	4610      	mov	r0, r2
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	f7f9 f868 	bl	8000b60 <__aeabi_d2iz>
 8007a90:	4603      	mov	r3, r0
 8007a92:	61fb      	str	r3, [r7, #28]

		r = (float)accel_mag;
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	ee07 3a90 	vmov	s15, r3
 8007a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a9e:	edc7 7a06 	vstr	s15, [r7, #24]
		Acc_Z_Norm = Acc_Z/r;
 8007aa2:	edd7 6a08 	vldr	s13, [r7, #32]
 8007aa6:	ed97 7a06 	vldr	s14, [r7, #24]
 8007aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aae:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		if(Acc_Z_Norm > 1.0){
 8007ab2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8007ab6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac2:	dd02      	ble.n	8007aca <main+0x13e>
			Acc_Z_Norm = 1.0;
 8007ac4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8007ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}
		if(Acc_Z_Norm < -1.0){
 8007aca:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8007ace:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8007ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ada:	d501      	bpl.n	8007ae0 <main+0x154>
			Acc_Z_Norm = -1.0;
 8007adc:	4b66      	ldr	r3, [pc, #408]	@ (8007c78 <main+0x2ec>)
 8007ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}
		theta = acos(Acc_Z_Norm)*RADIAN;
 8007ae0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007ae2:	f7f8 fd35 	bl	8000550 <__aeabi_f2d>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	ec43 2b10 	vmov	d0, r2, r3
 8007aee:	f003 fb57 	bl	800b1a0 <acos>
 8007af2:	ec55 4b10 	vmov	r4, r5, d0
 8007af6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8007af8:	f7f8 fd2a 	bl	8000550 <__aeabi_f2d>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4620      	mov	r0, r4
 8007b02:	4629      	mov	r1, r5
 8007b04:	f7f8 fd7c 	bl	8000600 <__aeabi_dmul>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	4619      	mov	r1, r3
 8007b10:	f7f9 f84e 	bl	8000bb0 <__aeabi_d2f>
 8007b14:	4603      	mov	r3, r0
 8007b16:	617b      	str	r3, [r7, #20]
		phi = atan2(Acc_Y, Acc_X)*RADIAN;
 8007b18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b1a:	f7f8 fd19 	bl	8000550 <__aeabi_f2d>
 8007b1e:	4604      	mov	r4, r0
 8007b20:	460d      	mov	r5, r1
 8007b22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b24:	f7f8 fd14 	bl	8000550 <__aeabi_f2d>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	ec43 2b11 	vmov	d1, r2, r3
 8007b30:	ec45 4b10 	vmov	d0, r4, r5
 8007b34:	f003 fb68 	bl	800b208 <atan2>
 8007b38:	ec55 4b10 	vmov	r4, r5, d0
 8007b3c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8007b3e:	f7f8 fd07 	bl	8000550 <__aeabi_f2d>
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	4620      	mov	r0, r4
 8007b48:	4629      	mov	r1, r5
 8007b4a:	f7f8 fd59 	bl	8000600 <__aeabi_dmul>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4610      	mov	r0, r2
 8007b54:	4619      	mov	r1, r3
 8007b56:	f7f9 f82b 	bl	8000bb0 <__aeabi_d2f>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	613b      	str	r3, [r7, #16]

		printf("Orientation: \tr = %0.1f (milli-g)\tTheta = %0.1f (degrees)\t"
 8007b5e:	69b8      	ldr	r0, [r7, #24]
 8007b60:	f7f8 fcf6 	bl	8000550 <__aeabi_f2d>
 8007b64:	4680      	mov	r8, r0
 8007b66:	4689      	mov	r9, r1
 8007b68:	6978      	ldr	r0, [r7, #20]
 8007b6a:	f7f8 fcf1 	bl	8000550 <__aeabi_f2d>
 8007b6e:	4604      	mov	r4, r0
 8007b70:	460d      	mov	r5, r1
 8007b72:	6938      	ldr	r0, [r7, #16]
 8007b74:	f7f8 fcec 	bl	8000550 <__aeabi_f2d>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b80:	e9cd 4500 	strd	r4, r5, [sp]
 8007b84:	4642      	mov	r2, r8
 8007b86:	464b      	mov	r3, r9
 8007b88:	483c      	ldr	r0, [pc, #240]	@ (8007c7c <main+0x2f0>)
 8007b8a:	f001 f811 	bl	8008bb0 <iprintf>
	while (UserButtonPressed == 0)
 8007b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8007c80 <main+0x2f4>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f43f af31 	beq.w	80079fc <main+0x70>

	/****************************************************************/
	/**               Four State Pattern Recognition             **/
	/****************************************************************/

	printf("\n\nMotion Pattern Recognition: Start and Stop with User Button Click\n");
 8007b9a:	483a      	ldr	r0, [pc, #232]	@ (8007c84 <main+0x2f8>)
 8007b9c:	f001 f878 	bl	8008c90 <puts>
	printf("Dwell Time Configured for %i (seconds)\n", msTickDwell_Max/1000);
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba2:	4a39      	ldr	r2, [pc, #228]	@ (8007c88 <main+0x2fc>)
 8007ba4:	fb82 1203 	smull	r1, r2, r2, r3
 8007ba8:	1192      	asrs	r2, r2, #6
 8007baa:	17db      	asrs	r3, r3, #31
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4836      	ldr	r0, [pc, #216]	@ (8007c8c <main+0x300>)
 8007bb2:	f000 fffd 	bl	8008bb0 <iprintf>
	printf("Z Axis Acceleration Configured for %i (milli-g)\n", Z_Threshold);
 8007bb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007bb8:	4835      	ldr	r0, [pc, #212]	@ (8007c90 <main+0x304>)
 8007bba:	f000 fff9 	bl	8008bb0 <iprintf>

	User_Button_Wait();
 8007bbe:	f000 fa2b 	bl	8008018 <User_Button_Wait>

	result = Ms_Accel_Init();
 8007bc2:	f000 f94b 	bl	8007e5c <Ms_Accel_Init>
 8007bc6:	6578      	str	r0, [r7, #84]	@ 0x54
	if (result < 0){
 8007bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	da03      	bge.n	8007bd6 <main+0x24a>
		printf("Initialization Error %i\n", result);
 8007bce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bd0:	4826      	ldr	r0, [pc, #152]	@ (8007c6c <main+0x2e0>)
 8007bd2:	f000 ffed 	bl	8008bb0 <iprintf>
	}

	state = 0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
	printf("Initial State = %i\n", state);
 8007bda:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007bdc:	482d      	ldr	r0, [pc, #180]	@ (8007c94 <main+0x308>)
 8007bde:	f000 ffe7 	bl	8008bb0 <iprintf>
	while (UserButtonPressed == 0)
 8007be2:	e096      	b.n	8007d12 <main+0x386>
	{
		msTick = HAL_GetTick();
 8007be4:	f7fc fe00 	bl	80047e8 <HAL_GetTick>
 8007be8:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(msTick % DATA_PERIOD_MS == 0 && msTickPrev != msTick)
 8007bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f040 808e 	bne.w	8007d12 <main+0x386>
 8007bf6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	f000 8089 	beq.w	8007d12 <main+0x386>
		{
			msTickPrev = msTick;
 8007c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c02:	653b      	str	r3, [r7, #80]	@ 0x50

			if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_ACCELERO, &axes) != BSP_ERROR_NONE) result--;
 8007c04:	1d3b      	adds	r3, r7, #4
 8007c06:	461a      	mov	r2, r3
 8007c08:	2102      	movs	r1, #2
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	f7f9 fe86 	bl	800191c <BSP_MOTION_SENSOR_GetAxes>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <main+0x290>
 8007c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	657b      	str	r3, [r7, #84]	@ 0x54
			if (result < 0){
 8007c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	da03      	bge.n	8007c2a <main+0x29e>
				printf("Sampling Error %i\n", result);
 8007c22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c24:	4813      	ldr	r0, [pc, #76]	@ (8007c74 <main+0x2e8>)
 8007c26:	f000 ffc3 	bl	8008bb0 <iprintf>
			}

			/* Enter Motion Pattern Computation Here */
			/* Start of Segment */
			/****************************************************************/
			switch(state){
 8007c2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d870      	bhi.n	8007d12 <main+0x386>
 8007c30:	a201      	add	r2, pc, #4	@ (adr r2, 8007c38 <main+0x2ac>)
 8007c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c36:	bf00      	nop
 8007c38:	08007c49 	.word	0x08007c49
 8007c3c:	08007c9d 	.word	0x08007c9d
 8007c40:	08007ce5 	.word	0x08007ce5
 8007c44:	08007cf9 	.word	0x08007cf9
			case 0:
				if(axes.zval < -Z_Threshold){
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4c:	425b      	negs	r3, r3
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	da5f      	bge.n	8007d12 <main+0x386>
					state = 1;
 8007c52:	2301      	movs	r3, #1
 8007c54:	64bb      	str	r3, [r7, #72]	@ 0x48
					msTickStateChange = msTick;
 8007c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c58:	647b      	str	r3, [r7, #68]	@ 0x44
					msTickStateChange_1 = msTick;
 8007c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
					printf("State = %i\n", state);
 8007c5e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007c60:	480d      	ldr	r0, [pc, #52]	@ (8007c98 <main+0x30c>)
 8007c62:	f000 ffa5 	bl	8008bb0 <iprintf>
				}
				break;
 8007c66:	e054      	b.n	8007d12 <main+0x386>
 8007c68:	42653127 	.word	0x42653127
 8007c6c:	0800bdd8 	.word	0x0800bdd8
 8007c70:	0800bdf4 	.word	0x0800bdf4
 8007c74:	0800be54 	.word	0x0800be54
 8007c78:	bf800000 	.word	0xbf800000
 8007c7c:	0800be68 	.word	0x0800be68
 8007c80:	20000ed4 	.word	0x20000ed4
 8007c84:	0800bebc 	.word	0x0800bebc
 8007c88:	10624dd3 	.word	0x10624dd3
 8007c8c:	0800bf00 	.word	0x0800bf00
 8007c90:	0800bf28 	.word	0x0800bf28
 8007c94:	0800bf5c 	.word	0x0800bf5c
 8007c98:	0800bf70 	.word	0x0800bf70
			case 1:
				if(axes.zval > Z_Threshold && (msTick - msTickStateChange) < msTickDwell_Max
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	da10      	bge.n	8007cc6 <main+0x33a>
 8007ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ca8:	1ad2      	subs	r2, r2, r3
 8007caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d20a      	bcs.n	8007cc6 <main+0x33a>
							&& (msTick - msTickStateChange) > msTickDwell_Min){
 8007cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cb4:	1ad2      	subs	r2, r2, r3
 8007cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d904      	bls.n	8007cc6 <main+0x33a>
					state = 2;
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
					msTickStateChange = msTick;
 8007cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cc4:	e00d      	b.n	8007ce2 <main+0x356>
				}else if((msTick - msTickStateChange) > msTickDwell_Max){
 8007cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cca:	1ad2      	subs	r2, r2, r3
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d91f      	bls.n	8007d12 <main+0x386>
					state = 3;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
					msTickStateChange = msTick;
 8007cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd8:	647b      	str	r3, [r7, #68]	@ 0x44
					printf("Motion Pattern Not Reconginzed (Too Slow), Return to Upright, State = %i\n", state);
 8007cda:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007cdc:	4813      	ldr	r0, [pc, #76]	@ (8007d2c <main+0x3a0>)
 8007cde:	f000 ff67 	bl	8008bb0 <iprintf>
				}
				break;
 8007ce2:	e016      	b.n	8007d12 <main+0x386>
			case 2:
				printf("Motion Pattern Pattern Recognized\n");
 8007ce4:	4812      	ldr	r0, [pc, #72]	@ (8007d30 <main+0x3a4>)
 8007ce6:	f000 ffd3 	bl	8008c90 <puts>
				state = 0;
 8007cea:	2300      	movs	r3, #0
 8007cec:	64bb      	str	r3, [r7, #72]	@ 0x48
				printf("Sensor Returned to Upright, State = %i\n", state);
 8007cee:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007cf0:	4810      	ldr	r0, [pc, #64]	@ (8007d34 <main+0x3a8>)
 8007cf2:	f000 ff5d 	bl	8008bb0 <iprintf>
				break;
 8007cf6:	e00c      	b.n	8007d12 <main+0x386>

			case 3:
				if(axes.zval > Z_Threshold){
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	da08      	bge.n	8007d12 <main+0x386>
					state = 0;
 8007d00:	2300      	movs	r3, #0
 8007d02:	64bb      	str	r3, [r7, #72]	@ 0x48
					msTickStateChange = msTick;
 8007d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d06:	647b      	str	r3, [r7, #68]	@ 0x44

					printf("Sensor Returned to Upright, State = %i\n", state);
 8007d08:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007d0a:	480a      	ldr	r0, [pc, #40]	@ (8007d34 <main+0x3a8>)
 8007d0c:	f000 ff50 	bl	8008bb0 <iprintf>
					break;
 8007d10:	bf00      	nop
	while (UserButtonPressed == 0)
 8007d12:	4b09      	ldr	r3, [pc, #36]	@ (8007d38 <main+0x3ac>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f43f af63 	beq.w	8007be4 <main+0x258>
 8007d1e:	2300      	movs	r3, #0



		}
	}
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3758      	adds	r7, #88	@ 0x58
 8007d24:	46bd      	mov	sp, r7
 8007d26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007d2a:	bf00      	nop
 8007d2c:	0800bf7c 	.word	0x0800bf7c
 8007d30:	0800bfc8 	.word	0x0800bfc8
 8007d34:	0800bfec 	.word	0x0800bfec
 8007d38:	20000ed4 	.word	0x20000ed4

08007d3c <SystemClock_Config>:
 * @retval None
 */


void SystemClock_Config(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b0a0      	sub	sp, #128	@ 0x80
 8007d40:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007d42:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8007d46:	2200      	movs	r2, #0
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	605a      	str	r2, [r3, #4]
 8007d4c:	609a      	str	r2, [r3, #8]
 8007d4e:	60da      	str	r2, [r3, #12]
 8007d50:	611a      	str	r2, [r3, #16]
 8007d52:	615a      	str	r2, [r3, #20]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007d54:	f107 0308 	add.w	r3, r7, #8
 8007d58:	2260      	movs	r2, #96	@ 0x60
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 ff9f 	bl	8008ca0 <memset>

	/* Enable voltage range 1 for frequency above 100 Mhz */
	__HAL_RCC_PWR_CLK_ENABLE();
 8007d62:	4b2e      	ldr	r3, [pc, #184]	@ (8007e1c <SystemClock_Config+0xe0>)
 8007d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d68:	4a2c      	ldr	r2, [pc, #176]	@ (8007e1c <SystemClock_Config+0xe0>)
 8007d6a:	f043 0304 	orr.w	r3, r3, #4
 8007d6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007d72:	4b2a      	ldr	r3, [pc, #168]	@ (8007e1c <SystemClock_Config+0xe0>)
 8007d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d78:	f003 0304 	and.w	r3, r3, #4
 8007d7c:	607b      	str	r3, [r7, #4]
 8007d7e:	687b      	ldr	r3, [r7, #4]
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d80:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8007d84:	f7fe fa82 	bl	800628c <HAL_PWREx_ControlVoltageScaling>

	/* Switch to SMPS regulator instead of LDO */
	HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY);
 8007d88:	2002      	movs	r0, #2
 8007d8a:	f7fe fb01 	bl	8006390 <HAL_PWREx_ConfigSupply>

	__HAL_RCC_PWR_CLK_DISABLE();
 8007d8e:	4b23      	ldr	r3, [pc, #140]	@ (8007e1c <SystemClock_Config+0xe0>)
 8007d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d94:	4a21      	ldr	r2, [pc, #132]	@ (8007e1c <SystemClock_Config+0xe0>)
 8007d96:	f023 0304 	bic.w	r3, r3, #4
 8007d9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

	/* MSI Oscillator enabled at reset (4Mhz), activate PLL with MSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8007d9e:	2310      	movs	r3, #16
 8007da0:	60bb      	str	r3, [r7, #8]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007da2:	2301      	movs	r3, #1
 8007da4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8007da6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8007dac:	2310      	movs	r3, #16
 8007dae:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007db0:	2302      	movs	r3, #2
 8007db2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007db4:	2301      	movs	r3, #1
 8007db6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8007db8:	2300      	movs	r3, #0
 8007dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLN = 80;
 8007dc0:	2350      	movs	r3, #80	@ 0x50
 8007dc2:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = 2;
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLP = 2;
 8007dc8:	2302      	movs	r3, #2
 8007dca:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8007dcc:	2302      	movs	r3, #2
 8007dce:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLFRACN= 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	667b      	str	r3, [r7, #100]	@ 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007dd4:	f107 0308 	add.w	r3, r7, #8
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fe fb29 	bl	8006430 <HAL_RCC_OscConfig>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d000      	beq.n	8007de6 <SystemClock_Config+0xaa>
	{
		/* Initialization Error */
		while(1);
 8007de4:	e7fe      	b.n	8007de4 <SystemClock_Config+0xa8>
	}

	/* Select PLL as system clock source and configure bus clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8007de6:	231f      	movs	r3, #31
 8007de8:	66bb      	str	r3, [r7, #104]	@ 0x68
			RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_PCLK3);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007dea:	2303      	movs	r3, #3
 8007dec:	66fb      	str	r3, [r7, #108]	@ 0x6c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007dee:	2300      	movs	r3, #0
 8007df0:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007df2:	2300      	movs	r3, #0
 8007df4:	677b      	str	r3, [r7, #116]	@ 0x74
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007df6:	2300      	movs	r3, #0
 8007df8:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007dfe:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8007e02:	2104      	movs	r1, #4
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7ff f9e9 	bl	80071dc <HAL_RCC_ClockConfig>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d000      	beq.n	8007e12 <SystemClock_Config+0xd6>
	{
		/* Initialization Error */
		while(1);
 8007e10:	e7fe      	b.n	8007e10 <SystemClock_Config+0xd4>
	}
}
 8007e12:	bf00      	nop
 8007e14:	3780      	adds	r7, #128	@ 0x80
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	46020c00 	.word	0x46020c00

08007e20 <CACHE_Enable>:
 * @brief  Enable ICACHE with 1-way set-associative configuration.
 * @param  None
 * @retval None
 */
static void CACHE_Enable(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
	/* Configure ICACHE associativity mode */
	HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY);
 8007e24:	2000      	movs	r0, #0
 8007e26:	f7fe fa01 	bl	800622c <HAL_ICACHE_ConfigAssociativityMode>

	/* Enable ICACHE */
	HAL_ICACHE_Enable();
 8007e2a:	f7fe fa1f 	bl	800626c <HAL_ICACHE_Enable>
}
 8007e2e:	bf00      	nop
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	71fb      	strb	r3, [r7, #7]
	if (Button == BUTTON_USER)
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d102      	bne.n	8007e4a <BSP_PB_Callback+0x16>
	{
		UserButtonPressed = SET;
 8007e44:	4b04      	ldr	r3, [pc, #16]	@ (8007e58 <BSP_PB_Callback+0x24>)
 8007e46:	2201      	movs	r2, #1
 8007e48:	701a      	strb	r2, [r3, #0]
	}
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	20000ed4 	.word	0x20000ed4

08007e5c <Ms_Accel_Init>:
	/* De-initialize function */
	if (BSP_MOTION_SENSOR_DeInit(0) != BSP_ERROR_NONE) result--;
}

int32_t  Ms_Accel_Init(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b08c      	sub	sp, #48	@ 0x30
 8007e60:	af00      	add	r7, sp, #0
	int32_t  result  = 0;
 8007e62:	2300      	movs	r3, #0
 8007e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t fullScale;

	/* Initialize function for Microaccelerometer */

	/* Initialize function */
	if (BSP_MOTION_SENSOR_Init(0, MOTION_ACCELERO) != BSP_ERROR_NONE) result--;
 8007e66:	2102      	movs	r1, #2
 8007e68:	2000      	movs	r0, #0
 8007e6a:	f7f9 fc37 	bl	80016dc <BSP_MOTION_SENSOR_Init>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <Ms_Accel_Init+0x1e>
 8007e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e76:	3b01      	subs	r3, #1
 8007e78:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_GetCapabilities(0, &Capabilities) != BSP_ERROR_NONE) result--;
 8007e7a:	f107 0310 	add.w	r3, r7, #16
 8007e7e:	4619      	mov	r1, r3
 8007e80:	2000      	movs	r0, #0
 8007e82:	f7f9 fc7b 	bl	800177c <BSP_MOTION_SENSOR_GetCapabilities>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <Ms_Accel_Init+0x36>
 8007e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Read id function */
	if (BSP_MOTION_SENSOR_ReadID(0, &chipId) != BSP_ERROR_NONE) result--;
 8007e92:	f107 030f 	add.w	r3, r7, #15
 8007e96:	4619      	mov	r1, r3
 8007e98:	2000      	movs	r0, #0
 8007e9a:	f7f9 fca7 	bl	80017ec <BSP_MOTION_SENSOR_ReadID>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <Ms_Accel_Init+0x4e>
 8007ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Enable function */
	if (BSP_MOTION_SENSOR_Enable(0, MOTION_ACCELERO) != BSP_ERROR_NONE) result--;
 8007eaa:	2102      	movs	r1, #2
 8007eac:	2000      	movs	r0, #0
 8007eae:	f7f9 fcd5 	bl	800185c <BSP_MOTION_SENSOR_Enable>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <Ms_Accel_Init+0x62>
 8007eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetFullScale and SetFullScale functions */
	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 16) != BSP_ERROR_NONE) result--;
 8007ebe:	2210      	movs	r2, #16
 8007ec0:	2102      	movs	r1, #2
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	f7f9 ff1e 	bl	8001d04 <BSP_MOTION_SENSOR_SetFullScale>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <Ms_Accel_Init+0x78>
 8007ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 8007ed4:	463b      	mov	r3, r7
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	2102      	movs	r1, #2
 8007eda:	2000      	movs	r0, #0
 8007edc:	f7f9 feae 	bl	8001c3c <BSP_MOTION_SENSOR_GetFullScale>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <Ms_Accel_Init+0x90>
 8007ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (fullScale != 16) result--;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2b10      	cmp	r3, #16
 8007ef0:	d002      	beq.n	8007ef8 <Ms_Accel_Init+0x9c>
 8007ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 2) != BSP_ERROR_NONE) result--;
 8007ef8:	2202      	movs	r2, #2
 8007efa:	2102      	movs	r1, #2
 8007efc:	2000      	movs	r0, #0
 8007efe:	f7f9 ff01 	bl	8001d04 <BSP_MOTION_SENSOR_SetFullScale>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d002      	beq.n	8007f0e <Ms_Accel_Init+0xb2>
 8007f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 8007f0e:	463b      	mov	r3, r7
 8007f10:	461a      	mov	r2, r3
 8007f12:	2102      	movs	r1, #2
 8007f14:	2000      	movs	r0, #0
 8007f16:	f7f9 fe91 	bl	8001c3c <BSP_MOTION_SENSOR_GetFullScale>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <Ms_Accel_Init+0xca>
 8007f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f22:	3b01      	subs	r3, #1
 8007f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (fullScale != 2) result--;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d002      	beq.n	8007f32 <Ms_Accel_Init+0xd6>
 8007f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetOutputDataRate and SetOutputDataRate functions */
	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 3333.0f) != BSP_ERROR_NONE) result--;
 8007f32:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8007fe8 <Ms_Accel_Init+0x18c>
 8007f36:	2102      	movs	r1, #2
 8007f38:	2000      	movs	r0, #0
 8007f3a:	f7f9 fe1b 	bl	8001b74 <BSP_MOTION_SENSOR_SetOutputDataRate>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <Ms_Accel_Init+0xee>
 8007f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f46:	3b01      	subs	r3, #1
 8007f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 8007f4a:	1d3b      	adds	r3, r7, #4
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	2102      	movs	r1, #2
 8007f50:	2000      	movs	r0, #0
 8007f52:	f7f9 fdab 	bl	8001aac <BSP_MOTION_SENSOR_GetOutputDataRate>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d002      	beq.n	8007f62 <Ms_Accel_Init+0x106>
 8007f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (outputDataRate != 3333.0f) result--;
 8007f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8007f66:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8007fe8 <Ms_Accel_Init+0x18c>
 8007f6a:	eef4 7a47 	vcmp.f32	s15, s14
 8007f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f72:	d002      	beq.n	8007f7a <Ms_Accel_Init+0x11e>
 8007f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f76:	3b01      	subs	r3, #1
 8007f78:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 208.0f) != BSP_ERROR_NONE) result--;
 8007f7a:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8007fec <Ms_Accel_Init+0x190>
 8007f7e:	2102      	movs	r1, #2
 8007f80:	2000      	movs	r0, #0
 8007f82:	f7f9 fdf7 	bl	8001b74 <BSP_MOTION_SENSOR_SetOutputDataRate>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <Ms_Accel_Init+0x136>
 8007f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 8007f92:	1d3b      	adds	r3, r7, #4
 8007f94:	461a      	mov	r2, r3
 8007f96:	2102      	movs	r1, #2
 8007f98:	2000      	movs	r0, #0
 8007f9a:	f7f9 fd87 	bl	8001aac <BSP_MOTION_SENSOR_GetOutputDataRate>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d002      	beq.n	8007faa <Ms_Accel_Init+0x14e>
 8007fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (outputDataRate != 208.0f) result--;
 8007faa:	edd7 7a01 	vldr	s15, [r7, #4]
 8007fae:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007fec <Ms_Accel_Init+0x190>
 8007fb2:	eef4 7a47 	vcmp.f32	s15, s14
 8007fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fba:	d002      	beq.n	8007fc2 <Ms_Accel_Init+0x166>
 8007fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetSensitivity function */
	if (BSP_MOTION_SENSOR_GetSensitivity(0, MOTION_ACCELERO, &sensitivity) != BSP_ERROR_NONE) result--;
 8007fc2:	f107 0308 	add.w	r3, r7, #8
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	2102      	movs	r1, #2
 8007fca:	2000      	movs	r0, #0
 8007fcc:	f7f9 fd0a 	bl	80019e4 <BSP_MOTION_SENSOR_GetSensitivity>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d002      	beq.n	8007fdc <Ms_Accel_Init+0x180>
 8007fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	62fb      	str	r3, [r7, #44]	@ 0x2c

	return result;
 8007fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3730      	adds	r7, #48	@ 0x30
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	45505000 	.word	0x45505000
 8007fec:	43500000 	.word	0x43500000

08007ff0 <Ms_Button_Init>:
	return result;

}

int32_t Ms_Button_Init(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
	int32_t  result  = 0;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	607b      	str	r3, [r7, #4]
	/* Initialize user button */
	if (BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI) != BSP_ERROR_NONE) result--;
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	f7f8 fe27 	bl	8000c50 <BSP_PB_Init>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <Ms_Button_Init+0x1e>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	3b01      	subs	r3, #1
 800800c:	607b      	str	r3, [r7, #4]
	return result;
 800800e:	687b      	ldr	r3, [r7, #4]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <User_Button_Wait>:
	UserButtonPressed = RESET;
	printf("\n");
}

void User_Button_Wait()
{
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
	printf("\n");
 800801c:	200a      	movs	r0, #10
 800801e:	f000 fdd9 	bl	8008bd4 <putchar>
	UserButtonPressed = RESET;
 8008022:	4b0a      	ldr	r3, [pc, #40]	@ (800804c <User_Button_Wait+0x34>)
 8008024:	2200      	movs	r2, #0
 8008026:	701a      	strb	r2, [r3, #0]
	while (UserButtonPressed == 0)
 8008028:	e002      	b.n	8008030 <User_Button_Wait+0x18>
	{
		HAL_Delay(10);
 800802a:	200a      	movs	r0, #10
 800802c:	f7fc fbe8 	bl	8004800 <HAL_Delay>
	while (UserButtonPressed == 0)
 8008030:	4b06      	ldr	r3, [pc, #24]	@ (800804c <User_Button_Wait+0x34>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d0f7      	beq.n	800802a <User_Button_Wait+0x12>
	}
	UserButtonPressed = RESET;
 800803a:	4b04      	ldr	r3, [pc, #16]	@ (800804c <User_Button_Wait+0x34>)
 800803c:	2200      	movs	r2, #0
 800803e:	701a      	strb	r2, [r3, #0]
	printf("\n");
 8008040:	200a      	movs	r0, #10
 8008042:	f000 fdc7 	bl	8008bd4 <putchar>
}
 8008046:	bf00      	nop
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	20000ed4 	.word	0x20000ed4

08008050 <HAL_MspInit>:
/**
  * @brief  Initialize the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8008050:	b480      	push	{r7}
 8008052:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
}
 8008054:	bf00      	nop
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800805e:	b480      	push	{r7}
 8008060:	af00      	add	r7, sp, #0
}
 8008062:	bf00      	nop
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800806c:	b480      	push	{r7}
 800806e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8008070:	e7fe      	b.n	8008070 <HardFault_Handler+0x4>

08008072 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8008072:	b480      	push	{r7}
 8008074:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8008076:	e7fe      	b.n	8008076 <MemManage_Handler+0x4>

08008078 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8008078:	b480      	push	{r7}
 800807a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800807c:	e7fe      	b.n	800807c <BusFault_Handler+0x4>

0800807e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800807e:	b480      	push	{r7}
 8008080:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8008082:	e7fe      	b.n	8008082 <UsageFault_Handler+0x4>

08008084 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8008084:	b480      	push	{r7}
 8008086:	af00      	add	r7, sp, #0
}
 8008088:	bf00      	nop
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8008092:	b480      	push	{r7}
 8008094:	af00      	add	r7, sp, #0
  while (1)
 8008096:	e7fe      	b.n	8008096 <DebugMon_Handler+0x4>

08008098 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8008098:	b480      	push	{r7}
 800809a:	af00      	add	r7, sp, #0
  while (1)
 800809c:	e7fe      	b.n	800809c <PendSV_Handler+0x4>

0800809e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80080a2:	f7fc fb8d 	bl	80047c0 <HAL_IncTick>
}
 80080a6:	bf00      	nop
 80080a8:	bd80      	pop	{r7, pc}

080080aa <GPDMA1_Channel0_IRQHandler>:
  * @brief  This function handles GPDMA_Channel0 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0, AUDIO_IN_DEVICE_DIGITAL_MIC2);
 80080ae:	2102      	movs	r1, #2
 80080b0:	2000      	movs	r0, #0
 80080b2:	f7f8 fe57 	bl	8000d64 <BSP_AUDIO_IN_IRQHandler>
}
 80080b6:	bf00      	nop
 80080b8:	bd80      	pop	{r7, pc}

080080ba <GPDMA1_Channel6_IRQHandler>:
  * @brief  This function handles GPDMA_Channel6 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel6_IRQHandler(void)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0, AUDIO_IN_DEVICE_DIGITAL_MIC1);
 80080be:	2101      	movs	r1, #1
 80080c0:	2000      	movs	r0, #0
 80080c2:	f7f8 fe4f 	bl	8000d64 <BSP_AUDIO_IN_IRQHandler>
} 
 80080c6:	bf00      	nop
 80080c8:	bd80      	pop	{r7, pc}
	...

080080cc <EXTI13_IRQHandler>:
  * @brief  This function handles EXTI13 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI13_IRQHandler(void)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&hpb_exti[0]);
 80080d0:	4802      	ldr	r0, [pc, #8]	@ (80080dc <EXTI13_IRQHandler+0x10>)
 80080d2:	f7fc ff55 	bl	8004f80 <HAL_EXTI_IRQHandler>
}
 80080d6:	bf00      	nop
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	200002a4 	.word	0x200002a4

080080e0 <DCMI_PSSI_IRQHandler>:
  * @brief  This function handles DCMI_PSSI interrupt request.
  * @param  None
  * @retval None
  */
void DCMI_PSSI_IRQHandler(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 80080e4:	4802      	ldr	r0, [pc, #8]	@ (80080f0 <DCMI_PSSI_IRQHandler+0x10>)
 80080e6:	f7fc fcbf 	bl	8004a68 <HAL_DCMI_IRQHandler>
}
 80080ea:	bf00      	nop
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	20000df4 	.word	0x20000df4

080080f4 <GPDMA1_Channel12_IRQHandler>:
  * @brief  This function handles GPDMA_Channel12 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 80080f8:	4b03      	ldr	r3, [pc, #12]	@ (8008108 <GPDMA1_Channel12_IRQHandler+0x14>)
 80080fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fc fd8b 	bl	8004c18 <HAL_DMA_IRQHandler>
}
 8008102:	bf00      	nop
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20000df4 	.word	0x20000df4

0800810c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008114:	4a14      	ldr	r2, [pc, #80]	@ (8008168 <_sbrk+0x5c>)
 8008116:	4b15      	ldr	r3, [pc, #84]	@ (800816c <_sbrk+0x60>)
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008120:	4b13      	ldr	r3, [pc, #76]	@ (8008170 <_sbrk+0x64>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d102      	bne.n	800812e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008128:	4b11      	ldr	r3, [pc, #68]	@ (8008170 <_sbrk+0x64>)
 800812a:	4a12      	ldr	r2, [pc, #72]	@ (8008174 <_sbrk+0x68>)
 800812c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800812e:	4b10      	ldr	r3, [pc, #64]	@ (8008170 <_sbrk+0x64>)
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4413      	add	r3, r2
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	429a      	cmp	r2, r3
 800813a:	d207      	bcs.n	800814c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800813c:	f000 fdbc 	bl	8008cb8 <__errno>
 8008140:	4603      	mov	r3, r0
 8008142:	220c      	movs	r2, #12
 8008144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008146:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800814a:	e009      	b.n	8008160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800814c:	4b08      	ldr	r3, [pc, #32]	@ (8008170 <_sbrk+0x64>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008152:	4b07      	ldr	r3, [pc, #28]	@ (8008170 <_sbrk+0x64>)
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4413      	add	r3, r2
 800815a:	4a05      	ldr	r2, [pc, #20]	@ (8008170 <_sbrk+0x64>)
 800815c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800815e:	68fb      	ldr	r3, [r7, #12]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	200c0000 	.word	0x200c0000
 800816c:	00001000 	.word	0x00001000
 8008170:	20000ed8 	.word	0x20000ed8
 8008174:	200010d8 	.word	0x200010d8

08008178 <__cvt>:
 8008178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800817c:	ec57 6b10 	vmov	r6, r7, d0
 8008180:	2f00      	cmp	r7, #0
 8008182:	460c      	mov	r4, r1
 8008184:	4619      	mov	r1, r3
 8008186:	463b      	mov	r3, r7
 8008188:	bfb4      	ite	lt
 800818a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800818e:	2300      	movge	r3, #0
 8008190:	4691      	mov	r9, r2
 8008192:	bfbf      	itttt	lt
 8008194:	4632      	movlt	r2, r6
 8008196:	461f      	movlt	r7, r3
 8008198:	232d      	movlt	r3, #45	@ 0x2d
 800819a:	4616      	movlt	r6, r2
 800819c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80081a0:	700b      	strb	r3, [r1, #0]
 80081a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081a4:	f023 0820 	bic.w	r8, r3, #32
 80081a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80081ac:	d005      	beq.n	80081ba <__cvt+0x42>
 80081ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80081b2:	d100      	bne.n	80081b6 <__cvt+0x3e>
 80081b4:	3401      	adds	r4, #1
 80081b6:	2102      	movs	r1, #2
 80081b8:	e000      	b.n	80081bc <__cvt+0x44>
 80081ba:	2103      	movs	r1, #3
 80081bc:	ab03      	add	r3, sp, #12
 80081be:	4622      	mov	r2, r4
 80081c0:	9301      	str	r3, [sp, #4]
 80081c2:	ab02      	add	r3, sp, #8
 80081c4:	ec47 6b10 	vmov	d0, r6, r7
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	4653      	mov	r3, sl
 80081cc:	f000 fe68 	bl	8008ea0 <_dtoa_r>
 80081d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80081d4:	4605      	mov	r5, r0
 80081d6:	d119      	bne.n	800820c <__cvt+0x94>
 80081d8:	f019 0f01 	tst.w	r9, #1
 80081dc:	d00e      	beq.n	80081fc <__cvt+0x84>
 80081de:	eb00 0904 	add.w	r9, r0, r4
 80081e2:	2200      	movs	r2, #0
 80081e4:	2300      	movs	r3, #0
 80081e6:	4630      	mov	r0, r6
 80081e8:	4639      	mov	r1, r7
 80081ea:	f7f8 fc71 	bl	8000ad0 <__aeabi_dcmpeq>
 80081ee:	b108      	cbz	r0, 80081f4 <__cvt+0x7c>
 80081f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80081f4:	2230      	movs	r2, #48	@ 0x30
 80081f6:	9b03      	ldr	r3, [sp, #12]
 80081f8:	454b      	cmp	r3, r9
 80081fa:	d31e      	bcc.n	800823a <__cvt+0xc2>
 80081fc:	9b03      	ldr	r3, [sp, #12]
 80081fe:	4628      	mov	r0, r5
 8008200:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008202:	1b5b      	subs	r3, r3, r5
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	b004      	add	sp, #16
 8008208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800820c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008210:	eb00 0904 	add.w	r9, r0, r4
 8008214:	d1e5      	bne.n	80081e2 <__cvt+0x6a>
 8008216:	7803      	ldrb	r3, [r0, #0]
 8008218:	2b30      	cmp	r3, #48	@ 0x30
 800821a:	d10a      	bne.n	8008232 <__cvt+0xba>
 800821c:	2200      	movs	r2, #0
 800821e:	2300      	movs	r3, #0
 8008220:	4630      	mov	r0, r6
 8008222:	4639      	mov	r1, r7
 8008224:	f7f8 fc54 	bl	8000ad0 <__aeabi_dcmpeq>
 8008228:	b918      	cbnz	r0, 8008232 <__cvt+0xba>
 800822a:	f1c4 0401 	rsb	r4, r4, #1
 800822e:	f8ca 4000 	str.w	r4, [sl]
 8008232:	f8da 3000 	ldr.w	r3, [sl]
 8008236:	4499      	add	r9, r3
 8008238:	e7d3      	b.n	80081e2 <__cvt+0x6a>
 800823a:	1c59      	adds	r1, r3, #1
 800823c:	9103      	str	r1, [sp, #12]
 800823e:	701a      	strb	r2, [r3, #0]
 8008240:	e7d9      	b.n	80081f6 <__cvt+0x7e>

08008242 <__exponent>:
 8008242:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008244:	2900      	cmp	r1, #0
 8008246:	7002      	strb	r2, [r0, #0]
 8008248:	bfba      	itte	lt
 800824a:	4249      	neglt	r1, r1
 800824c:	232d      	movlt	r3, #45	@ 0x2d
 800824e:	232b      	movge	r3, #43	@ 0x2b
 8008250:	2909      	cmp	r1, #9
 8008252:	7043      	strb	r3, [r0, #1]
 8008254:	dd28      	ble.n	80082a8 <__exponent+0x66>
 8008256:	f10d 0307 	add.w	r3, sp, #7
 800825a:	270a      	movs	r7, #10
 800825c:	461d      	mov	r5, r3
 800825e:	461a      	mov	r2, r3
 8008260:	3b01      	subs	r3, #1
 8008262:	fbb1 f6f7 	udiv	r6, r1, r7
 8008266:	fb07 1416 	mls	r4, r7, r6, r1
 800826a:	3430      	adds	r4, #48	@ 0x30
 800826c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008270:	460c      	mov	r4, r1
 8008272:	4631      	mov	r1, r6
 8008274:	2c63      	cmp	r4, #99	@ 0x63
 8008276:	dcf2      	bgt.n	800825e <__exponent+0x1c>
 8008278:	3130      	adds	r1, #48	@ 0x30
 800827a:	1e94      	subs	r4, r2, #2
 800827c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008280:	1c41      	adds	r1, r0, #1
 8008282:	4623      	mov	r3, r4
 8008284:	42ab      	cmp	r3, r5
 8008286:	d30a      	bcc.n	800829e <__exponent+0x5c>
 8008288:	f10d 0309 	add.w	r3, sp, #9
 800828c:	1a9b      	subs	r3, r3, r2
 800828e:	42ac      	cmp	r4, r5
 8008290:	bf88      	it	hi
 8008292:	2300      	movhi	r3, #0
 8008294:	3302      	adds	r3, #2
 8008296:	4403      	add	r3, r0
 8008298:	1a18      	subs	r0, r3, r0
 800829a:	b003      	add	sp, #12
 800829c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800829e:	f813 6b01 	ldrb.w	r6, [r3], #1
 80082a2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80082a6:	e7ed      	b.n	8008284 <__exponent+0x42>
 80082a8:	2330      	movs	r3, #48	@ 0x30
 80082aa:	3130      	adds	r1, #48	@ 0x30
 80082ac:	7083      	strb	r3, [r0, #2]
 80082ae:	1d03      	adds	r3, r0, #4
 80082b0:	70c1      	strb	r1, [r0, #3]
 80082b2:	e7f1      	b.n	8008298 <__exponent+0x56>

080082b4 <_printf_float>:
 80082b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b8:	b08d      	sub	sp, #52	@ 0x34
 80082ba:	460c      	mov	r4, r1
 80082bc:	4616      	mov	r6, r2
 80082be:	461f      	mov	r7, r3
 80082c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80082c4:	4605      	mov	r5, r0
 80082c6:	f000 fcf3 	bl	8008cb0 <_localeconv_r>
 80082ca:	6803      	ldr	r3, [r0, #0]
 80082cc:	4618      	mov	r0, r3
 80082ce:	9304      	str	r3, [sp, #16]
 80082d0:	f7f7 ffd2 	bl	8000278 <strlen>
 80082d4:	2300      	movs	r3, #0
 80082d6:	9005      	str	r0, [sp, #20]
 80082d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80082da:	f8d8 3000 	ldr.w	r3, [r8]
 80082de:	f894 a018 	ldrb.w	sl, [r4, #24]
 80082e2:	3307      	adds	r3, #7
 80082e4:	f8d4 b000 	ldr.w	fp, [r4]
 80082e8:	f023 0307 	bic.w	r3, r3, #7
 80082ec:	f103 0208 	add.w	r2, r3, #8
 80082f0:	f8c8 2000 	str.w	r2, [r8]
 80082f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008300:	f8cd 8018 	str.w	r8, [sp, #24]
 8008304:	9307      	str	r3, [sp, #28]
 8008306:	4b9d      	ldr	r3, [pc, #628]	@ (800857c <_printf_float+0x2c8>)
 8008308:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800830c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008310:	f7f8 fc10 	bl	8000b34 <__aeabi_dcmpun>
 8008314:	bb70      	cbnz	r0, 8008374 <_printf_float+0xc0>
 8008316:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800831a:	4b98      	ldr	r3, [pc, #608]	@ (800857c <_printf_float+0x2c8>)
 800831c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008320:	f7f8 fbea 	bl	8000af8 <__aeabi_dcmple>
 8008324:	bb30      	cbnz	r0, 8008374 <_printf_float+0xc0>
 8008326:	2200      	movs	r2, #0
 8008328:	2300      	movs	r3, #0
 800832a:	4640      	mov	r0, r8
 800832c:	4649      	mov	r1, r9
 800832e:	f7f8 fbd9 	bl	8000ae4 <__aeabi_dcmplt>
 8008332:	b110      	cbz	r0, 800833a <_printf_float+0x86>
 8008334:	232d      	movs	r3, #45	@ 0x2d
 8008336:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800833a:	4a91      	ldr	r2, [pc, #580]	@ (8008580 <_printf_float+0x2cc>)
 800833c:	4b91      	ldr	r3, [pc, #580]	@ (8008584 <_printf_float+0x2d0>)
 800833e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008342:	bf94      	ite	ls
 8008344:	4690      	movls	r8, r2
 8008346:	4698      	movhi	r8, r3
 8008348:	2303      	movs	r3, #3
 800834a:	f04f 0900 	mov.w	r9, #0
 800834e:	6123      	str	r3, [r4, #16]
 8008350:	f02b 0304 	bic.w	r3, fp, #4
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	4633      	mov	r3, r6
 8008358:	aa0b      	add	r2, sp, #44	@ 0x2c
 800835a:	4621      	mov	r1, r4
 800835c:	4628      	mov	r0, r5
 800835e:	9700      	str	r7, [sp, #0]
 8008360:	f000 f9d2 	bl	8008708 <_printf_common>
 8008364:	3001      	adds	r0, #1
 8008366:	f040 808d 	bne.w	8008484 <_printf_float+0x1d0>
 800836a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800836e:	b00d      	add	sp, #52	@ 0x34
 8008370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008374:	4642      	mov	r2, r8
 8008376:	464b      	mov	r3, r9
 8008378:	4640      	mov	r0, r8
 800837a:	4649      	mov	r1, r9
 800837c:	f7f8 fbda 	bl	8000b34 <__aeabi_dcmpun>
 8008380:	b140      	cbz	r0, 8008394 <_printf_float+0xe0>
 8008382:	464b      	mov	r3, r9
 8008384:	4a80      	ldr	r2, [pc, #512]	@ (8008588 <_printf_float+0x2d4>)
 8008386:	2b00      	cmp	r3, #0
 8008388:	bfbc      	itt	lt
 800838a:	232d      	movlt	r3, #45	@ 0x2d
 800838c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008390:	4b7e      	ldr	r3, [pc, #504]	@ (800858c <_printf_float+0x2d8>)
 8008392:	e7d4      	b.n	800833e <_printf_float+0x8a>
 8008394:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008398:	6863      	ldr	r3, [r4, #4]
 800839a:	9206      	str	r2, [sp, #24]
 800839c:	1c5a      	adds	r2, r3, #1
 800839e:	d13b      	bne.n	8008418 <_printf_float+0x164>
 80083a0:	2306      	movs	r3, #6
 80083a2:	6063      	str	r3, [r4, #4]
 80083a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80083a8:	2300      	movs	r3, #0
 80083aa:	4628      	mov	r0, r5
 80083ac:	6022      	str	r2, [r4, #0]
 80083ae:	9303      	str	r3, [sp, #12]
 80083b0:	ab0a      	add	r3, sp, #40	@ 0x28
 80083b2:	e9cd a301 	strd	sl, r3, [sp, #4]
 80083b6:	ab09      	add	r3, sp, #36	@ 0x24
 80083b8:	ec49 8b10 	vmov	d0, r8, r9
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80083c2:	6861      	ldr	r1, [r4, #4]
 80083c4:	f7ff fed8 	bl	8008178 <__cvt>
 80083c8:	9b06      	ldr	r3, [sp, #24]
 80083ca:	4680      	mov	r8, r0
 80083cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083ce:	2b47      	cmp	r3, #71	@ 0x47
 80083d0:	d129      	bne.n	8008426 <_printf_float+0x172>
 80083d2:	1cc8      	adds	r0, r1, #3
 80083d4:	db02      	blt.n	80083dc <_printf_float+0x128>
 80083d6:	6863      	ldr	r3, [r4, #4]
 80083d8:	4299      	cmp	r1, r3
 80083da:	dd41      	ble.n	8008460 <_printf_float+0x1ac>
 80083dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80083e0:	fa5f fa8a 	uxtb.w	sl, sl
 80083e4:	3901      	subs	r1, #1
 80083e6:	4652      	mov	r2, sl
 80083e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80083ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80083ee:	f7ff ff28 	bl	8008242 <__exponent>
 80083f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083f4:	4681      	mov	r9, r0
 80083f6:	1813      	adds	r3, r2, r0
 80083f8:	2a01      	cmp	r2, #1
 80083fa:	6123      	str	r3, [r4, #16]
 80083fc:	dc02      	bgt.n	8008404 <_printf_float+0x150>
 80083fe:	6822      	ldr	r2, [r4, #0]
 8008400:	07d2      	lsls	r2, r2, #31
 8008402:	d501      	bpl.n	8008408 <_printf_float+0x154>
 8008404:	3301      	adds	r3, #1
 8008406:	6123      	str	r3, [r4, #16]
 8008408:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0a2      	beq.n	8008356 <_printf_float+0xa2>
 8008410:	232d      	movs	r3, #45	@ 0x2d
 8008412:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008416:	e79e      	b.n	8008356 <_printf_float+0xa2>
 8008418:	9a06      	ldr	r2, [sp, #24]
 800841a:	2a47      	cmp	r2, #71	@ 0x47
 800841c:	d1c2      	bne.n	80083a4 <_printf_float+0xf0>
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1c0      	bne.n	80083a4 <_printf_float+0xf0>
 8008422:	2301      	movs	r3, #1
 8008424:	e7bd      	b.n	80083a2 <_printf_float+0xee>
 8008426:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800842a:	d9db      	bls.n	80083e4 <_printf_float+0x130>
 800842c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008430:	d118      	bne.n	8008464 <_printf_float+0x1b0>
 8008432:	2900      	cmp	r1, #0
 8008434:	6863      	ldr	r3, [r4, #4]
 8008436:	dd0b      	ble.n	8008450 <_printf_float+0x19c>
 8008438:	6121      	str	r1, [r4, #16]
 800843a:	b913      	cbnz	r3, 8008442 <_printf_float+0x18e>
 800843c:	6822      	ldr	r2, [r4, #0]
 800843e:	07d0      	lsls	r0, r2, #31
 8008440:	d502      	bpl.n	8008448 <_printf_float+0x194>
 8008442:	3301      	adds	r3, #1
 8008444:	440b      	add	r3, r1
 8008446:	6123      	str	r3, [r4, #16]
 8008448:	f04f 0900 	mov.w	r9, #0
 800844c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800844e:	e7db      	b.n	8008408 <_printf_float+0x154>
 8008450:	b913      	cbnz	r3, 8008458 <_printf_float+0x1a4>
 8008452:	6822      	ldr	r2, [r4, #0]
 8008454:	07d2      	lsls	r2, r2, #31
 8008456:	d501      	bpl.n	800845c <_printf_float+0x1a8>
 8008458:	3302      	adds	r3, #2
 800845a:	e7f4      	b.n	8008446 <_printf_float+0x192>
 800845c:	2301      	movs	r3, #1
 800845e:	e7f2      	b.n	8008446 <_printf_float+0x192>
 8008460:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008464:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008466:	4299      	cmp	r1, r3
 8008468:	db05      	blt.n	8008476 <_printf_float+0x1c2>
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	6121      	str	r1, [r4, #16]
 800846e:	07d8      	lsls	r0, r3, #31
 8008470:	d5ea      	bpl.n	8008448 <_printf_float+0x194>
 8008472:	1c4b      	adds	r3, r1, #1
 8008474:	e7e7      	b.n	8008446 <_printf_float+0x192>
 8008476:	2900      	cmp	r1, #0
 8008478:	bfd4      	ite	le
 800847a:	f1c1 0202 	rsble	r2, r1, #2
 800847e:	2201      	movgt	r2, #1
 8008480:	4413      	add	r3, r2
 8008482:	e7e0      	b.n	8008446 <_printf_float+0x192>
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	055a      	lsls	r2, r3, #21
 8008488:	d407      	bmi.n	800849a <_printf_float+0x1e6>
 800848a:	6923      	ldr	r3, [r4, #16]
 800848c:	4642      	mov	r2, r8
 800848e:	4631      	mov	r1, r6
 8008490:	4628      	mov	r0, r5
 8008492:	47b8      	blx	r7
 8008494:	3001      	adds	r0, #1
 8008496:	d12b      	bne.n	80084f0 <_printf_float+0x23c>
 8008498:	e767      	b.n	800836a <_printf_float+0xb6>
 800849a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800849e:	f240 80dd 	bls.w	800865c <_printf_float+0x3a8>
 80084a2:	2200      	movs	r2, #0
 80084a4:	2300      	movs	r3, #0
 80084a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80084aa:	f7f8 fb11 	bl	8000ad0 <__aeabi_dcmpeq>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d033      	beq.n	800851a <_printf_float+0x266>
 80084b2:	2301      	movs	r3, #1
 80084b4:	4a36      	ldr	r2, [pc, #216]	@ (8008590 <_printf_float+0x2dc>)
 80084b6:	4631      	mov	r1, r6
 80084b8:	4628      	mov	r0, r5
 80084ba:	47b8      	blx	r7
 80084bc:	3001      	adds	r0, #1
 80084be:	f43f af54 	beq.w	800836a <_printf_float+0xb6>
 80084c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80084c6:	4543      	cmp	r3, r8
 80084c8:	db02      	blt.n	80084d0 <_printf_float+0x21c>
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	07d8      	lsls	r0, r3, #31
 80084ce:	d50f      	bpl.n	80084f0 <_printf_float+0x23c>
 80084d0:	4631      	mov	r1, r6
 80084d2:	4628      	mov	r0, r5
 80084d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084d8:	47b8      	blx	r7
 80084da:	3001      	adds	r0, #1
 80084dc:	f43f af45 	beq.w	800836a <_printf_float+0xb6>
 80084e0:	f04f 0900 	mov.w	r9, #0
 80084e4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80084e8:	f104 0a1a 	add.w	sl, r4, #26
 80084ec:	45c8      	cmp	r8, r9
 80084ee:	dc09      	bgt.n	8008504 <_printf_float+0x250>
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	079b      	lsls	r3, r3, #30
 80084f4:	f100 8103 	bmi.w	80086fe <_printf_float+0x44a>
 80084f8:	68e0      	ldr	r0, [r4, #12]
 80084fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084fc:	4298      	cmp	r0, r3
 80084fe:	bfb8      	it	lt
 8008500:	4618      	movlt	r0, r3
 8008502:	e734      	b.n	800836e <_printf_float+0xba>
 8008504:	2301      	movs	r3, #1
 8008506:	4652      	mov	r2, sl
 8008508:	4631      	mov	r1, r6
 800850a:	4628      	mov	r0, r5
 800850c:	47b8      	blx	r7
 800850e:	3001      	adds	r0, #1
 8008510:	f43f af2b 	beq.w	800836a <_printf_float+0xb6>
 8008514:	f109 0901 	add.w	r9, r9, #1
 8008518:	e7e8      	b.n	80084ec <_printf_float+0x238>
 800851a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800851c:	2b00      	cmp	r3, #0
 800851e:	dc39      	bgt.n	8008594 <_printf_float+0x2e0>
 8008520:	2301      	movs	r3, #1
 8008522:	4a1b      	ldr	r2, [pc, #108]	@ (8008590 <_printf_float+0x2dc>)
 8008524:	4631      	mov	r1, r6
 8008526:	4628      	mov	r0, r5
 8008528:	47b8      	blx	r7
 800852a:	3001      	adds	r0, #1
 800852c:	f43f af1d 	beq.w	800836a <_printf_float+0xb6>
 8008530:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008534:	ea59 0303 	orrs.w	r3, r9, r3
 8008538:	d102      	bne.n	8008540 <_printf_float+0x28c>
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	07d9      	lsls	r1, r3, #31
 800853e:	d5d7      	bpl.n	80084f0 <_printf_float+0x23c>
 8008540:	4631      	mov	r1, r6
 8008542:	4628      	mov	r0, r5
 8008544:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008548:	47b8      	blx	r7
 800854a:	3001      	adds	r0, #1
 800854c:	f43f af0d 	beq.w	800836a <_printf_float+0xb6>
 8008550:	f04f 0a00 	mov.w	sl, #0
 8008554:	f104 0b1a 	add.w	fp, r4, #26
 8008558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800855a:	425b      	negs	r3, r3
 800855c:	4553      	cmp	r3, sl
 800855e:	dc01      	bgt.n	8008564 <_printf_float+0x2b0>
 8008560:	464b      	mov	r3, r9
 8008562:	e793      	b.n	800848c <_printf_float+0x1d8>
 8008564:	2301      	movs	r3, #1
 8008566:	465a      	mov	r2, fp
 8008568:	4631      	mov	r1, r6
 800856a:	4628      	mov	r0, r5
 800856c:	47b8      	blx	r7
 800856e:	3001      	adds	r0, #1
 8008570:	f43f aefb 	beq.w	800836a <_printf_float+0xb6>
 8008574:	f10a 0a01 	add.w	sl, sl, #1
 8008578:	e7ee      	b.n	8008558 <_printf_float+0x2a4>
 800857a:	bf00      	nop
 800857c:	7fefffff 	.word	0x7fefffff
 8008580:	0800c1a0 	.word	0x0800c1a0
 8008584:	0800c1a4 	.word	0x0800c1a4
 8008588:	0800c1a8 	.word	0x0800c1a8
 800858c:	0800c1ac 	.word	0x0800c1ac
 8008590:	0800c1b0 	.word	0x0800c1b0
 8008594:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008596:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800859a:	4553      	cmp	r3, sl
 800859c:	bfa8      	it	ge
 800859e:	4653      	movge	r3, sl
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	4699      	mov	r9, r3
 80085a4:	dc36      	bgt.n	8008614 <_printf_float+0x360>
 80085a6:	f04f 0b00 	mov.w	fp, #0
 80085aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085ae:	f104 021a 	add.w	r2, r4, #26
 80085b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085b4:	9306      	str	r3, [sp, #24]
 80085b6:	eba3 0309 	sub.w	r3, r3, r9
 80085ba:	455b      	cmp	r3, fp
 80085bc:	dc31      	bgt.n	8008622 <_printf_float+0x36e>
 80085be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c0:	459a      	cmp	sl, r3
 80085c2:	dc3a      	bgt.n	800863a <_printf_float+0x386>
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	07da      	lsls	r2, r3, #31
 80085c8:	d437      	bmi.n	800863a <_printf_float+0x386>
 80085ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085cc:	ebaa 0903 	sub.w	r9, sl, r3
 80085d0:	9b06      	ldr	r3, [sp, #24]
 80085d2:	ebaa 0303 	sub.w	r3, sl, r3
 80085d6:	4599      	cmp	r9, r3
 80085d8:	bfa8      	it	ge
 80085da:	4699      	movge	r9, r3
 80085dc:	f1b9 0f00 	cmp.w	r9, #0
 80085e0:	dc33      	bgt.n	800864a <_printf_float+0x396>
 80085e2:	f04f 0800 	mov.w	r8, #0
 80085e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085ea:	f104 0b1a 	add.w	fp, r4, #26
 80085ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f0:	ebaa 0303 	sub.w	r3, sl, r3
 80085f4:	eba3 0309 	sub.w	r3, r3, r9
 80085f8:	4543      	cmp	r3, r8
 80085fa:	f77f af79 	ble.w	80084f0 <_printf_float+0x23c>
 80085fe:	2301      	movs	r3, #1
 8008600:	465a      	mov	r2, fp
 8008602:	4631      	mov	r1, r6
 8008604:	4628      	mov	r0, r5
 8008606:	47b8      	blx	r7
 8008608:	3001      	adds	r0, #1
 800860a:	f43f aeae 	beq.w	800836a <_printf_float+0xb6>
 800860e:	f108 0801 	add.w	r8, r8, #1
 8008612:	e7ec      	b.n	80085ee <_printf_float+0x33a>
 8008614:	4642      	mov	r2, r8
 8008616:	4631      	mov	r1, r6
 8008618:	4628      	mov	r0, r5
 800861a:	47b8      	blx	r7
 800861c:	3001      	adds	r0, #1
 800861e:	d1c2      	bne.n	80085a6 <_printf_float+0x2f2>
 8008620:	e6a3      	b.n	800836a <_printf_float+0xb6>
 8008622:	2301      	movs	r3, #1
 8008624:	4631      	mov	r1, r6
 8008626:	4628      	mov	r0, r5
 8008628:	9206      	str	r2, [sp, #24]
 800862a:	47b8      	blx	r7
 800862c:	3001      	adds	r0, #1
 800862e:	f43f ae9c 	beq.w	800836a <_printf_float+0xb6>
 8008632:	f10b 0b01 	add.w	fp, fp, #1
 8008636:	9a06      	ldr	r2, [sp, #24]
 8008638:	e7bb      	b.n	80085b2 <_printf_float+0x2fe>
 800863a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800863e:	4631      	mov	r1, r6
 8008640:	4628      	mov	r0, r5
 8008642:	47b8      	blx	r7
 8008644:	3001      	adds	r0, #1
 8008646:	d1c0      	bne.n	80085ca <_printf_float+0x316>
 8008648:	e68f      	b.n	800836a <_printf_float+0xb6>
 800864a:	9a06      	ldr	r2, [sp, #24]
 800864c:	464b      	mov	r3, r9
 800864e:	4631      	mov	r1, r6
 8008650:	4628      	mov	r0, r5
 8008652:	4442      	add	r2, r8
 8008654:	47b8      	blx	r7
 8008656:	3001      	adds	r0, #1
 8008658:	d1c3      	bne.n	80085e2 <_printf_float+0x32e>
 800865a:	e686      	b.n	800836a <_printf_float+0xb6>
 800865c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008660:	f1ba 0f01 	cmp.w	sl, #1
 8008664:	dc01      	bgt.n	800866a <_printf_float+0x3b6>
 8008666:	07db      	lsls	r3, r3, #31
 8008668:	d536      	bpl.n	80086d8 <_printf_float+0x424>
 800866a:	2301      	movs	r3, #1
 800866c:	4642      	mov	r2, r8
 800866e:	4631      	mov	r1, r6
 8008670:	4628      	mov	r0, r5
 8008672:	47b8      	blx	r7
 8008674:	3001      	adds	r0, #1
 8008676:	f43f ae78 	beq.w	800836a <_printf_float+0xb6>
 800867a:	4631      	mov	r1, r6
 800867c:	4628      	mov	r0, r5
 800867e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008682:	47b8      	blx	r7
 8008684:	3001      	adds	r0, #1
 8008686:	f43f ae70 	beq.w	800836a <_printf_float+0xb6>
 800868a:	2200      	movs	r2, #0
 800868c:	2300      	movs	r3, #0
 800868e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008692:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008696:	f7f8 fa1b 	bl	8000ad0 <__aeabi_dcmpeq>
 800869a:	b9c0      	cbnz	r0, 80086ce <_printf_float+0x41a>
 800869c:	4653      	mov	r3, sl
 800869e:	f108 0201 	add.w	r2, r8, #1
 80086a2:	4631      	mov	r1, r6
 80086a4:	4628      	mov	r0, r5
 80086a6:	47b8      	blx	r7
 80086a8:	3001      	adds	r0, #1
 80086aa:	d10c      	bne.n	80086c6 <_printf_float+0x412>
 80086ac:	e65d      	b.n	800836a <_printf_float+0xb6>
 80086ae:	2301      	movs	r3, #1
 80086b0:	465a      	mov	r2, fp
 80086b2:	4631      	mov	r1, r6
 80086b4:	4628      	mov	r0, r5
 80086b6:	47b8      	blx	r7
 80086b8:	3001      	adds	r0, #1
 80086ba:	f43f ae56 	beq.w	800836a <_printf_float+0xb6>
 80086be:	f108 0801 	add.w	r8, r8, #1
 80086c2:	45d0      	cmp	r8, sl
 80086c4:	dbf3      	blt.n	80086ae <_printf_float+0x3fa>
 80086c6:	464b      	mov	r3, r9
 80086c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80086cc:	e6df      	b.n	800848e <_printf_float+0x1da>
 80086ce:	f04f 0800 	mov.w	r8, #0
 80086d2:	f104 0b1a 	add.w	fp, r4, #26
 80086d6:	e7f4      	b.n	80086c2 <_printf_float+0x40e>
 80086d8:	2301      	movs	r3, #1
 80086da:	4642      	mov	r2, r8
 80086dc:	e7e1      	b.n	80086a2 <_printf_float+0x3ee>
 80086de:	2301      	movs	r3, #1
 80086e0:	464a      	mov	r2, r9
 80086e2:	4631      	mov	r1, r6
 80086e4:	4628      	mov	r0, r5
 80086e6:	47b8      	blx	r7
 80086e8:	3001      	adds	r0, #1
 80086ea:	f43f ae3e 	beq.w	800836a <_printf_float+0xb6>
 80086ee:	f108 0801 	add.w	r8, r8, #1
 80086f2:	68e3      	ldr	r3, [r4, #12]
 80086f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086f6:	1a5b      	subs	r3, r3, r1
 80086f8:	4543      	cmp	r3, r8
 80086fa:	dcf0      	bgt.n	80086de <_printf_float+0x42a>
 80086fc:	e6fc      	b.n	80084f8 <_printf_float+0x244>
 80086fe:	f04f 0800 	mov.w	r8, #0
 8008702:	f104 0919 	add.w	r9, r4, #25
 8008706:	e7f4      	b.n	80086f2 <_printf_float+0x43e>

08008708 <_printf_common>:
 8008708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800870c:	4616      	mov	r6, r2
 800870e:	4698      	mov	r8, r3
 8008710:	688a      	ldr	r2, [r1, #8]
 8008712:	4607      	mov	r7, r0
 8008714:	690b      	ldr	r3, [r1, #16]
 8008716:	460c      	mov	r4, r1
 8008718:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800871c:	4293      	cmp	r3, r2
 800871e:	bfb8      	it	lt
 8008720:	4613      	movlt	r3, r2
 8008722:	6033      	str	r3, [r6, #0]
 8008724:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008728:	b10a      	cbz	r2, 800872e <_printf_common+0x26>
 800872a:	3301      	adds	r3, #1
 800872c:	6033      	str	r3, [r6, #0]
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	0699      	lsls	r1, r3, #26
 8008732:	bf42      	ittt	mi
 8008734:	6833      	ldrmi	r3, [r6, #0]
 8008736:	3302      	addmi	r3, #2
 8008738:	6033      	strmi	r3, [r6, #0]
 800873a:	6825      	ldr	r5, [r4, #0]
 800873c:	f015 0506 	ands.w	r5, r5, #6
 8008740:	d106      	bne.n	8008750 <_printf_common+0x48>
 8008742:	f104 0a19 	add.w	sl, r4, #25
 8008746:	68e3      	ldr	r3, [r4, #12]
 8008748:	6832      	ldr	r2, [r6, #0]
 800874a:	1a9b      	subs	r3, r3, r2
 800874c:	42ab      	cmp	r3, r5
 800874e:	dc2b      	bgt.n	80087a8 <_printf_common+0xa0>
 8008750:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008754:	6822      	ldr	r2, [r4, #0]
 8008756:	3b00      	subs	r3, #0
 8008758:	bf18      	it	ne
 800875a:	2301      	movne	r3, #1
 800875c:	0692      	lsls	r2, r2, #26
 800875e:	d430      	bmi.n	80087c2 <_printf_common+0xba>
 8008760:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008764:	4641      	mov	r1, r8
 8008766:	4638      	mov	r0, r7
 8008768:	47c8      	blx	r9
 800876a:	3001      	adds	r0, #1
 800876c:	d023      	beq.n	80087b6 <_printf_common+0xae>
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	341a      	adds	r4, #26
 8008772:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008776:	f003 0306 	and.w	r3, r3, #6
 800877a:	2b04      	cmp	r3, #4
 800877c:	bf0a      	itet	eq
 800877e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8008782:	2500      	movne	r5, #0
 8008784:	6833      	ldreq	r3, [r6, #0]
 8008786:	f04f 0600 	mov.w	r6, #0
 800878a:	bf08      	it	eq
 800878c:	1aed      	subeq	r5, r5, r3
 800878e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008792:	bf08      	it	eq
 8008794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008798:	4293      	cmp	r3, r2
 800879a:	bfc4      	itt	gt
 800879c:	1a9b      	subgt	r3, r3, r2
 800879e:	18ed      	addgt	r5, r5, r3
 80087a0:	42b5      	cmp	r5, r6
 80087a2:	d11a      	bne.n	80087da <_printf_common+0xd2>
 80087a4:	2000      	movs	r0, #0
 80087a6:	e008      	b.n	80087ba <_printf_common+0xb2>
 80087a8:	2301      	movs	r3, #1
 80087aa:	4652      	mov	r2, sl
 80087ac:	4641      	mov	r1, r8
 80087ae:	4638      	mov	r0, r7
 80087b0:	47c8      	blx	r9
 80087b2:	3001      	adds	r0, #1
 80087b4:	d103      	bne.n	80087be <_printf_common+0xb6>
 80087b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087be:	3501      	adds	r5, #1
 80087c0:	e7c1      	b.n	8008746 <_printf_common+0x3e>
 80087c2:	18e1      	adds	r1, r4, r3
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	2030      	movs	r0, #48	@ 0x30
 80087c8:	3302      	adds	r3, #2
 80087ca:	4422      	add	r2, r4
 80087cc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80087d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087d8:	e7c2      	b.n	8008760 <_printf_common+0x58>
 80087da:	2301      	movs	r3, #1
 80087dc:	4622      	mov	r2, r4
 80087de:	4641      	mov	r1, r8
 80087e0:	4638      	mov	r0, r7
 80087e2:	47c8      	blx	r9
 80087e4:	3001      	adds	r0, #1
 80087e6:	d0e6      	beq.n	80087b6 <_printf_common+0xae>
 80087e8:	3601      	adds	r6, #1
 80087ea:	e7d9      	b.n	80087a0 <_printf_common+0x98>

080087ec <_printf_i>:
 80087ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087f0:	7e0f      	ldrb	r7, [r1, #24]
 80087f2:	4691      	mov	r9, r2
 80087f4:	4680      	mov	r8, r0
 80087f6:	460c      	mov	r4, r1
 80087f8:	2f78      	cmp	r7, #120	@ 0x78
 80087fa:	469a      	mov	sl, r3
 80087fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008802:	d807      	bhi.n	8008814 <_printf_i+0x28>
 8008804:	2f62      	cmp	r7, #98	@ 0x62
 8008806:	d80a      	bhi.n	800881e <_printf_i+0x32>
 8008808:	2f00      	cmp	r7, #0
 800880a:	f000 80d2 	beq.w	80089b2 <_printf_i+0x1c6>
 800880e:	2f58      	cmp	r7, #88	@ 0x58
 8008810:	f000 80b9 	beq.w	8008986 <_printf_i+0x19a>
 8008814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008818:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800881c:	e03a      	b.n	8008894 <_printf_i+0xa8>
 800881e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008822:	2b15      	cmp	r3, #21
 8008824:	d8f6      	bhi.n	8008814 <_printf_i+0x28>
 8008826:	a101      	add	r1, pc, #4	@ (adr r1, 800882c <_printf_i+0x40>)
 8008828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800882c:	08008885 	.word	0x08008885
 8008830:	08008899 	.word	0x08008899
 8008834:	08008815 	.word	0x08008815
 8008838:	08008815 	.word	0x08008815
 800883c:	08008815 	.word	0x08008815
 8008840:	08008815 	.word	0x08008815
 8008844:	08008899 	.word	0x08008899
 8008848:	08008815 	.word	0x08008815
 800884c:	08008815 	.word	0x08008815
 8008850:	08008815 	.word	0x08008815
 8008854:	08008815 	.word	0x08008815
 8008858:	08008999 	.word	0x08008999
 800885c:	080088c3 	.word	0x080088c3
 8008860:	08008953 	.word	0x08008953
 8008864:	08008815 	.word	0x08008815
 8008868:	08008815 	.word	0x08008815
 800886c:	080089bb 	.word	0x080089bb
 8008870:	08008815 	.word	0x08008815
 8008874:	080088c3 	.word	0x080088c3
 8008878:	08008815 	.word	0x08008815
 800887c:	08008815 	.word	0x08008815
 8008880:	0800895b 	.word	0x0800895b
 8008884:	6833      	ldr	r3, [r6, #0]
 8008886:	1d1a      	adds	r2, r3, #4
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6032      	str	r2, [r6, #0]
 800888c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008890:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008894:	2301      	movs	r3, #1
 8008896:	e09d      	b.n	80089d4 <_printf_i+0x1e8>
 8008898:	6833      	ldr	r3, [r6, #0]
 800889a:	6820      	ldr	r0, [r4, #0]
 800889c:	1d19      	adds	r1, r3, #4
 800889e:	6031      	str	r1, [r6, #0]
 80088a0:	0606      	lsls	r6, r0, #24
 80088a2:	d501      	bpl.n	80088a8 <_printf_i+0xbc>
 80088a4:	681d      	ldr	r5, [r3, #0]
 80088a6:	e003      	b.n	80088b0 <_printf_i+0xc4>
 80088a8:	0645      	lsls	r5, r0, #25
 80088aa:	d5fb      	bpl.n	80088a4 <_printf_i+0xb8>
 80088ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088b0:	2d00      	cmp	r5, #0
 80088b2:	da03      	bge.n	80088bc <_printf_i+0xd0>
 80088b4:	232d      	movs	r3, #45	@ 0x2d
 80088b6:	426d      	negs	r5, r5
 80088b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088bc:	4859      	ldr	r0, [pc, #356]	@ (8008a24 <_printf_i+0x238>)
 80088be:	230a      	movs	r3, #10
 80088c0:	e011      	b.n	80088e6 <_printf_i+0xfa>
 80088c2:	6821      	ldr	r1, [r4, #0]
 80088c4:	6833      	ldr	r3, [r6, #0]
 80088c6:	0608      	lsls	r0, r1, #24
 80088c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80088cc:	d402      	bmi.n	80088d4 <_printf_i+0xe8>
 80088ce:	0649      	lsls	r1, r1, #25
 80088d0:	bf48      	it	mi
 80088d2:	b2ad      	uxthmi	r5, r5
 80088d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80088d6:	6033      	str	r3, [r6, #0]
 80088d8:	4852      	ldr	r0, [pc, #328]	@ (8008a24 <_printf_i+0x238>)
 80088da:	bf14      	ite	ne
 80088dc:	230a      	movne	r3, #10
 80088de:	2308      	moveq	r3, #8
 80088e0:	2100      	movs	r1, #0
 80088e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80088e6:	6866      	ldr	r6, [r4, #4]
 80088e8:	2e00      	cmp	r6, #0
 80088ea:	60a6      	str	r6, [r4, #8]
 80088ec:	bfa2      	ittt	ge
 80088ee:	6821      	ldrge	r1, [r4, #0]
 80088f0:	f021 0104 	bicge.w	r1, r1, #4
 80088f4:	6021      	strge	r1, [r4, #0]
 80088f6:	b90d      	cbnz	r5, 80088fc <_printf_i+0x110>
 80088f8:	2e00      	cmp	r6, #0
 80088fa:	d04b      	beq.n	8008994 <_printf_i+0x1a8>
 80088fc:	4616      	mov	r6, r2
 80088fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8008902:	fb03 5711 	mls	r7, r3, r1, r5
 8008906:	5dc7      	ldrb	r7, [r0, r7]
 8008908:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800890c:	462f      	mov	r7, r5
 800890e:	460d      	mov	r5, r1
 8008910:	42bb      	cmp	r3, r7
 8008912:	d9f4      	bls.n	80088fe <_printf_i+0x112>
 8008914:	2b08      	cmp	r3, #8
 8008916:	d10b      	bne.n	8008930 <_printf_i+0x144>
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	07df      	lsls	r7, r3, #31
 800891c:	d508      	bpl.n	8008930 <_printf_i+0x144>
 800891e:	6923      	ldr	r3, [r4, #16]
 8008920:	6861      	ldr	r1, [r4, #4]
 8008922:	4299      	cmp	r1, r3
 8008924:	bfde      	ittt	le
 8008926:	2330      	movle	r3, #48	@ 0x30
 8008928:	f806 3c01 	strble.w	r3, [r6, #-1]
 800892c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008930:	1b92      	subs	r2, r2, r6
 8008932:	6122      	str	r2, [r4, #16]
 8008934:	464b      	mov	r3, r9
 8008936:	aa03      	add	r2, sp, #12
 8008938:	4621      	mov	r1, r4
 800893a:	4640      	mov	r0, r8
 800893c:	f8cd a000 	str.w	sl, [sp]
 8008940:	f7ff fee2 	bl	8008708 <_printf_common>
 8008944:	3001      	adds	r0, #1
 8008946:	d14a      	bne.n	80089de <_printf_i+0x1f2>
 8008948:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800894c:	b004      	add	sp, #16
 800894e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	f043 0320 	orr.w	r3, r3, #32
 8008958:	6023      	str	r3, [r4, #0]
 800895a:	2778      	movs	r7, #120	@ 0x78
 800895c:	4832      	ldr	r0, [pc, #200]	@ (8008a28 <_printf_i+0x23c>)
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008964:	061f      	lsls	r7, r3, #24
 8008966:	6831      	ldr	r1, [r6, #0]
 8008968:	f851 5b04 	ldr.w	r5, [r1], #4
 800896c:	d402      	bmi.n	8008974 <_printf_i+0x188>
 800896e:	065f      	lsls	r7, r3, #25
 8008970:	bf48      	it	mi
 8008972:	b2ad      	uxthmi	r5, r5
 8008974:	6031      	str	r1, [r6, #0]
 8008976:	07d9      	lsls	r1, r3, #31
 8008978:	bf44      	itt	mi
 800897a:	f043 0320 	orrmi.w	r3, r3, #32
 800897e:	6023      	strmi	r3, [r4, #0]
 8008980:	b11d      	cbz	r5, 800898a <_printf_i+0x19e>
 8008982:	2310      	movs	r3, #16
 8008984:	e7ac      	b.n	80088e0 <_printf_i+0xf4>
 8008986:	4827      	ldr	r0, [pc, #156]	@ (8008a24 <_printf_i+0x238>)
 8008988:	e7e9      	b.n	800895e <_printf_i+0x172>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	f023 0320 	bic.w	r3, r3, #32
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	e7f6      	b.n	8008982 <_printf_i+0x196>
 8008994:	4616      	mov	r6, r2
 8008996:	e7bd      	b.n	8008914 <_printf_i+0x128>
 8008998:	6833      	ldr	r3, [r6, #0]
 800899a:	6825      	ldr	r5, [r4, #0]
 800899c:	1d18      	adds	r0, r3, #4
 800899e:	6961      	ldr	r1, [r4, #20]
 80089a0:	6030      	str	r0, [r6, #0]
 80089a2:	062e      	lsls	r6, r5, #24
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	d501      	bpl.n	80089ac <_printf_i+0x1c0>
 80089a8:	6019      	str	r1, [r3, #0]
 80089aa:	e002      	b.n	80089b2 <_printf_i+0x1c6>
 80089ac:	0668      	lsls	r0, r5, #25
 80089ae:	d5fb      	bpl.n	80089a8 <_printf_i+0x1bc>
 80089b0:	8019      	strh	r1, [r3, #0]
 80089b2:	2300      	movs	r3, #0
 80089b4:	4616      	mov	r6, r2
 80089b6:	6123      	str	r3, [r4, #16]
 80089b8:	e7bc      	b.n	8008934 <_printf_i+0x148>
 80089ba:	6833      	ldr	r3, [r6, #0]
 80089bc:	2100      	movs	r1, #0
 80089be:	1d1a      	adds	r2, r3, #4
 80089c0:	6032      	str	r2, [r6, #0]
 80089c2:	681e      	ldr	r6, [r3, #0]
 80089c4:	6862      	ldr	r2, [r4, #4]
 80089c6:	4630      	mov	r0, r6
 80089c8:	f000 f9a3 	bl	8008d12 <memchr>
 80089cc:	b108      	cbz	r0, 80089d2 <_printf_i+0x1e6>
 80089ce:	1b80      	subs	r0, r0, r6
 80089d0:	6060      	str	r0, [r4, #4]
 80089d2:	6863      	ldr	r3, [r4, #4]
 80089d4:	6123      	str	r3, [r4, #16]
 80089d6:	2300      	movs	r3, #0
 80089d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089dc:	e7aa      	b.n	8008934 <_printf_i+0x148>
 80089de:	6923      	ldr	r3, [r4, #16]
 80089e0:	4632      	mov	r2, r6
 80089e2:	4649      	mov	r1, r9
 80089e4:	4640      	mov	r0, r8
 80089e6:	47d0      	blx	sl
 80089e8:	3001      	adds	r0, #1
 80089ea:	d0ad      	beq.n	8008948 <_printf_i+0x15c>
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	079b      	lsls	r3, r3, #30
 80089f0:	d413      	bmi.n	8008a1a <_printf_i+0x22e>
 80089f2:	68e0      	ldr	r0, [r4, #12]
 80089f4:	9b03      	ldr	r3, [sp, #12]
 80089f6:	4298      	cmp	r0, r3
 80089f8:	bfb8      	it	lt
 80089fa:	4618      	movlt	r0, r3
 80089fc:	e7a6      	b.n	800894c <_printf_i+0x160>
 80089fe:	2301      	movs	r3, #1
 8008a00:	4632      	mov	r2, r6
 8008a02:	4649      	mov	r1, r9
 8008a04:	4640      	mov	r0, r8
 8008a06:	47d0      	blx	sl
 8008a08:	3001      	adds	r0, #1
 8008a0a:	d09d      	beq.n	8008948 <_printf_i+0x15c>
 8008a0c:	3501      	adds	r5, #1
 8008a0e:	68e3      	ldr	r3, [r4, #12]
 8008a10:	9903      	ldr	r1, [sp, #12]
 8008a12:	1a5b      	subs	r3, r3, r1
 8008a14:	42ab      	cmp	r3, r5
 8008a16:	dcf2      	bgt.n	80089fe <_printf_i+0x212>
 8008a18:	e7eb      	b.n	80089f2 <_printf_i+0x206>
 8008a1a:	2500      	movs	r5, #0
 8008a1c:	f104 0619 	add.w	r6, r4, #25
 8008a20:	e7f5      	b.n	8008a0e <_printf_i+0x222>
 8008a22:	bf00      	nop
 8008a24:	0800c1b2 	.word	0x0800c1b2
 8008a28:	0800c1c3 	.word	0x0800c1c3

08008a2c <std>:
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	b510      	push	{r4, lr}
 8008a30:	4604      	mov	r4, r0
 8008a32:	6083      	str	r3, [r0, #8]
 8008a34:	8181      	strh	r1, [r0, #12]
 8008a36:	4619      	mov	r1, r3
 8008a38:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a3a:	81c2      	strh	r2, [r0, #14]
 8008a3c:	2208      	movs	r2, #8
 8008a3e:	6183      	str	r3, [r0, #24]
 8008a40:	e9c0 3300 	strd	r3, r3, [r0]
 8008a44:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a48:	305c      	adds	r0, #92	@ 0x5c
 8008a4a:	f000 f929 	bl	8008ca0 <memset>
 8008a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008a84 <std+0x58>)
 8008a50:	6224      	str	r4, [r4, #32]
 8008a52:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a54:	4b0c      	ldr	r3, [pc, #48]	@ (8008a88 <std+0x5c>)
 8008a56:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a58:	4b0c      	ldr	r3, [pc, #48]	@ (8008a8c <std+0x60>)
 8008a5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008a90 <std+0x64>)
 8008a5e:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a60:	4b0c      	ldr	r3, [pc, #48]	@ (8008a94 <std+0x68>)
 8008a62:	429c      	cmp	r4, r3
 8008a64:	d006      	beq.n	8008a74 <std+0x48>
 8008a66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a6a:	4294      	cmp	r4, r2
 8008a6c:	d002      	beq.n	8008a74 <std+0x48>
 8008a6e:	33d0      	adds	r3, #208	@ 0xd0
 8008a70:	429c      	cmp	r4, r3
 8008a72:	d105      	bne.n	8008a80 <std+0x54>
 8008a74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a7c:	f000 b946 	b.w	8008d0c <__retarget_lock_init_recursive>
 8008a80:	bd10      	pop	{r4, pc}
 8008a82:	bf00      	nop
 8008a84:	0800a681 	.word	0x0800a681
 8008a88:	0800a6a3 	.word	0x0800a6a3
 8008a8c:	0800a6db 	.word	0x0800a6db
 8008a90:	0800a6ff 	.word	0x0800a6ff
 8008a94:	20000edc 	.word	0x20000edc

08008a98 <stdio_exit_handler>:
 8008a98:	4a02      	ldr	r2, [pc, #8]	@ (8008aa4 <stdio_exit_handler+0xc>)
 8008a9a:	4903      	ldr	r1, [pc, #12]	@ (8008aa8 <stdio_exit_handler+0x10>)
 8008a9c:	4803      	ldr	r0, [pc, #12]	@ (8008aac <stdio_exit_handler+0x14>)
 8008a9e:	f000 b869 	b.w	8008b74 <_fwalk_sglue>
 8008aa2:	bf00      	nop
 8008aa4:	200000a4 	.word	0x200000a4
 8008aa8:	08009f09 	.word	0x08009f09
 8008aac:	200000b4 	.word	0x200000b4

08008ab0 <cleanup_stdio>:
 8008ab0:	6841      	ldr	r1, [r0, #4]
 8008ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae4 <cleanup_stdio+0x34>)
 8008ab4:	4299      	cmp	r1, r3
 8008ab6:	b510      	push	{r4, lr}
 8008ab8:	4604      	mov	r4, r0
 8008aba:	d001      	beq.n	8008ac0 <cleanup_stdio+0x10>
 8008abc:	f001 fa24 	bl	8009f08 <_fflush_r>
 8008ac0:	68a1      	ldr	r1, [r4, #8]
 8008ac2:	4b09      	ldr	r3, [pc, #36]	@ (8008ae8 <cleanup_stdio+0x38>)
 8008ac4:	4299      	cmp	r1, r3
 8008ac6:	d002      	beq.n	8008ace <cleanup_stdio+0x1e>
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f001 fa1d 	bl	8009f08 <_fflush_r>
 8008ace:	68e1      	ldr	r1, [r4, #12]
 8008ad0:	4b06      	ldr	r3, [pc, #24]	@ (8008aec <cleanup_stdio+0x3c>)
 8008ad2:	4299      	cmp	r1, r3
 8008ad4:	d004      	beq.n	8008ae0 <cleanup_stdio+0x30>
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008adc:	f001 ba14 	b.w	8009f08 <_fflush_r>
 8008ae0:	bd10      	pop	{r4, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20000edc 	.word	0x20000edc
 8008ae8:	20000f44 	.word	0x20000f44
 8008aec:	20000fac 	.word	0x20000fac

08008af0 <global_stdio_init.part.0>:
 8008af0:	b510      	push	{r4, lr}
 8008af2:	4b0b      	ldr	r3, [pc, #44]	@ (8008b20 <global_stdio_init.part.0+0x30>)
 8008af4:	2104      	movs	r1, #4
 8008af6:	4c0b      	ldr	r4, [pc, #44]	@ (8008b24 <global_stdio_init.part.0+0x34>)
 8008af8:	4a0b      	ldr	r2, [pc, #44]	@ (8008b28 <global_stdio_init.part.0+0x38>)
 8008afa:	4620      	mov	r0, r4
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f7ff ff94 	bl	8008a2c <std>
 8008b04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b08:	2201      	movs	r2, #1
 8008b0a:	2109      	movs	r1, #9
 8008b0c:	f7ff ff8e 	bl	8008a2c <std>
 8008b10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b14:	2202      	movs	r2, #2
 8008b16:	2112      	movs	r1, #18
 8008b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b1c:	f7ff bf86 	b.w	8008a2c <std>
 8008b20:	20001014 	.word	0x20001014
 8008b24:	20000edc 	.word	0x20000edc
 8008b28:	08008a99 	.word	0x08008a99

08008b2c <__sfp_lock_acquire>:
 8008b2c:	4801      	ldr	r0, [pc, #4]	@ (8008b34 <__sfp_lock_acquire+0x8>)
 8008b2e:	f000 b8ee 	b.w	8008d0e <__retarget_lock_acquire_recursive>
 8008b32:	bf00      	nop
 8008b34:	20001019 	.word	0x20001019

08008b38 <__sfp_lock_release>:
 8008b38:	4801      	ldr	r0, [pc, #4]	@ (8008b40 <__sfp_lock_release+0x8>)
 8008b3a:	f000 b8e9 	b.w	8008d10 <__retarget_lock_release_recursive>
 8008b3e:	bf00      	nop
 8008b40:	20001019 	.word	0x20001019

08008b44 <__sinit>:
 8008b44:	b510      	push	{r4, lr}
 8008b46:	4604      	mov	r4, r0
 8008b48:	f7ff fff0 	bl	8008b2c <__sfp_lock_acquire>
 8008b4c:	6a23      	ldr	r3, [r4, #32]
 8008b4e:	b11b      	cbz	r3, 8008b58 <__sinit+0x14>
 8008b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b54:	f7ff bff0 	b.w	8008b38 <__sfp_lock_release>
 8008b58:	4b04      	ldr	r3, [pc, #16]	@ (8008b6c <__sinit+0x28>)
 8008b5a:	6223      	str	r3, [r4, #32]
 8008b5c:	4b04      	ldr	r3, [pc, #16]	@ (8008b70 <__sinit+0x2c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1f5      	bne.n	8008b50 <__sinit+0xc>
 8008b64:	f7ff ffc4 	bl	8008af0 <global_stdio_init.part.0>
 8008b68:	e7f2      	b.n	8008b50 <__sinit+0xc>
 8008b6a:	bf00      	nop
 8008b6c:	08008ab1 	.word	0x08008ab1
 8008b70:	20001014 	.word	0x20001014

08008b74 <_fwalk_sglue>:
 8008b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b78:	4607      	mov	r7, r0
 8008b7a:	4688      	mov	r8, r1
 8008b7c:	4614      	mov	r4, r2
 8008b7e:	2600      	movs	r6, #0
 8008b80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b84:	f1b9 0901 	subs.w	r9, r9, #1
 8008b88:	d505      	bpl.n	8008b96 <_fwalk_sglue+0x22>
 8008b8a:	6824      	ldr	r4, [r4, #0]
 8008b8c:	2c00      	cmp	r4, #0
 8008b8e:	d1f7      	bne.n	8008b80 <_fwalk_sglue+0xc>
 8008b90:	4630      	mov	r0, r6
 8008b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b96:	89ab      	ldrh	r3, [r5, #12]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d907      	bls.n	8008bac <_fwalk_sglue+0x38>
 8008b9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	d003      	beq.n	8008bac <_fwalk_sglue+0x38>
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	47c0      	blx	r8
 8008baa:	4306      	orrs	r6, r0
 8008bac:	3568      	adds	r5, #104	@ 0x68
 8008bae:	e7e9      	b.n	8008b84 <_fwalk_sglue+0x10>

08008bb0 <iprintf>:
 8008bb0:	b40f      	push	{r0, r1, r2, r3}
 8008bb2:	b507      	push	{r0, r1, r2, lr}
 8008bb4:	4906      	ldr	r1, [pc, #24]	@ (8008bd0 <iprintf+0x20>)
 8008bb6:	ab04      	add	r3, sp, #16
 8008bb8:	6808      	ldr	r0, [r1, #0]
 8008bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bbe:	6881      	ldr	r1, [r0, #8]
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	f000 ff5b 	bl	8009a7c <_vfiprintf_r>
 8008bc6:	b003      	add	sp, #12
 8008bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bcc:	b004      	add	sp, #16
 8008bce:	4770      	bx	lr
 8008bd0:	200000b0 	.word	0x200000b0

08008bd4 <putchar>:
 8008bd4:	4b02      	ldr	r3, [pc, #8]	@ (8008be0 <putchar+0xc>)
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	6882      	ldr	r2, [r0, #8]
 8008bdc:	f001 be9b 	b.w	800a916 <_putc_r>
 8008be0:	200000b0 	.word	0x200000b0

08008be4 <_puts_r>:
 8008be4:	6a03      	ldr	r3, [r0, #32]
 8008be6:	b570      	push	{r4, r5, r6, lr}
 8008be8:	4605      	mov	r5, r0
 8008bea:	460e      	mov	r6, r1
 8008bec:	6884      	ldr	r4, [r0, #8]
 8008bee:	b90b      	cbnz	r3, 8008bf4 <_puts_r+0x10>
 8008bf0:	f7ff ffa8 	bl	8008b44 <__sinit>
 8008bf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bf6:	07db      	lsls	r3, r3, #31
 8008bf8:	d405      	bmi.n	8008c06 <_puts_r+0x22>
 8008bfa:	89a3      	ldrh	r3, [r4, #12]
 8008bfc:	0598      	lsls	r0, r3, #22
 8008bfe:	d402      	bmi.n	8008c06 <_puts_r+0x22>
 8008c00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c02:	f000 f884 	bl	8008d0e <__retarget_lock_acquire_recursive>
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	0719      	lsls	r1, r3, #28
 8008c0a:	d502      	bpl.n	8008c12 <_puts_r+0x2e>
 8008c0c:	6923      	ldr	r3, [r4, #16]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d135      	bne.n	8008c7e <_puts_r+0x9a>
 8008c12:	4621      	mov	r1, r4
 8008c14:	4628      	mov	r0, r5
 8008c16:	f001 fdc7 	bl	800a7a8 <__swsetup_r>
 8008c1a:	b380      	cbz	r0, 8008c7e <_puts_r+0x9a>
 8008c1c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008c20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c22:	07da      	lsls	r2, r3, #31
 8008c24:	d405      	bmi.n	8008c32 <_puts_r+0x4e>
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	059b      	lsls	r3, r3, #22
 8008c2a:	d402      	bmi.n	8008c32 <_puts_r+0x4e>
 8008c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c2e:	f000 f86f 	bl	8008d10 <__retarget_lock_release_recursive>
 8008c32:	4628      	mov	r0, r5
 8008c34:	bd70      	pop	{r4, r5, r6, pc}
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	da04      	bge.n	8008c44 <_puts_r+0x60>
 8008c3a:	69a2      	ldr	r2, [r4, #24]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	dc17      	bgt.n	8008c70 <_puts_r+0x8c>
 8008c40:	290a      	cmp	r1, #10
 8008c42:	d015      	beq.n	8008c70 <_puts_r+0x8c>
 8008c44:	6823      	ldr	r3, [r4, #0]
 8008c46:	1c5a      	adds	r2, r3, #1
 8008c48:	6022      	str	r2, [r4, #0]
 8008c4a:	7019      	strb	r1, [r3, #0]
 8008c4c:	68a3      	ldr	r3, [r4, #8]
 8008c4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c52:	3b01      	subs	r3, #1
 8008c54:	60a3      	str	r3, [r4, #8]
 8008c56:	2900      	cmp	r1, #0
 8008c58:	d1ed      	bne.n	8008c36 <_puts_r+0x52>
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	da11      	bge.n	8008c82 <_puts_r+0x9e>
 8008c5e:	4622      	mov	r2, r4
 8008c60:	210a      	movs	r1, #10
 8008c62:	4628      	mov	r0, r5
 8008c64:	f001 fd62 	bl	800a72c <__swbuf_r>
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d0d7      	beq.n	8008c1c <_puts_r+0x38>
 8008c6c:	250a      	movs	r5, #10
 8008c6e:	e7d7      	b.n	8008c20 <_puts_r+0x3c>
 8008c70:	4622      	mov	r2, r4
 8008c72:	4628      	mov	r0, r5
 8008c74:	f001 fd5a 	bl	800a72c <__swbuf_r>
 8008c78:	3001      	adds	r0, #1
 8008c7a:	d1e7      	bne.n	8008c4c <_puts_r+0x68>
 8008c7c:	e7ce      	b.n	8008c1c <_puts_r+0x38>
 8008c7e:	3e01      	subs	r6, #1
 8008c80:	e7e4      	b.n	8008c4c <_puts_r+0x68>
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	1c5a      	adds	r2, r3, #1
 8008c86:	6022      	str	r2, [r4, #0]
 8008c88:	220a      	movs	r2, #10
 8008c8a:	701a      	strb	r2, [r3, #0]
 8008c8c:	e7ee      	b.n	8008c6c <_puts_r+0x88>
	...

08008c90 <puts>:
 8008c90:	4b02      	ldr	r3, [pc, #8]	@ (8008c9c <puts+0xc>)
 8008c92:	4601      	mov	r1, r0
 8008c94:	6818      	ldr	r0, [r3, #0]
 8008c96:	f7ff bfa5 	b.w	8008be4 <_puts_r>
 8008c9a:	bf00      	nop
 8008c9c:	200000b0 	.word	0x200000b0

08008ca0 <memset>:
 8008ca0:	4402      	add	r2, r0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d100      	bne.n	8008caa <memset+0xa>
 8008ca8:	4770      	bx	lr
 8008caa:	f803 1b01 	strb.w	r1, [r3], #1
 8008cae:	e7f9      	b.n	8008ca4 <memset+0x4>

08008cb0 <_localeconv_r>:
 8008cb0:	4800      	ldr	r0, [pc, #0]	@ (8008cb4 <_localeconv_r+0x4>)
 8008cb2:	4770      	bx	lr
 8008cb4:	200001f0 	.word	0x200001f0

08008cb8 <__errno>:
 8008cb8:	4b01      	ldr	r3, [pc, #4]	@ (8008cc0 <__errno+0x8>)
 8008cba:	6818      	ldr	r0, [r3, #0]
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	200000b0 	.word	0x200000b0

08008cc4 <__libc_init_array>:
 8008cc4:	b570      	push	{r4, r5, r6, lr}
 8008cc6:	4d0d      	ldr	r5, [pc, #52]	@ (8008cfc <__libc_init_array+0x38>)
 8008cc8:	2600      	movs	r6, #0
 8008cca:	4c0d      	ldr	r4, [pc, #52]	@ (8008d00 <__libc_init_array+0x3c>)
 8008ccc:	1b64      	subs	r4, r4, r5
 8008cce:	10a4      	asrs	r4, r4, #2
 8008cd0:	42a6      	cmp	r6, r4
 8008cd2:	d109      	bne.n	8008ce8 <__libc_init_array+0x24>
 8008cd4:	4d0b      	ldr	r5, [pc, #44]	@ (8008d04 <__libc_init_array+0x40>)
 8008cd6:	2600      	movs	r6, #0
 8008cd8:	4c0b      	ldr	r4, [pc, #44]	@ (8008d08 <__libc_init_array+0x44>)
 8008cda:	f003 f871 	bl	800bdc0 <_init>
 8008cde:	1b64      	subs	r4, r4, r5
 8008ce0:	10a4      	asrs	r4, r4, #2
 8008ce2:	42a6      	cmp	r6, r4
 8008ce4:	d105      	bne.n	8008cf2 <__libc_init_array+0x2e>
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}
 8008ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cec:	3601      	adds	r6, #1
 8008cee:	4798      	blx	r3
 8008cf0:	e7ee      	b.n	8008cd0 <__libc_init_array+0xc>
 8008cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cf6:	3601      	adds	r6, #1
 8008cf8:	4798      	blx	r3
 8008cfa:	e7f2      	b.n	8008ce2 <__libc_init_array+0x1e>
 8008cfc:	0800c5a8 	.word	0x0800c5a8
 8008d00:	0800c5a8 	.word	0x0800c5a8
 8008d04:	0800c5a8 	.word	0x0800c5a8
 8008d08:	0800c5ac 	.word	0x0800c5ac

08008d0c <__retarget_lock_init_recursive>:
 8008d0c:	4770      	bx	lr

08008d0e <__retarget_lock_acquire_recursive>:
 8008d0e:	4770      	bx	lr

08008d10 <__retarget_lock_release_recursive>:
 8008d10:	4770      	bx	lr

08008d12 <memchr>:
 8008d12:	b2c9      	uxtb	r1, r1
 8008d14:	4603      	mov	r3, r0
 8008d16:	4402      	add	r2, r0
 8008d18:	b510      	push	{r4, lr}
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	d101      	bne.n	8008d24 <memchr+0x12>
 8008d20:	2000      	movs	r0, #0
 8008d22:	e003      	b.n	8008d2c <memchr+0x1a>
 8008d24:	7804      	ldrb	r4, [r0, #0]
 8008d26:	3301      	adds	r3, #1
 8008d28:	428c      	cmp	r4, r1
 8008d2a:	d1f6      	bne.n	8008d1a <memchr+0x8>
 8008d2c:	bd10      	pop	{r4, pc}

08008d2e <memcpy>:
 8008d2e:	440a      	add	r2, r1
 8008d30:	1e43      	subs	r3, r0, #1
 8008d32:	4291      	cmp	r1, r2
 8008d34:	d100      	bne.n	8008d38 <memcpy+0xa>
 8008d36:	4770      	bx	lr
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d3e:	4291      	cmp	r1, r2
 8008d40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d44:	d1f9      	bne.n	8008d3a <memcpy+0xc>
 8008d46:	bd10      	pop	{r4, pc}

08008d48 <__assert_func>:
 8008d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d4a:	4614      	mov	r4, r2
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	4b09      	ldr	r3, [pc, #36]	@ (8008d74 <__assert_func+0x2c>)
 8008d50:	4605      	mov	r5, r0
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68d8      	ldr	r0, [r3, #12]
 8008d56:	b954      	cbnz	r4, 8008d6e <__assert_func+0x26>
 8008d58:	4b07      	ldr	r3, [pc, #28]	@ (8008d78 <__assert_func+0x30>)
 8008d5a:	461c      	mov	r4, r3
 8008d5c:	9100      	str	r1, [sp, #0]
 8008d5e:	4907      	ldr	r1, [pc, #28]	@ (8008d7c <__assert_func+0x34>)
 8008d60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d64:	462b      	mov	r3, r5
 8008d66:	f001 fccf 	bl	800a708 <fiprintf>
 8008d6a:	f001 fe81 	bl	800aa70 <abort>
 8008d6e:	4b04      	ldr	r3, [pc, #16]	@ (8008d80 <__assert_func+0x38>)
 8008d70:	e7f4      	b.n	8008d5c <__assert_func+0x14>
 8008d72:	bf00      	nop
 8008d74:	200000b0 	.word	0x200000b0
 8008d78:	0800c20f 	.word	0x0800c20f
 8008d7c:	0800c1e1 	.word	0x0800c1e1
 8008d80:	0800c1d4 	.word	0x0800c1d4

08008d84 <quorem>:
 8008d84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d88:	6903      	ldr	r3, [r0, #16]
 8008d8a:	4607      	mov	r7, r0
 8008d8c:	690c      	ldr	r4, [r1, #16]
 8008d8e:	42a3      	cmp	r3, r4
 8008d90:	f2c0 8083 	blt.w	8008e9a <quorem+0x116>
 8008d94:	3c01      	subs	r4, #1
 8008d96:	f100 0514 	add.w	r5, r0, #20
 8008d9a:	f101 0814 	add.w	r8, r1, #20
 8008d9e:	00a3      	lsls	r3, r4, #2
 8008da0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008da4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dae:	9301      	str	r3, [sp, #4]
 8008db0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008db4:	3301      	adds	r3, #1
 8008db6:	429a      	cmp	r2, r3
 8008db8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008dbc:	d331      	bcc.n	8008e22 <quorem+0x9e>
 8008dbe:	f04f 0a00 	mov.w	sl, #0
 8008dc2:	46c4      	mov	ip, r8
 8008dc4:	46ae      	mov	lr, r5
 8008dc6:	46d3      	mov	fp, sl
 8008dc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008dcc:	b298      	uxth	r0, r3
 8008dce:	45e1      	cmp	r9, ip
 8008dd0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8008dd4:	fb06 a000 	mla	r0, r6, r0, sl
 8008dd8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8008ddc:	b280      	uxth	r0, r0
 8008dde:	fb06 2303 	mla	r3, r6, r3, r2
 8008de2:	f8de 2000 	ldr.w	r2, [lr]
 8008de6:	b292      	uxth	r2, r2
 8008de8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008dec:	eba2 0200 	sub.w	r2, r2, r0
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	f8de 0000 	ldr.w	r0, [lr]
 8008df6:	445a      	add	r2, fp
 8008df8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008dfc:	b292      	uxth	r2, r2
 8008dfe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008e02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008e06:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008e0a:	f84e 2b04 	str.w	r2, [lr], #4
 8008e0e:	d2db      	bcs.n	8008dc8 <quorem+0x44>
 8008e10:	9b00      	ldr	r3, [sp, #0]
 8008e12:	58eb      	ldr	r3, [r5, r3]
 8008e14:	b92b      	cbnz	r3, 8008e22 <quorem+0x9e>
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	3b04      	subs	r3, #4
 8008e1a:	429d      	cmp	r5, r3
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	d330      	bcc.n	8008e82 <quorem+0xfe>
 8008e20:	613c      	str	r4, [r7, #16]
 8008e22:	4638      	mov	r0, r7
 8008e24:	f001 fb20 	bl	800a468 <__mcmp>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	db26      	blt.n	8008e7a <quorem+0xf6>
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	2000      	movs	r0, #0
 8008e30:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e34:	f8d1 c000 	ldr.w	ip, [r1]
 8008e38:	fa1f fe82 	uxth.w	lr, r2
 8008e3c:	45c1      	cmp	r9, r8
 8008e3e:	fa1f f38c 	uxth.w	r3, ip
 8008e42:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8008e46:	eba3 030e 	sub.w	r3, r3, lr
 8008e4a:	4403      	add	r3, r0
 8008e4c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e5a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008e5e:	f841 3b04 	str.w	r3, [r1], #4
 8008e62:	d2e5      	bcs.n	8008e30 <quorem+0xac>
 8008e64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e6c:	b922      	cbnz	r2, 8008e78 <quorem+0xf4>
 8008e6e:	3b04      	subs	r3, #4
 8008e70:	429d      	cmp	r5, r3
 8008e72:	461a      	mov	r2, r3
 8008e74:	d30b      	bcc.n	8008e8e <quorem+0x10a>
 8008e76:	613c      	str	r4, [r7, #16]
 8008e78:	3601      	adds	r6, #1
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	b003      	add	sp, #12
 8008e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e82:	6812      	ldr	r2, [r2, #0]
 8008e84:	3b04      	subs	r3, #4
 8008e86:	2a00      	cmp	r2, #0
 8008e88:	d1ca      	bne.n	8008e20 <quorem+0x9c>
 8008e8a:	3c01      	subs	r4, #1
 8008e8c:	e7c5      	b.n	8008e1a <quorem+0x96>
 8008e8e:	6812      	ldr	r2, [r2, #0]
 8008e90:	3b04      	subs	r3, #4
 8008e92:	2a00      	cmp	r2, #0
 8008e94:	d1ef      	bne.n	8008e76 <quorem+0xf2>
 8008e96:	3c01      	subs	r4, #1
 8008e98:	e7ea      	b.n	8008e70 <quorem+0xec>
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	e7ee      	b.n	8008e7c <quorem+0xf8>
	...

08008ea0 <_dtoa_r>:
 8008ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea4:	69c7      	ldr	r7, [r0, #28]
 8008ea6:	b099      	sub	sp, #100	@ 0x64
 8008ea8:	4683      	mov	fp, r0
 8008eaa:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008eac:	9109      	str	r1, [sp, #36]	@ 0x24
 8008eae:	920e      	str	r2, [sp, #56]	@ 0x38
 8008eb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008eb2:	ec55 4b10 	vmov	r4, r5, d0
 8008eb6:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008eba:	b97f      	cbnz	r7, 8008edc <_dtoa_r+0x3c>
 8008ebc:	2010      	movs	r0, #16
 8008ebe:	f000 fef5 	bl	8009cac <malloc>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	f8cb 001c 	str.w	r0, [fp, #28]
 8008ec8:	b920      	cbnz	r0, 8008ed4 <_dtoa_r+0x34>
 8008eca:	4ba7      	ldr	r3, [pc, #668]	@ (8009168 <_dtoa_r+0x2c8>)
 8008ecc:	21ef      	movs	r1, #239	@ 0xef
 8008ece:	48a7      	ldr	r0, [pc, #668]	@ (800916c <_dtoa_r+0x2cc>)
 8008ed0:	f7ff ff3a 	bl	8008d48 <__assert_func>
 8008ed4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008ed8:	6007      	str	r7, [r0, #0]
 8008eda:	60c7      	str	r7, [r0, #12]
 8008edc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ee0:	6819      	ldr	r1, [r3, #0]
 8008ee2:	b159      	cbz	r1, 8008efc <_dtoa_r+0x5c>
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	4658      	mov	r0, fp
 8008eea:	4093      	lsls	r3, r2
 8008eec:	604a      	str	r2, [r1, #4]
 8008eee:	608b      	str	r3, [r1, #8]
 8008ef0:	f001 f87e 	bl	8009ff0 <_Bfree>
 8008ef4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	601a      	str	r2, [r3, #0]
 8008efc:	1e2b      	subs	r3, r5, #0
 8008efe:	bfb7      	itett	lt
 8008f00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008f04:	2300      	movge	r3, #0
 8008f06:	2201      	movlt	r2, #1
 8008f08:	9303      	strlt	r3, [sp, #12]
 8008f0a:	bfa8      	it	ge
 8008f0c:	6033      	strge	r3, [r6, #0]
 8008f0e:	9f03      	ldr	r7, [sp, #12]
 8008f10:	4b97      	ldr	r3, [pc, #604]	@ (8009170 <_dtoa_r+0x2d0>)
 8008f12:	bfb8      	it	lt
 8008f14:	6032      	strlt	r2, [r6, #0]
 8008f16:	43bb      	bics	r3, r7
 8008f18:	d112      	bne.n	8008f40 <_dtoa_r+0xa0>
 8008f1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008f1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008f20:	6013      	str	r3, [r2, #0]
 8008f22:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f26:	4323      	orrs	r3, r4
 8008f28:	f000 854c 	beq.w	80099c4 <_dtoa_r+0xb24>
 8008f2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f2e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009184 <_dtoa_r+0x2e4>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f000 854e 	beq.w	80099d4 <_dtoa_r+0xb34>
 8008f38:	f10a 0303 	add.w	r3, sl, #3
 8008f3c:	f000 bd48 	b.w	80099d0 <_dtoa_r+0xb30>
 8008f40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f44:	2200      	movs	r2, #0
 8008f46:	2300      	movs	r3, #0
 8008f48:	ec51 0b17 	vmov	r0, r1, d7
 8008f4c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008f50:	f7f7 fdbe 	bl	8000ad0 <__aeabi_dcmpeq>
 8008f54:	4680      	mov	r8, r0
 8008f56:	b158      	cbz	r0, 8008f70 <_dtoa_r+0xd0>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f60:	b113      	cbz	r3, 8008f68 <_dtoa_r+0xc8>
 8008f62:	4b84      	ldr	r3, [pc, #528]	@ (8009174 <_dtoa_r+0x2d4>)
 8008f64:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8009188 <_dtoa_r+0x2e8>
 8008f6c:	f000 bd32 	b.w	80099d4 <_dtoa_r+0xb34>
 8008f70:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008f74:	aa16      	add	r2, sp, #88	@ 0x58
 8008f76:	a917      	add	r1, sp, #92	@ 0x5c
 8008f78:	4658      	mov	r0, fp
 8008f7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008f7e:	f001 fb27 	bl	800a5d0 <__d2b>
 8008f82:	4681      	mov	r9, r0
 8008f84:	2e00      	cmp	r6, #0
 8008f86:	d075      	beq.n	8009074 <_dtoa_r+0x1d4>
 8008f88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f8a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008f8e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008f92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f96:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008f9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f9e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	4b74      	ldr	r3, [pc, #464]	@ (8009178 <_dtoa_r+0x2d8>)
 8008fa8:	f7f7 f972 	bl	8000290 <__aeabi_dsub>
 8008fac:	a368      	add	r3, pc, #416	@ (adr r3, 8009150 <_dtoa_r+0x2b0>)
 8008fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb2:	f7f7 fb25 	bl	8000600 <__aeabi_dmul>
 8008fb6:	a368      	add	r3, pc, #416	@ (adr r3, 8009158 <_dtoa_r+0x2b8>)
 8008fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbc:	f7f7 f96a 	bl	8000294 <__adddf3>
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	460d      	mov	r5, r1
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f7f7 fab1 	bl	800052c <__aeabi_i2d>
 8008fca:	a365      	add	r3, pc, #404	@ (adr r3, 8009160 <_dtoa_r+0x2c0>)
 8008fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd0:	f7f7 fb16 	bl	8000600 <__aeabi_dmul>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4620      	mov	r0, r4
 8008fda:	4629      	mov	r1, r5
 8008fdc:	f7f7 f95a 	bl	8000294 <__adddf3>
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	460d      	mov	r5, r1
 8008fe4:	f7f7 fdbc 	bl	8000b60 <__aeabi_d2iz>
 8008fe8:	2200      	movs	r2, #0
 8008fea:	4607      	mov	r7, r0
 8008fec:	2300      	movs	r3, #0
 8008fee:	4620      	mov	r0, r4
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	f7f7 fd77 	bl	8000ae4 <__aeabi_dcmplt>
 8008ff6:	b140      	cbz	r0, 800900a <_dtoa_r+0x16a>
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	f7f7 fa97 	bl	800052c <__aeabi_i2d>
 8008ffe:	4622      	mov	r2, r4
 8009000:	462b      	mov	r3, r5
 8009002:	f7f7 fd65 	bl	8000ad0 <__aeabi_dcmpeq>
 8009006:	b900      	cbnz	r0, 800900a <_dtoa_r+0x16a>
 8009008:	3f01      	subs	r7, #1
 800900a:	2f16      	cmp	r7, #22
 800900c:	d851      	bhi.n	80090b2 <_dtoa_r+0x212>
 800900e:	4b5b      	ldr	r3, [pc, #364]	@ (800917c <_dtoa_r+0x2dc>)
 8009010:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009014:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f7f7 fd62 	bl	8000ae4 <__aeabi_dcmplt>
 8009020:	2800      	cmp	r0, #0
 8009022:	d048      	beq.n	80090b6 <_dtoa_r+0x216>
 8009024:	3f01      	subs	r7, #1
 8009026:	2300      	movs	r3, #0
 8009028:	9312      	str	r3, [sp, #72]	@ 0x48
 800902a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800902c:	1b9b      	subs	r3, r3, r6
 800902e:	1e5a      	subs	r2, r3, #1
 8009030:	bf46      	itte	mi
 8009032:	f1c3 0801 	rsbmi	r8, r3, #1
 8009036:	2300      	movmi	r3, #0
 8009038:	f04f 0800 	movpl.w	r8, #0
 800903c:	9208      	str	r2, [sp, #32]
 800903e:	bf48      	it	mi
 8009040:	9308      	strmi	r3, [sp, #32]
 8009042:	2f00      	cmp	r7, #0
 8009044:	db39      	blt.n	80090ba <_dtoa_r+0x21a>
 8009046:	9b08      	ldr	r3, [sp, #32]
 8009048:	970f      	str	r7, [sp, #60]	@ 0x3c
 800904a:	443b      	add	r3, r7
 800904c:	9308      	str	r3, [sp, #32]
 800904e:	2300      	movs	r3, #0
 8009050:	930a      	str	r3, [sp, #40]	@ 0x28
 8009052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009054:	2b09      	cmp	r3, #9
 8009056:	d864      	bhi.n	8009122 <_dtoa_r+0x282>
 8009058:	2b05      	cmp	r3, #5
 800905a:	bfc5      	ittet	gt
 800905c:	3b04      	subgt	r3, #4
 800905e:	2400      	movgt	r4, #0
 8009060:	2401      	movle	r4, #1
 8009062:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009066:	3b02      	subs	r3, #2
 8009068:	2b03      	cmp	r3, #3
 800906a:	d865      	bhi.n	8009138 <_dtoa_r+0x298>
 800906c:	e8df f003 	tbb	[pc, r3]
 8009070:	5737392c 	.word	0x5737392c
 8009074:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009078:	441e      	add	r6, r3
 800907a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800907e:	2b20      	cmp	r3, #32
 8009080:	bfc9      	itett	gt
 8009082:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009086:	f1c3 0320 	rsble	r3, r3, #32
 800908a:	409f      	lslgt	r7, r3
 800908c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009090:	bfd8      	it	le
 8009092:	fa04 f003 	lslle.w	r0, r4, r3
 8009096:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800909a:	bfc4      	itt	gt
 800909c:	fa24 f303 	lsrgt.w	r3, r4, r3
 80090a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80090a4:	f7f7 fa32 	bl	800050c <__aeabi_ui2d>
 80090a8:	2201      	movs	r2, #1
 80090aa:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80090ae:	9214      	str	r2, [sp, #80]	@ 0x50
 80090b0:	e777      	b.n	8008fa2 <_dtoa_r+0x102>
 80090b2:	2301      	movs	r3, #1
 80090b4:	e7b8      	b.n	8009028 <_dtoa_r+0x188>
 80090b6:	9012      	str	r0, [sp, #72]	@ 0x48
 80090b8:	e7b7      	b.n	800902a <_dtoa_r+0x18a>
 80090ba:	427b      	negs	r3, r7
 80090bc:	eba8 0807 	sub.w	r8, r8, r7
 80090c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80090c2:	2300      	movs	r3, #0
 80090c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80090c6:	e7c4      	b.n	8009052 <_dtoa_r+0x1b2>
 80090c8:	2300      	movs	r3, #0
 80090ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	dc35      	bgt.n	800913e <_dtoa_r+0x29e>
 80090d2:	2301      	movs	r3, #1
 80090d4:	461a      	mov	r2, r3
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	9307      	str	r3, [sp, #28]
 80090da:	920e      	str	r2, [sp, #56]	@ 0x38
 80090dc:	e00b      	b.n	80090f6 <_dtoa_r+0x256>
 80090de:	2301      	movs	r3, #1
 80090e0:	e7f3      	b.n	80090ca <_dtoa_r+0x22a>
 80090e2:	2300      	movs	r3, #0
 80090e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090e8:	18fb      	adds	r3, r7, r3
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	3301      	adds	r3, #1
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	9307      	str	r3, [sp, #28]
 80090f2:	bfb8      	it	lt
 80090f4:	2301      	movlt	r3, #1
 80090f6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80090fa:	2100      	movs	r1, #0
 80090fc:	2204      	movs	r2, #4
 80090fe:	f102 0514 	add.w	r5, r2, #20
 8009102:	429d      	cmp	r5, r3
 8009104:	d91f      	bls.n	8009146 <_dtoa_r+0x2a6>
 8009106:	6041      	str	r1, [r0, #4]
 8009108:	4658      	mov	r0, fp
 800910a:	f000 ff31 	bl	8009f70 <_Balloc>
 800910e:	4682      	mov	sl, r0
 8009110:	2800      	cmp	r0, #0
 8009112:	d13b      	bne.n	800918c <_dtoa_r+0x2ec>
 8009114:	4b1a      	ldr	r3, [pc, #104]	@ (8009180 <_dtoa_r+0x2e0>)
 8009116:	4602      	mov	r2, r0
 8009118:	f240 11af 	movw	r1, #431	@ 0x1af
 800911c:	e6d7      	b.n	8008ece <_dtoa_r+0x2e>
 800911e:	2301      	movs	r3, #1
 8009120:	e7e0      	b.n	80090e4 <_dtoa_r+0x244>
 8009122:	2401      	movs	r4, #1
 8009124:	2300      	movs	r3, #0
 8009126:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009128:	9309      	str	r3, [sp, #36]	@ 0x24
 800912a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800912e:	2200      	movs	r2, #0
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	9307      	str	r3, [sp, #28]
 8009134:	2312      	movs	r3, #18
 8009136:	e7d0      	b.n	80090da <_dtoa_r+0x23a>
 8009138:	2301      	movs	r3, #1
 800913a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800913c:	e7f5      	b.n	800912a <_dtoa_r+0x28a>
 800913e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	9307      	str	r3, [sp, #28]
 8009144:	e7d7      	b.n	80090f6 <_dtoa_r+0x256>
 8009146:	3101      	adds	r1, #1
 8009148:	0052      	lsls	r2, r2, #1
 800914a:	e7d8      	b.n	80090fe <_dtoa_r+0x25e>
 800914c:	f3af 8000 	nop.w
 8009150:	636f4361 	.word	0x636f4361
 8009154:	3fd287a7 	.word	0x3fd287a7
 8009158:	8b60c8b3 	.word	0x8b60c8b3
 800915c:	3fc68a28 	.word	0x3fc68a28
 8009160:	509f79fb 	.word	0x509f79fb
 8009164:	3fd34413 	.word	0x3fd34413
 8009168:	0800c21d 	.word	0x0800c21d
 800916c:	0800c234 	.word	0x0800c234
 8009170:	7ff00000 	.word	0x7ff00000
 8009174:	0800c1b1 	.word	0x0800c1b1
 8009178:	3ff80000 	.word	0x3ff80000
 800917c:	0800c340 	.word	0x0800c340
 8009180:	0800c28c 	.word	0x0800c28c
 8009184:	0800c219 	.word	0x0800c219
 8009188:	0800c1b0 	.word	0x0800c1b0
 800918c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009190:	6018      	str	r0, [r3, #0]
 8009192:	9b07      	ldr	r3, [sp, #28]
 8009194:	2b0e      	cmp	r3, #14
 8009196:	f200 80a4 	bhi.w	80092e2 <_dtoa_r+0x442>
 800919a:	2c00      	cmp	r4, #0
 800919c:	f000 80a1 	beq.w	80092e2 <_dtoa_r+0x442>
 80091a0:	2f00      	cmp	r7, #0
 80091a2:	dd33      	ble.n	800920c <_dtoa_r+0x36c>
 80091a4:	f007 020f 	and.w	r2, r7, #15
 80091a8:	4bac      	ldr	r3, [pc, #688]	@ (800945c <_dtoa_r+0x5bc>)
 80091aa:	05f8      	lsls	r0, r7, #23
 80091ac:	ea4f 1427 	mov.w	r4, r7, asr #4
 80091b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091b4:	ed93 7b00 	vldr	d7, [r3]
 80091b8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80091bc:	d516      	bpl.n	80091ec <_dtoa_r+0x34c>
 80091be:	4ba8      	ldr	r3, [pc, #672]	@ (8009460 <_dtoa_r+0x5c0>)
 80091c0:	f004 040f 	and.w	r4, r4, #15
 80091c4:	2603      	movs	r6, #3
 80091c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091ce:	f7f7 fb41 	bl	8000854 <__aeabi_ddiv>
 80091d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091d6:	4da2      	ldr	r5, [pc, #648]	@ (8009460 <_dtoa_r+0x5c0>)
 80091d8:	b954      	cbnz	r4, 80091f0 <_dtoa_r+0x350>
 80091da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091e2:	f7f7 fb37 	bl	8000854 <__aeabi_ddiv>
 80091e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091ea:	e028      	b.n	800923e <_dtoa_r+0x39e>
 80091ec:	2602      	movs	r6, #2
 80091ee:	e7f2      	b.n	80091d6 <_dtoa_r+0x336>
 80091f0:	07e1      	lsls	r1, r4, #31
 80091f2:	d508      	bpl.n	8009206 <_dtoa_r+0x366>
 80091f4:	3601      	adds	r6, #1
 80091f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80091fe:	f7f7 f9ff 	bl	8000600 <__aeabi_dmul>
 8009202:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009206:	1064      	asrs	r4, r4, #1
 8009208:	3508      	adds	r5, #8
 800920a:	e7e5      	b.n	80091d8 <_dtoa_r+0x338>
 800920c:	f000 80d2 	beq.w	80093b4 <_dtoa_r+0x514>
 8009210:	427c      	negs	r4, r7
 8009212:	4b92      	ldr	r3, [pc, #584]	@ (800945c <_dtoa_r+0x5bc>)
 8009214:	4d92      	ldr	r5, [pc, #584]	@ (8009460 <_dtoa_r+0x5c0>)
 8009216:	2602      	movs	r6, #2
 8009218:	f004 020f 	and.w	r2, r4, #15
 800921c:	1124      	asrs	r4, r4, #4
 800921e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009222:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	f7f7 f9e9 	bl	8000600 <__aeabi_dmul>
 800922e:	2300      	movs	r3, #0
 8009230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009234:	2c00      	cmp	r4, #0
 8009236:	f040 80b2 	bne.w	800939e <_dtoa_r+0x4fe>
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1d3      	bne.n	80091e6 <_dtoa_r+0x346>
 800923e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009240:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009244:	2b00      	cmp	r3, #0
 8009246:	f000 80b7 	beq.w	80093b8 <_dtoa_r+0x518>
 800924a:	2200      	movs	r2, #0
 800924c:	4b85      	ldr	r3, [pc, #532]	@ (8009464 <_dtoa_r+0x5c4>)
 800924e:	4620      	mov	r0, r4
 8009250:	4629      	mov	r1, r5
 8009252:	f7f7 fc47 	bl	8000ae4 <__aeabi_dcmplt>
 8009256:	2800      	cmp	r0, #0
 8009258:	f000 80ae 	beq.w	80093b8 <_dtoa_r+0x518>
 800925c:	9b07      	ldr	r3, [sp, #28]
 800925e:	2b00      	cmp	r3, #0
 8009260:	f000 80aa 	beq.w	80093b8 <_dtoa_r+0x518>
 8009264:	9b00      	ldr	r3, [sp, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	dd37      	ble.n	80092da <_dtoa_r+0x43a>
 800926a:	1e7b      	subs	r3, r7, #1
 800926c:	4620      	mov	r0, r4
 800926e:	2200      	movs	r2, #0
 8009270:	4629      	mov	r1, r5
 8009272:	9304      	str	r3, [sp, #16]
 8009274:	3601      	adds	r6, #1
 8009276:	4b7c      	ldr	r3, [pc, #496]	@ (8009468 <_dtoa_r+0x5c8>)
 8009278:	f7f7 f9c2 	bl	8000600 <__aeabi_dmul>
 800927c:	9c00      	ldr	r4, [sp, #0]
 800927e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009282:	4630      	mov	r0, r6
 8009284:	f7f7 f952 	bl	800052c <__aeabi_i2d>
 8009288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800928c:	f7f7 f9b8 	bl	8000600 <__aeabi_dmul>
 8009290:	2200      	movs	r2, #0
 8009292:	4b76      	ldr	r3, [pc, #472]	@ (800946c <_dtoa_r+0x5cc>)
 8009294:	f7f6 fffe 	bl	8000294 <__adddf3>
 8009298:	4605      	mov	r5, r0
 800929a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800929e:	2c00      	cmp	r4, #0
 80092a0:	f040 808d 	bne.w	80093be <_dtoa_r+0x51e>
 80092a4:	2200      	movs	r2, #0
 80092a6:	4b72      	ldr	r3, [pc, #456]	@ (8009470 <_dtoa_r+0x5d0>)
 80092a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092ac:	f7f6 fff0 	bl	8000290 <__aeabi_dsub>
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092b8:	462a      	mov	r2, r5
 80092ba:	4633      	mov	r3, r6
 80092bc:	f7f7 fc30 	bl	8000b20 <__aeabi_dcmpgt>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	f040 828b 	bne.w	80097dc <_dtoa_r+0x93c>
 80092c6:	462a      	mov	r2, r5
 80092c8:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80092cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092d0:	f7f7 fc08 	bl	8000ae4 <__aeabi_dcmplt>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	f040 8128 	bne.w	800952a <_dtoa_r+0x68a>
 80092da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80092de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80092e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f2c0 815a 	blt.w	800959e <_dtoa_r+0x6fe>
 80092ea:	2f0e      	cmp	r7, #14
 80092ec:	f300 8157 	bgt.w	800959e <_dtoa_r+0x6fe>
 80092f0:	4b5a      	ldr	r3, [pc, #360]	@ (800945c <_dtoa_r+0x5bc>)
 80092f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80092f6:	ed93 7b00 	vldr	d7, [r3]
 80092fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	ed8d 7b00 	vstr	d7, [sp]
 8009302:	da03      	bge.n	800930c <_dtoa_r+0x46c>
 8009304:	9b07      	ldr	r3, [sp, #28]
 8009306:	2b00      	cmp	r3, #0
 8009308:	f340 8101 	ble.w	800950e <_dtoa_r+0x66e>
 800930c:	4656      	mov	r6, sl
 800930e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009316:	4620      	mov	r0, r4
 8009318:	4629      	mov	r1, r5
 800931a:	f7f7 fa9b 	bl	8000854 <__aeabi_ddiv>
 800931e:	f7f7 fc1f 	bl	8000b60 <__aeabi_d2iz>
 8009322:	4680      	mov	r8, r0
 8009324:	f7f7 f902 	bl	800052c <__aeabi_i2d>
 8009328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800932c:	f7f7 f968 	bl	8000600 <__aeabi_dmul>
 8009330:	4602      	mov	r2, r0
 8009332:	4620      	mov	r0, r4
 8009334:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009338:	460b      	mov	r3, r1
 800933a:	4629      	mov	r1, r5
 800933c:	f7f6 ffa8 	bl	8000290 <__aeabi_dsub>
 8009340:	9d07      	ldr	r5, [sp, #28]
 8009342:	f806 4b01 	strb.w	r4, [r6], #1
 8009346:	eba6 040a 	sub.w	r4, r6, sl
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	42a5      	cmp	r5, r4
 8009350:	f040 8117 	bne.w	8009582 <_dtoa_r+0x6e2>
 8009354:	f7f6 ff9e 	bl	8000294 <__adddf3>
 8009358:	4604      	mov	r4, r0
 800935a:	460d      	mov	r5, r1
 800935c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009360:	f7f7 fbde 	bl	8000b20 <__aeabi_dcmpgt>
 8009364:	2800      	cmp	r0, #0
 8009366:	f040 80f9 	bne.w	800955c <_dtoa_r+0x6bc>
 800936a:	4620      	mov	r0, r4
 800936c:	4629      	mov	r1, r5
 800936e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009372:	f7f7 fbad 	bl	8000ad0 <__aeabi_dcmpeq>
 8009376:	b118      	cbz	r0, 8009380 <_dtoa_r+0x4e0>
 8009378:	f018 0f01 	tst.w	r8, #1
 800937c:	f040 80ee 	bne.w	800955c <_dtoa_r+0x6bc>
 8009380:	4649      	mov	r1, r9
 8009382:	4658      	mov	r0, fp
 8009384:	f000 fe34 	bl	8009ff0 <_Bfree>
 8009388:	2300      	movs	r3, #0
 800938a:	3701      	adds	r7, #1
 800938c:	7033      	strb	r3, [r6, #0]
 800938e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009390:	601f      	str	r7, [r3, #0]
 8009392:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 831d 	beq.w	80099d4 <_dtoa_r+0xb34>
 800939a:	601e      	str	r6, [r3, #0]
 800939c:	e31a      	b.n	80099d4 <_dtoa_r+0xb34>
 800939e:	07e2      	lsls	r2, r4, #31
 80093a0:	d505      	bpl.n	80093ae <_dtoa_r+0x50e>
 80093a2:	3601      	adds	r6, #1
 80093a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093a8:	f7f7 f92a 	bl	8000600 <__aeabi_dmul>
 80093ac:	2301      	movs	r3, #1
 80093ae:	1064      	asrs	r4, r4, #1
 80093b0:	3508      	adds	r5, #8
 80093b2:	e73f      	b.n	8009234 <_dtoa_r+0x394>
 80093b4:	2602      	movs	r6, #2
 80093b6:	e742      	b.n	800923e <_dtoa_r+0x39e>
 80093b8:	9c07      	ldr	r4, [sp, #28]
 80093ba:	9704      	str	r7, [sp, #16]
 80093bc:	e761      	b.n	8009282 <_dtoa_r+0x3e2>
 80093be:	4b27      	ldr	r3, [pc, #156]	@ (800945c <_dtoa_r+0x5bc>)
 80093c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80093c6:	4454      	add	r4, sl
 80093c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093cc:	2900      	cmp	r1, #0
 80093ce:	d053      	beq.n	8009478 <_dtoa_r+0x5d8>
 80093d0:	2000      	movs	r0, #0
 80093d2:	4928      	ldr	r1, [pc, #160]	@ (8009474 <_dtoa_r+0x5d4>)
 80093d4:	f7f7 fa3e 	bl	8000854 <__aeabi_ddiv>
 80093d8:	4633      	mov	r3, r6
 80093da:	4656      	mov	r6, sl
 80093dc:	462a      	mov	r2, r5
 80093de:	f7f6 ff57 	bl	8000290 <__aeabi_dsub>
 80093e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80093e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093ea:	f7f7 fbb9 	bl	8000b60 <__aeabi_d2iz>
 80093ee:	4605      	mov	r5, r0
 80093f0:	f7f7 f89c 	bl	800052c <__aeabi_i2d>
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	3530      	adds	r5, #48	@ 0x30
 80093fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093fe:	f7f6 ff47 	bl	8000290 <__aeabi_dsub>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	f806 5b01 	strb.w	r5, [r6], #1
 800940a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800940e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009412:	f7f7 fb67 	bl	8000ae4 <__aeabi_dcmplt>
 8009416:	2800      	cmp	r0, #0
 8009418:	d171      	bne.n	80094fe <_dtoa_r+0x65e>
 800941a:	2000      	movs	r0, #0
 800941c:	4911      	ldr	r1, [pc, #68]	@ (8009464 <_dtoa_r+0x5c4>)
 800941e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009422:	f7f6 ff35 	bl	8000290 <__aeabi_dsub>
 8009426:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800942a:	f7f7 fb5b 	bl	8000ae4 <__aeabi_dcmplt>
 800942e:	2800      	cmp	r0, #0
 8009430:	f040 8095 	bne.w	800955e <_dtoa_r+0x6be>
 8009434:	42a6      	cmp	r6, r4
 8009436:	f43f af50 	beq.w	80092da <_dtoa_r+0x43a>
 800943a:	2200      	movs	r2, #0
 800943c:	4b0a      	ldr	r3, [pc, #40]	@ (8009468 <_dtoa_r+0x5c8>)
 800943e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009442:	f7f7 f8dd 	bl	8000600 <__aeabi_dmul>
 8009446:	2200      	movs	r2, #0
 8009448:	4b07      	ldr	r3, [pc, #28]	@ (8009468 <_dtoa_r+0x5c8>)
 800944a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800944e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009452:	f7f7 f8d5 	bl	8000600 <__aeabi_dmul>
 8009456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800945a:	e7c4      	b.n	80093e6 <_dtoa_r+0x546>
 800945c:	0800c340 	.word	0x0800c340
 8009460:	0800c318 	.word	0x0800c318
 8009464:	3ff00000 	.word	0x3ff00000
 8009468:	40240000 	.word	0x40240000
 800946c:	401c0000 	.word	0x401c0000
 8009470:	40140000 	.word	0x40140000
 8009474:	3fe00000 	.word	0x3fe00000
 8009478:	4631      	mov	r1, r6
 800947a:	4656      	mov	r6, sl
 800947c:	4628      	mov	r0, r5
 800947e:	f7f7 f8bf 	bl	8000600 <__aeabi_dmul>
 8009482:	9415      	str	r4, [sp, #84]	@ 0x54
 8009484:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800948c:	f7f7 fb68 	bl	8000b60 <__aeabi_d2iz>
 8009490:	4605      	mov	r5, r0
 8009492:	f7f7 f84b 	bl	800052c <__aeabi_i2d>
 8009496:	4602      	mov	r2, r0
 8009498:	3530      	adds	r5, #48	@ 0x30
 800949a:	460b      	mov	r3, r1
 800949c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094a0:	f7f6 fef6 	bl	8000290 <__aeabi_dsub>
 80094a4:	f806 5b01 	strb.w	r5, [r6], #1
 80094a8:	4602      	mov	r2, r0
 80094aa:	460b      	mov	r3, r1
 80094ac:	42a6      	cmp	r6, r4
 80094ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094b2:	f04f 0200 	mov.w	r2, #0
 80094b6:	d124      	bne.n	8009502 <_dtoa_r+0x662>
 80094b8:	4bac      	ldr	r3, [pc, #688]	@ (800976c <_dtoa_r+0x8cc>)
 80094ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80094be:	f7f6 fee9 	bl	8000294 <__adddf3>
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ca:	f7f7 fb29 	bl	8000b20 <__aeabi_dcmpgt>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d145      	bne.n	800955e <_dtoa_r+0x6be>
 80094d2:	2000      	movs	r0, #0
 80094d4:	49a5      	ldr	r1, [pc, #660]	@ (800976c <_dtoa_r+0x8cc>)
 80094d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80094da:	f7f6 fed9 	bl	8000290 <__aeabi_dsub>
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094e6:	f7f7 fafd 	bl	8000ae4 <__aeabi_dcmplt>
 80094ea:	2800      	cmp	r0, #0
 80094ec:	f43f aef5 	beq.w	80092da <_dtoa_r+0x43a>
 80094f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80094f2:	1e73      	subs	r3, r6, #1
 80094f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80094f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80094fa:	2b30      	cmp	r3, #48	@ 0x30
 80094fc:	d0f8      	beq.n	80094f0 <_dtoa_r+0x650>
 80094fe:	9f04      	ldr	r7, [sp, #16]
 8009500:	e73e      	b.n	8009380 <_dtoa_r+0x4e0>
 8009502:	4b9b      	ldr	r3, [pc, #620]	@ (8009770 <_dtoa_r+0x8d0>)
 8009504:	f7f7 f87c 	bl	8000600 <__aeabi_dmul>
 8009508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800950c:	e7bc      	b.n	8009488 <_dtoa_r+0x5e8>
 800950e:	d10c      	bne.n	800952a <_dtoa_r+0x68a>
 8009510:	2200      	movs	r2, #0
 8009512:	4b98      	ldr	r3, [pc, #608]	@ (8009774 <_dtoa_r+0x8d4>)
 8009514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009518:	f7f7 f872 	bl	8000600 <__aeabi_dmul>
 800951c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009520:	f7f7 faf4 	bl	8000b0c <__aeabi_dcmpge>
 8009524:	2800      	cmp	r0, #0
 8009526:	f000 8157 	beq.w	80097d8 <_dtoa_r+0x938>
 800952a:	2400      	movs	r4, #0
 800952c:	4625      	mov	r5, r4
 800952e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009530:	4656      	mov	r6, sl
 8009532:	43db      	mvns	r3, r3
 8009534:	9304      	str	r3, [sp, #16]
 8009536:	2700      	movs	r7, #0
 8009538:	4621      	mov	r1, r4
 800953a:	4658      	mov	r0, fp
 800953c:	f000 fd58 	bl	8009ff0 <_Bfree>
 8009540:	2d00      	cmp	r5, #0
 8009542:	d0dc      	beq.n	80094fe <_dtoa_r+0x65e>
 8009544:	b12f      	cbz	r7, 8009552 <_dtoa_r+0x6b2>
 8009546:	42af      	cmp	r7, r5
 8009548:	d003      	beq.n	8009552 <_dtoa_r+0x6b2>
 800954a:	4639      	mov	r1, r7
 800954c:	4658      	mov	r0, fp
 800954e:	f000 fd4f 	bl	8009ff0 <_Bfree>
 8009552:	4629      	mov	r1, r5
 8009554:	4658      	mov	r0, fp
 8009556:	f000 fd4b 	bl	8009ff0 <_Bfree>
 800955a:	e7d0      	b.n	80094fe <_dtoa_r+0x65e>
 800955c:	9704      	str	r7, [sp, #16]
 800955e:	4633      	mov	r3, r6
 8009560:	461e      	mov	r6, r3
 8009562:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009566:	2a39      	cmp	r2, #57	@ 0x39
 8009568:	d107      	bne.n	800957a <_dtoa_r+0x6da>
 800956a:	459a      	cmp	sl, r3
 800956c:	d1f8      	bne.n	8009560 <_dtoa_r+0x6c0>
 800956e:	9a04      	ldr	r2, [sp, #16]
 8009570:	3201      	adds	r2, #1
 8009572:	9204      	str	r2, [sp, #16]
 8009574:	2230      	movs	r2, #48	@ 0x30
 8009576:	f88a 2000 	strb.w	r2, [sl]
 800957a:	781a      	ldrb	r2, [r3, #0]
 800957c:	3201      	adds	r2, #1
 800957e:	701a      	strb	r2, [r3, #0]
 8009580:	e7bd      	b.n	80094fe <_dtoa_r+0x65e>
 8009582:	2200      	movs	r2, #0
 8009584:	4b7a      	ldr	r3, [pc, #488]	@ (8009770 <_dtoa_r+0x8d0>)
 8009586:	f7f7 f83b 	bl	8000600 <__aeabi_dmul>
 800958a:	2200      	movs	r2, #0
 800958c:	2300      	movs	r3, #0
 800958e:	4604      	mov	r4, r0
 8009590:	460d      	mov	r5, r1
 8009592:	f7f7 fa9d 	bl	8000ad0 <__aeabi_dcmpeq>
 8009596:	2800      	cmp	r0, #0
 8009598:	f43f aebb 	beq.w	8009312 <_dtoa_r+0x472>
 800959c:	e6f0      	b.n	8009380 <_dtoa_r+0x4e0>
 800959e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80095a0:	2a00      	cmp	r2, #0
 80095a2:	f000 80db 	beq.w	800975c <_dtoa_r+0x8bc>
 80095a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095a8:	2a01      	cmp	r2, #1
 80095aa:	f300 80bf 	bgt.w	800972c <_dtoa_r+0x88c>
 80095ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80095b0:	2a00      	cmp	r2, #0
 80095b2:	f000 80b7 	beq.w	8009724 <_dtoa_r+0x884>
 80095b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80095ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80095bc:	4646      	mov	r6, r8
 80095be:	9a08      	ldr	r2, [sp, #32]
 80095c0:	2101      	movs	r1, #1
 80095c2:	4658      	mov	r0, fp
 80095c4:	4498      	add	r8, r3
 80095c6:	441a      	add	r2, r3
 80095c8:	9208      	str	r2, [sp, #32]
 80095ca:	f000 fdc7 	bl	800a15c <__i2b>
 80095ce:	4605      	mov	r5, r0
 80095d0:	b15e      	cbz	r6, 80095ea <_dtoa_r+0x74a>
 80095d2:	9b08      	ldr	r3, [sp, #32]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	dd08      	ble.n	80095ea <_dtoa_r+0x74a>
 80095d8:	42b3      	cmp	r3, r6
 80095da:	9a08      	ldr	r2, [sp, #32]
 80095dc:	bfa8      	it	ge
 80095de:	4633      	movge	r3, r6
 80095e0:	eba8 0803 	sub.w	r8, r8, r3
 80095e4:	1af6      	subs	r6, r6, r3
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	9308      	str	r3, [sp, #32]
 80095ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095ec:	b1f3      	cbz	r3, 800962c <_dtoa_r+0x78c>
 80095ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 80b7 	beq.w	8009764 <_dtoa_r+0x8c4>
 80095f6:	b18c      	cbz	r4, 800961c <_dtoa_r+0x77c>
 80095f8:	4629      	mov	r1, r5
 80095fa:	4622      	mov	r2, r4
 80095fc:	4658      	mov	r0, fp
 80095fe:	f000 fe6d 	bl	800a2dc <__pow5mult>
 8009602:	464a      	mov	r2, r9
 8009604:	4601      	mov	r1, r0
 8009606:	4605      	mov	r5, r0
 8009608:	4658      	mov	r0, fp
 800960a:	f000 fdbd 	bl	800a188 <__multiply>
 800960e:	4649      	mov	r1, r9
 8009610:	9004      	str	r0, [sp, #16]
 8009612:	4658      	mov	r0, fp
 8009614:	f000 fcec 	bl	8009ff0 <_Bfree>
 8009618:	9b04      	ldr	r3, [sp, #16]
 800961a:	4699      	mov	r9, r3
 800961c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800961e:	1b1a      	subs	r2, r3, r4
 8009620:	d004      	beq.n	800962c <_dtoa_r+0x78c>
 8009622:	4649      	mov	r1, r9
 8009624:	4658      	mov	r0, fp
 8009626:	f000 fe59 	bl	800a2dc <__pow5mult>
 800962a:	4681      	mov	r9, r0
 800962c:	2101      	movs	r1, #1
 800962e:	4658      	mov	r0, fp
 8009630:	f000 fd94 	bl	800a15c <__i2b>
 8009634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009636:	4604      	mov	r4, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 81cf 	beq.w	80099dc <_dtoa_r+0xb3c>
 800963e:	461a      	mov	r2, r3
 8009640:	4601      	mov	r1, r0
 8009642:	4658      	mov	r0, fp
 8009644:	f000 fe4a 	bl	800a2dc <__pow5mult>
 8009648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800964a:	4604      	mov	r4, r0
 800964c:	2b01      	cmp	r3, #1
 800964e:	f300 8095 	bgt.w	800977c <_dtoa_r+0x8dc>
 8009652:	9b02      	ldr	r3, [sp, #8]
 8009654:	2b00      	cmp	r3, #0
 8009656:	f040 8087 	bne.w	8009768 <_dtoa_r+0x8c8>
 800965a:	9b03      	ldr	r3, [sp, #12]
 800965c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009660:	2b00      	cmp	r3, #0
 8009662:	f040 8089 	bne.w	8009778 <_dtoa_r+0x8d8>
 8009666:	9b03      	ldr	r3, [sp, #12]
 8009668:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800966c:	0d1b      	lsrs	r3, r3, #20
 800966e:	051b      	lsls	r3, r3, #20
 8009670:	b12b      	cbz	r3, 800967e <_dtoa_r+0x7de>
 8009672:	9b08      	ldr	r3, [sp, #32]
 8009674:	f108 0801 	add.w	r8, r8, #1
 8009678:	3301      	adds	r3, #1
 800967a:	9308      	str	r3, [sp, #32]
 800967c:	2301      	movs	r3, #1
 800967e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009682:	2b00      	cmp	r3, #0
 8009684:	f000 81b0 	beq.w	80099e8 <_dtoa_r+0xb48>
 8009688:	6923      	ldr	r3, [r4, #16]
 800968a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800968e:	6918      	ldr	r0, [r3, #16]
 8009690:	f000 fd18 	bl	800a0c4 <__hi0bits>
 8009694:	f1c0 0020 	rsb	r0, r0, #32
 8009698:	9b08      	ldr	r3, [sp, #32]
 800969a:	4418      	add	r0, r3
 800969c:	f010 001f 	ands.w	r0, r0, #31
 80096a0:	d077      	beq.n	8009792 <_dtoa_r+0x8f2>
 80096a2:	f1c0 0320 	rsb	r3, r0, #32
 80096a6:	2b04      	cmp	r3, #4
 80096a8:	dd6b      	ble.n	8009782 <_dtoa_r+0x8e2>
 80096aa:	f1c0 001c 	rsb	r0, r0, #28
 80096ae:	9b08      	ldr	r3, [sp, #32]
 80096b0:	4480      	add	r8, r0
 80096b2:	4403      	add	r3, r0
 80096b4:	4406      	add	r6, r0
 80096b6:	9308      	str	r3, [sp, #32]
 80096b8:	f1b8 0f00 	cmp.w	r8, #0
 80096bc:	dd05      	ble.n	80096ca <_dtoa_r+0x82a>
 80096be:	4649      	mov	r1, r9
 80096c0:	4642      	mov	r2, r8
 80096c2:	4658      	mov	r0, fp
 80096c4:	f000 fe64 	bl	800a390 <__lshift>
 80096c8:	4681      	mov	r9, r0
 80096ca:	9b08      	ldr	r3, [sp, #32]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	dd05      	ble.n	80096dc <_dtoa_r+0x83c>
 80096d0:	4621      	mov	r1, r4
 80096d2:	461a      	mov	r2, r3
 80096d4:	4658      	mov	r0, fp
 80096d6:	f000 fe5b 	bl	800a390 <__lshift>
 80096da:	4604      	mov	r4, r0
 80096dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d059      	beq.n	8009796 <_dtoa_r+0x8f6>
 80096e2:	4621      	mov	r1, r4
 80096e4:	4648      	mov	r0, r9
 80096e6:	f000 febf 	bl	800a468 <__mcmp>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	da53      	bge.n	8009796 <_dtoa_r+0x8f6>
 80096ee:	1e7b      	subs	r3, r7, #1
 80096f0:	4649      	mov	r1, r9
 80096f2:	220a      	movs	r2, #10
 80096f4:	4658      	mov	r0, fp
 80096f6:	9304      	str	r3, [sp, #16]
 80096f8:	2300      	movs	r3, #0
 80096fa:	f000 fc9b 	bl	800a034 <__multadd>
 80096fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009700:	4681      	mov	r9, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	f000 8172 	beq.w	80099ec <_dtoa_r+0xb4c>
 8009708:	2300      	movs	r3, #0
 800970a:	4629      	mov	r1, r5
 800970c:	220a      	movs	r2, #10
 800970e:	4658      	mov	r0, fp
 8009710:	f000 fc90 	bl	800a034 <__multadd>
 8009714:	9b00      	ldr	r3, [sp, #0]
 8009716:	4605      	mov	r5, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	dc67      	bgt.n	80097ec <_dtoa_r+0x94c>
 800971c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800971e:	2b02      	cmp	r3, #2
 8009720:	dc41      	bgt.n	80097a6 <_dtoa_r+0x906>
 8009722:	e063      	b.n	80097ec <_dtoa_r+0x94c>
 8009724:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009726:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800972a:	e746      	b.n	80095ba <_dtoa_r+0x71a>
 800972c:	9b07      	ldr	r3, [sp, #28]
 800972e:	1e5c      	subs	r4, r3, #1
 8009730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009732:	42a3      	cmp	r3, r4
 8009734:	bfb7      	itett	lt
 8009736:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009738:	1b1c      	subge	r4, r3, r4
 800973a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800973c:	1ae3      	sublt	r3, r4, r3
 800973e:	bfbe      	ittt	lt
 8009740:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009742:	2400      	movlt	r4, #0
 8009744:	18d2      	addlt	r2, r2, r3
 8009746:	9b07      	ldr	r3, [sp, #28]
 8009748:	bfb8      	it	lt
 800974a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800974c:	2b00      	cmp	r3, #0
 800974e:	bfb5      	itete	lt
 8009750:	eba8 0603 	sublt.w	r6, r8, r3
 8009754:	4646      	movge	r6, r8
 8009756:	2300      	movlt	r3, #0
 8009758:	9b07      	ldrge	r3, [sp, #28]
 800975a:	e730      	b.n	80095be <_dtoa_r+0x71e>
 800975c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800975e:	4646      	mov	r6, r8
 8009760:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009762:	e735      	b.n	80095d0 <_dtoa_r+0x730>
 8009764:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009766:	e75c      	b.n	8009622 <_dtoa_r+0x782>
 8009768:	2300      	movs	r3, #0
 800976a:	e788      	b.n	800967e <_dtoa_r+0x7de>
 800976c:	3fe00000 	.word	0x3fe00000
 8009770:	40240000 	.word	0x40240000
 8009774:	40140000 	.word	0x40140000
 8009778:	9b02      	ldr	r3, [sp, #8]
 800977a:	e780      	b.n	800967e <_dtoa_r+0x7de>
 800977c:	2300      	movs	r3, #0
 800977e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009780:	e782      	b.n	8009688 <_dtoa_r+0x7e8>
 8009782:	d099      	beq.n	80096b8 <_dtoa_r+0x818>
 8009784:	331c      	adds	r3, #28
 8009786:	9a08      	ldr	r2, [sp, #32]
 8009788:	441a      	add	r2, r3
 800978a:	4498      	add	r8, r3
 800978c:	441e      	add	r6, r3
 800978e:	9208      	str	r2, [sp, #32]
 8009790:	e792      	b.n	80096b8 <_dtoa_r+0x818>
 8009792:	4603      	mov	r3, r0
 8009794:	e7f6      	b.n	8009784 <_dtoa_r+0x8e4>
 8009796:	9b07      	ldr	r3, [sp, #28]
 8009798:	9704      	str	r7, [sp, #16]
 800979a:	2b00      	cmp	r3, #0
 800979c:	dc20      	bgt.n	80097e0 <_dtoa_r+0x940>
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	dd1e      	ble.n	80097e4 <_dtoa_r+0x944>
 80097a6:	9b00      	ldr	r3, [sp, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f47f aec0 	bne.w	800952e <_dtoa_r+0x68e>
 80097ae:	4621      	mov	r1, r4
 80097b0:	2205      	movs	r2, #5
 80097b2:	4658      	mov	r0, fp
 80097b4:	f000 fc3e 	bl	800a034 <__multadd>
 80097b8:	4601      	mov	r1, r0
 80097ba:	4604      	mov	r4, r0
 80097bc:	4648      	mov	r0, r9
 80097be:	f000 fe53 	bl	800a468 <__mcmp>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	f77f aeb3 	ble.w	800952e <_dtoa_r+0x68e>
 80097c8:	2331      	movs	r3, #49	@ 0x31
 80097ca:	4656      	mov	r6, sl
 80097cc:	f806 3b01 	strb.w	r3, [r6], #1
 80097d0:	9b04      	ldr	r3, [sp, #16]
 80097d2:	3301      	adds	r3, #1
 80097d4:	9304      	str	r3, [sp, #16]
 80097d6:	e6ae      	b.n	8009536 <_dtoa_r+0x696>
 80097d8:	9c07      	ldr	r4, [sp, #28]
 80097da:	9704      	str	r7, [sp, #16]
 80097dc:	4625      	mov	r5, r4
 80097de:	e7f3      	b.n	80097c8 <_dtoa_r+0x928>
 80097e0:	9b07      	ldr	r3, [sp, #28]
 80097e2:	9300      	str	r3, [sp, #0]
 80097e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f000 8104 	beq.w	80099f4 <_dtoa_r+0xb54>
 80097ec:	2e00      	cmp	r6, #0
 80097ee:	dd05      	ble.n	80097fc <_dtoa_r+0x95c>
 80097f0:	4629      	mov	r1, r5
 80097f2:	4632      	mov	r2, r6
 80097f4:	4658      	mov	r0, fp
 80097f6:	f000 fdcb 	bl	800a390 <__lshift>
 80097fa:	4605      	mov	r5, r0
 80097fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d05a      	beq.n	80098b8 <_dtoa_r+0xa18>
 8009802:	6869      	ldr	r1, [r5, #4]
 8009804:	4658      	mov	r0, fp
 8009806:	f000 fbb3 	bl	8009f70 <_Balloc>
 800980a:	4606      	mov	r6, r0
 800980c:	b928      	cbnz	r0, 800981a <_dtoa_r+0x97a>
 800980e:	4b84      	ldr	r3, [pc, #528]	@ (8009a20 <_dtoa_r+0xb80>)
 8009810:	4602      	mov	r2, r0
 8009812:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009816:	f7ff bb5a 	b.w	8008ece <_dtoa_r+0x2e>
 800981a:	692a      	ldr	r2, [r5, #16]
 800981c:	f105 010c 	add.w	r1, r5, #12
 8009820:	300c      	adds	r0, #12
 8009822:	3202      	adds	r2, #2
 8009824:	0092      	lsls	r2, r2, #2
 8009826:	f7ff fa82 	bl	8008d2e <memcpy>
 800982a:	2201      	movs	r2, #1
 800982c:	4631      	mov	r1, r6
 800982e:	4658      	mov	r0, fp
 8009830:	f000 fdae 	bl	800a390 <__lshift>
 8009834:	f10a 0301 	add.w	r3, sl, #1
 8009838:	462f      	mov	r7, r5
 800983a:	4605      	mov	r5, r0
 800983c:	9307      	str	r3, [sp, #28]
 800983e:	9b00      	ldr	r3, [sp, #0]
 8009840:	4453      	add	r3, sl
 8009842:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009844:	9b02      	ldr	r3, [sp, #8]
 8009846:	f003 0301 	and.w	r3, r3, #1
 800984a:	930a      	str	r3, [sp, #40]	@ 0x28
 800984c:	9b07      	ldr	r3, [sp, #28]
 800984e:	4621      	mov	r1, r4
 8009850:	4648      	mov	r0, r9
 8009852:	3b01      	subs	r3, #1
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	f7ff fa95 	bl	8008d84 <quorem>
 800985a:	4639      	mov	r1, r7
 800985c:	9002      	str	r0, [sp, #8]
 800985e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009862:	4648      	mov	r0, r9
 8009864:	f000 fe00 	bl	800a468 <__mcmp>
 8009868:	462a      	mov	r2, r5
 800986a:	9008      	str	r0, [sp, #32]
 800986c:	4621      	mov	r1, r4
 800986e:	4658      	mov	r0, fp
 8009870:	f000 fe16 	bl	800a4a0 <__mdiff>
 8009874:	68c2      	ldr	r2, [r0, #12]
 8009876:	4606      	mov	r6, r0
 8009878:	bb02      	cbnz	r2, 80098bc <_dtoa_r+0xa1c>
 800987a:	4601      	mov	r1, r0
 800987c:	4648      	mov	r0, r9
 800987e:	f000 fdf3 	bl	800a468 <__mcmp>
 8009882:	4602      	mov	r2, r0
 8009884:	4631      	mov	r1, r6
 8009886:	4658      	mov	r0, fp
 8009888:	920e      	str	r2, [sp, #56]	@ 0x38
 800988a:	f000 fbb1 	bl	8009ff0 <_Bfree>
 800988e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009890:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009892:	9e07      	ldr	r6, [sp, #28]
 8009894:	ea43 0102 	orr.w	r1, r3, r2
 8009898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800989a:	4319      	orrs	r1, r3
 800989c:	d110      	bne.n	80098c0 <_dtoa_r+0xa20>
 800989e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80098a2:	d029      	beq.n	80098f8 <_dtoa_r+0xa58>
 80098a4:	9b08      	ldr	r3, [sp, #32]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	dd02      	ble.n	80098b0 <_dtoa_r+0xa10>
 80098aa:	9b02      	ldr	r3, [sp, #8]
 80098ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80098b0:	9b00      	ldr	r3, [sp, #0]
 80098b2:	f883 8000 	strb.w	r8, [r3]
 80098b6:	e63f      	b.n	8009538 <_dtoa_r+0x698>
 80098b8:	4628      	mov	r0, r5
 80098ba:	e7bb      	b.n	8009834 <_dtoa_r+0x994>
 80098bc:	2201      	movs	r2, #1
 80098be:	e7e1      	b.n	8009884 <_dtoa_r+0x9e4>
 80098c0:	9b08      	ldr	r3, [sp, #32]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	db04      	blt.n	80098d0 <_dtoa_r+0xa30>
 80098c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80098c8:	430b      	orrs	r3, r1
 80098ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80098cc:	430b      	orrs	r3, r1
 80098ce:	d120      	bne.n	8009912 <_dtoa_r+0xa72>
 80098d0:	2a00      	cmp	r2, #0
 80098d2:	dded      	ble.n	80098b0 <_dtoa_r+0xa10>
 80098d4:	4649      	mov	r1, r9
 80098d6:	2201      	movs	r2, #1
 80098d8:	4658      	mov	r0, fp
 80098da:	f000 fd59 	bl	800a390 <__lshift>
 80098de:	4621      	mov	r1, r4
 80098e0:	4681      	mov	r9, r0
 80098e2:	f000 fdc1 	bl	800a468 <__mcmp>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	dc03      	bgt.n	80098f2 <_dtoa_r+0xa52>
 80098ea:	d1e1      	bne.n	80098b0 <_dtoa_r+0xa10>
 80098ec:	f018 0f01 	tst.w	r8, #1
 80098f0:	d0de      	beq.n	80098b0 <_dtoa_r+0xa10>
 80098f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80098f6:	d1d8      	bne.n	80098aa <_dtoa_r+0xa0a>
 80098f8:	2339      	movs	r3, #57	@ 0x39
 80098fa:	9a00      	ldr	r2, [sp, #0]
 80098fc:	7013      	strb	r3, [r2, #0]
 80098fe:	4633      	mov	r3, r6
 8009900:	461e      	mov	r6, r3
 8009902:	3b01      	subs	r3, #1
 8009904:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009908:	2a39      	cmp	r2, #57	@ 0x39
 800990a:	d052      	beq.n	80099b2 <_dtoa_r+0xb12>
 800990c:	3201      	adds	r2, #1
 800990e:	701a      	strb	r2, [r3, #0]
 8009910:	e612      	b.n	8009538 <_dtoa_r+0x698>
 8009912:	2a00      	cmp	r2, #0
 8009914:	dd07      	ble.n	8009926 <_dtoa_r+0xa86>
 8009916:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800991a:	d0ed      	beq.n	80098f8 <_dtoa_r+0xa58>
 800991c:	f108 0301 	add.w	r3, r8, #1
 8009920:	9a00      	ldr	r2, [sp, #0]
 8009922:	7013      	strb	r3, [r2, #0]
 8009924:	e608      	b.n	8009538 <_dtoa_r+0x698>
 8009926:	9b07      	ldr	r3, [sp, #28]
 8009928:	9a07      	ldr	r2, [sp, #28]
 800992a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800992e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009930:	4293      	cmp	r3, r2
 8009932:	d028      	beq.n	8009986 <_dtoa_r+0xae6>
 8009934:	4649      	mov	r1, r9
 8009936:	2300      	movs	r3, #0
 8009938:	220a      	movs	r2, #10
 800993a:	4658      	mov	r0, fp
 800993c:	f000 fb7a 	bl	800a034 <__multadd>
 8009940:	42af      	cmp	r7, r5
 8009942:	4681      	mov	r9, r0
 8009944:	f04f 0300 	mov.w	r3, #0
 8009948:	f04f 020a 	mov.w	r2, #10
 800994c:	4639      	mov	r1, r7
 800994e:	4658      	mov	r0, fp
 8009950:	d107      	bne.n	8009962 <_dtoa_r+0xac2>
 8009952:	f000 fb6f 	bl	800a034 <__multadd>
 8009956:	4607      	mov	r7, r0
 8009958:	4605      	mov	r5, r0
 800995a:	9b07      	ldr	r3, [sp, #28]
 800995c:	3301      	adds	r3, #1
 800995e:	9307      	str	r3, [sp, #28]
 8009960:	e774      	b.n	800984c <_dtoa_r+0x9ac>
 8009962:	f000 fb67 	bl	800a034 <__multadd>
 8009966:	4629      	mov	r1, r5
 8009968:	4607      	mov	r7, r0
 800996a:	2300      	movs	r3, #0
 800996c:	220a      	movs	r2, #10
 800996e:	4658      	mov	r0, fp
 8009970:	f000 fb60 	bl	800a034 <__multadd>
 8009974:	4605      	mov	r5, r0
 8009976:	e7f0      	b.n	800995a <_dtoa_r+0xaba>
 8009978:	9b00      	ldr	r3, [sp, #0]
 800997a:	2700      	movs	r7, #0
 800997c:	2b00      	cmp	r3, #0
 800997e:	bfcc      	ite	gt
 8009980:	461e      	movgt	r6, r3
 8009982:	2601      	movle	r6, #1
 8009984:	4456      	add	r6, sl
 8009986:	4649      	mov	r1, r9
 8009988:	2201      	movs	r2, #1
 800998a:	4658      	mov	r0, fp
 800998c:	f000 fd00 	bl	800a390 <__lshift>
 8009990:	4621      	mov	r1, r4
 8009992:	4681      	mov	r9, r0
 8009994:	f000 fd68 	bl	800a468 <__mcmp>
 8009998:	2800      	cmp	r0, #0
 800999a:	dcb0      	bgt.n	80098fe <_dtoa_r+0xa5e>
 800999c:	d102      	bne.n	80099a4 <_dtoa_r+0xb04>
 800999e:	f018 0f01 	tst.w	r8, #1
 80099a2:	d1ac      	bne.n	80098fe <_dtoa_r+0xa5e>
 80099a4:	4633      	mov	r3, r6
 80099a6:	461e      	mov	r6, r3
 80099a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099ac:	2a30      	cmp	r2, #48	@ 0x30
 80099ae:	d0fa      	beq.n	80099a6 <_dtoa_r+0xb06>
 80099b0:	e5c2      	b.n	8009538 <_dtoa_r+0x698>
 80099b2:	459a      	cmp	sl, r3
 80099b4:	d1a4      	bne.n	8009900 <_dtoa_r+0xa60>
 80099b6:	9b04      	ldr	r3, [sp, #16]
 80099b8:	3301      	adds	r3, #1
 80099ba:	9304      	str	r3, [sp, #16]
 80099bc:	2331      	movs	r3, #49	@ 0x31
 80099be:	f88a 3000 	strb.w	r3, [sl]
 80099c2:	e5b9      	b.n	8009538 <_dtoa_r+0x698>
 80099c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80099c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009a24 <_dtoa_r+0xb84>
 80099ca:	b11b      	cbz	r3, 80099d4 <_dtoa_r+0xb34>
 80099cc:	f10a 0308 	add.w	r3, sl, #8
 80099d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80099d2:	6013      	str	r3, [r2, #0]
 80099d4:	4650      	mov	r0, sl
 80099d6:	b019      	add	sp, #100	@ 0x64
 80099d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099de:	2b01      	cmp	r3, #1
 80099e0:	f77f ae37 	ble.w	8009652 <_dtoa_r+0x7b2>
 80099e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80099e8:	2001      	movs	r0, #1
 80099ea:	e655      	b.n	8009698 <_dtoa_r+0x7f8>
 80099ec:	9b00      	ldr	r3, [sp, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f77f aed6 	ble.w	80097a0 <_dtoa_r+0x900>
 80099f4:	4656      	mov	r6, sl
 80099f6:	4621      	mov	r1, r4
 80099f8:	4648      	mov	r0, r9
 80099fa:	f7ff f9c3 	bl	8008d84 <quorem>
 80099fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009a02:	9b00      	ldr	r3, [sp, #0]
 8009a04:	f806 8b01 	strb.w	r8, [r6], #1
 8009a08:	eba6 020a 	sub.w	r2, r6, sl
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	ddb3      	ble.n	8009978 <_dtoa_r+0xad8>
 8009a10:	4649      	mov	r1, r9
 8009a12:	2300      	movs	r3, #0
 8009a14:	220a      	movs	r2, #10
 8009a16:	4658      	mov	r0, fp
 8009a18:	f000 fb0c 	bl	800a034 <__multadd>
 8009a1c:	4681      	mov	r9, r0
 8009a1e:	e7ea      	b.n	80099f6 <_dtoa_r+0xb56>
 8009a20:	0800c28c 	.word	0x0800c28c
 8009a24:	0800c210 	.word	0x0800c210

08009a28 <__sfputc_r>:
 8009a28:	6893      	ldr	r3, [r2, #8]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	6093      	str	r3, [r2, #8]
 8009a30:	b410      	push	{r4}
 8009a32:	da08      	bge.n	8009a46 <__sfputc_r+0x1e>
 8009a34:	6994      	ldr	r4, [r2, #24]
 8009a36:	42a3      	cmp	r3, r4
 8009a38:	db01      	blt.n	8009a3e <__sfputc_r+0x16>
 8009a3a:	290a      	cmp	r1, #10
 8009a3c:	d103      	bne.n	8009a46 <__sfputc_r+0x1e>
 8009a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a42:	f000 be73 	b.w	800a72c <__swbuf_r>
 8009a46:	6813      	ldr	r3, [r2, #0]
 8009a48:	1c58      	adds	r0, r3, #1
 8009a4a:	6010      	str	r0, [r2, #0]
 8009a4c:	4608      	mov	r0, r1
 8009a4e:	7019      	strb	r1, [r3, #0]
 8009a50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <__sfputs_r>:
 8009a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a58:	4606      	mov	r6, r0
 8009a5a:	460f      	mov	r7, r1
 8009a5c:	4614      	mov	r4, r2
 8009a5e:	18d5      	adds	r5, r2, r3
 8009a60:	42ac      	cmp	r4, r5
 8009a62:	d101      	bne.n	8009a68 <__sfputs_r+0x12>
 8009a64:	2000      	movs	r0, #0
 8009a66:	e007      	b.n	8009a78 <__sfputs_r+0x22>
 8009a68:	463a      	mov	r2, r7
 8009a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f7ff ffda 	bl	8009a28 <__sfputc_r>
 8009a74:	1c43      	adds	r3, r0, #1
 8009a76:	d1f3      	bne.n	8009a60 <__sfputs_r+0xa>
 8009a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a7c <_vfiprintf_r>:
 8009a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a80:	460d      	mov	r5, r1
 8009a82:	b09d      	sub	sp, #116	@ 0x74
 8009a84:	4614      	mov	r4, r2
 8009a86:	4698      	mov	r8, r3
 8009a88:	4606      	mov	r6, r0
 8009a8a:	b118      	cbz	r0, 8009a94 <_vfiprintf_r+0x18>
 8009a8c:	6a03      	ldr	r3, [r0, #32]
 8009a8e:	b90b      	cbnz	r3, 8009a94 <_vfiprintf_r+0x18>
 8009a90:	f7ff f858 	bl	8008b44 <__sinit>
 8009a94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a96:	07d9      	lsls	r1, r3, #31
 8009a98:	d405      	bmi.n	8009aa6 <_vfiprintf_r+0x2a>
 8009a9a:	89ab      	ldrh	r3, [r5, #12]
 8009a9c:	059a      	lsls	r2, r3, #22
 8009a9e:	d402      	bmi.n	8009aa6 <_vfiprintf_r+0x2a>
 8009aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009aa2:	f7ff f934 	bl	8008d0e <__retarget_lock_acquire_recursive>
 8009aa6:	89ab      	ldrh	r3, [r5, #12]
 8009aa8:	071b      	lsls	r3, r3, #28
 8009aaa:	d501      	bpl.n	8009ab0 <_vfiprintf_r+0x34>
 8009aac:	692b      	ldr	r3, [r5, #16]
 8009aae:	b99b      	cbnz	r3, 8009ad8 <_vfiprintf_r+0x5c>
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f000 fe78 	bl	800a7a8 <__swsetup_r>
 8009ab8:	b170      	cbz	r0, 8009ad8 <_vfiprintf_r+0x5c>
 8009aba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009abc:	07dc      	lsls	r4, r3, #31
 8009abe:	d504      	bpl.n	8009aca <_vfiprintf_r+0x4e>
 8009ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ac4:	b01d      	add	sp, #116	@ 0x74
 8009ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aca:	89ab      	ldrh	r3, [r5, #12]
 8009acc:	0598      	lsls	r0, r3, #22
 8009ace:	d4f7      	bmi.n	8009ac0 <_vfiprintf_r+0x44>
 8009ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ad2:	f7ff f91d 	bl	8008d10 <__retarget_lock_release_recursive>
 8009ad6:	e7f3      	b.n	8009ac0 <_vfiprintf_r+0x44>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ade:	f04f 0901 	mov.w	r9, #1
 8009ae2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8009c98 <_vfiprintf_r+0x21c>
 8009ae6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ae8:	2320      	movs	r3, #32
 8009aea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009aee:	2330      	movs	r3, #48	@ 0x30
 8009af0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009af4:	4623      	mov	r3, r4
 8009af6:	469a      	mov	sl, r3
 8009af8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009afc:	b10a      	cbz	r2, 8009b02 <_vfiprintf_r+0x86>
 8009afe:	2a25      	cmp	r2, #37	@ 0x25
 8009b00:	d1f9      	bne.n	8009af6 <_vfiprintf_r+0x7a>
 8009b02:	ebba 0b04 	subs.w	fp, sl, r4
 8009b06:	d00b      	beq.n	8009b20 <_vfiprintf_r+0xa4>
 8009b08:	465b      	mov	r3, fp
 8009b0a:	4622      	mov	r2, r4
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	4630      	mov	r0, r6
 8009b10:	f7ff ffa1 	bl	8009a56 <__sfputs_r>
 8009b14:	3001      	adds	r0, #1
 8009b16:	f000 80a7 	beq.w	8009c68 <_vfiprintf_r+0x1ec>
 8009b1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b1c:	445a      	add	r2, fp
 8009b1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b20:	f89a 3000 	ldrb.w	r3, [sl]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f000 809f 	beq.w	8009c68 <_vfiprintf_r+0x1ec>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b30:	f10a 0a01 	add.w	sl, sl, #1
 8009b34:	9304      	str	r3, [sp, #16]
 8009b36:	9307      	str	r3, [sp, #28]
 8009b38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b42:	4654      	mov	r4, sl
 8009b44:	2205      	movs	r2, #5
 8009b46:	4854      	ldr	r0, [pc, #336]	@ (8009c98 <_vfiprintf_r+0x21c>)
 8009b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b4c:	f7ff f8e1 	bl	8008d12 <memchr>
 8009b50:	9a04      	ldr	r2, [sp, #16]
 8009b52:	b9d8      	cbnz	r0, 8009b8c <_vfiprintf_r+0x110>
 8009b54:	06d1      	lsls	r1, r2, #27
 8009b56:	bf44      	itt	mi
 8009b58:	2320      	movmi	r3, #32
 8009b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b5e:	0713      	lsls	r3, r2, #28
 8009b60:	bf44      	itt	mi
 8009b62:	232b      	movmi	r3, #43	@ 0x2b
 8009b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b68:	f89a 3000 	ldrb.w	r3, [sl]
 8009b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b6e:	d015      	beq.n	8009b9c <_vfiprintf_r+0x120>
 8009b70:	9a07      	ldr	r2, [sp, #28]
 8009b72:	4654      	mov	r4, sl
 8009b74:	2000      	movs	r0, #0
 8009b76:	f04f 0c0a 	mov.w	ip, #10
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b80:	3b30      	subs	r3, #48	@ 0x30
 8009b82:	2b09      	cmp	r3, #9
 8009b84:	d94b      	bls.n	8009c1e <_vfiprintf_r+0x1a2>
 8009b86:	b1b0      	cbz	r0, 8009bb6 <_vfiprintf_r+0x13a>
 8009b88:	9207      	str	r2, [sp, #28]
 8009b8a:	e014      	b.n	8009bb6 <_vfiprintf_r+0x13a>
 8009b8c:	eba0 0308 	sub.w	r3, r0, r8
 8009b90:	46a2      	mov	sl, r4
 8009b92:	fa09 f303 	lsl.w	r3, r9, r3
 8009b96:	4313      	orrs	r3, r2
 8009b98:	9304      	str	r3, [sp, #16]
 8009b9a:	e7d2      	b.n	8009b42 <_vfiprintf_r+0xc6>
 8009b9c:	9b03      	ldr	r3, [sp, #12]
 8009b9e:	1d19      	adds	r1, r3, #4
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	9103      	str	r1, [sp, #12]
 8009ba6:	bfbb      	ittet	lt
 8009ba8:	425b      	neglt	r3, r3
 8009baa:	f042 0202 	orrlt.w	r2, r2, #2
 8009bae:	9307      	strge	r3, [sp, #28]
 8009bb0:	9307      	strlt	r3, [sp, #28]
 8009bb2:	bfb8      	it	lt
 8009bb4:	9204      	strlt	r2, [sp, #16]
 8009bb6:	7823      	ldrb	r3, [r4, #0]
 8009bb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009bba:	d10a      	bne.n	8009bd2 <_vfiprintf_r+0x156>
 8009bbc:	7863      	ldrb	r3, [r4, #1]
 8009bbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bc0:	d132      	bne.n	8009c28 <_vfiprintf_r+0x1ac>
 8009bc2:	9b03      	ldr	r3, [sp, #12]
 8009bc4:	3402      	adds	r4, #2
 8009bc6:	1d1a      	adds	r2, r3, #4
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bce:	9203      	str	r2, [sp, #12]
 8009bd0:	9305      	str	r3, [sp, #20]
 8009bd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ca8 <_vfiprintf_r+0x22c>
 8009bd6:	2203      	movs	r2, #3
 8009bd8:	7821      	ldrb	r1, [r4, #0]
 8009bda:	4650      	mov	r0, sl
 8009bdc:	f7ff f899 	bl	8008d12 <memchr>
 8009be0:	b138      	cbz	r0, 8009bf2 <_vfiprintf_r+0x176>
 8009be2:	eba0 000a 	sub.w	r0, r0, sl
 8009be6:	2240      	movs	r2, #64	@ 0x40
 8009be8:	9b04      	ldr	r3, [sp, #16]
 8009bea:	3401      	adds	r4, #1
 8009bec:	4082      	lsls	r2, r0
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	9304      	str	r3, [sp, #16]
 8009bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf6:	2206      	movs	r2, #6
 8009bf8:	4828      	ldr	r0, [pc, #160]	@ (8009c9c <_vfiprintf_r+0x220>)
 8009bfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bfe:	f7ff f888 	bl	8008d12 <memchr>
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d03f      	beq.n	8009c86 <_vfiprintf_r+0x20a>
 8009c06:	4b26      	ldr	r3, [pc, #152]	@ (8009ca0 <_vfiprintf_r+0x224>)
 8009c08:	bb1b      	cbnz	r3, 8009c52 <_vfiprintf_r+0x1d6>
 8009c0a:	9b03      	ldr	r3, [sp, #12]
 8009c0c:	3307      	adds	r3, #7
 8009c0e:	f023 0307 	bic.w	r3, r3, #7
 8009c12:	3308      	adds	r3, #8
 8009c14:	9303      	str	r3, [sp, #12]
 8009c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c18:	443b      	add	r3, r7
 8009c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c1c:	e76a      	b.n	8009af4 <_vfiprintf_r+0x78>
 8009c1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c22:	460c      	mov	r4, r1
 8009c24:	2001      	movs	r0, #1
 8009c26:	e7a8      	b.n	8009b7a <_vfiprintf_r+0xfe>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	3401      	adds	r4, #1
 8009c2c:	f04f 0c0a 	mov.w	ip, #10
 8009c30:	4619      	mov	r1, r3
 8009c32:	9305      	str	r3, [sp, #20]
 8009c34:	4620      	mov	r0, r4
 8009c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c3a:	3a30      	subs	r2, #48	@ 0x30
 8009c3c:	2a09      	cmp	r2, #9
 8009c3e:	d903      	bls.n	8009c48 <_vfiprintf_r+0x1cc>
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d0c6      	beq.n	8009bd2 <_vfiprintf_r+0x156>
 8009c44:	9105      	str	r1, [sp, #20]
 8009c46:	e7c4      	b.n	8009bd2 <_vfiprintf_r+0x156>
 8009c48:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e7f0      	b.n	8009c34 <_vfiprintf_r+0x1b8>
 8009c52:	ab03      	add	r3, sp, #12
 8009c54:	462a      	mov	r2, r5
 8009c56:	a904      	add	r1, sp, #16
 8009c58:	4630      	mov	r0, r6
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	4b11      	ldr	r3, [pc, #68]	@ (8009ca4 <_vfiprintf_r+0x228>)
 8009c5e:	f7fe fb29 	bl	80082b4 <_printf_float>
 8009c62:	4607      	mov	r7, r0
 8009c64:	1c78      	adds	r0, r7, #1
 8009c66:	d1d6      	bne.n	8009c16 <_vfiprintf_r+0x19a>
 8009c68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c6a:	07d9      	lsls	r1, r3, #31
 8009c6c:	d405      	bmi.n	8009c7a <_vfiprintf_r+0x1fe>
 8009c6e:	89ab      	ldrh	r3, [r5, #12]
 8009c70:	059a      	lsls	r2, r3, #22
 8009c72:	d402      	bmi.n	8009c7a <_vfiprintf_r+0x1fe>
 8009c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c76:	f7ff f84b 	bl	8008d10 <__retarget_lock_release_recursive>
 8009c7a:	89ab      	ldrh	r3, [r5, #12]
 8009c7c:	065b      	lsls	r3, r3, #25
 8009c7e:	f53f af1f 	bmi.w	8009ac0 <_vfiprintf_r+0x44>
 8009c82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c84:	e71e      	b.n	8009ac4 <_vfiprintf_r+0x48>
 8009c86:	ab03      	add	r3, sp, #12
 8009c88:	462a      	mov	r2, r5
 8009c8a:	a904      	add	r1, sp, #16
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	4b04      	ldr	r3, [pc, #16]	@ (8009ca4 <_vfiprintf_r+0x228>)
 8009c92:	f7fe fdab 	bl	80087ec <_printf_i>
 8009c96:	e7e4      	b.n	8009c62 <_vfiprintf_r+0x1e6>
 8009c98:	0800c29d 	.word	0x0800c29d
 8009c9c:	0800c2a7 	.word	0x0800c2a7
 8009ca0:	080082b5 	.word	0x080082b5
 8009ca4:	08009a57 	.word	0x08009a57
 8009ca8:	0800c2a3 	.word	0x0800c2a3

08009cac <malloc>:
 8009cac:	4b02      	ldr	r3, [pc, #8]	@ (8009cb8 <malloc+0xc>)
 8009cae:	4601      	mov	r1, r0
 8009cb0:	6818      	ldr	r0, [r3, #0]
 8009cb2:	f000 b825 	b.w	8009d00 <_malloc_r>
 8009cb6:	bf00      	nop
 8009cb8:	200000b0 	.word	0x200000b0

08009cbc <sbrk_aligned>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	4e0f      	ldr	r6, [pc, #60]	@ (8009cfc <sbrk_aligned+0x40>)
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	6831      	ldr	r1, [r6, #0]
 8009cc6:	b911      	cbnz	r1, 8009cce <sbrk_aligned+0x12>
 8009cc8:	f000 feb0 	bl	800aa2c <_sbrk_r>
 8009ccc:	6030      	str	r0, [r6, #0]
 8009cce:	4621      	mov	r1, r4
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f000 feab 	bl	800aa2c <_sbrk_r>
 8009cd6:	1c43      	adds	r3, r0, #1
 8009cd8:	d103      	bne.n	8009ce2 <sbrk_aligned+0x26>
 8009cda:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009cde:	4620      	mov	r0, r4
 8009ce0:	bd70      	pop	{r4, r5, r6, pc}
 8009ce2:	1cc4      	adds	r4, r0, #3
 8009ce4:	f024 0403 	bic.w	r4, r4, #3
 8009ce8:	42a0      	cmp	r0, r4
 8009cea:	d0f8      	beq.n	8009cde <sbrk_aligned+0x22>
 8009cec:	1a21      	subs	r1, r4, r0
 8009cee:	4628      	mov	r0, r5
 8009cf0:	f000 fe9c 	bl	800aa2c <_sbrk_r>
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	d1f2      	bne.n	8009cde <sbrk_aligned+0x22>
 8009cf8:	e7ef      	b.n	8009cda <sbrk_aligned+0x1e>
 8009cfa:	bf00      	nop
 8009cfc:	2000101c 	.word	0x2000101c

08009d00 <_malloc_r>:
 8009d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d04:	1ccd      	adds	r5, r1, #3
 8009d06:	4606      	mov	r6, r0
 8009d08:	f025 0503 	bic.w	r5, r5, #3
 8009d0c:	3508      	adds	r5, #8
 8009d0e:	2d0c      	cmp	r5, #12
 8009d10:	bf38      	it	cc
 8009d12:	250c      	movcc	r5, #12
 8009d14:	2d00      	cmp	r5, #0
 8009d16:	db01      	blt.n	8009d1c <_malloc_r+0x1c>
 8009d18:	42a9      	cmp	r1, r5
 8009d1a:	d904      	bls.n	8009d26 <_malloc_r+0x26>
 8009d1c:	230c      	movs	r3, #12
 8009d1e:	6033      	str	r3, [r6, #0]
 8009d20:	2000      	movs	r0, #0
 8009d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009dfc <_malloc_r+0xfc>
 8009d2a:	f000 f915 	bl	8009f58 <__malloc_lock>
 8009d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8009d32:	461c      	mov	r4, r3
 8009d34:	bb44      	cbnz	r4, 8009d88 <_malloc_r+0x88>
 8009d36:	4629      	mov	r1, r5
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f7ff ffbf 	bl	8009cbc <sbrk_aligned>
 8009d3e:	1c43      	adds	r3, r0, #1
 8009d40:	4604      	mov	r4, r0
 8009d42:	d158      	bne.n	8009df6 <_malloc_r+0xf6>
 8009d44:	f8d8 4000 	ldr.w	r4, [r8]
 8009d48:	4627      	mov	r7, r4
 8009d4a:	2f00      	cmp	r7, #0
 8009d4c:	d143      	bne.n	8009dd6 <_malloc_r+0xd6>
 8009d4e:	2c00      	cmp	r4, #0
 8009d50:	d04b      	beq.n	8009dea <_malloc_r+0xea>
 8009d52:	6823      	ldr	r3, [r4, #0]
 8009d54:	4639      	mov	r1, r7
 8009d56:	4630      	mov	r0, r6
 8009d58:	eb04 0903 	add.w	r9, r4, r3
 8009d5c:	f000 fe66 	bl	800aa2c <_sbrk_r>
 8009d60:	4581      	cmp	r9, r0
 8009d62:	d142      	bne.n	8009dea <_malloc_r+0xea>
 8009d64:	6821      	ldr	r1, [r4, #0]
 8009d66:	4630      	mov	r0, r6
 8009d68:	1a6d      	subs	r5, r5, r1
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	f7ff ffa6 	bl	8009cbc <sbrk_aligned>
 8009d70:	3001      	adds	r0, #1
 8009d72:	d03a      	beq.n	8009dea <_malloc_r+0xea>
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	442b      	add	r3, r5
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	f8d8 3000 	ldr.w	r3, [r8]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	bb62      	cbnz	r2, 8009ddc <_malloc_r+0xdc>
 8009d82:	f8c8 7000 	str.w	r7, [r8]
 8009d86:	e00f      	b.n	8009da8 <_malloc_r+0xa8>
 8009d88:	6822      	ldr	r2, [r4, #0]
 8009d8a:	1b52      	subs	r2, r2, r5
 8009d8c:	d420      	bmi.n	8009dd0 <_malloc_r+0xd0>
 8009d8e:	2a0b      	cmp	r2, #11
 8009d90:	d917      	bls.n	8009dc2 <_malloc_r+0xc2>
 8009d92:	1961      	adds	r1, r4, r5
 8009d94:	42a3      	cmp	r3, r4
 8009d96:	6025      	str	r5, [r4, #0]
 8009d98:	bf18      	it	ne
 8009d9a:	6059      	strne	r1, [r3, #4]
 8009d9c:	6863      	ldr	r3, [r4, #4]
 8009d9e:	bf08      	it	eq
 8009da0:	f8c8 1000 	streq.w	r1, [r8]
 8009da4:	5162      	str	r2, [r4, r5]
 8009da6:	604b      	str	r3, [r1, #4]
 8009da8:	4630      	mov	r0, r6
 8009daa:	f000 f8db 	bl	8009f64 <__malloc_unlock>
 8009dae:	f104 000b 	add.w	r0, r4, #11
 8009db2:	1d23      	adds	r3, r4, #4
 8009db4:	f020 0007 	bic.w	r0, r0, #7
 8009db8:	1ac2      	subs	r2, r0, r3
 8009dba:	bf1c      	itt	ne
 8009dbc:	1a1b      	subne	r3, r3, r0
 8009dbe:	50a3      	strne	r3, [r4, r2]
 8009dc0:	e7af      	b.n	8009d22 <_malloc_r+0x22>
 8009dc2:	6862      	ldr	r2, [r4, #4]
 8009dc4:	42a3      	cmp	r3, r4
 8009dc6:	bf0c      	ite	eq
 8009dc8:	f8c8 2000 	streq.w	r2, [r8]
 8009dcc:	605a      	strne	r2, [r3, #4]
 8009dce:	e7eb      	b.n	8009da8 <_malloc_r+0xa8>
 8009dd0:	4623      	mov	r3, r4
 8009dd2:	6864      	ldr	r4, [r4, #4]
 8009dd4:	e7ae      	b.n	8009d34 <_malloc_r+0x34>
 8009dd6:	463c      	mov	r4, r7
 8009dd8:	687f      	ldr	r7, [r7, #4]
 8009dda:	e7b6      	b.n	8009d4a <_malloc_r+0x4a>
 8009ddc:	461a      	mov	r2, r3
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	42a3      	cmp	r3, r4
 8009de2:	d1fb      	bne.n	8009ddc <_malloc_r+0xdc>
 8009de4:	2300      	movs	r3, #0
 8009de6:	6053      	str	r3, [r2, #4]
 8009de8:	e7de      	b.n	8009da8 <_malloc_r+0xa8>
 8009dea:	230c      	movs	r3, #12
 8009dec:	4630      	mov	r0, r6
 8009dee:	6033      	str	r3, [r6, #0]
 8009df0:	f000 f8b8 	bl	8009f64 <__malloc_unlock>
 8009df4:	e794      	b.n	8009d20 <_malloc_r+0x20>
 8009df6:	6005      	str	r5, [r0, #0]
 8009df8:	e7d6      	b.n	8009da8 <_malloc_r+0xa8>
 8009dfa:	bf00      	nop
 8009dfc:	20001020 	.word	0x20001020

08009e00 <__sflush_r>:
 8009e00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e08:	0716      	lsls	r6, r2, #28
 8009e0a:	4605      	mov	r5, r0
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	d454      	bmi.n	8009eba <__sflush_r+0xba>
 8009e10:	684b      	ldr	r3, [r1, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	dc02      	bgt.n	8009e1c <__sflush_r+0x1c>
 8009e16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	dd48      	ble.n	8009eae <__sflush_r+0xae>
 8009e1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e1e:	2e00      	cmp	r6, #0
 8009e20:	d045      	beq.n	8009eae <__sflush_r+0xae>
 8009e22:	2300      	movs	r3, #0
 8009e24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009e28:	682f      	ldr	r7, [r5, #0]
 8009e2a:	6a21      	ldr	r1, [r4, #32]
 8009e2c:	602b      	str	r3, [r5, #0]
 8009e2e:	d030      	beq.n	8009e92 <__sflush_r+0x92>
 8009e30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	0759      	lsls	r1, r3, #29
 8009e36:	d505      	bpl.n	8009e44 <__sflush_r+0x44>
 8009e38:	6863      	ldr	r3, [r4, #4]
 8009e3a:	1ad2      	subs	r2, r2, r3
 8009e3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e3e:	b10b      	cbz	r3, 8009e44 <__sflush_r+0x44>
 8009e40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e42:	1ad2      	subs	r2, r2, r3
 8009e44:	2300      	movs	r3, #0
 8009e46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e48:	6a21      	ldr	r1, [r4, #32]
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	47b0      	blx	r6
 8009e4e:	1c43      	adds	r3, r0, #1
 8009e50:	89a3      	ldrh	r3, [r4, #12]
 8009e52:	d106      	bne.n	8009e62 <__sflush_r+0x62>
 8009e54:	6829      	ldr	r1, [r5, #0]
 8009e56:	291d      	cmp	r1, #29
 8009e58:	d82b      	bhi.n	8009eb2 <__sflush_r+0xb2>
 8009e5a:	4a2a      	ldr	r2, [pc, #168]	@ (8009f04 <__sflush_r+0x104>)
 8009e5c:	410a      	asrs	r2, r1
 8009e5e:	07d6      	lsls	r6, r2, #31
 8009e60:	d427      	bmi.n	8009eb2 <__sflush_r+0xb2>
 8009e62:	2200      	movs	r2, #0
 8009e64:	04d9      	lsls	r1, r3, #19
 8009e66:	6062      	str	r2, [r4, #4]
 8009e68:	6922      	ldr	r2, [r4, #16]
 8009e6a:	6022      	str	r2, [r4, #0]
 8009e6c:	d504      	bpl.n	8009e78 <__sflush_r+0x78>
 8009e6e:	1c42      	adds	r2, r0, #1
 8009e70:	d101      	bne.n	8009e76 <__sflush_r+0x76>
 8009e72:	682b      	ldr	r3, [r5, #0]
 8009e74:	b903      	cbnz	r3, 8009e78 <__sflush_r+0x78>
 8009e76:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e7a:	602f      	str	r7, [r5, #0]
 8009e7c:	b1b9      	cbz	r1, 8009eae <__sflush_r+0xae>
 8009e7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e82:	4299      	cmp	r1, r3
 8009e84:	d002      	beq.n	8009e8c <__sflush_r+0x8c>
 8009e86:	4628      	mov	r0, r5
 8009e88:	f000 fe0e 	bl	800aaa8 <_free_r>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e90:	e00d      	b.n	8009eae <__sflush_r+0xae>
 8009e92:	2301      	movs	r3, #1
 8009e94:	4628      	mov	r0, r5
 8009e96:	47b0      	blx	r6
 8009e98:	4602      	mov	r2, r0
 8009e9a:	1c50      	adds	r0, r2, #1
 8009e9c:	d1c9      	bne.n	8009e32 <__sflush_r+0x32>
 8009e9e:	682b      	ldr	r3, [r5, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d0c6      	beq.n	8009e32 <__sflush_r+0x32>
 8009ea4:	2b1d      	cmp	r3, #29
 8009ea6:	d001      	beq.n	8009eac <__sflush_r+0xac>
 8009ea8:	2b16      	cmp	r3, #22
 8009eaa:	d11d      	bne.n	8009ee8 <__sflush_r+0xe8>
 8009eac:	602f      	str	r7, [r5, #0]
 8009eae:	2000      	movs	r0, #0
 8009eb0:	e021      	b.n	8009ef6 <__sflush_r+0xf6>
 8009eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eb6:	b21b      	sxth	r3, r3
 8009eb8:	e01a      	b.n	8009ef0 <__sflush_r+0xf0>
 8009eba:	690f      	ldr	r7, [r1, #16]
 8009ebc:	2f00      	cmp	r7, #0
 8009ebe:	d0f6      	beq.n	8009eae <__sflush_r+0xae>
 8009ec0:	0793      	lsls	r3, r2, #30
 8009ec2:	680e      	ldr	r6, [r1, #0]
 8009ec4:	600f      	str	r7, [r1, #0]
 8009ec6:	bf0c      	ite	eq
 8009ec8:	694b      	ldreq	r3, [r1, #20]
 8009eca:	2300      	movne	r3, #0
 8009ecc:	eba6 0807 	sub.w	r8, r6, r7
 8009ed0:	608b      	str	r3, [r1, #8]
 8009ed2:	f1b8 0f00 	cmp.w	r8, #0
 8009ed6:	ddea      	ble.n	8009eae <__sflush_r+0xae>
 8009ed8:	4643      	mov	r3, r8
 8009eda:	463a      	mov	r2, r7
 8009edc:	6a21      	ldr	r1, [r4, #32]
 8009ede:	4628      	mov	r0, r5
 8009ee0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009ee2:	47b0      	blx	r6
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	dc08      	bgt.n	8009efa <__sflush_r+0xfa>
 8009ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ef4:	81a3      	strh	r3, [r4, #12]
 8009ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009efa:	4407      	add	r7, r0
 8009efc:	eba8 0800 	sub.w	r8, r8, r0
 8009f00:	e7e7      	b.n	8009ed2 <__sflush_r+0xd2>
 8009f02:	bf00      	nop
 8009f04:	dfbffffe 	.word	0xdfbffffe

08009f08 <_fflush_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	690b      	ldr	r3, [r1, #16]
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	460c      	mov	r4, r1
 8009f10:	b913      	cbnz	r3, 8009f18 <_fflush_r+0x10>
 8009f12:	2500      	movs	r5, #0
 8009f14:	4628      	mov	r0, r5
 8009f16:	bd38      	pop	{r3, r4, r5, pc}
 8009f18:	b118      	cbz	r0, 8009f22 <_fflush_r+0x1a>
 8009f1a:	6a03      	ldr	r3, [r0, #32]
 8009f1c:	b90b      	cbnz	r3, 8009f22 <_fflush_r+0x1a>
 8009f1e:	f7fe fe11 	bl	8008b44 <__sinit>
 8009f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d0f3      	beq.n	8009f12 <_fflush_r+0xa>
 8009f2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f2c:	07d0      	lsls	r0, r2, #31
 8009f2e:	d404      	bmi.n	8009f3a <_fflush_r+0x32>
 8009f30:	0599      	lsls	r1, r3, #22
 8009f32:	d402      	bmi.n	8009f3a <_fflush_r+0x32>
 8009f34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f36:	f7fe feea 	bl	8008d0e <__retarget_lock_acquire_recursive>
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	4621      	mov	r1, r4
 8009f3e:	f7ff ff5f 	bl	8009e00 <__sflush_r>
 8009f42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f44:	4605      	mov	r5, r0
 8009f46:	07da      	lsls	r2, r3, #31
 8009f48:	d4e4      	bmi.n	8009f14 <_fflush_r+0xc>
 8009f4a:	89a3      	ldrh	r3, [r4, #12]
 8009f4c:	059b      	lsls	r3, r3, #22
 8009f4e:	d4e1      	bmi.n	8009f14 <_fflush_r+0xc>
 8009f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f52:	f7fe fedd 	bl	8008d10 <__retarget_lock_release_recursive>
 8009f56:	e7dd      	b.n	8009f14 <_fflush_r+0xc>

08009f58 <__malloc_lock>:
 8009f58:	4801      	ldr	r0, [pc, #4]	@ (8009f60 <__malloc_lock+0x8>)
 8009f5a:	f7fe bed8 	b.w	8008d0e <__retarget_lock_acquire_recursive>
 8009f5e:	bf00      	nop
 8009f60:	20001018 	.word	0x20001018

08009f64 <__malloc_unlock>:
 8009f64:	4801      	ldr	r0, [pc, #4]	@ (8009f6c <__malloc_unlock+0x8>)
 8009f66:	f7fe bed3 	b.w	8008d10 <__retarget_lock_release_recursive>
 8009f6a:	bf00      	nop
 8009f6c:	20001018 	.word	0x20001018

08009f70 <_Balloc>:
 8009f70:	b570      	push	{r4, r5, r6, lr}
 8009f72:	69c6      	ldr	r6, [r0, #28]
 8009f74:	4604      	mov	r4, r0
 8009f76:	460d      	mov	r5, r1
 8009f78:	b976      	cbnz	r6, 8009f98 <_Balloc+0x28>
 8009f7a:	2010      	movs	r0, #16
 8009f7c:	f7ff fe96 	bl	8009cac <malloc>
 8009f80:	4602      	mov	r2, r0
 8009f82:	61e0      	str	r0, [r4, #28]
 8009f84:	b920      	cbnz	r0, 8009f90 <_Balloc+0x20>
 8009f86:	4b18      	ldr	r3, [pc, #96]	@ (8009fe8 <_Balloc+0x78>)
 8009f88:	216b      	movs	r1, #107	@ 0x6b
 8009f8a:	4818      	ldr	r0, [pc, #96]	@ (8009fec <_Balloc+0x7c>)
 8009f8c:	f7fe fedc 	bl	8008d48 <__assert_func>
 8009f90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f94:	6006      	str	r6, [r0, #0]
 8009f96:	60c6      	str	r6, [r0, #12]
 8009f98:	69e6      	ldr	r6, [r4, #28]
 8009f9a:	68f3      	ldr	r3, [r6, #12]
 8009f9c:	b183      	cbz	r3, 8009fc0 <_Balloc+0x50>
 8009f9e:	69e3      	ldr	r3, [r4, #28]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009fa6:	b9b8      	cbnz	r0, 8009fd8 <_Balloc+0x68>
 8009fa8:	2101      	movs	r1, #1
 8009faa:	4620      	mov	r0, r4
 8009fac:	fa01 f605 	lsl.w	r6, r1, r5
 8009fb0:	1d72      	adds	r2, r6, #5
 8009fb2:	0092      	lsls	r2, r2, #2
 8009fb4:	f000 fd63 	bl	800aa7e <_calloc_r>
 8009fb8:	b160      	cbz	r0, 8009fd4 <_Balloc+0x64>
 8009fba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009fbe:	e00e      	b.n	8009fde <_Balloc+0x6e>
 8009fc0:	2221      	movs	r2, #33	@ 0x21
 8009fc2:	2104      	movs	r1, #4
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f000 fd5a 	bl	800aa7e <_calloc_r>
 8009fca:	69e3      	ldr	r3, [r4, #28]
 8009fcc:	60f0      	str	r0, [r6, #12]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1e4      	bne.n	8009f9e <_Balloc+0x2e>
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	bd70      	pop	{r4, r5, r6, pc}
 8009fd8:	6802      	ldr	r2, [r0, #0]
 8009fda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009fde:	2300      	movs	r3, #0
 8009fe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fe4:	e7f7      	b.n	8009fd6 <_Balloc+0x66>
 8009fe6:	bf00      	nop
 8009fe8:	0800c21d 	.word	0x0800c21d
 8009fec:	0800c2ae 	.word	0x0800c2ae

08009ff0 <_Bfree>:
 8009ff0:	b570      	push	{r4, r5, r6, lr}
 8009ff2:	69c6      	ldr	r6, [r0, #28]
 8009ff4:	4605      	mov	r5, r0
 8009ff6:	460c      	mov	r4, r1
 8009ff8:	b976      	cbnz	r6, 800a018 <_Bfree+0x28>
 8009ffa:	2010      	movs	r0, #16
 8009ffc:	f7ff fe56 	bl	8009cac <malloc>
 800a000:	4602      	mov	r2, r0
 800a002:	61e8      	str	r0, [r5, #28]
 800a004:	b920      	cbnz	r0, 800a010 <_Bfree+0x20>
 800a006:	4b09      	ldr	r3, [pc, #36]	@ (800a02c <_Bfree+0x3c>)
 800a008:	218f      	movs	r1, #143	@ 0x8f
 800a00a:	4809      	ldr	r0, [pc, #36]	@ (800a030 <_Bfree+0x40>)
 800a00c:	f7fe fe9c 	bl	8008d48 <__assert_func>
 800a010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a014:	6006      	str	r6, [r0, #0]
 800a016:	60c6      	str	r6, [r0, #12]
 800a018:	b13c      	cbz	r4, 800a02a <_Bfree+0x3a>
 800a01a:	69eb      	ldr	r3, [r5, #28]
 800a01c:	6862      	ldr	r2, [r4, #4]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a024:	6021      	str	r1, [r4, #0]
 800a026:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a02a:	bd70      	pop	{r4, r5, r6, pc}
 800a02c:	0800c21d 	.word	0x0800c21d
 800a030:	0800c2ae 	.word	0x0800c2ae

0800a034 <__multadd>:
 800a034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a038:	f101 0c14 	add.w	ip, r1, #20
 800a03c:	4607      	mov	r7, r0
 800a03e:	460c      	mov	r4, r1
 800a040:	461e      	mov	r6, r3
 800a042:	690d      	ldr	r5, [r1, #16]
 800a044:	2000      	movs	r0, #0
 800a046:	f8dc 3000 	ldr.w	r3, [ip]
 800a04a:	3001      	adds	r0, #1
 800a04c:	b299      	uxth	r1, r3
 800a04e:	4285      	cmp	r5, r0
 800a050:	fb02 6101 	mla	r1, r2, r1, r6
 800a054:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a058:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800a05c:	b289      	uxth	r1, r1
 800a05e:	fb02 3306 	mla	r3, r2, r6, r3
 800a062:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a06a:	f84c 1b04 	str.w	r1, [ip], #4
 800a06e:	dcea      	bgt.n	800a046 <__multadd+0x12>
 800a070:	b30e      	cbz	r6, 800a0b6 <__multadd+0x82>
 800a072:	68a3      	ldr	r3, [r4, #8]
 800a074:	42ab      	cmp	r3, r5
 800a076:	dc19      	bgt.n	800a0ac <__multadd+0x78>
 800a078:	6861      	ldr	r1, [r4, #4]
 800a07a:	4638      	mov	r0, r7
 800a07c:	3101      	adds	r1, #1
 800a07e:	f7ff ff77 	bl	8009f70 <_Balloc>
 800a082:	4680      	mov	r8, r0
 800a084:	b928      	cbnz	r0, 800a092 <__multadd+0x5e>
 800a086:	4602      	mov	r2, r0
 800a088:	4b0c      	ldr	r3, [pc, #48]	@ (800a0bc <__multadd+0x88>)
 800a08a:	21ba      	movs	r1, #186	@ 0xba
 800a08c:	480c      	ldr	r0, [pc, #48]	@ (800a0c0 <__multadd+0x8c>)
 800a08e:	f7fe fe5b 	bl	8008d48 <__assert_func>
 800a092:	6922      	ldr	r2, [r4, #16]
 800a094:	f104 010c 	add.w	r1, r4, #12
 800a098:	300c      	adds	r0, #12
 800a09a:	3202      	adds	r2, #2
 800a09c:	0092      	lsls	r2, r2, #2
 800a09e:	f7fe fe46 	bl	8008d2e <memcpy>
 800a0a2:	4621      	mov	r1, r4
 800a0a4:	4644      	mov	r4, r8
 800a0a6:	4638      	mov	r0, r7
 800a0a8:	f7ff ffa2 	bl	8009ff0 <_Bfree>
 800a0ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0b0:	3501      	adds	r5, #1
 800a0b2:	615e      	str	r6, [r3, #20]
 800a0b4:	6125      	str	r5, [r4, #16]
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0bc:	0800c28c 	.word	0x0800c28c
 800a0c0:	0800c2ae 	.word	0x0800c2ae

0800a0c4 <__hi0bits>:
 800a0c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	bf36      	itet	cc
 800a0cc:	0403      	lslcc	r3, r0, #16
 800a0ce:	2000      	movcs	r0, #0
 800a0d0:	2010      	movcc	r0, #16
 800a0d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a0d6:	bf3c      	itt	cc
 800a0d8:	021b      	lslcc	r3, r3, #8
 800a0da:	3008      	addcc	r0, #8
 800a0dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0e0:	bf3c      	itt	cc
 800a0e2:	011b      	lslcc	r3, r3, #4
 800a0e4:	3004      	addcc	r0, #4
 800a0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0ea:	bf3c      	itt	cc
 800a0ec:	009b      	lslcc	r3, r3, #2
 800a0ee:	3002      	addcc	r0, #2
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	db05      	blt.n	800a100 <__hi0bits+0x3c>
 800a0f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a0f8:	f100 0001 	add.w	r0, r0, #1
 800a0fc:	bf08      	it	eq
 800a0fe:	2020      	moveq	r0, #32
 800a100:	4770      	bx	lr

0800a102 <__lo0bits>:
 800a102:	6803      	ldr	r3, [r0, #0]
 800a104:	4602      	mov	r2, r0
 800a106:	f013 0007 	ands.w	r0, r3, #7
 800a10a:	d00b      	beq.n	800a124 <__lo0bits+0x22>
 800a10c:	07d9      	lsls	r1, r3, #31
 800a10e:	d421      	bmi.n	800a154 <__lo0bits+0x52>
 800a110:	0798      	lsls	r0, r3, #30
 800a112:	bf47      	ittee	mi
 800a114:	085b      	lsrmi	r3, r3, #1
 800a116:	2001      	movmi	r0, #1
 800a118:	089b      	lsrpl	r3, r3, #2
 800a11a:	2002      	movpl	r0, #2
 800a11c:	bf4c      	ite	mi
 800a11e:	6013      	strmi	r3, [r2, #0]
 800a120:	6013      	strpl	r3, [r2, #0]
 800a122:	4770      	bx	lr
 800a124:	b299      	uxth	r1, r3
 800a126:	b909      	cbnz	r1, 800a12c <__lo0bits+0x2a>
 800a128:	0c1b      	lsrs	r3, r3, #16
 800a12a:	2010      	movs	r0, #16
 800a12c:	b2d9      	uxtb	r1, r3
 800a12e:	b909      	cbnz	r1, 800a134 <__lo0bits+0x32>
 800a130:	3008      	adds	r0, #8
 800a132:	0a1b      	lsrs	r3, r3, #8
 800a134:	0719      	lsls	r1, r3, #28
 800a136:	bf04      	itt	eq
 800a138:	091b      	lsreq	r3, r3, #4
 800a13a:	3004      	addeq	r0, #4
 800a13c:	0799      	lsls	r1, r3, #30
 800a13e:	bf04      	itt	eq
 800a140:	089b      	lsreq	r3, r3, #2
 800a142:	3002      	addeq	r0, #2
 800a144:	07d9      	lsls	r1, r3, #31
 800a146:	d403      	bmi.n	800a150 <__lo0bits+0x4e>
 800a148:	085b      	lsrs	r3, r3, #1
 800a14a:	f100 0001 	add.w	r0, r0, #1
 800a14e:	d003      	beq.n	800a158 <__lo0bits+0x56>
 800a150:	6013      	str	r3, [r2, #0]
 800a152:	4770      	bx	lr
 800a154:	2000      	movs	r0, #0
 800a156:	4770      	bx	lr
 800a158:	2020      	movs	r0, #32
 800a15a:	4770      	bx	lr

0800a15c <__i2b>:
 800a15c:	b510      	push	{r4, lr}
 800a15e:	460c      	mov	r4, r1
 800a160:	2101      	movs	r1, #1
 800a162:	f7ff ff05 	bl	8009f70 <_Balloc>
 800a166:	4602      	mov	r2, r0
 800a168:	b928      	cbnz	r0, 800a176 <__i2b+0x1a>
 800a16a:	4b05      	ldr	r3, [pc, #20]	@ (800a180 <__i2b+0x24>)
 800a16c:	f240 1145 	movw	r1, #325	@ 0x145
 800a170:	4804      	ldr	r0, [pc, #16]	@ (800a184 <__i2b+0x28>)
 800a172:	f7fe fde9 	bl	8008d48 <__assert_func>
 800a176:	2301      	movs	r3, #1
 800a178:	6144      	str	r4, [r0, #20]
 800a17a:	6103      	str	r3, [r0, #16]
 800a17c:	bd10      	pop	{r4, pc}
 800a17e:	bf00      	nop
 800a180:	0800c28c 	.word	0x0800c28c
 800a184:	0800c2ae 	.word	0x0800c2ae

0800a188 <__multiply>:
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	4614      	mov	r4, r2
 800a18e:	690a      	ldr	r2, [r1, #16]
 800a190:	460f      	mov	r7, r1
 800a192:	b085      	sub	sp, #20
 800a194:	6923      	ldr	r3, [r4, #16]
 800a196:	429a      	cmp	r2, r3
 800a198:	bfa2      	ittt	ge
 800a19a:	4623      	movge	r3, r4
 800a19c:	460c      	movge	r4, r1
 800a19e:	461f      	movge	r7, r3
 800a1a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a1a4:	68a3      	ldr	r3, [r4, #8]
 800a1a6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a1aa:	6861      	ldr	r1, [r4, #4]
 800a1ac:	eb0a 0609 	add.w	r6, sl, r9
 800a1b0:	42b3      	cmp	r3, r6
 800a1b2:	bfb8      	it	lt
 800a1b4:	3101      	addlt	r1, #1
 800a1b6:	f7ff fedb 	bl	8009f70 <_Balloc>
 800a1ba:	b930      	cbnz	r0, 800a1ca <__multiply+0x42>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	4b45      	ldr	r3, [pc, #276]	@ (800a2d4 <__multiply+0x14c>)
 800a1c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a1c4:	4844      	ldr	r0, [pc, #272]	@ (800a2d8 <__multiply+0x150>)
 800a1c6:	f7fe fdbf 	bl	8008d48 <__assert_func>
 800a1ca:	f100 0514 	add.w	r5, r0, #20
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a1d4:	462b      	mov	r3, r5
 800a1d6:	4543      	cmp	r3, r8
 800a1d8:	d321      	bcc.n	800a21e <__multiply+0x96>
 800a1da:	f107 0114 	add.w	r1, r7, #20
 800a1de:	f104 0214 	add.w	r2, r4, #20
 800a1e2:	f104 0715 	add.w	r7, r4, #21
 800a1e6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a1ea:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a1ee:	9302      	str	r3, [sp, #8]
 800a1f0:	1b13      	subs	r3, r2, r4
 800a1f2:	3b15      	subs	r3, #21
 800a1f4:	f023 0303 	bic.w	r3, r3, #3
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	42ba      	cmp	r2, r7
 800a1fc:	bf38      	it	cc
 800a1fe:	2304      	movcc	r3, #4
 800a200:	9301      	str	r3, [sp, #4]
 800a202:	9b02      	ldr	r3, [sp, #8]
 800a204:	9103      	str	r1, [sp, #12]
 800a206:	428b      	cmp	r3, r1
 800a208:	d80c      	bhi.n	800a224 <__multiply+0x9c>
 800a20a:	2e00      	cmp	r6, #0
 800a20c:	dd03      	ble.n	800a216 <__multiply+0x8e>
 800a20e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a212:	2b00      	cmp	r3, #0
 800a214:	d05b      	beq.n	800a2ce <__multiply+0x146>
 800a216:	6106      	str	r6, [r0, #16]
 800a218:	b005      	add	sp, #20
 800a21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21e:	f843 2b04 	str.w	r2, [r3], #4
 800a222:	e7d8      	b.n	800a1d6 <__multiply+0x4e>
 800a224:	f8b1 a000 	ldrh.w	sl, [r1]
 800a228:	f1ba 0f00 	cmp.w	sl, #0
 800a22c:	d024      	beq.n	800a278 <__multiply+0xf0>
 800a22e:	f104 0e14 	add.w	lr, r4, #20
 800a232:	46a9      	mov	r9, r5
 800a234:	f04f 0c00 	mov.w	ip, #0
 800a238:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a23c:	f8d9 3000 	ldr.w	r3, [r9]
 800a240:	fa1f fb87 	uxth.w	fp, r7
 800a244:	4572      	cmp	r2, lr
 800a246:	b29b      	uxth	r3, r3
 800a248:	fb0a 330b 	mla	r3, sl, fp, r3
 800a24c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a250:	f8d9 7000 	ldr.w	r7, [r9]
 800a254:	4463      	add	r3, ip
 800a256:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a25a:	fb0a c70b 	mla	r7, sl, fp, ip
 800a25e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a262:	b29b      	uxth	r3, r3
 800a264:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a268:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a26c:	f849 3b04 	str.w	r3, [r9], #4
 800a270:	d8e2      	bhi.n	800a238 <__multiply+0xb0>
 800a272:	9b01      	ldr	r3, [sp, #4]
 800a274:	f845 c003 	str.w	ip, [r5, r3]
 800a278:	9b03      	ldr	r3, [sp, #12]
 800a27a:	3104      	adds	r1, #4
 800a27c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a280:	f1b9 0f00 	cmp.w	r9, #0
 800a284:	d021      	beq.n	800a2ca <__multiply+0x142>
 800a286:	682b      	ldr	r3, [r5, #0]
 800a288:	f104 0c14 	add.w	ip, r4, #20
 800a28c:	46ae      	mov	lr, r5
 800a28e:	f04f 0a00 	mov.w	sl, #0
 800a292:	f8bc b000 	ldrh.w	fp, [ip]
 800a296:	b29b      	uxth	r3, r3
 800a298:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a29c:	fb09 770b 	mla	r7, r9, fp, r7
 800a2a0:	4457      	add	r7, sl
 800a2a2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a2a6:	f84e 3b04 	str.w	r3, [lr], #4
 800a2aa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a2ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a2b2:	f8be 3000 	ldrh.w	r3, [lr]
 800a2b6:	4562      	cmp	r2, ip
 800a2b8:	fb09 330a 	mla	r3, r9, sl, r3
 800a2bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a2c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a2c4:	d8e5      	bhi.n	800a292 <__multiply+0x10a>
 800a2c6:	9f01      	ldr	r7, [sp, #4]
 800a2c8:	51eb      	str	r3, [r5, r7]
 800a2ca:	3504      	adds	r5, #4
 800a2cc:	e799      	b.n	800a202 <__multiply+0x7a>
 800a2ce:	3e01      	subs	r6, #1
 800a2d0:	e79b      	b.n	800a20a <__multiply+0x82>
 800a2d2:	bf00      	nop
 800a2d4:	0800c28c 	.word	0x0800c28c
 800a2d8:	0800c2ae 	.word	0x0800c2ae

0800a2dc <__pow5mult>:
 800a2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2e0:	4615      	mov	r5, r2
 800a2e2:	f012 0203 	ands.w	r2, r2, #3
 800a2e6:	4607      	mov	r7, r0
 800a2e8:	460e      	mov	r6, r1
 800a2ea:	d007      	beq.n	800a2fc <__pow5mult+0x20>
 800a2ec:	3a01      	subs	r2, #1
 800a2ee:	4c25      	ldr	r4, [pc, #148]	@ (800a384 <__pow5mult+0xa8>)
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2f6:	f7ff fe9d 	bl	800a034 <__multadd>
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	10ad      	asrs	r5, r5, #2
 800a2fe:	d03d      	beq.n	800a37c <__pow5mult+0xa0>
 800a300:	69fc      	ldr	r4, [r7, #28]
 800a302:	b97c      	cbnz	r4, 800a324 <__pow5mult+0x48>
 800a304:	2010      	movs	r0, #16
 800a306:	f7ff fcd1 	bl	8009cac <malloc>
 800a30a:	4602      	mov	r2, r0
 800a30c:	61f8      	str	r0, [r7, #28]
 800a30e:	b928      	cbnz	r0, 800a31c <__pow5mult+0x40>
 800a310:	4b1d      	ldr	r3, [pc, #116]	@ (800a388 <__pow5mult+0xac>)
 800a312:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a316:	481d      	ldr	r0, [pc, #116]	@ (800a38c <__pow5mult+0xb0>)
 800a318:	f7fe fd16 	bl	8008d48 <__assert_func>
 800a31c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a320:	6004      	str	r4, [r0, #0]
 800a322:	60c4      	str	r4, [r0, #12]
 800a324:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a328:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a32c:	b94c      	cbnz	r4, 800a342 <__pow5mult+0x66>
 800a32e:	f240 2171 	movw	r1, #625	@ 0x271
 800a332:	4638      	mov	r0, r7
 800a334:	f7ff ff12 	bl	800a15c <__i2b>
 800a338:	2300      	movs	r3, #0
 800a33a:	4604      	mov	r4, r0
 800a33c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a340:	6003      	str	r3, [r0, #0]
 800a342:	f04f 0900 	mov.w	r9, #0
 800a346:	07eb      	lsls	r3, r5, #31
 800a348:	d50a      	bpl.n	800a360 <__pow5mult+0x84>
 800a34a:	4631      	mov	r1, r6
 800a34c:	4622      	mov	r2, r4
 800a34e:	4638      	mov	r0, r7
 800a350:	f7ff ff1a 	bl	800a188 <__multiply>
 800a354:	4680      	mov	r8, r0
 800a356:	4631      	mov	r1, r6
 800a358:	4638      	mov	r0, r7
 800a35a:	4646      	mov	r6, r8
 800a35c:	f7ff fe48 	bl	8009ff0 <_Bfree>
 800a360:	106d      	asrs	r5, r5, #1
 800a362:	d00b      	beq.n	800a37c <__pow5mult+0xa0>
 800a364:	6820      	ldr	r0, [r4, #0]
 800a366:	b938      	cbnz	r0, 800a378 <__pow5mult+0x9c>
 800a368:	4622      	mov	r2, r4
 800a36a:	4621      	mov	r1, r4
 800a36c:	4638      	mov	r0, r7
 800a36e:	f7ff ff0b 	bl	800a188 <__multiply>
 800a372:	6020      	str	r0, [r4, #0]
 800a374:	f8c0 9000 	str.w	r9, [r0]
 800a378:	4604      	mov	r4, r0
 800a37a:	e7e4      	b.n	800a346 <__pow5mult+0x6a>
 800a37c:	4630      	mov	r0, r6
 800a37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a382:	bf00      	nop
 800a384:	0800c308 	.word	0x0800c308
 800a388:	0800c21d 	.word	0x0800c21d
 800a38c:	0800c2ae 	.word	0x0800c2ae

0800a390 <__lshift>:
 800a390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a394:	460c      	mov	r4, r1
 800a396:	4607      	mov	r7, r0
 800a398:	4691      	mov	r9, r2
 800a39a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a39e:	6923      	ldr	r3, [r4, #16]
 800a3a0:	6849      	ldr	r1, [r1, #4]
 800a3a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3a6:	68a3      	ldr	r3, [r4, #8]
 800a3a8:	f108 0601 	add.w	r6, r8, #1
 800a3ac:	42b3      	cmp	r3, r6
 800a3ae:	db0b      	blt.n	800a3c8 <__lshift+0x38>
 800a3b0:	4638      	mov	r0, r7
 800a3b2:	f7ff fddd 	bl	8009f70 <_Balloc>
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	b948      	cbnz	r0, 800a3ce <__lshift+0x3e>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	4b28      	ldr	r3, [pc, #160]	@ (800a460 <__lshift+0xd0>)
 800a3be:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a3c2:	4828      	ldr	r0, [pc, #160]	@ (800a464 <__lshift+0xd4>)
 800a3c4:	f7fe fcc0 	bl	8008d48 <__assert_func>
 800a3c8:	3101      	adds	r1, #1
 800a3ca:	005b      	lsls	r3, r3, #1
 800a3cc:	e7ee      	b.n	800a3ac <__lshift+0x1c>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f100 0114 	add.w	r1, r0, #20
 800a3d4:	f100 0210 	add.w	r2, r0, #16
 800a3d8:	4618      	mov	r0, r3
 800a3da:	4553      	cmp	r3, sl
 800a3dc:	db33      	blt.n	800a446 <__lshift+0xb6>
 800a3de:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a3e2:	f104 0314 	add.w	r3, r4, #20
 800a3e6:	6920      	ldr	r0, [r4, #16]
 800a3e8:	f019 091f 	ands.w	r9, r9, #31
 800a3ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a3f4:	d02b      	beq.n	800a44e <__lshift+0xbe>
 800a3f6:	f1c9 0e20 	rsb	lr, r9, #32
 800a3fa:	468a      	mov	sl, r1
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	6818      	ldr	r0, [r3, #0]
 800a400:	fa00 f009 	lsl.w	r0, r0, r9
 800a404:	4310      	orrs	r0, r2
 800a406:	f84a 0b04 	str.w	r0, [sl], #4
 800a40a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a40e:	459c      	cmp	ip, r3
 800a410:	fa22 f20e 	lsr.w	r2, r2, lr
 800a414:	d8f3      	bhi.n	800a3fe <__lshift+0x6e>
 800a416:	ebac 0304 	sub.w	r3, ip, r4
 800a41a:	f104 0015 	add.w	r0, r4, #21
 800a41e:	3b15      	subs	r3, #21
 800a420:	f023 0303 	bic.w	r3, r3, #3
 800a424:	3304      	adds	r3, #4
 800a426:	4584      	cmp	ip, r0
 800a428:	bf38      	it	cc
 800a42a:	2304      	movcc	r3, #4
 800a42c:	50ca      	str	r2, [r1, r3]
 800a42e:	b10a      	cbz	r2, 800a434 <__lshift+0xa4>
 800a430:	f108 0602 	add.w	r6, r8, #2
 800a434:	3e01      	subs	r6, #1
 800a436:	4638      	mov	r0, r7
 800a438:	4621      	mov	r1, r4
 800a43a:	612e      	str	r6, [r5, #16]
 800a43c:	f7ff fdd8 	bl	8009ff0 <_Bfree>
 800a440:	4628      	mov	r0, r5
 800a442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a446:	3301      	adds	r3, #1
 800a448:	f842 0f04 	str.w	r0, [r2, #4]!
 800a44c:	e7c5      	b.n	800a3da <__lshift+0x4a>
 800a44e:	3904      	subs	r1, #4
 800a450:	f853 2b04 	ldr.w	r2, [r3], #4
 800a454:	459c      	cmp	ip, r3
 800a456:	f841 2f04 	str.w	r2, [r1, #4]!
 800a45a:	d8f9      	bhi.n	800a450 <__lshift+0xc0>
 800a45c:	e7ea      	b.n	800a434 <__lshift+0xa4>
 800a45e:	bf00      	nop
 800a460:	0800c28c 	.word	0x0800c28c
 800a464:	0800c2ae 	.word	0x0800c2ae

0800a468 <__mcmp>:
 800a468:	4603      	mov	r3, r0
 800a46a:	690a      	ldr	r2, [r1, #16]
 800a46c:	6900      	ldr	r0, [r0, #16]
 800a46e:	1a80      	subs	r0, r0, r2
 800a470:	b530      	push	{r4, r5, lr}
 800a472:	d10e      	bne.n	800a492 <__mcmp+0x2a>
 800a474:	3314      	adds	r3, #20
 800a476:	3114      	adds	r1, #20
 800a478:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a47c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a480:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a484:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a488:	4295      	cmp	r5, r2
 800a48a:	d003      	beq.n	800a494 <__mcmp+0x2c>
 800a48c:	d205      	bcs.n	800a49a <__mcmp+0x32>
 800a48e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a492:	bd30      	pop	{r4, r5, pc}
 800a494:	42a3      	cmp	r3, r4
 800a496:	d3f3      	bcc.n	800a480 <__mcmp+0x18>
 800a498:	e7fb      	b.n	800a492 <__mcmp+0x2a>
 800a49a:	2001      	movs	r0, #1
 800a49c:	e7f9      	b.n	800a492 <__mcmp+0x2a>
	...

0800a4a0 <__mdiff>:
 800a4a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a4:	4689      	mov	r9, r1
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	4614      	mov	r4, r2
 800a4ac:	4648      	mov	r0, r9
 800a4ae:	f7ff ffdb 	bl	800a468 <__mcmp>
 800a4b2:	1e05      	subs	r5, r0, #0
 800a4b4:	d112      	bne.n	800a4dc <__mdiff+0x3c>
 800a4b6:	4629      	mov	r1, r5
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	f7ff fd59 	bl	8009f70 <_Balloc>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	b928      	cbnz	r0, 800a4ce <__mdiff+0x2e>
 800a4c2:	4b41      	ldr	r3, [pc, #260]	@ (800a5c8 <__mdiff+0x128>)
 800a4c4:	f240 2137 	movw	r1, #567	@ 0x237
 800a4c8:	4840      	ldr	r0, [pc, #256]	@ (800a5cc <__mdiff+0x12c>)
 800a4ca:	f7fe fc3d 	bl	8008d48 <__assert_func>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a4d4:	4610      	mov	r0, r2
 800a4d6:	b003      	add	sp, #12
 800a4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4dc:	bfbc      	itt	lt
 800a4de:	464b      	movlt	r3, r9
 800a4e0:	46a1      	movlt	r9, r4
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	bfb8      	it	lt
 800a4e6:	2501      	movlt	r5, #1
 800a4e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a4ec:	bfb4      	ite	lt
 800a4ee:	461c      	movlt	r4, r3
 800a4f0:	2500      	movge	r5, #0
 800a4f2:	f7ff fd3d 	bl	8009f70 <_Balloc>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	b918      	cbnz	r0, 800a502 <__mdiff+0x62>
 800a4fa:	4b33      	ldr	r3, [pc, #204]	@ (800a5c8 <__mdiff+0x128>)
 800a4fc:	f240 2145 	movw	r1, #581	@ 0x245
 800a500:	e7e2      	b.n	800a4c8 <__mdiff+0x28>
 800a502:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a506:	f104 0e14 	add.w	lr, r4, #20
 800a50a:	6926      	ldr	r6, [r4, #16]
 800a50c:	f100 0b14 	add.w	fp, r0, #20
 800a510:	60c5      	str	r5, [r0, #12]
 800a512:	f109 0514 	add.w	r5, r9, #20
 800a516:	f109 0310 	add.w	r3, r9, #16
 800a51a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a51e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a522:	46d9      	mov	r9, fp
 800a524:	f04f 0c00 	mov.w	ip, #0
 800a528:	9301      	str	r3, [sp, #4]
 800a52a:	9b01      	ldr	r3, [sp, #4]
 800a52c:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a530:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a534:	4576      	cmp	r6, lr
 800a536:	9301      	str	r3, [sp, #4]
 800a538:	fa1f f38a 	uxth.w	r3, sl
 800a53c:	4619      	mov	r1, r3
 800a53e:	b283      	uxth	r3, r0
 800a540:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800a544:	eba1 0303 	sub.w	r3, r1, r3
 800a548:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a54c:	4463      	add	r3, ip
 800a54e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a552:	b29b      	uxth	r3, r3
 800a554:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a558:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a55c:	f849 3b04 	str.w	r3, [r9], #4
 800a560:	d8e3      	bhi.n	800a52a <__mdiff+0x8a>
 800a562:	1b33      	subs	r3, r6, r4
 800a564:	3415      	adds	r4, #21
 800a566:	3b15      	subs	r3, #21
 800a568:	f023 0303 	bic.w	r3, r3, #3
 800a56c:	3304      	adds	r3, #4
 800a56e:	42a6      	cmp	r6, r4
 800a570:	bf38      	it	cc
 800a572:	2304      	movcc	r3, #4
 800a574:	441d      	add	r5, r3
 800a576:	445b      	add	r3, fp
 800a578:	462c      	mov	r4, r5
 800a57a:	461e      	mov	r6, r3
 800a57c:	4544      	cmp	r4, r8
 800a57e:	d30e      	bcc.n	800a59e <__mdiff+0xfe>
 800a580:	f108 0103 	add.w	r1, r8, #3
 800a584:	1b49      	subs	r1, r1, r5
 800a586:	3d03      	subs	r5, #3
 800a588:	f021 0103 	bic.w	r1, r1, #3
 800a58c:	45a8      	cmp	r8, r5
 800a58e:	bf38      	it	cc
 800a590:	2100      	movcc	r1, #0
 800a592:	440b      	add	r3, r1
 800a594:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a598:	b199      	cbz	r1, 800a5c2 <__mdiff+0x122>
 800a59a:	6117      	str	r7, [r2, #16]
 800a59c:	e79a      	b.n	800a4d4 <__mdiff+0x34>
 800a59e:	f854 1b04 	ldr.w	r1, [r4], #4
 800a5a2:	46e6      	mov	lr, ip
 800a5a4:	fa1f fc81 	uxth.w	ip, r1
 800a5a8:	0c08      	lsrs	r0, r1, #16
 800a5aa:	4471      	add	r1, lr
 800a5ac:	44f4      	add	ip, lr
 800a5ae:	b289      	uxth	r1, r1
 800a5b0:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a5b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a5b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a5bc:	f846 1b04 	str.w	r1, [r6], #4
 800a5c0:	e7dc      	b.n	800a57c <__mdiff+0xdc>
 800a5c2:	3f01      	subs	r7, #1
 800a5c4:	e7e6      	b.n	800a594 <__mdiff+0xf4>
 800a5c6:	bf00      	nop
 800a5c8:	0800c28c 	.word	0x0800c28c
 800a5cc:	0800c2ae 	.word	0x0800c2ae

0800a5d0 <__d2b>:
 800a5d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5d4:	460f      	mov	r7, r1
 800a5d6:	2101      	movs	r1, #1
 800a5d8:	4616      	mov	r6, r2
 800a5da:	ec59 8b10 	vmov	r8, r9, d0
 800a5de:	f7ff fcc7 	bl	8009f70 <_Balloc>
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	b930      	cbnz	r0, 800a5f4 <__d2b+0x24>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	4b23      	ldr	r3, [pc, #140]	@ (800a678 <__d2b+0xa8>)
 800a5ea:	f240 310f 	movw	r1, #783	@ 0x30f
 800a5ee:	4823      	ldr	r0, [pc, #140]	@ (800a67c <__d2b+0xac>)
 800a5f0:	f7fe fbaa 	bl	8008d48 <__assert_func>
 800a5f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a5f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5fc:	b10d      	cbz	r5, 800a602 <__d2b+0x32>
 800a5fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a602:	9301      	str	r3, [sp, #4]
 800a604:	f1b8 0300 	subs.w	r3, r8, #0
 800a608:	d023      	beq.n	800a652 <__d2b+0x82>
 800a60a:	4668      	mov	r0, sp
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	f7ff fd78 	bl	800a102 <__lo0bits>
 800a612:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a616:	b1d0      	cbz	r0, 800a64e <__d2b+0x7e>
 800a618:	f1c0 0320 	rsb	r3, r0, #32
 800a61c:	fa02 f303 	lsl.w	r3, r2, r3
 800a620:	40c2      	lsrs	r2, r0
 800a622:	430b      	orrs	r3, r1
 800a624:	9201      	str	r2, [sp, #4]
 800a626:	6163      	str	r3, [r4, #20]
 800a628:	9b01      	ldr	r3, [sp, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	61a3      	str	r3, [r4, #24]
 800a62e:	bf0c      	ite	eq
 800a630:	2201      	moveq	r2, #1
 800a632:	2202      	movne	r2, #2
 800a634:	6122      	str	r2, [r4, #16]
 800a636:	b1a5      	cbz	r5, 800a662 <__d2b+0x92>
 800a638:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a63c:	4405      	add	r5, r0
 800a63e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a642:	603d      	str	r5, [r7, #0]
 800a644:	6030      	str	r0, [r6, #0]
 800a646:	4620      	mov	r0, r4
 800a648:	b003      	add	sp, #12
 800a64a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a64e:	6161      	str	r1, [r4, #20]
 800a650:	e7ea      	b.n	800a628 <__d2b+0x58>
 800a652:	a801      	add	r0, sp, #4
 800a654:	f7ff fd55 	bl	800a102 <__lo0bits>
 800a658:	9b01      	ldr	r3, [sp, #4]
 800a65a:	3020      	adds	r0, #32
 800a65c:	2201      	movs	r2, #1
 800a65e:	6163      	str	r3, [r4, #20]
 800a660:	e7e8      	b.n	800a634 <__d2b+0x64>
 800a662:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a666:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a66a:	6038      	str	r0, [r7, #0]
 800a66c:	6918      	ldr	r0, [r3, #16]
 800a66e:	f7ff fd29 	bl	800a0c4 <__hi0bits>
 800a672:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a676:	e7e5      	b.n	800a644 <__d2b+0x74>
 800a678:	0800c28c 	.word	0x0800c28c
 800a67c:	0800c2ae 	.word	0x0800c2ae

0800a680 <__sread>:
 800a680:	b510      	push	{r4, lr}
 800a682:	460c      	mov	r4, r1
 800a684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a688:	f000 f9be 	bl	800aa08 <_read_r>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	bfab      	itete	ge
 800a690:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a692:	89a3      	ldrhlt	r3, [r4, #12]
 800a694:	181b      	addge	r3, r3, r0
 800a696:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a69a:	bfac      	ite	ge
 800a69c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a69e:	81a3      	strhlt	r3, [r4, #12]
 800a6a0:	bd10      	pop	{r4, pc}

0800a6a2 <__swrite>:
 800a6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a6:	461f      	mov	r7, r3
 800a6a8:	898b      	ldrh	r3, [r1, #12]
 800a6aa:	4605      	mov	r5, r0
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	05db      	lsls	r3, r3, #23
 800a6b0:	4616      	mov	r6, r2
 800a6b2:	d505      	bpl.n	800a6c0 <__swrite+0x1e>
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6bc:	f000 f992 	bl	800a9e4 <_lseek_r>
 800a6c0:	89a3      	ldrh	r3, [r4, #12]
 800a6c2:	4632      	mov	r2, r6
 800a6c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a6ce:	81a3      	strh	r3, [r4, #12]
 800a6d0:	463b      	mov	r3, r7
 800a6d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6d6:	f000 b9b9 	b.w	800aa4c <_write_r>

0800a6da <__sseek>:
 800a6da:	b510      	push	{r4, lr}
 800a6dc:	460c      	mov	r4, r1
 800a6de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e2:	f000 f97f 	bl	800a9e4 <_lseek_r>
 800a6e6:	1c43      	adds	r3, r0, #1
 800a6e8:	89a3      	ldrh	r3, [r4, #12]
 800a6ea:	bf15      	itete	ne
 800a6ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a6ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a6f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a6f6:	81a3      	strheq	r3, [r4, #12]
 800a6f8:	bf18      	it	ne
 800a6fa:	81a3      	strhne	r3, [r4, #12]
 800a6fc:	bd10      	pop	{r4, pc}

0800a6fe <__sclose>:
 800a6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a702:	f000 b93d 	b.w	800a980 <_close_r>
	...

0800a708 <fiprintf>:
 800a708:	b40e      	push	{r1, r2, r3}
 800a70a:	b503      	push	{r0, r1, lr}
 800a70c:	ab03      	add	r3, sp, #12
 800a70e:	4601      	mov	r1, r0
 800a710:	4805      	ldr	r0, [pc, #20]	@ (800a728 <fiprintf+0x20>)
 800a712:	f853 2b04 	ldr.w	r2, [r3], #4
 800a716:	6800      	ldr	r0, [r0, #0]
 800a718:	9301      	str	r3, [sp, #4]
 800a71a:	f7ff f9af 	bl	8009a7c <_vfiprintf_r>
 800a71e:	b002      	add	sp, #8
 800a720:	f85d eb04 	ldr.w	lr, [sp], #4
 800a724:	b003      	add	sp, #12
 800a726:	4770      	bx	lr
 800a728:	200000b0 	.word	0x200000b0

0800a72c <__swbuf_r>:
 800a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72e:	460e      	mov	r6, r1
 800a730:	4614      	mov	r4, r2
 800a732:	4605      	mov	r5, r0
 800a734:	b118      	cbz	r0, 800a73e <__swbuf_r+0x12>
 800a736:	6a03      	ldr	r3, [r0, #32]
 800a738:	b90b      	cbnz	r3, 800a73e <__swbuf_r+0x12>
 800a73a:	f7fe fa03 	bl	8008b44 <__sinit>
 800a73e:	69a3      	ldr	r3, [r4, #24]
 800a740:	60a3      	str	r3, [r4, #8]
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	071a      	lsls	r2, r3, #28
 800a746:	d501      	bpl.n	800a74c <__swbuf_r+0x20>
 800a748:	6923      	ldr	r3, [r4, #16]
 800a74a:	b943      	cbnz	r3, 800a75e <__swbuf_r+0x32>
 800a74c:	4621      	mov	r1, r4
 800a74e:	4628      	mov	r0, r5
 800a750:	f000 f82a 	bl	800a7a8 <__swsetup_r>
 800a754:	b118      	cbz	r0, 800a75e <__swbuf_r+0x32>
 800a756:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a75a:	4638      	mov	r0, r7
 800a75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	b2f6      	uxtb	r6, r6
 800a762:	6922      	ldr	r2, [r4, #16]
 800a764:	4637      	mov	r7, r6
 800a766:	1a98      	subs	r0, r3, r2
 800a768:	6963      	ldr	r3, [r4, #20]
 800a76a:	4283      	cmp	r3, r0
 800a76c:	dc05      	bgt.n	800a77a <__swbuf_r+0x4e>
 800a76e:	4621      	mov	r1, r4
 800a770:	4628      	mov	r0, r5
 800a772:	f7ff fbc9 	bl	8009f08 <_fflush_r>
 800a776:	2800      	cmp	r0, #0
 800a778:	d1ed      	bne.n	800a756 <__swbuf_r+0x2a>
 800a77a:	68a3      	ldr	r3, [r4, #8]
 800a77c:	3b01      	subs	r3, #1
 800a77e:	60a3      	str	r3, [r4, #8]
 800a780:	6823      	ldr	r3, [r4, #0]
 800a782:	1c5a      	adds	r2, r3, #1
 800a784:	6022      	str	r2, [r4, #0]
 800a786:	701e      	strb	r6, [r3, #0]
 800a788:	1c43      	adds	r3, r0, #1
 800a78a:	6962      	ldr	r2, [r4, #20]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d004      	beq.n	800a79a <__swbuf_r+0x6e>
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	07db      	lsls	r3, r3, #31
 800a794:	d5e1      	bpl.n	800a75a <__swbuf_r+0x2e>
 800a796:	2e0a      	cmp	r6, #10
 800a798:	d1df      	bne.n	800a75a <__swbuf_r+0x2e>
 800a79a:	4621      	mov	r1, r4
 800a79c:	4628      	mov	r0, r5
 800a79e:	f7ff fbb3 	bl	8009f08 <_fflush_r>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d0d9      	beq.n	800a75a <__swbuf_r+0x2e>
 800a7a6:	e7d6      	b.n	800a756 <__swbuf_r+0x2a>

0800a7a8 <__swsetup_r>:
 800a7a8:	b538      	push	{r3, r4, r5, lr}
 800a7aa:	4b29      	ldr	r3, [pc, #164]	@ (800a850 <__swsetup_r+0xa8>)
 800a7ac:	4605      	mov	r5, r0
 800a7ae:	460c      	mov	r4, r1
 800a7b0:	6818      	ldr	r0, [r3, #0]
 800a7b2:	b118      	cbz	r0, 800a7bc <__swsetup_r+0x14>
 800a7b4:	6a03      	ldr	r3, [r0, #32]
 800a7b6:	b90b      	cbnz	r3, 800a7bc <__swsetup_r+0x14>
 800a7b8:	f7fe f9c4 	bl	8008b44 <__sinit>
 800a7bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7c0:	0719      	lsls	r1, r3, #28
 800a7c2:	d422      	bmi.n	800a80a <__swsetup_r+0x62>
 800a7c4:	06da      	lsls	r2, r3, #27
 800a7c6:	d407      	bmi.n	800a7d8 <__swsetup_r+0x30>
 800a7c8:	2209      	movs	r2, #9
 800a7ca:	602a      	str	r2, [r5, #0]
 800a7cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7d4:	81a3      	strh	r3, [r4, #12]
 800a7d6:	e033      	b.n	800a840 <__swsetup_r+0x98>
 800a7d8:	0758      	lsls	r0, r3, #29
 800a7da:	d512      	bpl.n	800a802 <__swsetup_r+0x5a>
 800a7dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7de:	b141      	cbz	r1, 800a7f2 <__swsetup_r+0x4a>
 800a7e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7e4:	4299      	cmp	r1, r3
 800a7e6:	d002      	beq.n	800a7ee <__swsetup_r+0x46>
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	f000 f95d 	bl	800aaa8 <_free_r>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a7f2:	89a3      	ldrh	r3, [r4, #12]
 800a7f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a7f8:	81a3      	strh	r3, [r4, #12]
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	6063      	str	r3, [r4, #4]
 800a7fe:	6923      	ldr	r3, [r4, #16]
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	89a3      	ldrh	r3, [r4, #12]
 800a804:	f043 0308 	orr.w	r3, r3, #8
 800a808:	81a3      	strh	r3, [r4, #12]
 800a80a:	6923      	ldr	r3, [r4, #16]
 800a80c:	b94b      	cbnz	r3, 800a822 <__swsetup_r+0x7a>
 800a80e:	89a3      	ldrh	r3, [r4, #12]
 800a810:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a818:	d003      	beq.n	800a822 <__swsetup_r+0x7a>
 800a81a:	4621      	mov	r1, r4
 800a81c:	4628      	mov	r0, r5
 800a81e:	f000 f83e 	bl	800a89e <__smakebuf_r>
 800a822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a826:	f013 0201 	ands.w	r2, r3, #1
 800a82a:	d00a      	beq.n	800a842 <__swsetup_r+0x9a>
 800a82c:	2200      	movs	r2, #0
 800a82e:	60a2      	str	r2, [r4, #8]
 800a830:	6962      	ldr	r2, [r4, #20]
 800a832:	4252      	negs	r2, r2
 800a834:	61a2      	str	r2, [r4, #24]
 800a836:	6922      	ldr	r2, [r4, #16]
 800a838:	b942      	cbnz	r2, 800a84c <__swsetup_r+0xa4>
 800a83a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a83e:	d1c5      	bne.n	800a7cc <__swsetup_r+0x24>
 800a840:	bd38      	pop	{r3, r4, r5, pc}
 800a842:	0799      	lsls	r1, r3, #30
 800a844:	bf58      	it	pl
 800a846:	6962      	ldrpl	r2, [r4, #20]
 800a848:	60a2      	str	r2, [r4, #8]
 800a84a:	e7f4      	b.n	800a836 <__swsetup_r+0x8e>
 800a84c:	2000      	movs	r0, #0
 800a84e:	e7f7      	b.n	800a840 <__swsetup_r+0x98>
 800a850:	200000b0 	.word	0x200000b0

0800a854 <__swhatbuf_r>:
 800a854:	b570      	push	{r4, r5, r6, lr}
 800a856:	460c      	mov	r4, r1
 800a858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a85c:	b096      	sub	sp, #88	@ 0x58
 800a85e:	4615      	mov	r5, r2
 800a860:	2900      	cmp	r1, #0
 800a862:	461e      	mov	r6, r3
 800a864:	da0c      	bge.n	800a880 <__swhatbuf_r+0x2c>
 800a866:	89a3      	ldrh	r3, [r4, #12]
 800a868:	2100      	movs	r1, #0
 800a86a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a86e:	bf14      	ite	ne
 800a870:	2340      	movne	r3, #64	@ 0x40
 800a872:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a876:	2000      	movs	r0, #0
 800a878:	6031      	str	r1, [r6, #0]
 800a87a:	602b      	str	r3, [r5, #0]
 800a87c:	b016      	add	sp, #88	@ 0x58
 800a87e:	bd70      	pop	{r4, r5, r6, pc}
 800a880:	466a      	mov	r2, sp
 800a882:	f000 f88d 	bl	800a9a0 <_fstat_r>
 800a886:	2800      	cmp	r0, #0
 800a888:	dbed      	blt.n	800a866 <__swhatbuf_r+0x12>
 800a88a:	9901      	ldr	r1, [sp, #4]
 800a88c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a890:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a894:	4259      	negs	r1, r3
 800a896:	4159      	adcs	r1, r3
 800a898:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a89c:	e7eb      	b.n	800a876 <__swhatbuf_r+0x22>

0800a89e <__smakebuf_r>:
 800a89e:	898b      	ldrh	r3, [r1, #12]
 800a8a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8a2:	079d      	lsls	r5, r3, #30
 800a8a4:	4606      	mov	r6, r0
 800a8a6:	460c      	mov	r4, r1
 800a8a8:	d507      	bpl.n	800a8ba <__smakebuf_r+0x1c>
 800a8aa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a8ae:	6023      	str	r3, [r4, #0]
 800a8b0:	6123      	str	r3, [r4, #16]
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	6163      	str	r3, [r4, #20]
 800a8b6:	b003      	add	sp, #12
 800a8b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8ba:	ab01      	add	r3, sp, #4
 800a8bc:	466a      	mov	r2, sp
 800a8be:	f7ff ffc9 	bl	800a854 <__swhatbuf_r>
 800a8c2:	9f00      	ldr	r7, [sp, #0]
 800a8c4:	4605      	mov	r5, r0
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	4639      	mov	r1, r7
 800a8ca:	f7ff fa19 	bl	8009d00 <_malloc_r>
 800a8ce:	b948      	cbnz	r0, 800a8e4 <__smakebuf_r+0x46>
 800a8d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8d4:	059a      	lsls	r2, r3, #22
 800a8d6:	d4ee      	bmi.n	800a8b6 <__smakebuf_r+0x18>
 800a8d8:	f023 0303 	bic.w	r3, r3, #3
 800a8dc:	f043 0302 	orr.w	r3, r3, #2
 800a8e0:	81a3      	strh	r3, [r4, #12]
 800a8e2:	e7e2      	b.n	800a8aa <__smakebuf_r+0xc>
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	6020      	str	r0, [r4, #0]
 800a8e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8ec:	81a3      	strh	r3, [r4, #12]
 800a8ee:	9b01      	ldr	r3, [sp, #4]
 800a8f0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a8f4:	b15b      	cbz	r3, 800a90e <__smakebuf_r+0x70>
 800a8f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	f000 f862 	bl	800a9c4 <_isatty_r>
 800a900:	b128      	cbz	r0, 800a90e <__smakebuf_r+0x70>
 800a902:	89a3      	ldrh	r3, [r4, #12]
 800a904:	f023 0303 	bic.w	r3, r3, #3
 800a908:	f043 0301 	orr.w	r3, r3, #1
 800a90c:	81a3      	strh	r3, [r4, #12]
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	431d      	orrs	r5, r3
 800a912:	81a5      	strh	r5, [r4, #12]
 800a914:	e7cf      	b.n	800a8b6 <__smakebuf_r+0x18>

0800a916 <_putc_r>:
 800a916:	b570      	push	{r4, r5, r6, lr}
 800a918:	460d      	mov	r5, r1
 800a91a:	4614      	mov	r4, r2
 800a91c:	4606      	mov	r6, r0
 800a91e:	b118      	cbz	r0, 800a928 <_putc_r+0x12>
 800a920:	6a03      	ldr	r3, [r0, #32]
 800a922:	b90b      	cbnz	r3, 800a928 <_putc_r+0x12>
 800a924:	f7fe f90e 	bl	8008b44 <__sinit>
 800a928:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a92a:	07d8      	lsls	r0, r3, #31
 800a92c:	d405      	bmi.n	800a93a <_putc_r+0x24>
 800a92e:	89a3      	ldrh	r3, [r4, #12]
 800a930:	0599      	lsls	r1, r3, #22
 800a932:	d402      	bmi.n	800a93a <_putc_r+0x24>
 800a934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a936:	f7fe f9ea 	bl	8008d0e <__retarget_lock_acquire_recursive>
 800a93a:	68a3      	ldr	r3, [r4, #8]
 800a93c:	3b01      	subs	r3, #1
 800a93e:	2b00      	cmp	r3, #0
 800a940:	60a3      	str	r3, [r4, #8]
 800a942:	da05      	bge.n	800a950 <_putc_r+0x3a>
 800a944:	69a2      	ldr	r2, [r4, #24]
 800a946:	4293      	cmp	r3, r2
 800a948:	db12      	blt.n	800a970 <_putc_r+0x5a>
 800a94a:	b2eb      	uxtb	r3, r5
 800a94c:	2b0a      	cmp	r3, #10
 800a94e:	d00f      	beq.n	800a970 <_putc_r+0x5a>
 800a950:	6823      	ldr	r3, [r4, #0]
 800a952:	1c5a      	adds	r2, r3, #1
 800a954:	6022      	str	r2, [r4, #0]
 800a956:	701d      	strb	r5, [r3, #0]
 800a958:	b2ed      	uxtb	r5, r5
 800a95a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a95c:	07da      	lsls	r2, r3, #31
 800a95e:	d405      	bmi.n	800a96c <_putc_r+0x56>
 800a960:	89a3      	ldrh	r3, [r4, #12]
 800a962:	059b      	lsls	r3, r3, #22
 800a964:	d402      	bmi.n	800a96c <_putc_r+0x56>
 800a966:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a968:	f7fe f9d2 	bl	8008d10 <__retarget_lock_release_recursive>
 800a96c:	4628      	mov	r0, r5
 800a96e:	bd70      	pop	{r4, r5, r6, pc}
 800a970:	4629      	mov	r1, r5
 800a972:	4622      	mov	r2, r4
 800a974:	4630      	mov	r0, r6
 800a976:	f7ff fed9 	bl	800a72c <__swbuf_r>
 800a97a:	4605      	mov	r5, r0
 800a97c:	e7ed      	b.n	800a95a <_putc_r+0x44>
	...

0800a980 <_close_r>:
 800a980:	b538      	push	{r3, r4, r5, lr}
 800a982:	2300      	movs	r3, #0
 800a984:	4d05      	ldr	r5, [pc, #20]	@ (800a99c <_close_r+0x1c>)
 800a986:	4604      	mov	r4, r0
 800a988:	4608      	mov	r0, r1
 800a98a:	602b      	str	r3, [r5, #0]
 800a98c:	f000 fa36 	bl	800adfc <_close>
 800a990:	1c43      	adds	r3, r0, #1
 800a992:	d102      	bne.n	800a99a <_close_r+0x1a>
 800a994:	682b      	ldr	r3, [r5, #0]
 800a996:	b103      	cbz	r3, 800a99a <_close_r+0x1a>
 800a998:	6023      	str	r3, [r4, #0]
 800a99a:	bd38      	pop	{r3, r4, r5, pc}
 800a99c:	20001024 	.word	0x20001024

0800a9a0 <_fstat_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	4d06      	ldr	r5, [pc, #24]	@ (800a9c0 <_fstat_r+0x20>)
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	4608      	mov	r0, r1
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	602b      	str	r3, [r5, #0]
 800a9ae:	f000 fa6a 	bl	800ae86 <_fstat>
 800a9b2:	1c43      	adds	r3, r0, #1
 800a9b4:	d102      	bne.n	800a9bc <_fstat_r+0x1c>
 800a9b6:	682b      	ldr	r3, [r5, #0]
 800a9b8:	b103      	cbz	r3, 800a9bc <_fstat_r+0x1c>
 800a9ba:	6023      	str	r3, [r4, #0]
 800a9bc:	bd38      	pop	{r3, r4, r5, pc}
 800a9be:	bf00      	nop
 800a9c0:	20001024 	.word	0x20001024

0800a9c4 <_isatty_r>:
 800a9c4:	b538      	push	{r3, r4, r5, lr}
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	4d05      	ldr	r5, [pc, #20]	@ (800a9e0 <_isatty_r+0x1c>)
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	4608      	mov	r0, r1
 800a9ce:	602b      	str	r3, [r5, #0]
 800a9d0:	f000 fbc8 	bl	800b164 <_isatty>
 800a9d4:	1c43      	adds	r3, r0, #1
 800a9d6:	d102      	bne.n	800a9de <_isatty_r+0x1a>
 800a9d8:	682b      	ldr	r3, [r5, #0]
 800a9da:	b103      	cbz	r3, 800a9de <_isatty_r+0x1a>
 800a9dc:	6023      	str	r3, [r4, #0]
 800a9de:	bd38      	pop	{r3, r4, r5, pc}
 800a9e0:	20001024 	.word	0x20001024

0800a9e4 <_lseek_r>:
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	4d06      	ldr	r5, [pc, #24]	@ (800aa04 <_lseek_r+0x20>)
 800a9ea:	4608      	mov	r0, r1
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	602a      	str	r2, [r5, #0]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	f000 f9c3 	bl	800ad7e <_lseek>
 800a9f8:	1c43      	adds	r3, r0, #1
 800a9fa:	d102      	bne.n	800aa02 <_lseek_r+0x1e>
 800a9fc:	682b      	ldr	r3, [r5, #0]
 800a9fe:	b103      	cbz	r3, 800aa02 <_lseek_r+0x1e>
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	bd38      	pop	{r3, r4, r5, pc}
 800aa04:	20001024 	.word	0x20001024

0800aa08 <_read_r>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	4d06      	ldr	r5, [pc, #24]	@ (800aa28 <_read_r+0x20>)
 800aa0e:	4608      	mov	r0, r1
 800aa10:	4611      	mov	r1, r2
 800aa12:	2200      	movs	r2, #0
 800aa14:	602a      	str	r2, [r5, #0]
 800aa16:	461a      	mov	r2, r3
 800aa18:	f000 f95b 	bl	800acd2 <_read>
 800aa1c:	1c43      	adds	r3, r0, #1
 800aa1e:	d102      	bne.n	800aa26 <_read_r+0x1e>
 800aa20:	682b      	ldr	r3, [r5, #0]
 800aa22:	b103      	cbz	r3, 800aa26 <_read_r+0x1e>
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	bd38      	pop	{r3, r4, r5, pc}
 800aa28:	20001024 	.word	0x20001024

0800aa2c <_sbrk_r>:
 800aa2c:	b538      	push	{r3, r4, r5, lr}
 800aa2e:	2300      	movs	r3, #0
 800aa30:	4d05      	ldr	r5, [pc, #20]	@ (800aa48 <_sbrk_r+0x1c>)
 800aa32:	4604      	mov	r4, r0
 800aa34:	4608      	mov	r0, r1
 800aa36:	602b      	str	r3, [r5, #0]
 800aa38:	f7fd fb68 	bl	800810c <_sbrk>
 800aa3c:	1c43      	adds	r3, r0, #1
 800aa3e:	d102      	bne.n	800aa46 <_sbrk_r+0x1a>
 800aa40:	682b      	ldr	r3, [r5, #0]
 800aa42:	b103      	cbz	r3, 800aa46 <_sbrk_r+0x1a>
 800aa44:	6023      	str	r3, [r4, #0]
 800aa46:	bd38      	pop	{r3, r4, r5, pc}
 800aa48:	20001024 	.word	0x20001024

0800aa4c <_write_r>:
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	4604      	mov	r4, r0
 800aa50:	4d06      	ldr	r5, [pc, #24]	@ (800aa6c <_write_r+0x20>)
 800aa52:	4608      	mov	r0, r1
 800aa54:	4611      	mov	r1, r2
 800aa56:	2200      	movs	r2, #0
 800aa58:	602a      	str	r2, [r5, #0]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	f000 f9a1 	bl	800ada2 <_write>
 800aa60:	1c43      	adds	r3, r0, #1
 800aa62:	d102      	bne.n	800aa6a <_write_r+0x1e>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	b103      	cbz	r3, 800aa6a <_write_r+0x1e>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	20001024 	.word	0x20001024

0800aa70 <abort>:
 800aa70:	2006      	movs	r0, #6
 800aa72:	b508      	push	{r3, lr}
 800aa74:	f000 f8aa 	bl	800abcc <raise>
 800aa78:	2001      	movs	r0, #1
 800aa7a:	f000 f8c3 	bl	800ac04 <_exit>

0800aa7e <_calloc_r>:
 800aa7e:	b570      	push	{r4, r5, r6, lr}
 800aa80:	fba1 5402 	umull	r5, r4, r1, r2
 800aa84:	b93c      	cbnz	r4, 800aa96 <_calloc_r+0x18>
 800aa86:	4629      	mov	r1, r5
 800aa88:	f7ff f93a 	bl	8009d00 <_malloc_r>
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	b928      	cbnz	r0, 800aa9c <_calloc_r+0x1e>
 800aa90:	2600      	movs	r6, #0
 800aa92:	4630      	mov	r0, r6
 800aa94:	bd70      	pop	{r4, r5, r6, pc}
 800aa96:	220c      	movs	r2, #12
 800aa98:	6002      	str	r2, [r0, #0]
 800aa9a:	e7f9      	b.n	800aa90 <_calloc_r+0x12>
 800aa9c:	462a      	mov	r2, r5
 800aa9e:	4621      	mov	r1, r4
 800aaa0:	f7fe f8fe 	bl	8008ca0 <memset>
 800aaa4:	e7f5      	b.n	800aa92 <_calloc_r+0x14>
	...

0800aaa8 <_free_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4605      	mov	r5, r0
 800aaac:	2900      	cmp	r1, #0
 800aaae:	d041      	beq.n	800ab34 <_free_r+0x8c>
 800aab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aab4:	1f0c      	subs	r4, r1, #4
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	bfb8      	it	lt
 800aaba:	18e4      	addlt	r4, r4, r3
 800aabc:	f7ff fa4c 	bl	8009f58 <__malloc_lock>
 800aac0:	4a1d      	ldr	r2, [pc, #116]	@ (800ab38 <_free_r+0x90>)
 800aac2:	6813      	ldr	r3, [r2, #0]
 800aac4:	b933      	cbnz	r3, 800aad4 <_free_r+0x2c>
 800aac6:	6063      	str	r3, [r4, #4]
 800aac8:	6014      	str	r4, [r2, #0]
 800aaca:	4628      	mov	r0, r5
 800aacc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aad0:	f7ff ba48 	b.w	8009f64 <__malloc_unlock>
 800aad4:	42a3      	cmp	r3, r4
 800aad6:	d908      	bls.n	800aaea <_free_r+0x42>
 800aad8:	6820      	ldr	r0, [r4, #0]
 800aada:	1821      	adds	r1, r4, r0
 800aadc:	428b      	cmp	r3, r1
 800aade:	bf01      	itttt	eq
 800aae0:	6819      	ldreq	r1, [r3, #0]
 800aae2:	685b      	ldreq	r3, [r3, #4]
 800aae4:	1809      	addeq	r1, r1, r0
 800aae6:	6021      	streq	r1, [r4, #0]
 800aae8:	e7ed      	b.n	800aac6 <_free_r+0x1e>
 800aaea:	461a      	mov	r2, r3
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	b10b      	cbz	r3, 800aaf4 <_free_r+0x4c>
 800aaf0:	42a3      	cmp	r3, r4
 800aaf2:	d9fa      	bls.n	800aaea <_free_r+0x42>
 800aaf4:	6811      	ldr	r1, [r2, #0]
 800aaf6:	1850      	adds	r0, r2, r1
 800aaf8:	42a0      	cmp	r0, r4
 800aafa:	d10b      	bne.n	800ab14 <_free_r+0x6c>
 800aafc:	6820      	ldr	r0, [r4, #0]
 800aafe:	4401      	add	r1, r0
 800ab00:	1850      	adds	r0, r2, r1
 800ab02:	6011      	str	r1, [r2, #0]
 800ab04:	4283      	cmp	r3, r0
 800ab06:	d1e0      	bne.n	800aaca <_free_r+0x22>
 800ab08:	6818      	ldr	r0, [r3, #0]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	4408      	add	r0, r1
 800ab0e:	6053      	str	r3, [r2, #4]
 800ab10:	6010      	str	r0, [r2, #0]
 800ab12:	e7da      	b.n	800aaca <_free_r+0x22>
 800ab14:	d902      	bls.n	800ab1c <_free_r+0x74>
 800ab16:	230c      	movs	r3, #12
 800ab18:	602b      	str	r3, [r5, #0]
 800ab1a:	e7d6      	b.n	800aaca <_free_r+0x22>
 800ab1c:	6820      	ldr	r0, [r4, #0]
 800ab1e:	1821      	adds	r1, r4, r0
 800ab20:	428b      	cmp	r3, r1
 800ab22:	bf02      	ittt	eq
 800ab24:	6819      	ldreq	r1, [r3, #0]
 800ab26:	685b      	ldreq	r3, [r3, #4]
 800ab28:	1809      	addeq	r1, r1, r0
 800ab2a:	6063      	str	r3, [r4, #4]
 800ab2c:	bf08      	it	eq
 800ab2e:	6021      	streq	r1, [r4, #0]
 800ab30:	6054      	str	r4, [r2, #4]
 800ab32:	e7ca      	b.n	800aaca <_free_r+0x22>
 800ab34:	bd38      	pop	{r3, r4, r5, pc}
 800ab36:	bf00      	nop
 800ab38:	20001020 	.word	0x20001020

0800ab3c <__ascii_mbtowc>:
 800ab3c:	b082      	sub	sp, #8
 800ab3e:	b901      	cbnz	r1, 800ab42 <__ascii_mbtowc+0x6>
 800ab40:	a901      	add	r1, sp, #4
 800ab42:	b142      	cbz	r2, 800ab56 <__ascii_mbtowc+0x1a>
 800ab44:	b14b      	cbz	r3, 800ab5a <__ascii_mbtowc+0x1e>
 800ab46:	7813      	ldrb	r3, [r2, #0]
 800ab48:	600b      	str	r3, [r1, #0]
 800ab4a:	7812      	ldrb	r2, [r2, #0]
 800ab4c:	1e10      	subs	r0, r2, #0
 800ab4e:	bf18      	it	ne
 800ab50:	2001      	movne	r0, #1
 800ab52:	b002      	add	sp, #8
 800ab54:	4770      	bx	lr
 800ab56:	4610      	mov	r0, r2
 800ab58:	e7fb      	b.n	800ab52 <__ascii_mbtowc+0x16>
 800ab5a:	f06f 0001 	mvn.w	r0, #1
 800ab5e:	e7f8      	b.n	800ab52 <__ascii_mbtowc+0x16>

0800ab60 <__ascii_wctomb>:
 800ab60:	4603      	mov	r3, r0
 800ab62:	4608      	mov	r0, r1
 800ab64:	b141      	cbz	r1, 800ab78 <__ascii_wctomb+0x18>
 800ab66:	2aff      	cmp	r2, #255	@ 0xff
 800ab68:	d904      	bls.n	800ab74 <__ascii_wctomb+0x14>
 800ab6a:	228a      	movs	r2, #138	@ 0x8a
 800ab6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	4770      	bx	lr
 800ab74:	2001      	movs	r0, #1
 800ab76:	700a      	strb	r2, [r1, #0]
 800ab78:	4770      	bx	lr

0800ab7a <_raise_r>:
 800ab7a:	291f      	cmp	r1, #31
 800ab7c:	b538      	push	{r3, r4, r5, lr}
 800ab7e:	4605      	mov	r5, r0
 800ab80:	460c      	mov	r4, r1
 800ab82:	d904      	bls.n	800ab8e <_raise_r+0x14>
 800ab84:	2316      	movs	r3, #22
 800ab86:	6003      	str	r3, [r0, #0]
 800ab88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab8c:	bd38      	pop	{r3, r4, r5, pc}
 800ab8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab90:	b112      	cbz	r2, 800ab98 <_raise_r+0x1e>
 800ab92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab96:	b94b      	cbnz	r3, 800abac <_raise_r+0x32>
 800ab98:	4628      	mov	r0, r5
 800ab9a:	f000 f831 	bl	800ac00 <_getpid_r>
 800ab9e:	4622      	mov	r2, r4
 800aba0:	4601      	mov	r1, r0
 800aba2:	4628      	mov	r0, r5
 800aba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aba8:	f000 b818 	b.w	800abdc <_kill_r>
 800abac:	2b01      	cmp	r3, #1
 800abae:	d00a      	beq.n	800abc6 <_raise_r+0x4c>
 800abb0:	1c59      	adds	r1, r3, #1
 800abb2:	d103      	bne.n	800abbc <_raise_r+0x42>
 800abb4:	2316      	movs	r3, #22
 800abb6:	6003      	str	r3, [r0, #0]
 800abb8:	2001      	movs	r0, #1
 800abba:	e7e7      	b.n	800ab8c <_raise_r+0x12>
 800abbc:	2100      	movs	r1, #0
 800abbe:	4620      	mov	r0, r4
 800abc0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800abc4:	4798      	blx	r3
 800abc6:	2000      	movs	r0, #0
 800abc8:	e7e0      	b.n	800ab8c <_raise_r+0x12>
	...

0800abcc <raise>:
 800abcc:	4b02      	ldr	r3, [pc, #8]	@ (800abd8 <raise+0xc>)
 800abce:	4601      	mov	r1, r0
 800abd0:	6818      	ldr	r0, [r3, #0]
 800abd2:	f7ff bfd2 	b.w	800ab7a <_raise_r>
 800abd6:	bf00      	nop
 800abd8:	200000b0 	.word	0x200000b0

0800abdc <_kill_r>:
 800abdc:	b538      	push	{r3, r4, r5, lr}
 800abde:	2300      	movs	r3, #0
 800abe0:	4d06      	ldr	r5, [pc, #24]	@ (800abfc <_kill_r+0x20>)
 800abe2:	4604      	mov	r4, r0
 800abe4:	4608      	mov	r0, r1
 800abe6:	4611      	mov	r1, r2
 800abe8:	602b      	str	r3, [r5, #0]
 800abea:	f000 f829 	bl	800ac40 <_kill>
 800abee:	1c43      	adds	r3, r0, #1
 800abf0:	d102      	bne.n	800abf8 <_kill_r+0x1c>
 800abf2:	682b      	ldr	r3, [r5, #0]
 800abf4:	b103      	cbz	r3, 800abf8 <_kill_r+0x1c>
 800abf6:	6023      	str	r3, [r4, #0]
 800abf8:	bd38      	pop	{r3, r4, r5, pc}
 800abfa:	bf00      	nop
 800abfc:	20001024 	.word	0x20001024

0800ac00 <_getpid_r>:
 800ac00:	f000 b91e 	b.w	800ae40 <_getpid>

0800ac04 <_exit>:
 800ac04:	4601      	mov	r1, r0
 800ac06:	4a03      	ldr	r2, [pc, #12]	@ (800ac14 <_exit+0x10>)
 800ac08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac0c:	b508      	push	{r3, lr}
 800ac0e:	f000 f803 	bl	800ac18 <_kill_shared>
 800ac12:	bf00      	nop
 800ac14:	00020026 	.word	0x00020026

0800ac18 <_kill_shared>:
 800ac18:	b507      	push	{r0, r1, r2, lr}
 800ac1a:	e9cd 2100 	strd	r2, r1, [sp]
 800ac1e:	f000 fa29 	bl	800b074 <_has_ext_exit_extended>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	bf0c      	ite	eq
 800ac26:	2418      	moveq	r4, #24
 800ac28:	2420      	movne	r4, #32
 800ac2a:	f000 fa23 	bl	800b074 <_has_ext_exit_extended>
 800ac2e:	b120      	cbz	r0, 800ac3a <_kill_shared+0x22>
 800ac30:	466d      	mov	r5, sp
 800ac32:	4620      	mov	r0, r4
 800ac34:	4629      	mov	r1, r5
 800ac36:	beab      	bkpt	0x00ab
 800ac38:	4604      	mov	r4, r0
 800ac3a:	9d00      	ldr	r5, [sp, #0]
 800ac3c:	e7f9      	b.n	800ac32 <_kill_shared+0x1a>
	...

0800ac40 <_kill>:
 800ac40:	2906      	cmp	r1, #6
 800ac42:	b508      	push	{r3, lr}
 800ac44:	bf0c      	ite	eq
 800ac46:	4a02      	ldreq	r2, [pc, #8]	@ (800ac50 <_kill+0x10>)
 800ac48:	4a02      	ldrne	r2, [pc, #8]	@ (800ac54 <_kill+0x14>)
 800ac4a:	f7ff ffe5 	bl	800ac18 <_kill_shared>
 800ac4e:	bf00      	nop
 800ac50:	00020023 	.word	0x00020023
 800ac54:	00020026 	.word	0x00020026

0800ac58 <findslot>:
 800ac58:	4b0a      	ldr	r3, [pc, #40]	@ (800ac84 <findslot+0x2c>)
 800ac5a:	b510      	push	{r4, lr}
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	6818      	ldr	r0, [r3, #0]
 800ac60:	b118      	cbz	r0, 800ac6a <findslot+0x12>
 800ac62:	6a03      	ldr	r3, [r0, #32]
 800ac64:	b90b      	cbnz	r3, 800ac6a <findslot+0x12>
 800ac66:	f7fd ff6d 	bl	8008b44 <__sinit>
 800ac6a:	2c13      	cmp	r4, #19
 800ac6c:	d807      	bhi.n	800ac7e <findslot+0x26>
 800ac6e:	4806      	ldr	r0, [pc, #24]	@ (800ac88 <findslot+0x30>)
 800ac70:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800ac74:	3201      	adds	r2, #1
 800ac76:	d002      	beq.n	800ac7e <findslot+0x26>
 800ac78:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800ac7c:	bd10      	pop	{r4, pc}
 800ac7e:	2000      	movs	r0, #0
 800ac80:	e7fc      	b.n	800ac7c <findslot+0x24>
 800ac82:	bf00      	nop
 800ac84:	200000b0 	.word	0x200000b0
 800ac88:	20001034 	.word	0x20001034

0800ac8c <error>:
 800ac8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8e:	4604      	mov	r4, r0
 800ac90:	2613      	movs	r6, #19
 800ac92:	f7fe f811 	bl	8008cb8 <__errno>
 800ac96:	2700      	movs	r7, #0
 800ac98:	4605      	mov	r5, r0
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	4639      	mov	r1, r7
 800ac9e:	beab      	bkpt	0x00ab
 800aca0:	4606      	mov	r6, r0
 800aca2:	4620      	mov	r0, r4
 800aca4:	602e      	str	r6, [r5, #0]
 800aca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aca8 <checkerror>:
 800aca8:	1c43      	adds	r3, r0, #1
 800acaa:	d101      	bne.n	800acb0 <checkerror+0x8>
 800acac:	f7ff bfee 	b.w	800ac8c <error>
 800acb0:	4770      	bx	lr

0800acb2 <_swiread>:
 800acb2:	b530      	push	{r4, r5, lr}
 800acb4:	b085      	sub	sp, #20
 800acb6:	2406      	movs	r4, #6
 800acb8:	ad01      	add	r5, sp, #4
 800acba:	9203      	str	r2, [sp, #12]
 800acbc:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800acc0:	4620      	mov	r0, r4
 800acc2:	4629      	mov	r1, r5
 800acc4:	beab      	bkpt	0x00ab
 800acc6:	4604      	mov	r4, r0
 800acc8:	4620      	mov	r0, r4
 800acca:	f7ff ffed 	bl	800aca8 <checkerror>
 800acce:	b005      	add	sp, #20
 800acd0:	bd30      	pop	{r4, r5, pc}

0800acd2 <_read>:
 800acd2:	b570      	push	{r4, r5, r6, lr}
 800acd4:	460e      	mov	r6, r1
 800acd6:	4614      	mov	r4, r2
 800acd8:	f7ff ffbe 	bl	800ac58 <findslot>
 800acdc:	4605      	mov	r5, r0
 800acde:	b930      	cbnz	r0, 800acee <_read+0x1c>
 800ace0:	f7fd ffea 	bl	8008cb8 <__errno>
 800ace4:	2309      	movs	r3, #9
 800ace6:	6003      	str	r3, [r0, #0]
 800ace8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800acec:	bd70      	pop	{r4, r5, r6, pc}
 800acee:	4622      	mov	r2, r4
 800acf0:	4631      	mov	r1, r6
 800acf2:	6800      	ldr	r0, [r0, #0]
 800acf4:	f7ff ffdd 	bl	800acb2 <_swiread>
 800acf8:	1c43      	adds	r3, r0, #1
 800acfa:	d0f5      	beq.n	800ace8 <_read+0x16>
 800acfc:	686b      	ldr	r3, [r5, #4]
 800acfe:	1a20      	subs	r0, r4, r0
 800ad00:	4403      	add	r3, r0
 800ad02:	606b      	str	r3, [r5, #4]
 800ad04:	e7f2      	b.n	800acec <_read+0x1a>

0800ad06 <_swilseek>:
 800ad06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad08:	460c      	mov	r4, r1
 800ad0a:	4616      	mov	r6, r2
 800ad0c:	f7ff ffa4 	bl	800ac58 <findslot>
 800ad10:	4605      	mov	r5, r0
 800ad12:	b940      	cbnz	r0, 800ad26 <_swilseek+0x20>
 800ad14:	f7fd ffd0 	bl	8008cb8 <__errno>
 800ad18:	2309      	movs	r3, #9
 800ad1a:	6003      	str	r3, [r0, #0]
 800ad1c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ad20:	4620      	mov	r0, r4
 800ad22:	b003      	add	sp, #12
 800ad24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad26:	2e02      	cmp	r6, #2
 800ad28:	d903      	bls.n	800ad32 <_swilseek+0x2c>
 800ad2a:	f7fd ffc5 	bl	8008cb8 <__errno>
 800ad2e:	2316      	movs	r3, #22
 800ad30:	e7f3      	b.n	800ad1a <_swilseek+0x14>
 800ad32:	2e01      	cmp	r6, #1
 800ad34:	d112      	bne.n	800ad5c <_swilseek+0x56>
 800ad36:	6843      	ldr	r3, [r0, #4]
 800ad38:	18e4      	adds	r4, r4, r3
 800ad3a:	d4f6      	bmi.n	800ad2a <_swilseek+0x24>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	260a      	movs	r6, #10
 800ad40:	466f      	mov	r7, sp
 800ad42:	e9cd 3400 	strd	r3, r4, [sp]
 800ad46:	4630      	mov	r0, r6
 800ad48:	4639      	mov	r1, r7
 800ad4a:	beab      	bkpt	0x00ab
 800ad4c:	4606      	mov	r6, r0
 800ad4e:	4630      	mov	r0, r6
 800ad50:	f7ff ffaa 	bl	800aca8 <checkerror>
 800ad54:	2800      	cmp	r0, #0
 800ad56:	dbe1      	blt.n	800ad1c <_swilseek+0x16>
 800ad58:	606c      	str	r4, [r5, #4]
 800ad5a:	e7e1      	b.n	800ad20 <_swilseek+0x1a>
 800ad5c:	2e02      	cmp	r6, #2
 800ad5e:	6803      	ldr	r3, [r0, #0]
 800ad60:	d1ec      	bne.n	800ad3c <_swilseek+0x36>
 800ad62:	260c      	movs	r6, #12
 800ad64:	466f      	mov	r7, sp
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	4630      	mov	r0, r6
 800ad6a:	4639      	mov	r1, r7
 800ad6c:	beab      	bkpt	0x00ab
 800ad6e:	4606      	mov	r6, r0
 800ad70:	4630      	mov	r0, r6
 800ad72:	f7ff ff99 	bl	800aca8 <checkerror>
 800ad76:	1c43      	adds	r3, r0, #1
 800ad78:	d0d0      	beq.n	800ad1c <_swilseek+0x16>
 800ad7a:	4404      	add	r4, r0
 800ad7c:	e7de      	b.n	800ad3c <_swilseek+0x36>

0800ad7e <_lseek>:
 800ad7e:	f7ff bfc2 	b.w	800ad06 <_swilseek>

0800ad82 <_swiwrite>:
 800ad82:	b530      	push	{r4, r5, lr}
 800ad84:	b085      	sub	sp, #20
 800ad86:	2405      	movs	r4, #5
 800ad88:	ad01      	add	r5, sp, #4
 800ad8a:	9203      	str	r2, [sp, #12]
 800ad8c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800ad90:	4620      	mov	r0, r4
 800ad92:	4629      	mov	r1, r5
 800ad94:	beab      	bkpt	0x00ab
 800ad96:	4604      	mov	r4, r0
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f7ff ff85 	bl	800aca8 <checkerror>
 800ad9e:	b005      	add	sp, #20
 800ada0:	bd30      	pop	{r4, r5, pc}

0800ada2 <_write>:
 800ada2:	b570      	push	{r4, r5, r6, lr}
 800ada4:	460e      	mov	r6, r1
 800ada6:	4615      	mov	r5, r2
 800ada8:	f7ff ff56 	bl	800ac58 <findslot>
 800adac:	4604      	mov	r4, r0
 800adae:	b930      	cbnz	r0, 800adbe <_write+0x1c>
 800adb0:	f7fd ff82 	bl	8008cb8 <__errno>
 800adb4:	2309      	movs	r3, #9
 800adb6:	6003      	str	r3, [r0, #0]
 800adb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adbc:	bd70      	pop	{r4, r5, r6, pc}
 800adbe:	462a      	mov	r2, r5
 800adc0:	4631      	mov	r1, r6
 800adc2:	6800      	ldr	r0, [r0, #0]
 800adc4:	f7ff ffdd 	bl	800ad82 <_swiwrite>
 800adc8:	1e03      	subs	r3, r0, #0
 800adca:	dbf5      	blt.n	800adb8 <_write+0x16>
 800adcc:	6862      	ldr	r2, [r4, #4]
 800adce:	1ae8      	subs	r0, r5, r3
 800add0:	42ab      	cmp	r3, r5
 800add2:	4402      	add	r2, r0
 800add4:	6062      	str	r2, [r4, #4]
 800add6:	d1f1      	bne.n	800adbc <_write+0x1a>
 800add8:	2000      	movs	r0, #0
 800adda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800adde:	f7ff bf55 	b.w	800ac8c <error>

0800ade2 <_swiclose>:
 800ade2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ade4:	2402      	movs	r4, #2
 800ade6:	ad01      	add	r5, sp, #4
 800ade8:	9001      	str	r0, [sp, #4]
 800adea:	4620      	mov	r0, r4
 800adec:	4629      	mov	r1, r5
 800adee:	beab      	bkpt	0x00ab
 800adf0:	4604      	mov	r4, r0
 800adf2:	4620      	mov	r0, r4
 800adf4:	f7ff ff58 	bl	800aca8 <checkerror>
 800adf8:	b003      	add	sp, #12
 800adfa:	bd30      	pop	{r4, r5, pc}

0800adfc <_close>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	4605      	mov	r5, r0
 800ae00:	f7ff ff2a 	bl	800ac58 <findslot>
 800ae04:	4604      	mov	r4, r0
 800ae06:	b930      	cbnz	r0, 800ae16 <_close+0x1a>
 800ae08:	f7fd ff56 	bl	8008cb8 <__errno>
 800ae0c:	2309      	movs	r3, #9
 800ae0e:	6003      	str	r3, [r0, #0]
 800ae10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae14:	bd38      	pop	{r3, r4, r5, pc}
 800ae16:	3d01      	subs	r5, #1
 800ae18:	2d01      	cmp	r5, #1
 800ae1a:	d809      	bhi.n	800ae30 <_close+0x34>
 800ae1c:	4b07      	ldr	r3, [pc, #28]	@ (800ae3c <_close+0x40>)
 800ae1e:	689a      	ldr	r2, [r3, #8]
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d104      	bne.n	800ae30 <_close+0x34>
 800ae26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae2a:	2000      	movs	r0, #0
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	e7f1      	b.n	800ae14 <_close+0x18>
 800ae30:	6820      	ldr	r0, [r4, #0]
 800ae32:	f7ff ffd6 	bl	800ade2 <_swiclose>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d0f5      	beq.n	800ae26 <_close+0x2a>
 800ae3a:	e7eb      	b.n	800ae14 <_close+0x18>
 800ae3c:	20001034 	.word	0x20001034

0800ae40 <_getpid>:
 800ae40:	2001      	movs	r0, #1
 800ae42:	4770      	bx	lr

0800ae44 <_swistat>:
 800ae44:	b570      	push	{r4, r5, r6, lr}
 800ae46:	460c      	mov	r4, r1
 800ae48:	f7ff ff06 	bl	800ac58 <findslot>
 800ae4c:	4605      	mov	r5, r0
 800ae4e:	b930      	cbnz	r0, 800ae5e <_swistat+0x1a>
 800ae50:	f7fd ff32 	bl	8008cb8 <__errno>
 800ae54:	2309      	movs	r3, #9
 800ae56:	6003      	str	r3, [r0, #0]
 800ae58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae5c:	bd70      	pop	{r4, r5, r6, pc}
 800ae5e:	6863      	ldr	r3, [r4, #4]
 800ae60:	260c      	movs	r6, #12
 800ae62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ae66:	6063      	str	r3, [r4, #4]
 800ae68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae6c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ae6e:	4630      	mov	r0, r6
 800ae70:	4629      	mov	r1, r5
 800ae72:	beab      	bkpt	0x00ab
 800ae74:	4605      	mov	r5, r0
 800ae76:	4628      	mov	r0, r5
 800ae78:	f7ff ff16 	bl	800aca8 <checkerror>
 800ae7c:	1c43      	adds	r3, r0, #1
 800ae7e:	d0eb      	beq.n	800ae58 <_swistat+0x14>
 800ae80:	6120      	str	r0, [r4, #16]
 800ae82:	2000      	movs	r0, #0
 800ae84:	e7ea      	b.n	800ae5c <_swistat+0x18>

0800ae86 <_fstat>:
 800ae86:	460b      	mov	r3, r1
 800ae88:	2258      	movs	r2, #88	@ 0x58
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	b510      	push	{r4, lr}
 800ae8e:	4604      	mov	r4, r0
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fd ff05 	bl	8008ca0 <memset>
 800ae96:	4601      	mov	r1, r0
 800ae98:	4620      	mov	r0, r4
 800ae9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae9e:	f7ff bfd1 	b.w	800ae44 <_swistat>

0800aea2 <_stat>:
 800aea2:	b538      	push	{r3, r4, r5, lr}
 800aea4:	460d      	mov	r5, r1
 800aea6:	4604      	mov	r4, r0
 800aea8:	2258      	movs	r2, #88	@ 0x58
 800aeaa:	2100      	movs	r1, #0
 800aeac:	4628      	mov	r0, r5
 800aeae:	f7fd fef7 	bl	8008ca0 <memset>
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	f000 f811 	bl	800aedc <_swiopen>
 800aeba:	1c43      	adds	r3, r0, #1
 800aebc:	4604      	mov	r4, r0
 800aebe:	d00b      	beq.n	800aed8 <_stat+0x36>
 800aec0:	686b      	ldr	r3, [r5, #4]
 800aec2:	4629      	mov	r1, r5
 800aec4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800aec8:	606b      	str	r3, [r5, #4]
 800aeca:	f7ff ffbb 	bl	800ae44 <_swistat>
 800aece:	4605      	mov	r5, r0
 800aed0:	4620      	mov	r0, r4
 800aed2:	462c      	mov	r4, r5
 800aed4:	f7ff ff92 	bl	800adfc <_close>
 800aed8:	4620      	mov	r0, r4
 800aeda:	bd38      	pop	{r3, r4, r5, pc}

0800aedc <_swiopen>:
 800aedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee0:	4682      	mov	sl, r0
 800aee2:	b096      	sub	sp, #88	@ 0x58
 800aee4:	460e      	mov	r6, r1
 800aee6:	2400      	movs	r4, #0
 800aee8:	4f27      	ldr	r7, [pc, #156]	@ (800af88 <_swiopen+0xac>)
 800aeea:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800aeee:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800aef2:	3301      	adds	r3, #1
 800aef4:	d00c      	beq.n	800af10 <_swiopen+0x34>
 800aef6:	3401      	adds	r4, #1
 800aef8:	2c14      	cmp	r4, #20
 800aefa:	d1f6      	bne.n	800aeea <_swiopen+0xe>
 800aefc:	f7fd fedc 	bl	8008cb8 <__errno>
 800af00:	2318      	movs	r3, #24
 800af02:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800af06:	6003      	str	r3, [r0, #0]
 800af08:	4620      	mov	r0, r4
 800af0a:	b016      	add	sp, #88	@ 0x58
 800af0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af10:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800af14:	46e9      	mov	r9, sp
 800af16:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800af1a:	d109      	bne.n	800af30 <_swiopen+0x54>
 800af1c:	4649      	mov	r1, r9
 800af1e:	4650      	mov	r0, sl
 800af20:	f7ff ffbf 	bl	800aea2 <_stat>
 800af24:	3001      	adds	r0, #1
 800af26:	d003      	beq.n	800af30 <_swiopen+0x54>
 800af28:	f7fd fec6 	bl	8008cb8 <__errno>
 800af2c:	2311      	movs	r3, #17
 800af2e:	e7e8      	b.n	800af02 <_swiopen+0x26>
 800af30:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800af34:	f240 6301 	movw	r3, #1537	@ 0x601
 800af38:	07b2      	lsls	r2, r6, #30
 800af3a:	4650      	mov	r0, sl
 800af3c:	f8cd a000 	str.w	sl, [sp]
 800af40:	bf48      	it	mi
 800af42:	f045 0502 	orrmi.w	r5, r5, #2
 800af46:	421e      	tst	r6, r3
 800af48:	bf18      	it	ne
 800af4a:	f045 0504 	orrne.w	r5, r5, #4
 800af4e:	0733      	lsls	r3, r6, #28
 800af50:	bf44      	itt	mi
 800af52:	f025 0504 	bicmi.w	r5, r5, #4
 800af56:	f045 0508 	orrmi.w	r5, r5, #8
 800af5a:	f7f5 f98d 	bl	8000278 <strlen>
 800af5e:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800af62:	2501      	movs	r5, #1
 800af64:	4628      	mov	r0, r5
 800af66:	4649      	mov	r1, r9
 800af68:	beab      	bkpt	0x00ab
 800af6a:	4605      	mov	r5, r0
 800af6c:	2d00      	cmp	r5, #0
 800af6e:	db05      	blt.n	800af7c <_swiopen+0xa0>
 800af70:	2300      	movs	r3, #0
 800af72:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800af76:	4447      	add	r7, r8
 800af78:	607b      	str	r3, [r7, #4]
 800af7a:	e7c5      	b.n	800af08 <_swiopen+0x2c>
 800af7c:	4628      	mov	r0, r5
 800af7e:	f7ff fe85 	bl	800ac8c <error>
 800af82:	4604      	mov	r4, r0
 800af84:	e7c0      	b.n	800af08 <_swiopen+0x2c>
 800af86:	bf00      	nop
 800af88:	20001034 	.word	0x20001034

0800af8c <_get_semihosting_exts>:
 800af8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af90:	4606      	mov	r6, r0
 800af92:	4615      	mov	r5, r2
 800af94:	460f      	mov	r7, r1
 800af96:	4829      	ldr	r0, [pc, #164]	@ (800b03c <_get_semihosting_exts+0xb0>)
 800af98:	2100      	movs	r1, #0
 800af9a:	f7ff ff9f 	bl	800aedc <_swiopen>
 800af9e:	4604      	mov	r4, r0
 800afa0:	462a      	mov	r2, r5
 800afa2:	2100      	movs	r1, #0
 800afa4:	4630      	mov	r0, r6
 800afa6:	f7fd fe7b 	bl	8008ca0 <memset>
 800afaa:	1c63      	adds	r3, r4, #1
 800afac:	d014      	beq.n	800afd8 <_get_semihosting_exts+0x4c>
 800afae:	4620      	mov	r0, r4
 800afb0:	f04f 080c 	mov.w	r8, #12
 800afb4:	f7ff fe50 	bl	800ac58 <findslot>
 800afb8:	4681      	mov	r9, r0
 800afba:	4640      	mov	r0, r8
 800afbc:	4649      	mov	r1, r9
 800afbe:	beab      	bkpt	0x00ab
 800afc0:	4680      	mov	r8, r0
 800afc2:	4640      	mov	r0, r8
 800afc4:	f7ff fe70 	bl	800aca8 <checkerror>
 800afc8:	2803      	cmp	r0, #3
 800afca:	dd02      	ble.n	800afd2 <_get_semihosting_exts+0x46>
 800afcc:	1ec3      	subs	r3, r0, #3
 800afce:	42ab      	cmp	r3, r5
 800afd0:	dc07      	bgt.n	800afe2 <_get_semihosting_exts+0x56>
 800afd2:	4620      	mov	r0, r4
 800afd4:	f7ff ff12 	bl	800adfc <_close>
 800afd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800afdc:	b003      	add	sp, #12
 800afde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afe2:	2204      	movs	r2, #4
 800afe4:	4620      	mov	r0, r4
 800afe6:	eb0d 0102 	add.w	r1, sp, r2
 800afea:	f7ff fe72 	bl	800acd2 <_read>
 800afee:	2803      	cmp	r0, #3
 800aff0:	ddef      	ble.n	800afd2 <_get_semihosting_exts+0x46>
 800aff2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aff6:	2b53      	cmp	r3, #83	@ 0x53
 800aff8:	d1eb      	bne.n	800afd2 <_get_semihosting_exts+0x46>
 800affa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800affe:	2b48      	cmp	r3, #72	@ 0x48
 800b000:	d1e7      	bne.n	800afd2 <_get_semihosting_exts+0x46>
 800b002:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b006:	2b46      	cmp	r3, #70	@ 0x46
 800b008:	d1e3      	bne.n	800afd2 <_get_semihosting_exts+0x46>
 800b00a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b00e:	2b42      	cmp	r3, #66	@ 0x42
 800b010:	d1df      	bne.n	800afd2 <_get_semihosting_exts+0x46>
 800b012:	2201      	movs	r2, #1
 800b014:	4639      	mov	r1, r7
 800b016:	4620      	mov	r0, r4
 800b018:	f7ff fe75 	bl	800ad06 <_swilseek>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	dbd8      	blt.n	800afd2 <_get_semihosting_exts+0x46>
 800b020:	462a      	mov	r2, r5
 800b022:	4631      	mov	r1, r6
 800b024:	4620      	mov	r0, r4
 800b026:	f7ff fe54 	bl	800acd2 <_read>
 800b02a:	4605      	mov	r5, r0
 800b02c:	4620      	mov	r0, r4
 800b02e:	f7ff fee5 	bl	800adfc <_close>
 800b032:	4628      	mov	r0, r5
 800b034:	f7ff fe38 	bl	800aca8 <checkerror>
 800b038:	e7d0      	b.n	800afdc <_get_semihosting_exts+0x50>
 800b03a:	bf00      	nop
 800b03c:	0800c513 	.word	0x0800c513

0800b040 <initialise_semihosting_exts>:
 800b040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b042:	2100      	movs	r1, #0
 800b044:	2201      	movs	r2, #1
 800b046:	4d09      	ldr	r5, [pc, #36]	@ (800b06c <initialise_semihosting_exts+0x2c>)
 800b048:	a801      	add	r0, sp, #4
 800b04a:	4c09      	ldr	r4, [pc, #36]	@ (800b070 <initialise_semihosting_exts+0x30>)
 800b04c:	6029      	str	r1, [r5, #0]
 800b04e:	6022      	str	r2, [r4, #0]
 800b050:	f7ff ff9c 	bl	800af8c <_get_semihosting_exts>
 800b054:	2800      	cmp	r0, #0
 800b056:	dd07      	ble.n	800b068 <initialise_semihosting_exts+0x28>
 800b058:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b05c:	f003 0201 	and.w	r2, r3, #1
 800b060:	f003 0302 	and.w	r3, r3, #2
 800b064:	602a      	str	r2, [r5, #0]
 800b066:	6023      	str	r3, [r4, #0]
 800b068:	b003      	add	sp, #12
 800b06a:	bd30      	pop	{r4, r5, pc}
 800b06c:	20000270 	.word	0x20000270
 800b070:	2000026c 	.word	0x2000026c

0800b074 <_has_ext_exit_extended>:
 800b074:	b510      	push	{r4, lr}
 800b076:	4c04      	ldr	r4, [pc, #16]	@ (800b088 <_has_ext_exit_extended+0x14>)
 800b078:	6823      	ldr	r3, [r4, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	da01      	bge.n	800b082 <_has_ext_exit_extended+0xe>
 800b07e:	f7ff ffdf 	bl	800b040 <initialise_semihosting_exts>
 800b082:	6820      	ldr	r0, [r4, #0]
 800b084:	bd10      	pop	{r4, pc}
 800b086:	bf00      	nop
 800b088:	20000270 	.word	0x20000270

0800b08c <_has_ext_stdout_stderr>:
 800b08c:	b510      	push	{r4, lr}
 800b08e:	4c04      	ldr	r4, [pc, #16]	@ (800b0a0 <_has_ext_stdout_stderr+0x14>)
 800b090:	6823      	ldr	r3, [r4, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	da01      	bge.n	800b09a <_has_ext_stdout_stderr+0xe>
 800b096:	f7ff ffd3 	bl	800b040 <initialise_semihosting_exts>
 800b09a:	6820      	ldr	r0, [r4, #0]
 800b09c:	bd10      	pop	{r4, pc}
 800b09e:	bf00      	nop
 800b0a0:	2000026c 	.word	0x2000026c

0800b0a4 <initialise_monitor_handles>:
 800b0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	2303      	movs	r3, #3
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 800b15c <initialise_monitor_handles+0xb8>
 800b0b0:	2400      	movs	r4, #0
 800b0b2:	af01      	add	r7, sp, #4
 800b0b4:	2501      	movs	r5, #1
 800b0b6:	f8cd 9004 	str.w	r9, [sp, #4]
 800b0ba:	9303      	str	r3, [sp, #12]
 800b0bc:	9402      	str	r4, [sp, #8]
 800b0be:	4628      	mov	r0, r5
 800b0c0:	4639      	mov	r1, r7
 800b0c2:	beab      	bkpt	0x00ab
 800b0c4:	4605      	mov	r5, r0
 800b0c6:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800b160 <initialise_monitor_handles+0xbc>
 800b0ca:	4623      	mov	r3, r4
 800b0cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b0d0:	4c1f      	ldr	r4, [pc, #124]	@ (800b150 <initialise_monitor_handles+0xac>)
 800b0d2:	f8c8 5000 	str.w	r5, [r8]
 800b0d6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	2b14      	cmp	r3, #20
 800b0de:	d1fa      	bne.n	800b0d6 <initialise_monitor_handles+0x32>
 800b0e0:	4d1c      	ldr	r5, [pc, #112]	@ (800b154 <initialise_monitor_handles+0xb0>)
 800b0e2:	f7ff ffd3 	bl	800b08c <_has_ext_stdout_stderr>
 800b0e6:	b1d0      	cbz	r0, 800b11e <initialise_monitor_handles+0x7a>
 800b0e8:	f04f 0a03 	mov.w	sl, #3
 800b0ec:	2304      	movs	r3, #4
 800b0ee:	f8cd 9004 	str.w	r9, [sp, #4]
 800b0f2:	2601      	movs	r6, #1
 800b0f4:	f8cd a00c 	str.w	sl, [sp, #12]
 800b0f8:	9302      	str	r3, [sp, #8]
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	4639      	mov	r1, r7
 800b0fe:	beab      	bkpt	0x00ab
 800b100:	4683      	mov	fp, r0
 800b102:	4b15      	ldr	r3, [pc, #84]	@ (800b158 <initialise_monitor_handles+0xb4>)
 800b104:	f8cd 9004 	str.w	r9, [sp, #4]
 800b108:	f8c3 b000 	str.w	fp, [r3]
 800b10c:	2308      	movs	r3, #8
 800b10e:	f8cd a00c 	str.w	sl, [sp, #12]
 800b112:	9302      	str	r3, [sp, #8]
 800b114:	4630      	mov	r0, r6
 800b116:	4639      	mov	r1, r7
 800b118:	beab      	bkpt	0x00ab
 800b11a:	4606      	mov	r6, r0
 800b11c:	602e      	str	r6, [r5, #0]
 800b11e:	682b      	ldr	r3, [r5, #0]
 800b120:	2600      	movs	r6, #0
 800b122:	3301      	adds	r3, #1
 800b124:	6066      	str	r6, [r4, #4]
 800b126:	bf02      	ittt	eq
 800b128:	4b0b      	ldreq	r3, [pc, #44]	@ (800b158 <initialise_monitor_handles+0xb4>)
 800b12a:	681b      	ldreq	r3, [r3, #0]
 800b12c:	602b      	streq	r3, [r5, #0]
 800b12e:	f8d8 3000 	ldr.w	r3, [r8]
 800b132:	6023      	str	r3, [r4, #0]
 800b134:	f7ff ffaa 	bl	800b08c <_has_ext_stdout_stderr>
 800b138:	b130      	cbz	r0, 800b148 <initialise_monitor_handles+0xa4>
 800b13a:	4b07      	ldr	r3, [pc, #28]	@ (800b158 <initialise_monitor_handles+0xb4>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800b142:	682b      	ldr	r3, [r5, #0]
 800b144:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800b148:	b005      	add	sp, #20
 800b14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b14e:	bf00      	nop
 800b150:	20001034 	.word	0x20001034
 800b154:	20001028 	.word	0x20001028
 800b158:	2000102c 	.word	0x2000102c
 800b15c:	0800c529 	.word	0x0800c529
 800b160:	20001030 	.word	0x20001030

0800b164 <_isatty>:
 800b164:	b570      	push	{r4, r5, r6, lr}
 800b166:	f7ff fd77 	bl	800ac58 <findslot>
 800b16a:	2409      	movs	r4, #9
 800b16c:	4605      	mov	r5, r0
 800b16e:	b920      	cbnz	r0, 800b17a <_isatty+0x16>
 800b170:	f7fd fda2 	bl	8008cb8 <__errno>
 800b174:	6004      	str	r4, [r0, #0]
 800b176:	2000      	movs	r0, #0
 800b178:	bd70      	pop	{r4, r5, r6, pc}
 800b17a:	4620      	mov	r0, r4
 800b17c:	4629      	mov	r1, r5
 800b17e:	beab      	bkpt	0x00ab
 800b180:	4604      	mov	r4, r0
 800b182:	2c01      	cmp	r4, #1
 800b184:	4620      	mov	r0, r4
 800b186:	d0f7      	beq.n	800b178 <_isatty+0x14>
 800b188:	f7fd fd96 	bl	8008cb8 <__errno>
 800b18c:	2513      	movs	r5, #19
 800b18e:	4604      	mov	r4, r0
 800b190:	2600      	movs	r6, #0
 800b192:	4628      	mov	r0, r5
 800b194:	4631      	mov	r1, r6
 800b196:	beab      	bkpt	0x00ab
 800b198:	4605      	mov	r5, r0
 800b19a:	6025      	str	r5, [r4, #0]
 800b19c:	e7eb      	b.n	800b176 <_isatty+0x12>
	...

0800b1a0 <acos>:
 800b1a0:	b538      	push	{r3, r4, r5, lr}
 800b1a2:	ec55 4b10 	vmov	r4, r5, d0
 800b1a6:	ed2d 8b02 	vpush	{d8}
 800b1aa:	f000 f831 	bl	800b210 <__ieee754_acos>
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	462b      	mov	r3, r5
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	eeb0 8a40 	vmov.f32	s16, s0
 800b1ba:	eef0 8a60 	vmov.f32	s17, s1
 800b1be:	f7f5 fcb9 	bl	8000b34 <__aeabi_dcmpun>
 800b1c2:	b9a8      	cbnz	r0, 800b1f0 <acos+0x50>
 800b1c4:	ec45 4b10 	vmov	d0, r4, r5
 800b1c8:	f000 fd0a 	bl	800bbe0 <fabs>
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b200 <acos+0x60>)
 800b1d0:	ec51 0b10 	vmov	r0, r1, d0
 800b1d4:	f7f5 fca4 	bl	8000b20 <__aeabi_dcmpgt>
 800b1d8:	b150      	cbz	r0, 800b1f0 <acos+0x50>
 800b1da:	f7fd fd6d 	bl	8008cb8 <__errno>
 800b1de:	2321      	movs	r3, #33	@ 0x21
 800b1e0:	ecbd 8b02 	vpop	{d8}
 800b1e4:	6003      	str	r3, [r0, #0]
 800b1e6:	4807      	ldr	r0, [pc, #28]	@ (800b204 <acos+0x64>)
 800b1e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1ec:	f000 bde0 	b.w	800bdb0 <nan>
 800b1f0:	eeb0 0a48 	vmov.f32	s0, s16
 800b1f4:	eef0 0a68 	vmov.f32	s1, s17
 800b1f8:	ecbd 8b02 	vpop	{d8}
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}
 800b1fe:	bf00      	nop
 800b200:	3ff00000 	.word	0x3ff00000
 800b204:	0800c20f 	.word	0x0800c20f

0800b208 <atan2>:
 800b208:	f000 ba5e 	b.w	800b6c8 <__ieee754_atan2>
 800b20c:	0000      	movs	r0, r0
	...

0800b210 <__ieee754_acos>:
 800b210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	ec55 4b10 	vmov	r4, r5, d0
 800b218:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b21c:	49b6      	ldr	r1, [pc, #728]	@ (800b4f8 <__ieee754_acos+0x2e8>)
 800b21e:	428b      	cmp	r3, r1
 800b220:	d919      	bls.n	800b256 <__ieee754_acos+0x46>
 800b222:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800b226:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800b22a:	4323      	orrs	r3, r4
 800b22c:	d106      	bne.n	800b23c <__ieee754_acos+0x2c>
 800b22e:	2d00      	cmp	r5, #0
 800b230:	f340 8210 	ble.w	800b654 <__ieee754_acos+0x444>
 800b234:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 800b488 <__ieee754_acos+0x278>
 800b238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b23c:	4622      	mov	r2, r4
 800b23e:	462b      	mov	r3, r5
 800b240:	4620      	mov	r0, r4
 800b242:	4629      	mov	r1, r5
 800b244:	f7f5 f824 	bl	8000290 <__aeabi_dsub>
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	f7f5 fb02 	bl	8000854 <__aeabi_ddiv>
 800b250:	ec41 0b10 	vmov	d0, r0, r1
 800b254:	e7f0      	b.n	800b238 <__ieee754_acos+0x28>
 800b256:	49a9      	ldr	r1, [pc, #676]	@ (800b4fc <__ieee754_acos+0x2ec>)
 800b258:	428b      	cmp	r3, r1
 800b25a:	f200 8085 	bhi.w	800b368 <__ieee754_acos+0x158>
 800b25e:	4aa8      	ldr	r2, [pc, #672]	@ (800b500 <__ieee754_acos+0x2f0>)
 800b260:	4293      	cmp	r3, r2
 800b262:	f240 81fa 	bls.w	800b65a <__ieee754_acos+0x44a>
 800b266:	4622      	mov	r2, r4
 800b268:	462b      	mov	r3, r5
 800b26a:	4620      	mov	r0, r4
 800b26c:	4629      	mov	r1, r5
 800b26e:	f7f5 f9c7 	bl	8000600 <__aeabi_dmul>
 800b272:	4606      	mov	r6, r0
 800b274:	460f      	mov	r7, r1
 800b276:	a386      	add	r3, pc, #536	@ (adr r3, 800b490 <__ieee754_acos+0x280>)
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	f7f5 f9c0 	bl	8000600 <__aeabi_dmul>
 800b280:	a385      	add	r3, pc, #532	@ (adr r3, 800b498 <__ieee754_acos+0x288>)
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	f7f5 f805 	bl	8000294 <__adddf3>
 800b28a:	4632      	mov	r2, r6
 800b28c:	463b      	mov	r3, r7
 800b28e:	f7f5 f9b7 	bl	8000600 <__aeabi_dmul>
 800b292:	a383      	add	r3, pc, #524	@ (adr r3, 800b4a0 <__ieee754_acos+0x290>)
 800b294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b298:	f7f4 fffa 	bl	8000290 <__aeabi_dsub>
 800b29c:	4632      	mov	r2, r6
 800b29e:	463b      	mov	r3, r7
 800b2a0:	f7f5 f9ae 	bl	8000600 <__aeabi_dmul>
 800b2a4:	a380      	add	r3, pc, #512	@ (adr r3, 800b4a8 <__ieee754_acos+0x298>)
 800b2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2aa:	f7f4 fff3 	bl	8000294 <__adddf3>
 800b2ae:	4632      	mov	r2, r6
 800b2b0:	463b      	mov	r3, r7
 800b2b2:	f7f5 f9a5 	bl	8000600 <__aeabi_dmul>
 800b2b6:	a37e      	add	r3, pc, #504	@ (adr r3, 800b4b0 <__ieee754_acos+0x2a0>)
 800b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2bc:	f7f4 ffe8 	bl	8000290 <__aeabi_dsub>
 800b2c0:	4632      	mov	r2, r6
 800b2c2:	463b      	mov	r3, r7
 800b2c4:	f7f5 f99c 	bl	8000600 <__aeabi_dmul>
 800b2c8:	a37b      	add	r3, pc, #492	@ (adr r3, 800b4b8 <__ieee754_acos+0x2a8>)
 800b2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ce:	f7f4 ffe1 	bl	8000294 <__adddf3>
 800b2d2:	4632      	mov	r2, r6
 800b2d4:	463b      	mov	r3, r7
 800b2d6:	f7f5 f993 	bl	8000600 <__aeabi_dmul>
 800b2da:	4680      	mov	r8, r0
 800b2dc:	4689      	mov	r9, r1
 800b2de:	4630      	mov	r0, r6
 800b2e0:	4639      	mov	r1, r7
 800b2e2:	a377      	add	r3, pc, #476	@ (adr r3, 800b4c0 <__ieee754_acos+0x2b0>)
 800b2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e8:	f7f5 f98a 	bl	8000600 <__aeabi_dmul>
 800b2ec:	a376      	add	r3, pc, #472	@ (adr r3, 800b4c8 <__ieee754_acos+0x2b8>)
 800b2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f2:	f7f4 ffcd 	bl	8000290 <__aeabi_dsub>
 800b2f6:	4632      	mov	r2, r6
 800b2f8:	463b      	mov	r3, r7
 800b2fa:	f7f5 f981 	bl	8000600 <__aeabi_dmul>
 800b2fe:	a374      	add	r3, pc, #464	@ (adr r3, 800b4d0 <__ieee754_acos+0x2c0>)
 800b300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b304:	f7f4 ffc6 	bl	8000294 <__adddf3>
 800b308:	4632      	mov	r2, r6
 800b30a:	463b      	mov	r3, r7
 800b30c:	f7f5 f978 	bl	8000600 <__aeabi_dmul>
 800b310:	a371      	add	r3, pc, #452	@ (adr r3, 800b4d8 <__ieee754_acos+0x2c8>)
 800b312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b316:	f7f4 ffbb 	bl	8000290 <__aeabi_dsub>
 800b31a:	4632      	mov	r2, r6
 800b31c:	463b      	mov	r3, r7
 800b31e:	f7f5 f96f 	bl	8000600 <__aeabi_dmul>
 800b322:	2200      	movs	r2, #0
 800b324:	4b77      	ldr	r3, [pc, #476]	@ (800b504 <__ieee754_acos+0x2f4>)
 800b326:	f7f4 ffb5 	bl	8000294 <__adddf3>
 800b32a:	4602      	mov	r2, r0
 800b32c:	460b      	mov	r3, r1
 800b32e:	4640      	mov	r0, r8
 800b330:	4649      	mov	r1, r9
 800b332:	f7f5 fa8f 	bl	8000854 <__aeabi_ddiv>
 800b336:	4622      	mov	r2, r4
 800b338:	462b      	mov	r3, r5
 800b33a:	f7f5 f961 	bl	8000600 <__aeabi_dmul>
 800b33e:	4602      	mov	r2, r0
 800b340:	460b      	mov	r3, r1
 800b342:	a167      	add	r1, pc, #412	@ (adr r1, 800b4e0 <__ieee754_acos+0x2d0>)
 800b344:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b348:	f7f4 ffa2 	bl	8000290 <__aeabi_dsub>
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	4620      	mov	r0, r4
 800b352:	4629      	mov	r1, r5
 800b354:	f7f4 ff9c 	bl	8000290 <__aeabi_dsub>
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	a162      	add	r1, pc, #392	@ (adr r1, 800b4e8 <__ieee754_acos+0x2d8>)
 800b35e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b362:	f7f4 ff95 	bl	8000290 <__aeabi_dsub>
 800b366:	e773      	b.n	800b250 <__ieee754_acos+0x40>
 800b368:	2d00      	cmp	r5, #0
 800b36a:	f280 80cf 	bge.w	800b50c <__ieee754_acos+0x2fc>
 800b36e:	2200      	movs	r2, #0
 800b370:	4b64      	ldr	r3, [pc, #400]	@ (800b504 <__ieee754_acos+0x2f4>)
 800b372:	4620      	mov	r0, r4
 800b374:	4629      	mov	r1, r5
 800b376:	f7f4 ff8d 	bl	8000294 <__adddf3>
 800b37a:	2200      	movs	r2, #0
 800b37c:	4b62      	ldr	r3, [pc, #392]	@ (800b508 <__ieee754_acos+0x2f8>)
 800b37e:	f7f5 f93f 	bl	8000600 <__aeabi_dmul>
 800b382:	4604      	mov	r4, r0
 800b384:	460d      	mov	r5, r1
 800b386:	a342      	add	r3, pc, #264	@ (adr r3, 800b490 <__ieee754_acos+0x280>)
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	f7f5 f938 	bl	8000600 <__aeabi_dmul>
 800b390:	a341      	add	r3, pc, #260	@ (adr r3, 800b498 <__ieee754_acos+0x288>)
 800b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b396:	f7f4 ff7d 	bl	8000294 <__adddf3>
 800b39a:	4622      	mov	r2, r4
 800b39c:	462b      	mov	r3, r5
 800b39e:	f7f5 f92f 	bl	8000600 <__aeabi_dmul>
 800b3a2:	a33f      	add	r3, pc, #252	@ (adr r3, 800b4a0 <__ieee754_acos+0x290>)
 800b3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a8:	f7f4 ff72 	bl	8000290 <__aeabi_dsub>
 800b3ac:	4622      	mov	r2, r4
 800b3ae:	462b      	mov	r3, r5
 800b3b0:	f7f5 f926 	bl	8000600 <__aeabi_dmul>
 800b3b4:	a33c      	add	r3, pc, #240	@ (adr r3, 800b4a8 <__ieee754_acos+0x298>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	f7f4 ff6b 	bl	8000294 <__adddf3>
 800b3be:	4622      	mov	r2, r4
 800b3c0:	462b      	mov	r3, r5
 800b3c2:	f7f5 f91d 	bl	8000600 <__aeabi_dmul>
 800b3c6:	a33a      	add	r3, pc, #232	@ (adr r3, 800b4b0 <__ieee754_acos+0x2a0>)
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	f7f4 ff60 	bl	8000290 <__aeabi_dsub>
 800b3d0:	4622      	mov	r2, r4
 800b3d2:	462b      	mov	r3, r5
 800b3d4:	f7f5 f914 	bl	8000600 <__aeabi_dmul>
 800b3d8:	a337      	add	r3, pc, #220	@ (adr r3, 800b4b8 <__ieee754_acos+0x2a8>)
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	f7f4 ff59 	bl	8000294 <__adddf3>
 800b3e2:	4622      	mov	r2, r4
 800b3e4:	462b      	mov	r3, r5
 800b3e6:	f7f5 f90b 	bl	8000600 <__aeabi_dmul>
 800b3ea:	4606      	mov	r6, r0
 800b3ec:	460f      	mov	r7, r1
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	4629      	mov	r1, r5
 800b3f2:	a333      	add	r3, pc, #204	@ (adr r3, 800b4c0 <__ieee754_acos+0x2b0>)
 800b3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f8:	f7f5 f902 	bl	8000600 <__aeabi_dmul>
 800b3fc:	a332      	add	r3, pc, #200	@ (adr r3, 800b4c8 <__ieee754_acos+0x2b8>)
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	f7f4 ff45 	bl	8000290 <__aeabi_dsub>
 800b406:	4622      	mov	r2, r4
 800b408:	462b      	mov	r3, r5
 800b40a:	f7f5 f8f9 	bl	8000600 <__aeabi_dmul>
 800b40e:	a330      	add	r3, pc, #192	@ (adr r3, 800b4d0 <__ieee754_acos+0x2c0>)
 800b410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b414:	f7f4 ff3e 	bl	8000294 <__adddf3>
 800b418:	4622      	mov	r2, r4
 800b41a:	462b      	mov	r3, r5
 800b41c:	f7f5 f8f0 	bl	8000600 <__aeabi_dmul>
 800b420:	a32d      	add	r3, pc, #180	@ (adr r3, 800b4d8 <__ieee754_acos+0x2c8>)
 800b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b426:	f7f4 ff33 	bl	8000290 <__aeabi_dsub>
 800b42a:	4622      	mov	r2, r4
 800b42c:	462b      	mov	r3, r5
 800b42e:	f7f5 f8e7 	bl	8000600 <__aeabi_dmul>
 800b432:	2200      	movs	r2, #0
 800b434:	4b33      	ldr	r3, [pc, #204]	@ (800b504 <__ieee754_acos+0x2f4>)
 800b436:	f7f4 ff2d 	bl	8000294 <__adddf3>
 800b43a:	4680      	mov	r8, r0
 800b43c:	4689      	mov	r9, r1
 800b43e:	ec45 4b10 	vmov	d0, r4, r5
 800b442:	f000 fbd5 	bl	800bbf0 <__ieee754_sqrt>
 800b446:	4642      	mov	r2, r8
 800b448:	464b      	mov	r3, r9
 800b44a:	4630      	mov	r0, r6
 800b44c:	4639      	mov	r1, r7
 800b44e:	ec55 4b10 	vmov	r4, r5, d0
 800b452:	f7f5 f9ff 	bl	8000854 <__aeabi_ddiv>
 800b456:	4622      	mov	r2, r4
 800b458:	462b      	mov	r3, r5
 800b45a:	f7f5 f8d1 	bl	8000600 <__aeabi_dmul>
 800b45e:	a320      	add	r3, pc, #128	@ (adr r3, 800b4e0 <__ieee754_acos+0x2d0>)
 800b460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b464:	f7f4 ff14 	bl	8000290 <__aeabi_dsub>
 800b468:	4622      	mov	r2, r4
 800b46a:	462b      	mov	r3, r5
 800b46c:	f7f4 ff12 	bl	8000294 <__adddf3>
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	f7f4 ff0e 	bl	8000294 <__adddf3>
 800b478:	4602      	mov	r2, r0
 800b47a:	460b      	mov	r3, r1
 800b47c:	a11c      	add	r1, pc, #112	@ (adr r1, 800b4f0 <__ieee754_acos+0x2e0>)
 800b47e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b482:	e76e      	b.n	800b362 <__ieee754_acos+0x152>
 800b484:	f3af 8000 	nop.w
	...
 800b490:	0dfdf709 	.word	0x0dfdf709
 800b494:	3f023de1 	.word	0x3f023de1
 800b498:	7501b288 	.word	0x7501b288
 800b49c:	3f49efe0 	.word	0x3f49efe0
 800b4a0:	b5688f3b 	.word	0xb5688f3b
 800b4a4:	3fa48228 	.word	0x3fa48228
 800b4a8:	0e884455 	.word	0x0e884455
 800b4ac:	3fc9c155 	.word	0x3fc9c155
 800b4b0:	03eb6f7d 	.word	0x03eb6f7d
 800b4b4:	3fd4d612 	.word	0x3fd4d612
 800b4b8:	55555555 	.word	0x55555555
 800b4bc:	3fc55555 	.word	0x3fc55555
 800b4c0:	b12e9282 	.word	0xb12e9282
 800b4c4:	3fb3b8c5 	.word	0x3fb3b8c5
 800b4c8:	1b8d0159 	.word	0x1b8d0159
 800b4cc:	3fe6066c 	.word	0x3fe6066c
 800b4d0:	9c598ac8 	.word	0x9c598ac8
 800b4d4:	40002ae5 	.word	0x40002ae5
 800b4d8:	1c8a2d4b 	.word	0x1c8a2d4b
 800b4dc:	40033a27 	.word	0x40033a27
 800b4e0:	33145c07 	.word	0x33145c07
 800b4e4:	3c91a626 	.word	0x3c91a626
 800b4e8:	54442d18 	.word	0x54442d18
 800b4ec:	3ff921fb 	.word	0x3ff921fb
 800b4f0:	54442d18 	.word	0x54442d18
 800b4f4:	400921fb 	.word	0x400921fb
 800b4f8:	3fefffff 	.word	0x3fefffff
 800b4fc:	3fdfffff 	.word	0x3fdfffff
 800b500:	3c600000 	.word	0x3c600000
 800b504:	3ff00000 	.word	0x3ff00000
 800b508:	3fe00000 	.word	0x3fe00000
 800b50c:	4622      	mov	r2, r4
 800b50e:	462b      	mov	r3, r5
 800b510:	2000      	movs	r0, #0
 800b512:	496b      	ldr	r1, [pc, #428]	@ (800b6c0 <__ieee754_acos+0x4b0>)
 800b514:	f7f4 febc 	bl	8000290 <__aeabi_dsub>
 800b518:	2200      	movs	r2, #0
 800b51a:	4b6a      	ldr	r3, [pc, #424]	@ (800b6c4 <__ieee754_acos+0x4b4>)
 800b51c:	2600      	movs	r6, #0
 800b51e:	f7f5 f86f 	bl	8000600 <__aeabi_dmul>
 800b522:	4604      	mov	r4, r0
 800b524:	460d      	mov	r5, r1
 800b526:	ec45 4b10 	vmov	d0, r4, r5
 800b52a:	f000 fb61 	bl	800bbf0 <__ieee754_sqrt>
 800b52e:	4620      	mov	r0, r4
 800b530:	4629      	mov	r1, r5
 800b532:	a34b      	add	r3, pc, #300	@ (adr r3, 800b660 <__ieee754_acos+0x450>)
 800b534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b538:	ec59 8b10 	vmov	r8, r9, d0
 800b53c:	f7f5 f860 	bl	8000600 <__aeabi_dmul>
 800b540:	a349      	add	r3, pc, #292	@ (adr r3, 800b668 <__ieee754_acos+0x458>)
 800b542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b546:	f7f4 fea5 	bl	8000294 <__adddf3>
 800b54a:	4622      	mov	r2, r4
 800b54c:	462b      	mov	r3, r5
 800b54e:	f7f5 f857 	bl	8000600 <__aeabi_dmul>
 800b552:	a347      	add	r3, pc, #284	@ (adr r3, 800b670 <__ieee754_acos+0x460>)
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	f7f4 fe9a 	bl	8000290 <__aeabi_dsub>
 800b55c:	4622      	mov	r2, r4
 800b55e:	462b      	mov	r3, r5
 800b560:	f7f5 f84e 	bl	8000600 <__aeabi_dmul>
 800b564:	a344      	add	r3, pc, #272	@ (adr r3, 800b678 <__ieee754_acos+0x468>)
 800b566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56a:	f7f4 fe93 	bl	8000294 <__adddf3>
 800b56e:	4622      	mov	r2, r4
 800b570:	462b      	mov	r3, r5
 800b572:	f7f5 f845 	bl	8000600 <__aeabi_dmul>
 800b576:	a342      	add	r3, pc, #264	@ (adr r3, 800b680 <__ieee754_acos+0x470>)
 800b578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57c:	f7f4 fe88 	bl	8000290 <__aeabi_dsub>
 800b580:	4622      	mov	r2, r4
 800b582:	462b      	mov	r3, r5
 800b584:	f7f5 f83c 	bl	8000600 <__aeabi_dmul>
 800b588:	a33f      	add	r3, pc, #252	@ (adr r3, 800b688 <__ieee754_acos+0x478>)
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	f7f4 fe81 	bl	8000294 <__adddf3>
 800b592:	4622      	mov	r2, r4
 800b594:	462b      	mov	r3, r5
 800b596:	f7f5 f833 	bl	8000600 <__aeabi_dmul>
 800b59a:	4682      	mov	sl, r0
 800b59c:	468b      	mov	fp, r1
 800b59e:	4620      	mov	r0, r4
 800b5a0:	4629      	mov	r1, r5
 800b5a2:	a33b      	add	r3, pc, #236	@ (adr r3, 800b690 <__ieee754_acos+0x480>)
 800b5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a8:	f7f5 f82a 	bl	8000600 <__aeabi_dmul>
 800b5ac:	a33a      	add	r3, pc, #232	@ (adr r3, 800b698 <__ieee754_acos+0x488>)
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	f7f4 fe6d 	bl	8000290 <__aeabi_dsub>
 800b5b6:	4622      	mov	r2, r4
 800b5b8:	462b      	mov	r3, r5
 800b5ba:	f7f5 f821 	bl	8000600 <__aeabi_dmul>
 800b5be:	a338      	add	r3, pc, #224	@ (adr r3, 800b6a0 <__ieee754_acos+0x490>)
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	f7f4 fe66 	bl	8000294 <__adddf3>
 800b5c8:	4622      	mov	r2, r4
 800b5ca:	462b      	mov	r3, r5
 800b5cc:	f7f5 f818 	bl	8000600 <__aeabi_dmul>
 800b5d0:	a335      	add	r3, pc, #212	@ (adr r3, 800b6a8 <__ieee754_acos+0x498>)
 800b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d6:	f7f4 fe5b 	bl	8000290 <__aeabi_dsub>
 800b5da:	4622      	mov	r2, r4
 800b5dc:	462b      	mov	r3, r5
 800b5de:	f7f5 f80f 	bl	8000600 <__aeabi_dmul>
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	4b36      	ldr	r3, [pc, #216]	@ (800b6c0 <__ieee754_acos+0x4b0>)
 800b5e6:	f7f4 fe55 	bl	8000294 <__adddf3>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	4650      	mov	r0, sl
 800b5f0:	4659      	mov	r1, fp
 800b5f2:	f7f5 f92f 	bl	8000854 <__aeabi_ddiv>
 800b5f6:	4642      	mov	r2, r8
 800b5f8:	464b      	mov	r3, r9
 800b5fa:	f7f5 f801 	bl	8000600 <__aeabi_dmul>
 800b5fe:	4632      	mov	r2, r6
 800b600:	4682      	mov	sl, r0
 800b602:	468b      	mov	fp, r1
 800b604:	464b      	mov	r3, r9
 800b606:	4630      	mov	r0, r6
 800b608:	4649      	mov	r1, r9
 800b60a:	f7f4 fff9 	bl	8000600 <__aeabi_dmul>
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	4620      	mov	r0, r4
 800b614:	4629      	mov	r1, r5
 800b616:	f7f4 fe3b 	bl	8000290 <__aeabi_dsub>
 800b61a:	4604      	mov	r4, r0
 800b61c:	460d      	mov	r5, r1
 800b61e:	4632      	mov	r2, r6
 800b620:	464b      	mov	r3, r9
 800b622:	4640      	mov	r0, r8
 800b624:	4649      	mov	r1, r9
 800b626:	f7f4 fe35 	bl	8000294 <__adddf3>
 800b62a:	4602      	mov	r2, r0
 800b62c:	460b      	mov	r3, r1
 800b62e:	4620      	mov	r0, r4
 800b630:	4629      	mov	r1, r5
 800b632:	f7f5 f90f 	bl	8000854 <__aeabi_ddiv>
 800b636:	4602      	mov	r2, r0
 800b638:	460b      	mov	r3, r1
 800b63a:	4650      	mov	r0, sl
 800b63c:	4659      	mov	r1, fp
 800b63e:	f7f4 fe29 	bl	8000294 <__adddf3>
 800b642:	4632      	mov	r2, r6
 800b644:	464b      	mov	r3, r9
 800b646:	f7f4 fe25 	bl	8000294 <__adddf3>
 800b64a:	4602      	mov	r2, r0
 800b64c:	460b      	mov	r3, r1
 800b64e:	f7f4 fe21 	bl	8000294 <__adddf3>
 800b652:	e5fd      	b.n	800b250 <__ieee754_acos+0x40>
 800b654:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800b6b0 <__ieee754_acos+0x4a0>
 800b658:	e5ee      	b.n	800b238 <__ieee754_acos+0x28>
 800b65a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b6b8 <__ieee754_acos+0x4a8>
 800b65e:	e5eb      	b.n	800b238 <__ieee754_acos+0x28>
 800b660:	0dfdf709 	.word	0x0dfdf709
 800b664:	3f023de1 	.word	0x3f023de1
 800b668:	7501b288 	.word	0x7501b288
 800b66c:	3f49efe0 	.word	0x3f49efe0
 800b670:	b5688f3b 	.word	0xb5688f3b
 800b674:	3fa48228 	.word	0x3fa48228
 800b678:	0e884455 	.word	0x0e884455
 800b67c:	3fc9c155 	.word	0x3fc9c155
 800b680:	03eb6f7d 	.word	0x03eb6f7d
 800b684:	3fd4d612 	.word	0x3fd4d612
 800b688:	55555555 	.word	0x55555555
 800b68c:	3fc55555 	.word	0x3fc55555
 800b690:	b12e9282 	.word	0xb12e9282
 800b694:	3fb3b8c5 	.word	0x3fb3b8c5
 800b698:	1b8d0159 	.word	0x1b8d0159
 800b69c:	3fe6066c 	.word	0x3fe6066c
 800b6a0:	9c598ac8 	.word	0x9c598ac8
 800b6a4:	40002ae5 	.word	0x40002ae5
 800b6a8:	1c8a2d4b 	.word	0x1c8a2d4b
 800b6ac:	40033a27 	.word	0x40033a27
 800b6b0:	54442d18 	.word	0x54442d18
 800b6b4:	400921fb 	.word	0x400921fb
 800b6b8:	54442d18 	.word	0x54442d18
 800b6bc:	3ff921fb 	.word	0x3ff921fb
 800b6c0:	3ff00000 	.word	0x3ff00000
 800b6c4:	3fe00000 	.word	0x3fe00000

0800b6c8 <__ieee754_atan2>:
 800b6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6cc:	ec57 6b11 	vmov	r6, r7, d1
 800b6d0:	4273      	negs	r3, r6
 800b6d2:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800b6d6:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 800b850 <__ieee754_atan2+0x188>
 800b6da:	4635      	mov	r5, r6
 800b6dc:	4333      	orrs	r3, r6
 800b6de:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b6e2:	4543      	cmp	r3, r8
 800b6e4:	ec51 0b10 	vmov	r0, r1, d0
 800b6e8:	d809      	bhi.n	800b6fe <__ieee754_atan2+0x36>
 800b6ea:	4244      	negs	r4, r0
 800b6ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b6f0:	468e      	mov	lr, r1
 800b6f2:	4681      	mov	r9, r0
 800b6f4:	4304      	orrs	r4, r0
 800b6f6:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b6fa:	4544      	cmp	r4, r8
 800b6fc:	d907      	bls.n	800b70e <__ieee754_atan2+0x46>
 800b6fe:	4632      	mov	r2, r6
 800b700:	463b      	mov	r3, r7
 800b702:	f7f4 fdc7 	bl	8000294 <__adddf3>
 800b706:	ec41 0b10 	vmov	d0, r0, r1
 800b70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b70e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800b712:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800b716:	4334      	orrs	r4, r6
 800b718:	d103      	bne.n	800b722 <__ieee754_atan2+0x5a>
 800b71a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b71e:	f000 b8c7 	b.w	800b8b0 <atan>
 800b722:	17bc      	asrs	r4, r7, #30
 800b724:	ea53 0909 	orrs.w	r9, r3, r9
 800b728:	f004 0402 	and.w	r4, r4, #2
 800b72c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b730:	d107      	bne.n	800b742 <__ieee754_atan2+0x7a>
 800b732:	2c02      	cmp	r4, #2
 800b734:	d05f      	beq.n	800b7f6 <__ieee754_atan2+0x12e>
 800b736:	2c03      	cmp	r4, #3
 800b738:	d1e5      	bne.n	800b706 <__ieee754_atan2+0x3e>
 800b73a:	a141      	add	r1, pc, #260	@ (adr r1, 800b840 <__ieee754_atan2+0x178>)
 800b73c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b740:	e7e1      	b.n	800b706 <__ieee754_atan2+0x3e>
 800b742:	4315      	orrs	r5, r2
 800b744:	d106      	bne.n	800b754 <__ieee754_atan2+0x8c>
 800b746:	f1be 0f00 	cmp.w	lr, #0
 800b74a:	da5f      	bge.n	800b80c <__ieee754_atan2+0x144>
 800b74c:	a13e      	add	r1, pc, #248	@ (adr r1, 800b848 <__ieee754_atan2+0x180>)
 800b74e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b752:	e7d8      	b.n	800b706 <__ieee754_atan2+0x3e>
 800b754:	4542      	cmp	r2, r8
 800b756:	d10f      	bne.n	800b778 <__ieee754_atan2+0xb0>
 800b758:	4293      	cmp	r3, r2
 800b75a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800b75e:	d107      	bne.n	800b770 <__ieee754_atan2+0xa8>
 800b760:	2c02      	cmp	r4, #2
 800b762:	d84c      	bhi.n	800b7fe <__ieee754_atan2+0x136>
 800b764:	4b34      	ldr	r3, [pc, #208]	@ (800b838 <__ieee754_atan2+0x170>)
 800b766:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b76a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b76e:	e7ca      	b.n	800b706 <__ieee754_atan2+0x3e>
 800b770:	2c02      	cmp	r4, #2
 800b772:	d848      	bhi.n	800b806 <__ieee754_atan2+0x13e>
 800b774:	4b31      	ldr	r3, [pc, #196]	@ (800b83c <__ieee754_atan2+0x174>)
 800b776:	e7f6      	b.n	800b766 <__ieee754_atan2+0x9e>
 800b778:	4543      	cmp	r3, r8
 800b77a:	d0e4      	beq.n	800b746 <__ieee754_atan2+0x7e>
 800b77c:	1a9b      	subs	r3, r3, r2
 800b77e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800b782:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b786:	da1e      	bge.n	800b7c6 <__ieee754_atan2+0xfe>
 800b788:	2f00      	cmp	r7, #0
 800b78a:	da01      	bge.n	800b790 <__ieee754_atan2+0xc8>
 800b78c:	323c      	adds	r2, #60	@ 0x3c
 800b78e:	db1e      	blt.n	800b7ce <__ieee754_atan2+0x106>
 800b790:	4632      	mov	r2, r6
 800b792:	463b      	mov	r3, r7
 800b794:	f7f5 f85e 	bl	8000854 <__aeabi_ddiv>
 800b798:	ec41 0b10 	vmov	d0, r0, r1
 800b79c:	f000 fa20 	bl	800bbe0 <fabs>
 800b7a0:	f000 f886 	bl	800b8b0 <atan>
 800b7a4:	ec51 0b10 	vmov	r0, r1, d0
 800b7a8:	2c01      	cmp	r4, #1
 800b7aa:	d013      	beq.n	800b7d4 <__ieee754_atan2+0x10c>
 800b7ac:	2c02      	cmp	r4, #2
 800b7ae:	d015      	beq.n	800b7dc <__ieee754_atan2+0x114>
 800b7b0:	2c00      	cmp	r4, #0
 800b7b2:	d0a8      	beq.n	800b706 <__ieee754_atan2+0x3e>
 800b7b4:	a318      	add	r3, pc, #96	@ (adr r3, 800b818 <__ieee754_atan2+0x150>)
 800b7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ba:	f7f4 fd69 	bl	8000290 <__aeabi_dsub>
 800b7be:	a318      	add	r3, pc, #96	@ (adr r3, 800b820 <__ieee754_atan2+0x158>)
 800b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c4:	e014      	b.n	800b7f0 <__ieee754_atan2+0x128>
 800b7c6:	a118      	add	r1, pc, #96	@ (adr r1, 800b828 <__ieee754_atan2+0x160>)
 800b7c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7cc:	e7ec      	b.n	800b7a8 <__ieee754_atan2+0xe0>
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	e7e9      	b.n	800b7a8 <__ieee754_atan2+0xe0>
 800b7d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b7d8:	4619      	mov	r1, r3
 800b7da:	e794      	b.n	800b706 <__ieee754_atan2+0x3e>
 800b7dc:	a30e      	add	r3, pc, #56	@ (adr r3, 800b818 <__ieee754_atan2+0x150>)
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	f7f4 fd55 	bl	8000290 <__aeabi_dsub>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	a10d      	add	r1, pc, #52	@ (adr r1, 800b820 <__ieee754_atan2+0x158>)
 800b7ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7f0:	f7f4 fd4e 	bl	8000290 <__aeabi_dsub>
 800b7f4:	e787      	b.n	800b706 <__ieee754_atan2+0x3e>
 800b7f6:	a10a      	add	r1, pc, #40	@ (adr r1, 800b820 <__ieee754_atan2+0x158>)
 800b7f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7fc:	e783      	b.n	800b706 <__ieee754_atan2+0x3e>
 800b7fe:	a10c      	add	r1, pc, #48	@ (adr r1, 800b830 <__ieee754_atan2+0x168>)
 800b800:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b804:	e77f      	b.n	800b706 <__ieee754_atan2+0x3e>
 800b806:	2000      	movs	r0, #0
 800b808:	2100      	movs	r1, #0
 800b80a:	e77c      	b.n	800b706 <__ieee754_atan2+0x3e>
 800b80c:	a106      	add	r1, pc, #24	@ (adr r1, 800b828 <__ieee754_atan2+0x160>)
 800b80e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b812:	e778      	b.n	800b706 <__ieee754_atan2+0x3e>
 800b814:	f3af 8000 	nop.w
 800b818:	33145c07 	.word	0x33145c07
 800b81c:	3ca1a626 	.word	0x3ca1a626
 800b820:	54442d18 	.word	0x54442d18
 800b824:	400921fb 	.word	0x400921fb
 800b828:	54442d18 	.word	0x54442d18
 800b82c:	3ff921fb 	.word	0x3ff921fb
 800b830:	54442d18 	.word	0x54442d18
 800b834:	3fe921fb 	.word	0x3fe921fb
 800b838:	0800c548 	.word	0x0800c548
 800b83c:	0800c530 	.word	0x0800c530
 800b840:	54442d18 	.word	0x54442d18
 800b844:	c00921fb 	.word	0xc00921fb
 800b848:	54442d18 	.word	0x54442d18
 800b84c:	bff921fb 	.word	0xbff921fb
 800b850:	7ff00000 	.word	0x7ff00000

0800b854 <sqrt>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	ec55 4b10 	vmov	r4, r5, d0
 800b85a:	ed2d 8b02 	vpush	{d8}
 800b85e:	f000 f9c7 	bl	800bbf0 <__ieee754_sqrt>
 800b862:	4622      	mov	r2, r4
 800b864:	462b      	mov	r3, r5
 800b866:	4620      	mov	r0, r4
 800b868:	4629      	mov	r1, r5
 800b86a:	eeb0 8a40 	vmov.f32	s16, s0
 800b86e:	eef0 8a60 	vmov.f32	s17, s1
 800b872:	f7f5 f95f 	bl	8000b34 <__aeabi_dcmpun>
 800b876:	b990      	cbnz	r0, 800b89e <sqrt+0x4a>
 800b878:	2200      	movs	r2, #0
 800b87a:	2300      	movs	r3, #0
 800b87c:	4620      	mov	r0, r4
 800b87e:	4629      	mov	r1, r5
 800b880:	f7f5 f930 	bl	8000ae4 <__aeabi_dcmplt>
 800b884:	b158      	cbz	r0, 800b89e <sqrt+0x4a>
 800b886:	f7fd fa17 	bl	8008cb8 <__errno>
 800b88a:	2321      	movs	r3, #33	@ 0x21
 800b88c:	2200      	movs	r2, #0
 800b88e:	6003      	str	r3, [r0, #0]
 800b890:	2300      	movs	r3, #0
 800b892:	4610      	mov	r0, r2
 800b894:	4619      	mov	r1, r3
 800b896:	f7f4 ffdd 	bl	8000854 <__aeabi_ddiv>
 800b89a:	ec41 0b18 	vmov	d8, r0, r1
 800b89e:	eeb0 0a48 	vmov.f32	s0, s16
 800b8a2:	eef0 0a68 	vmov.f32	s1, s17
 800b8a6:	ecbd 8b02 	vpop	{d8}
 800b8aa:	bd38      	pop	{r3, r4, r5, pc}
 800b8ac:	0000      	movs	r0, r0
	...

0800b8b0 <atan>:
 800b8b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b4:	ec55 4b10 	vmov	r4, r5, d0
 800b8b8:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800b8bc:	4bbe      	ldr	r3, [pc, #760]	@ (800bbb8 <atan+0x308>)
 800b8be:	46ab      	mov	fp, r5
 800b8c0:	429e      	cmp	r6, r3
 800b8c2:	d918      	bls.n	800b8f6 <atan+0x46>
 800b8c4:	4bbd      	ldr	r3, [pc, #756]	@ (800bbbc <atan+0x30c>)
 800b8c6:	429e      	cmp	r6, r3
 800b8c8:	d801      	bhi.n	800b8ce <atan+0x1e>
 800b8ca:	d109      	bne.n	800b8e0 <atan+0x30>
 800b8cc:	b144      	cbz	r4, 800b8e0 <atan+0x30>
 800b8ce:	4622      	mov	r2, r4
 800b8d0:	462b      	mov	r3, r5
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	4629      	mov	r1, r5
 800b8d6:	f7f4 fcdd 	bl	8000294 <__adddf3>
 800b8da:	4604      	mov	r4, r0
 800b8dc:	460d      	mov	r5, r1
 800b8de:	e006      	b.n	800b8ee <atan+0x3e>
 800b8e0:	f1bb 0f00 	cmp.w	fp, #0
 800b8e4:	f340 812b 	ble.w	800bb3e <atan+0x28e>
 800b8e8:	a597      	add	r5, pc, #604	@ (adr r5, 800bb48 <atan+0x298>)
 800b8ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b8ee:	ec45 4b10 	vmov	d0, r4, r5
 800b8f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f6:	4bb2      	ldr	r3, [pc, #712]	@ (800bbc0 <atan+0x310>)
 800b8f8:	429e      	cmp	r6, r3
 800b8fa:	d813      	bhi.n	800b924 <atan+0x74>
 800b8fc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800b900:	429e      	cmp	r6, r3
 800b902:	d80c      	bhi.n	800b91e <atan+0x6e>
 800b904:	4620      	mov	r0, r4
 800b906:	4629      	mov	r1, r5
 800b908:	a391      	add	r3, pc, #580	@ (adr r3, 800bb50 <atan+0x2a0>)
 800b90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90e:	f7f4 fcc1 	bl	8000294 <__adddf3>
 800b912:	2200      	movs	r2, #0
 800b914:	4bab      	ldr	r3, [pc, #684]	@ (800bbc4 <atan+0x314>)
 800b916:	f7f5 f903 	bl	8000b20 <__aeabi_dcmpgt>
 800b91a:	2800      	cmp	r0, #0
 800b91c:	d1e7      	bne.n	800b8ee <atan+0x3e>
 800b91e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b922:	e029      	b.n	800b978 <atan+0xc8>
 800b924:	f000 f95c 	bl	800bbe0 <fabs>
 800b928:	4ba7      	ldr	r3, [pc, #668]	@ (800bbc8 <atan+0x318>)
 800b92a:	429e      	cmp	r6, r3
 800b92c:	ec55 4b10 	vmov	r4, r5, d0
 800b930:	f200 80bc 	bhi.w	800baac <atan+0x1fc>
 800b934:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800b938:	429e      	cmp	r6, r3
 800b93a:	f200 809e 	bhi.w	800ba7a <atan+0x1ca>
 800b93e:	4622      	mov	r2, r4
 800b940:	462b      	mov	r3, r5
 800b942:	4620      	mov	r0, r4
 800b944:	4629      	mov	r1, r5
 800b946:	f7f4 fca5 	bl	8000294 <__adddf3>
 800b94a:	2200      	movs	r2, #0
 800b94c:	4b9d      	ldr	r3, [pc, #628]	@ (800bbc4 <atan+0x314>)
 800b94e:	f04f 0a00 	mov.w	sl, #0
 800b952:	f7f4 fc9d 	bl	8000290 <__aeabi_dsub>
 800b956:	4606      	mov	r6, r0
 800b958:	460f      	mov	r7, r1
 800b95a:	2200      	movs	r2, #0
 800b95c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b960:	4620      	mov	r0, r4
 800b962:	4629      	mov	r1, r5
 800b964:	f7f4 fc96 	bl	8000294 <__adddf3>
 800b968:	4602      	mov	r2, r0
 800b96a:	460b      	mov	r3, r1
 800b96c:	4630      	mov	r0, r6
 800b96e:	4639      	mov	r1, r7
 800b970:	f7f4 ff70 	bl	8000854 <__aeabi_ddiv>
 800b974:	4604      	mov	r4, r0
 800b976:	460d      	mov	r5, r1
 800b978:	4622      	mov	r2, r4
 800b97a:	462b      	mov	r3, r5
 800b97c:	4620      	mov	r0, r4
 800b97e:	4629      	mov	r1, r5
 800b980:	f7f4 fe3e 	bl	8000600 <__aeabi_dmul>
 800b984:	4602      	mov	r2, r0
 800b986:	460b      	mov	r3, r1
 800b988:	4680      	mov	r8, r0
 800b98a:	4689      	mov	r9, r1
 800b98c:	f7f4 fe38 	bl	8000600 <__aeabi_dmul>
 800b990:	4606      	mov	r6, r0
 800b992:	460f      	mov	r7, r1
 800b994:	a370      	add	r3, pc, #448	@ (adr r3, 800bb58 <atan+0x2a8>)
 800b996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99a:	f7f4 fe31 	bl	8000600 <__aeabi_dmul>
 800b99e:	a370      	add	r3, pc, #448	@ (adr r3, 800bb60 <atan+0x2b0>)
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	f7f4 fc76 	bl	8000294 <__adddf3>
 800b9a8:	4632      	mov	r2, r6
 800b9aa:	463b      	mov	r3, r7
 800b9ac:	f7f4 fe28 	bl	8000600 <__aeabi_dmul>
 800b9b0:	a36d      	add	r3, pc, #436	@ (adr r3, 800bb68 <atan+0x2b8>)
 800b9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b6:	f7f4 fc6d 	bl	8000294 <__adddf3>
 800b9ba:	4632      	mov	r2, r6
 800b9bc:	463b      	mov	r3, r7
 800b9be:	f7f4 fe1f 	bl	8000600 <__aeabi_dmul>
 800b9c2:	a36b      	add	r3, pc, #428	@ (adr r3, 800bb70 <atan+0x2c0>)
 800b9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c8:	f7f4 fc64 	bl	8000294 <__adddf3>
 800b9cc:	4632      	mov	r2, r6
 800b9ce:	463b      	mov	r3, r7
 800b9d0:	f7f4 fe16 	bl	8000600 <__aeabi_dmul>
 800b9d4:	a368      	add	r3, pc, #416	@ (adr r3, 800bb78 <atan+0x2c8>)
 800b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9da:	f7f4 fc5b 	bl	8000294 <__adddf3>
 800b9de:	4632      	mov	r2, r6
 800b9e0:	463b      	mov	r3, r7
 800b9e2:	f7f4 fe0d 	bl	8000600 <__aeabi_dmul>
 800b9e6:	a366      	add	r3, pc, #408	@ (adr r3, 800bb80 <atan+0x2d0>)
 800b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ec:	f7f4 fc52 	bl	8000294 <__adddf3>
 800b9f0:	4642      	mov	r2, r8
 800b9f2:	464b      	mov	r3, r9
 800b9f4:	f7f4 fe04 	bl	8000600 <__aeabi_dmul>
 800b9f8:	4680      	mov	r8, r0
 800b9fa:	4689      	mov	r9, r1
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	4639      	mov	r1, r7
 800ba00:	a361      	add	r3, pc, #388	@ (adr r3, 800bb88 <atan+0x2d8>)
 800ba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba06:	f7f4 fdfb 	bl	8000600 <__aeabi_dmul>
 800ba0a:	a361      	add	r3, pc, #388	@ (adr r3, 800bb90 <atan+0x2e0>)
 800ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba10:	f7f4 fc3e 	bl	8000290 <__aeabi_dsub>
 800ba14:	4632      	mov	r2, r6
 800ba16:	463b      	mov	r3, r7
 800ba18:	f7f4 fdf2 	bl	8000600 <__aeabi_dmul>
 800ba1c:	a35e      	add	r3, pc, #376	@ (adr r3, 800bb98 <atan+0x2e8>)
 800ba1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba22:	f7f4 fc35 	bl	8000290 <__aeabi_dsub>
 800ba26:	4632      	mov	r2, r6
 800ba28:	463b      	mov	r3, r7
 800ba2a:	f7f4 fde9 	bl	8000600 <__aeabi_dmul>
 800ba2e:	a35c      	add	r3, pc, #368	@ (adr r3, 800bba0 <atan+0x2f0>)
 800ba30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba34:	f7f4 fc2c 	bl	8000290 <__aeabi_dsub>
 800ba38:	4632      	mov	r2, r6
 800ba3a:	463b      	mov	r3, r7
 800ba3c:	f7f4 fde0 	bl	8000600 <__aeabi_dmul>
 800ba40:	a359      	add	r3, pc, #356	@ (adr r3, 800bba8 <atan+0x2f8>)
 800ba42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba46:	f7f4 fc23 	bl	8000290 <__aeabi_dsub>
 800ba4a:	4632      	mov	r2, r6
 800ba4c:	463b      	mov	r3, r7
 800ba4e:	f7f4 fdd7 	bl	8000600 <__aeabi_dmul>
 800ba52:	4602      	mov	r2, r0
 800ba54:	460b      	mov	r3, r1
 800ba56:	4640      	mov	r0, r8
 800ba58:	4649      	mov	r1, r9
 800ba5a:	f7f4 fc1b 	bl	8000294 <__adddf3>
 800ba5e:	4622      	mov	r2, r4
 800ba60:	462b      	mov	r3, r5
 800ba62:	f7f4 fdcd 	bl	8000600 <__aeabi_dmul>
 800ba66:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	d148      	bne.n	800bb02 <atan+0x252>
 800ba70:	4620      	mov	r0, r4
 800ba72:	4629      	mov	r1, r5
 800ba74:	f7f4 fc0c 	bl	8000290 <__aeabi_dsub>
 800ba78:	e72f      	b.n	800b8da <atan+0x2a>
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	4b51      	ldr	r3, [pc, #324]	@ (800bbc4 <atan+0x314>)
 800ba7e:	4620      	mov	r0, r4
 800ba80:	4629      	mov	r1, r5
 800ba82:	f7f4 fc05 	bl	8000290 <__aeabi_dsub>
 800ba86:	4606      	mov	r6, r0
 800ba88:	460f      	mov	r7, r1
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	4b4d      	ldr	r3, [pc, #308]	@ (800bbc4 <atan+0x314>)
 800ba8e:	4620      	mov	r0, r4
 800ba90:	4629      	mov	r1, r5
 800ba92:	f04f 0a01 	mov.w	sl, #1
 800ba96:	f7f4 fbfd 	bl	8000294 <__adddf3>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	4630      	mov	r0, r6
 800baa0:	4639      	mov	r1, r7
 800baa2:	f7f4 fed7 	bl	8000854 <__aeabi_ddiv>
 800baa6:	4604      	mov	r4, r0
 800baa8:	460d      	mov	r5, r1
 800baaa:	e765      	b.n	800b978 <atan+0xc8>
 800baac:	4b47      	ldr	r3, [pc, #284]	@ (800bbcc <atan+0x31c>)
 800baae:	429e      	cmp	r6, r3
 800bab0:	d21c      	bcs.n	800baec <atan+0x23c>
 800bab2:	2200      	movs	r2, #0
 800bab4:	4b46      	ldr	r3, [pc, #280]	@ (800bbd0 <atan+0x320>)
 800bab6:	4620      	mov	r0, r4
 800bab8:	4629      	mov	r1, r5
 800baba:	f7f4 fbe9 	bl	8000290 <__aeabi_dsub>
 800babe:	2200      	movs	r2, #0
 800bac0:	4606      	mov	r6, r0
 800bac2:	460f      	mov	r7, r1
 800bac4:	4b42      	ldr	r3, [pc, #264]	@ (800bbd0 <atan+0x320>)
 800bac6:	4620      	mov	r0, r4
 800bac8:	4629      	mov	r1, r5
 800baca:	f04f 0a02 	mov.w	sl, #2
 800bace:	f7f4 fd97 	bl	8000600 <__aeabi_dmul>
 800bad2:	2200      	movs	r2, #0
 800bad4:	4b3b      	ldr	r3, [pc, #236]	@ (800bbc4 <atan+0x314>)
 800bad6:	f7f4 fbdd 	bl	8000294 <__adddf3>
 800bada:	4602      	mov	r2, r0
 800badc:	460b      	mov	r3, r1
 800bade:	4630      	mov	r0, r6
 800bae0:	4639      	mov	r1, r7
 800bae2:	f7f4 feb7 	bl	8000854 <__aeabi_ddiv>
 800bae6:	4604      	mov	r4, r0
 800bae8:	460d      	mov	r5, r1
 800baea:	e745      	b.n	800b978 <atan+0xc8>
 800baec:	4622      	mov	r2, r4
 800baee:	462b      	mov	r3, r5
 800baf0:	2000      	movs	r0, #0
 800baf2:	4938      	ldr	r1, [pc, #224]	@ (800bbd4 <atan+0x324>)
 800baf4:	f7f4 feae 	bl	8000854 <__aeabi_ddiv>
 800baf8:	f04f 0a03 	mov.w	sl, #3
 800bafc:	4604      	mov	r4, r0
 800bafe:	460d      	mov	r5, r1
 800bb00:	e73a      	b.n	800b978 <atan+0xc8>
 800bb02:	4b35      	ldr	r3, [pc, #212]	@ (800bbd8 <atan+0x328>)
 800bb04:	4e35      	ldr	r6, [pc, #212]	@ (800bbdc <atan+0x32c>)
 800bb06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bb0a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb12:	f7f4 fbbd 	bl	8000290 <__aeabi_dsub>
 800bb16:	4622      	mov	r2, r4
 800bb18:	462b      	mov	r3, r5
 800bb1a:	f7f4 fbb9 	bl	8000290 <__aeabi_dsub>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	460b      	mov	r3, r1
 800bb22:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bb26:	f7f4 fbb3 	bl	8000290 <__aeabi_dsub>
 800bb2a:	f1bb 0f00 	cmp.w	fp, #0
 800bb2e:	4604      	mov	r4, r0
 800bb30:	460d      	mov	r5, r1
 800bb32:	f6bf aedc 	bge.w	800b8ee <atan+0x3e>
 800bb36:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bb3a:	461d      	mov	r5, r3
 800bb3c:	e6d7      	b.n	800b8ee <atan+0x3e>
 800bb3e:	a51c      	add	r5, pc, #112	@ (adr r5, 800bbb0 <atan+0x300>)
 800bb40:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb44:	e6d3      	b.n	800b8ee <atan+0x3e>
 800bb46:	bf00      	nop
 800bb48:	54442d18 	.word	0x54442d18
 800bb4c:	3ff921fb 	.word	0x3ff921fb
 800bb50:	8800759c 	.word	0x8800759c
 800bb54:	7e37e43c 	.word	0x7e37e43c
 800bb58:	e322da11 	.word	0xe322da11
 800bb5c:	3f90ad3a 	.word	0x3f90ad3a
 800bb60:	24760deb 	.word	0x24760deb
 800bb64:	3fa97b4b 	.word	0x3fa97b4b
 800bb68:	a0d03d51 	.word	0xa0d03d51
 800bb6c:	3fb10d66 	.word	0x3fb10d66
 800bb70:	c54c206e 	.word	0xc54c206e
 800bb74:	3fb745cd 	.word	0x3fb745cd
 800bb78:	920083ff 	.word	0x920083ff
 800bb7c:	3fc24924 	.word	0x3fc24924
 800bb80:	5555550d 	.word	0x5555550d
 800bb84:	3fd55555 	.word	0x3fd55555
 800bb88:	2c6a6c2f 	.word	0x2c6a6c2f
 800bb8c:	bfa2b444 	.word	0xbfa2b444
 800bb90:	52defd9a 	.word	0x52defd9a
 800bb94:	3fadde2d 	.word	0x3fadde2d
 800bb98:	af749a6d 	.word	0xaf749a6d
 800bb9c:	3fb3b0f2 	.word	0x3fb3b0f2
 800bba0:	fe231671 	.word	0xfe231671
 800bba4:	3fbc71c6 	.word	0x3fbc71c6
 800bba8:	9998ebc4 	.word	0x9998ebc4
 800bbac:	3fc99999 	.word	0x3fc99999
 800bbb0:	54442d18 	.word	0x54442d18
 800bbb4:	bff921fb 	.word	0xbff921fb
 800bbb8:	440fffff 	.word	0x440fffff
 800bbbc:	7ff00000 	.word	0x7ff00000
 800bbc0:	3fdbffff 	.word	0x3fdbffff
 800bbc4:	3ff00000 	.word	0x3ff00000
 800bbc8:	3ff2ffff 	.word	0x3ff2ffff
 800bbcc:	40038000 	.word	0x40038000
 800bbd0:	3ff80000 	.word	0x3ff80000
 800bbd4:	bff00000 	.word	0xbff00000
 800bbd8:	0800c560 	.word	0x0800c560
 800bbdc:	0800c580 	.word	0x0800c580

0800bbe0 <fabs>:
 800bbe0:	ec51 0b10 	vmov	r0, r1, d0
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bbea:	ec43 2b10 	vmov	d0, r2, r3
 800bbee:	4770      	bx	lr

0800bbf0 <__ieee754_sqrt>:
 800bbf0:	4a6b      	ldr	r2, [pc, #428]	@ (800bda0 <__ieee754_sqrt+0x1b0>)
 800bbf2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf6:	ec55 4b10 	vmov	r4, r5, d0
 800bbfa:	43aa      	bics	r2, r5
 800bbfc:	462b      	mov	r3, r5
 800bbfe:	4621      	mov	r1, r4
 800bc00:	d110      	bne.n	800bc24 <__ieee754_sqrt+0x34>
 800bc02:	4622      	mov	r2, r4
 800bc04:	4620      	mov	r0, r4
 800bc06:	4629      	mov	r1, r5
 800bc08:	f7f4 fcfa 	bl	8000600 <__aeabi_dmul>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
 800bc10:	4620      	mov	r0, r4
 800bc12:	4629      	mov	r1, r5
 800bc14:	f7f4 fb3e 	bl	8000294 <__adddf3>
 800bc18:	4604      	mov	r4, r0
 800bc1a:	460d      	mov	r5, r1
 800bc1c:	ec45 4b10 	vmov	d0, r4, r5
 800bc20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc24:	2d00      	cmp	r5, #0
 800bc26:	dc0e      	bgt.n	800bc46 <__ieee754_sqrt+0x56>
 800bc28:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bc2c:	4322      	orrs	r2, r4
 800bc2e:	d0f5      	beq.n	800bc1c <__ieee754_sqrt+0x2c>
 800bc30:	b19d      	cbz	r5, 800bc5a <__ieee754_sqrt+0x6a>
 800bc32:	4622      	mov	r2, r4
 800bc34:	4620      	mov	r0, r4
 800bc36:	4629      	mov	r1, r5
 800bc38:	f7f4 fb2a 	bl	8000290 <__aeabi_dsub>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	f7f4 fe08 	bl	8000854 <__aeabi_ddiv>
 800bc44:	e7e8      	b.n	800bc18 <__ieee754_sqrt+0x28>
 800bc46:	152a      	asrs	r2, r5, #20
 800bc48:	d115      	bne.n	800bc76 <__ieee754_sqrt+0x86>
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	e009      	b.n	800bc62 <__ieee754_sqrt+0x72>
 800bc4e:	0acb      	lsrs	r3, r1, #11
 800bc50:	3a15      	subs	r2, #21
 800bc52:	0549      	lsls	r1, r1, #21
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d0fa      	beq.n	800bc4e <__ieee754_sqrt+0x5e>
 800bc58:	e7f7      	b.n	800bc4a <__ieee754_sqrt+0x5a>
 800bc5a:	462a      	mov	r2, r5
 800bc5c:	e7fa      	b.n	800bc54 <__ieee754_sqrt+0x64>
 800bc5e:	005b      	lsls	r3, r3, #1
 800bc60:	3001      	adds	r0, #1
 800bc62:	02dc      	lsls	r4, r3, #11
 800bc64:	d5fb      	bpl.n	800bc5e <__ieee754_sqrt+0x6e>
 800bc66:	1e44      	subs	r4, r0, #1
 800bc68:	1b12      	subs	r2, r2, r4
 800bc6a:	f1c0 0420 	rsb	r4, r0, #32
 800bc6e:	fa21 f404 	lsr.w	r4, r1, r4
 800bc72:	4081      	lsls	r1, r0
 800bc74:	4323      	orrs	r3, r4
 800bc76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc7a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800bc7e:	07d2      	lsls	r2, r2, #31
 800bc80:	f04f 0600 	mov.w	r6, #0
 800bc84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc88:	ea4f 0565 	mov.w	r5, r5, asr #1
 800bc8c:	f04f 0016 	mov.w	r0, #22
 800bc90:	4632      	mov	r2, r6
 800bc92:	bf58      	it	pl
 800bc94:	005b      	lslpl	r3, r3, #1
 800bc96:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bc9a:	bf5c      	itt	pl
 800bc9c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bca0:	0049      	lslpl	r1, r1, #1
 800bca2:	005b      	lsls	r3, r3, #1
 800bca4:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bca8:	0049      	lsls	r1, r1, #1
 800bcaa:	1917      	adds	r7, r2, r4
 800bcac:	429f      	cmp	r7, r3
 800bcae:	bfde      	ittt	le
 800bcb0:	193a      	addle	r2, r7, r4
 800bcb2:	1bdb      	suble	r3, r3, r7
 800bcb4:	1936      	addle	r6, r6, r4
 800bcb6:	0fcf      	lsrs	r7, r1, #31
 800bcb8:	3801      	subs	r0, #1
 800bcba:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bcbe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800bcc2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bcc6:	d1f0      	bne.n	800bcaa <__ieee754_sqrt+0xba>
 800bcc8:	4604      	mov	r4, r0
 800bcca:	2720      	movs	r7, #32
 800bccc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	eb00 0e0c 	add.w	lr, r0, ip
 800bcd6:	db02      	blt.n	800bcde <__ieee754_sqrt+0xee>
 800bcd8:	d113      	bne.n	800bd02 <__ieee754_sqrt+0x112>
 800bcda:	458e      	cmp	lr, r1
 800bcdc:	d811      	bhi.n	800bd02 <__ieee754_sqrt+0x112>
 800bcde:	f1be 0f00 	cmp.w	lr, #0
 800bce2:	eb0e 000c 	add.w	r0, lr, ip
 800bce6:	da43      	bge.n	800bd70 <__ieee754_sqrt+0x180>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	db41      	blt.n	800bd70 <__ieee754_sqrt+0x180>
 800bcec:	f102 0801 	add.w	r8, r2, #1
 800bcf0:	1a9b      	subs	r3, r3, r2
 800bcf2:	458e      	cmp	lr, r1
 800bcf4:	4464      	add	r4, ip
 800bcf6:	eba1 010e 	sub.w	r1, r1, lr
 800bcfa:	bf88      	it	hi
 800bcfc:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800bd00:	4642      	mov	r2, r8
 800bd02:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bd06:	3f01      	subs	r7, #1
 800bd08:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bd0c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bd10:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bd14:	d1dc      	bne.n	800bcd0 <__ieee754_sqrt+0xe0>
 800bd16:	4319      	orrs	r1, r3
 800bd18:	d01b      	beq.n	800bd52 <__ieee754_sqrt+0x162>
 800bd1a:	f8df a088 	ldr.w	sl, [pc, #136]	@ 800bda4 <__ieee754_sqrt+0x1b4>
 800bd1e:	f8df b088 	ldr.w	fp, [pc, #136]	@ 800bda8 <__ieee754_sqrt+0x1b8>
 800bd22:	e9da 0100 	ldrd	r0, r1, [sl]
 800bd26:	e9db 2300 	ldrd	r2, r3, [fp]
 800bd2a:	e9da 8900 	ldrd	r8, r9, [sl]
 800bd2e:	f7f4 faaf 	bl	8000290 <__aeabi_dsub>
 800bd32:	4602      	mov	r2, r0
 800bd34:	460b      	mov	r3, r1
 800bd36:	4640      	mov	r0, r8
 800bd38:	4649      	mov	r1, r9
 800bd3a:	f7f4 fedd 	bl	8000af8 <__aeabi_dcmple>
 800bd3e:	b140      	cbz	r0, 800bd52 <__ieee754_sqrt+0x162>
 800bd40:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800bd44:	e9da 0100 	ldrd	r0, r1, [sl]
 800bd48:	e9db 2300 	ldrd	r2, r3, [fp]
 800bd4c:	d112      	bne.n	800bd74 <__ieee754_sqrt+0x184>
 800bd4e:	3601      	adds	r6, #1
 800bd50:	463c      	mov	r4, r7
 800bd52:	1072      	asrs	r2, r6, #1
 800bd54:	07f1      	lsls	r1, r6, #31
 800bd56:	ea4f 0354 	mov.w	r3, r4, lsr #1
 800bd5a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800bd5e:	bf48      	it	mi
 800bd60:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800bd64:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800bd68:	4618      	mov	r0, r3
 800bd6a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800bd6e:	e753      	b.n	800bc18 <__ieee754_sqrt+0x28>
 800bd70:	4690      	mov	r8, r2
 800bd72:	e7bd      	b.n	800bcf0 <__ieee754_sqrt+0x100>
 800bd74:	e9da 8900 	ldrd	r8, r9, [sl]
 800bd78:	f7f4 fa8c 	bl	8000294 <__adddf3>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	460b      	mov	r3, r1
 800bd80:	4640      	mov	r0, r8
 800bd82:	4649      	mov	r1, r9
 800bd84:	f7f4 feae 	bl	8000ae4 <__aeabi_dcmplt>
 800bd88:	b128      	cbz	r0, 800bd96 <__ieee754_sqrt+0x1a6>
 800bd8a:	1ca0      	adds	r0, r4, #2
 800bd8c:	f104 0402 	add.w	r4, r4, #2
 800bd90:	bf08      	it	eq
 800bd92:	3601      	addeq	r6, #1
 800bd94:	e7dd      	b.n	800bd52 <__ieee754_sqrt+0x162>
 800bd96:	1c63      	adds	r3, r4, #1
 800bd98:	f023 0401 	bic.w	r4, r3, #1
 800bd9c:	e7d9      	b.n	800bd52 <__ieee754_sqrt+0x162>
 800bd9e:	bf00      	nop
 800bda0:	7ff00000 	.word	0x7ff00000
 800bda4:	20000280 	.word	0x20000280
 800bda8:	20000278 	.word	0x20000278
 800bdac:	00000000 	.word	0x00000000

0800bdb0 <nan>:
 800bdb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bdb8 <nan+0x8>
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop
 800bdb8:	00000000 	.word	0x00000000
 800bdbc:	7ff80000 	.word	0x7ff80000

0800bdc0 <_init>:
 800bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc2:	bf00      	nop
 800bdc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdc6:	bc08      	pop	{r3}
 800bdc8:	469e      	mov	lr, r3
 800bdca:	4770      	bx	lr

0800bdcc <_fini>:
 800bdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdce:	bf00      	nop
 800bdd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdd2:	bc08      	pop	{r3}
 800bdd4:	469e      	mov	lr, r3
 800bdd6:	4770      	bx	lr
