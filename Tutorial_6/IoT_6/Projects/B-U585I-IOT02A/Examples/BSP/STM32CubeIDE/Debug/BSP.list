
BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb80  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  0800edb8  0800edb8  0000fdb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f950  0800f950  00011290  2**0
                  CONTENTS
  4 .ARM          00000008  0800f950  0800f950  00010950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f958  0800f958  00011290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f958  0800f958  00010958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f960  0800f960  00010960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800f968  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e50  20000290  0800fbf8  00011290  2**2
                  ALLOC
 10 ._user_heap_stack 00001200  200010e0  0800fbf8  000120e0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00011290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a5e9  00000000  00000000  000112c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d8a  00000000  00000000  0003b8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002200  00000000  00000000  0003f640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a13  00000000  00000000  00041840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00045d45  00000000  00000000  00043253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ae71  00000000  00000000  00088f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001c1b3f  00000000  00000000  000b3e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00275948  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a97c  00000000  00000000  0027598c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  00280308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000290 	.word	0x20000290
 8000254:	00000000 	.word	0x00000000
 8000258:	0800ed9c 	.word	0x0800ed9c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000294 	.word	0x20000294
 8000274:	0800ed9c 	.word	0x0800ed9c

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  LED6_GPIO_CLK_ENABLE();
 8000c5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ce8 <BSP_LED_Init+0x98>)
 8000c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c64:	4a20      	ldr	r2, [pc, #128]	@ (8000ce8 <BSP_LED_Init+0x98>)
 8000c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <BSP_LED_Init+0x98>)
 8000c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
  LED7_GPIO_CLK_ENABLE();
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <BSP_LED_Init+0x98>)
 8000c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c82:	4a19      	ldr	r2, [pc, #100]	@ (8000ce8 <BSP_LED_Init+0x98>)
 8000c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c88:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <BSP_LED_Init+0x98>)
 8000c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	4a10      	ldr	r2, [pc, #64]	@ (8000cec <BSP_LED_Init+0x9c>)
 8000caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf0 <BSP_LED_Init+0xa0>)
 8000cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb8:	f107 0210 	add.w	r2, r7, #16
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f004 fa34 	bl	800512c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <BSP_LED_Init+0xa0>)
 8000cc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	4a07      	ldr	r2, [pc, #28]	@ (8000cec <BSP_LED_Init+0x9c>)
 8000cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f004 fcdd 	bl	8005698 <HAL_GPIO_WritePin>

  return ret;
 8000cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3728      	adds	r7, #40	@ 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	46020c00 	.word	0x46020c00
 8000cec:	0800f3d4 	.word	0x0800f3d4
 8000cf0:	20000000 	.word	0x20000000

08000cf4 <BSP_LED_On>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4a09      	ldr	r2, [pc, #36]	@ (8000d28 <BSP_LED_On+0x34>)
 8000d02:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	4a08      	ldr	r2, [pc, #32]	@ (8000d2c <BSP_LED_On+0x38>)
 8000d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	4619      	mov	r1, r3
 8000d14:	f004 fcc0 	bl	8005698 <HAL_GPIO_WritePin>
  ret = BSP_ERROR_NONE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]

  return ret;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	0800f3d4 	.word	0x0800f3d4

08000d30 <BSP_LED_Off>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	4a09      	ldr	r2, [pc, #36]	@ (8000d64 <BSP_LED_Off+0x34>)
 8000d3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4a08      	ldr	r2, [pc, #32]	@ (8000d68 <BSP_LED_Off+0x38>)
 8000d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f004 fca2 	bl	8005698 <HAL_GPIO_WritePin>
  ret = BSP_ERROR_NONE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]

  return ret;
 8000d58:	68fb      	ldr	r3, [r7, #12]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000000 	.word	0x20000000
 8000d68:	0800f3d4 	.word	0x0800f3d4

08000d6c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	@ 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	460a      	mov	r2, r1
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback,};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY,};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE,};

  if (Button != BUTTON_USER)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <BSP_PB_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d86:	f06f 0301 	mvn.w	r3, #1
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d8c:	e05c      	b.n	8000e48 <BSP_PB_Init+0xdc>
  }
  else
  {
    /* Enable the BUTTON clock*/
    BUTTON_USER_GPIO_CLK_ENABLE();
 8000d8e:	4b31      	ldr	r3, [pc, #196]	@ (8000e54 <BSP_PB_Init+0xe8>)
 8000d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d94:	4a2f      	ldr	r2, [pc, #188]	@ (8000e54 <BSP_PB_Init+0xe8>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e54 <BSP_PB_Init+0xe8>)
 8000da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]

    gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000dac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db0:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61fb      	str	r3, [r7, #28]

    if (ButtonMode == BUTTON_MODE_GPIO)
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10c      	bne.n	8000dda <BSP_PB_Init+0x6e>
    {
      /* Configure Button pin as input */
      gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
      HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	4a24      	ldr	r2, [pc, #144]	@ (8000e58 <BSP_PB_Init+0xec>)
 8000dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dcc:	f107 0210 	add.w	r2, r7, #16
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 f9aa 	bl	800512c <HAL_GPIO_Init>
 8000dd8:	e036      	b.n	8000e48 <BSP_PB_Init+0xdc>
    }
    else /* (ButtonMode == BUTTON_MODE_EXTI) */
    {
      /* Configure Button pin as input with External interrupt */
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000dda:	4b20      	ldr	r3, [pc, #128]	@ (8000e5c <BSP_PB_Init+0xf0>)
 8000ddc:	617b      	str	r3, [r7, #20]

      HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e58 <BSP_PB_Init+0xec>)
 8000de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de6:	f107 0210 	add.w	r2, r7, #16
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f004 f99d 	bl	800512c <HAL_GPIO_Init>

      (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000df2:	79fa      	ldrb	r2, [r7, #7]
 8000df4:	4613      	mov	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4413      	add	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4a18      	ldr	r2, [pc, #96]	@ (8000e60 <BSP_PB_Init+0xf4>)
 8000dfe:	441a      	add	r2, r3
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4918      	ldr	r1, [pc, #96]	@ (8000e64 <BSP_PB_Init+0xf8>)
 8000e04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	f004 f932 	bl	8005074 <HAL_EXTI_GetHandle>
      (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000e10:	79fa      	ldrb	r2, [r7, #7]
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4a11      	ldr	r2, [pc, #68]	@ (8000e60 <BSP_PB_Init+0xf4>)
 8000e1c:	1898      	adds	r0, r3, r2
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4a11      	ldr	r2, [pc, #68]	@ (8000e68 <BSP_PB_Init+0xfc>)
 8000e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e26:	461a      	mov	r2, r3
 8000e28:	2100      	movs	r1, #0
 8000e2a:	f004 f8f7 	bl	800501c <HAL_EXTI_RegisterCallback>

      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000e2e:	2018      	movs	r0, #24
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4a0e      	ldr	r2, [pc, #56]	@ (8000e6c <BSP_PB_Init+0x100>)
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f003 fe6d 	bl	8004b1a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000e40:	2318      	movs	r3, #24
 8000e42:	4618      	mov	r0, r3
 8000e44:	f003 fe83 	bl	8004b4e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8000e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3728      	adds	r7, #40	@ 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	46020c00 	.word	0x46020c00
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	10110000 	.word	0x10110000
 8000e60:	200002ac 	.word	0x200002ac
 8000e64:	0800f3dc 	.word	0x0800f3dc
 8000e68:	2000000c 	.word	0x2000000c
 8000e6c:	20000010 	.word	0x20000010

08000e70 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000e74:	2000      	movs	r0, #0
 8000e76:	f009 fd35 	bl	800a8e4 <BSP_PB_Callback>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <BSP_AUDIO_IN_IRQHandler>:
  * @param  Instance Audio in instance.
  * @param  Device Device of the audio in stream.
  * @retval None.
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t Device)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  if (Instance == 0U)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d109      	bne.n	8000ea4 <BSP_AUDIO_IN_IRQHandler+0x24>
  {
    if (Device == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d103      	bne.n	8000e9e <BSP_AUDIO_IN_IRQHandler+0x1e>
    {
      HAL_DMA_IRQHandler(&haudio_mdf[0]);
 8000e96:	4805      	ldr	r0, [pc, #20]	@ (8000eac <BSP_AUDIO_IN_IRQHandler+0x2c>)
 8000e98:	f003 ff4c 	bl	8004d34 <HAL_DMA_IRQHandler>
    else /* Device == AUDIO_IN_DEVICE_DIGITAL_MIC2 */
    {
      HAL_DMA_IRQHandler(&haudio_mdf[1]);
    }
  }
}
 8000e9c:	e002      	b.n	8000ea4 <BSP_AUDIO_IN_IRQHandler+0x24>
      HAL_DMA_IRQHandler(&haudio_mdf[1]);
 8000e9e:	4804      	ldr	r0, [pc, #16]	@ (8000eb0 <BSP_AUDIO_IN_IRQHandler+0x30>)
 8000ea0:	f003 ff48 	bl	8004d34 <HAL_DMA_IRQHandler>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200002b8 	.word	0x200002b8
 8000eb0:	20000330 	.word	0x20000330

08000eb4 <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C2 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <BSP_I2C2_Init+0x64>)
 8000ec0:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <BSP_I2C2_Init+0x68>)
 8000ec2:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8000ec4:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <BSP_I2C2_Init+0x6c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d11f      	bne.n	8000f0c <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <BSP_I2C2_Init+0x6c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a13      	ldr	r2, [pc, #76]	@ (8000f20 <BSP_I2C2_Init+0x6c>)
 8000ed4:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 8000ed6:	4810      	ldr	r0, [pc, #64]	@ (8000f18 <BSP_I2C2_Init+0x64>)
 8000ed8:	f004 fef6 	bl	8005cc8 <HAL_I2C_GetState>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d114      	bne.n	8000f0c <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8000ee2:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <BSP_I2C2_Init+0x64>)
 8000ee4:	f000 fb60 	bl	80015a8 <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8000ee8:	f006 fd32 	bl	8007950 <HAL_RCC_GetPCLK1Freq>
 8000eec:	4603      	mov	r3, r0
 8000eee:	490d      	ldr	r1, [pc, #52]	@ (8000f24 <BSP_I2C2_Init+0x70>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f8e3 	bl	80010bc <I2C_GetTiming>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4807      	ldr	r0, [pc, #28]	@ (8000f18 <BSP_I2C2_Init+0x64>)
 8000efc:	f000 f838 	bl	8000f70 <MX_I2C2_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <BSP_I2C2_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000f06:	f06f 0307 	mvn.w	r3, #7
 8000f0a:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
return ret;
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000db0 	.word	0x20000db0
 8000f1c:	40005800 	.word	0x40005800
 8000f20:	200003a8 	.word	0x200003a8
 8000f24:	000186a0 	.word	0x000186a0

08000f28 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 8000f32:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <BSP_I2C2_DeInit+0x40>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <BSP_I2C2_DeInit+0x40>)
 8000f3a:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <BSP_I2C2_DeInit+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10b      	bne.n	8000f5c <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 8000f44:	4809      	ldr	r0, [pc, #36]	@ (8000f6c <BSP_I2C2_DeInit+0x44>)
 8000f46:	f000 fb95 	bl	8001674 <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 8000f4a:	4808      	ldr	r0, [pc, #32]	@ (8000f6c <BSP_I2C2_DeInit+0x44>)
 8000f4c:	f004 fc4b 	bl	80057e6 <HAL_I2C_DeInit>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8000f56:	f06f 0307 	mvn.w	r3, #7
 8000f5a:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8000f5c:	687b      	ldr	r3, [r7, #4]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200003a8 	.word	0x200003a8
 8000f6c:	20000db0 	.word	0x20000db0

08000f70 <MX_I2C2_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f004 fb8a 	bl	80056c8 <HAL_I2C_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d002      	beq.n	8000fc0 <MX_I2C2_Init+0x50>
  {
    status = HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	73fb      	strb	r3, [r7, #15]
 8000fbe:	e014      	b.n	8000fea <MX_I2C2_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f005 f93e 	bl	8006248 <HAL_I2CEx_ConfigAnalogFilter>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d002      	beq.n	8000fd8 <MX_I2C2_Init+0x68>
    {
      status = HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	e008      	b.n	8000fea <MX_I2C2_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8000fd8:	2100      	movs	r1, #0
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f005 f97f 	bl	80062de <HAL_I2CEx_ConfigDigitalFilter>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_I2C2_Init+0x7a>
      {
        status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <BSP_I2C2_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	60ba      	str	r2, [r7, #8]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4603      	mov	r3, r0
 8001000:	81fb      	strh	r3, [r7, #14]
 8001002:	460b      	mov	r3, r1
 8001004:	81bb      	strh	r3, [r7, #12]
 8001006:	4613      	mov	r3, r2
 8001008:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800100a:	89b9      	ldrh	r1, [r7, #12]
 800100c:	89f8      	ldrh	r0, [r7, #14]
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2201      	movs	r2, #1
 8001016:	f000 fb4f 	bl	80016b8 <I2C2_WriteReg>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <BSP_I2C2_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	e00c      	b.n	8001040 <BSP_I2C2_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8001026:	4809      	ldr	r0, [pc, #36]	@ (800104c <BSP_I2C2_WriteReg+0x58>)
 8001028:	f004 fe5c 	bl	8005ce4 <HAL_I2C_GetError>
 800102c:	4603      	mov	r3, r0
 800102e:	2b04      	cmp	r3, #4
 8001030:	d103      	bne.n	800103a <BSP_I2C2_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001032:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	e002      	b.n	8001040 <BSP_I2C2_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800103a:	f06f 0303 	mvn.w	r3, #3
 800103e:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8001040:	697b      	ldr	r3, [r7, #20]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000db0 	.word	0x20000db0

08001050 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af02      	add	r7, sp, #8
 8001056:	60ba      	str	r2, [r7, #8]
 8001058:	461a      	mov	r2, r3
 800105a:	4603      	mov	r3, r0
 800105c:	81fb      	strh	r3, [r7, #14]
 800105e:	460b      	mov	r3, r1
 8001060:	81bb      	strh	r3, [r7, #12]
 8001062:	4613      	mov	r3, r2
 8001064:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8001066:	89b9      	ldrh	r1, [r7, #12]
 8001068:	89f8      	ldrh	r0, [r7, #14]
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2201      	movs	r2, #1
 8001072:	f000 fb47 	bl	8001704 <I2C2_ReadReg>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <BSP_I2C2_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e00c      	b.n	800109c <BSP_I2C2_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8001082:	4809      	ldr	r0, [pc, #36]	@ (80010a8 <BSP_I2C2_ReadReg+0x58>)
 8001084:	f004 fe2e 	bl	8005ce4 <HAL_I2C_GetError>
 8001088:	4603      	mov	r3, r0
 800108a:	2b04      	cmp	r3, #4
 800108c:	d103      	bne.n	8001096 <BSP_I2C2_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800108e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e002      	b.n	800109c <BSP_I2C2_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001096:	f06f 0303 	mvn.w	r3, #3
 800109a:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 800109c:	697b      	ldr	r3, [r7, #20]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000db0 	.word	0x20000db0

080010ac <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 80010b0:	f003 fc28 	bl	8004904 <HAL_GetTick>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d06b      	beq.n	80011a8 <I2C_GetTiming+0xec>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d068      	beq.n	80011a8 <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	e060      	b.n	800119e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80010dc:	4a35      	ldr	r2, [pc, #212]	@ (80011b4 <I2C_GetTiming+0xf8>)
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	212c      	movs	r1, #44	@ 0x2c
 80010e2:	fb01 f303 	mul.w	r3, r1, r3
 80010e6:	4413      	add	r3, r2
 80010e8:	3304      	adds	r3, #4
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d352      	bcc.n	8001198 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80010f2:	4a30      	ldr	r2, [pc, #192]	@ (80011b4 <I2C_GetTiming+0xf8>)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	212c      	movs	r1, #44	@ 0x2c
 80010f8:	fb01 f303 	mul.w	r3, r1, r3
 80010fc:	4413      	add	r3, r2
 80010fe:	3308      	adds	r3, #8
 8001100:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d847      	bhi.n	8001198 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8001108:	6939      	ldr	r1, [r7, #16]
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f856 	bl	80011bc <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8001110:	6939      	ldr	r1, [r7, #16]
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f940 	bl	8001398 <I2C_Compute_SCLL_SCLH>
 8001118:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2b7f      	cmp	r3, #127	@ 0x7f
 800111e:	d842      	bhi.n	80011a6 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8001120:	4925      	ldr	r1, [pc, #148]	@ (80011b8 <I2C_GetTiming+0xfc>)
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8001132:	4821      	ldr	r0, [pc, #132]	@ (80011b8 <I2C_GetTiming+0xfc>)
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4403      	add	r3, r0
 8001140:	3304      	adds	r3, #4
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	051b      	lsls	r3, r3, #20
 8001146:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 800114a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 800114c:	481a      	ldr	r0, [pc, #104]	@ (80011b8 <I2C_GetTiming+0xfc>)
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4403      	add	r3, r0
 800115a:	3308      	adds	r3, #8
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	041b      	lsls	r3, r3, #16
 8001160:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8001164:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 8001166:	4814      	ldr	r0, [pc, #80]	@ (80011b8 <I2C_GetTiming+0xfc>)
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	4613      	mov	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4403      	add	r3, r0
 8001174:	330c      	adds	r3, #12
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 800117c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800117e:	480e      	ldr	r0, [pc, #56]	@ (80011b8 <I2C_GetTiming+0xfc>)
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4403      	add	r3, r0
 800118c:	3310      	adds	r3, #16
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8001192:	430b      	orrs	r3, r1
 8001194:	617b      	str	r3, [r7, #20]
        }
        break;
 8001196:	e006      	b.n	80011a6 <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	3301      	adds	r3, #1
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d99b      	bls.n	80010dc <I2C_GetTiming+0x20>
 80011a4:	e000      	b.n	80011a8 <I2C_GetTiming+0xec>
        break;
 80011a6:	bf00      	nop
      }
    }
  }

  return ret;
 80011a8:	697b      	ldr	r3, [r7, #20]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	0800f3e0 	.word	0x0800f3e0
 80011b8:	200003ac 	.word	0x200003ac

080011bc <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80011bc:	b480      	push	{r7}
 80011be:	b08f      	sub	sp, #60	@ 0x3c
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80011c6:	2310      	movs	r3, #16
 80011c8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	085a      	lsrs	r2, r3, #1
 80011ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001388 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80011d0:	4413      	add	r3, r2
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80011d8:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80011da:	2332      	movs	r3, #50	@ 0x32
 80011dc:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80011de:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80011e2:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80011e4:	4a69      	ldr	r2, [pc, #420]	@ (800138c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	212c      	movs	r1, #44	@ 0x2c
 80011ea:	fb01 f303 	mul.w	r3, r1, r3
 80011ee:	4413      	add	r3, r2
 80011f0:	3324      	adds	r3, #36	@ 0x24
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	4a65      	ldr	r2, [pc, #404]	@ (800138c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	212c      	movs	r1, #44	@ 0x2c
 80011fc:	fb01 f303 	mul.w	r3, r1, r3
 8001200:	4413      	add	r3, r2
 8001202:	330c      	adds	r3, #12
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8001208:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800120a:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800120c:	495f      	ldr	r1, [pc, #380]	@ (800138c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	202c      	movs	r0, #44	@ 0x2c
 8001212:	fb00 f303 	mul.w	r3, r0, r3
 8001216:	440b      	add	r3, r1
 8001218:	3328      	adds	r3, #40	@ 0x28
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	3303      	adds	r3, #3
 800121e:	69f9      	ldr	r1, [r7, #28]
 8001220:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001228:	4a58      	ldr	r2, [pc, #352]	@ (800138c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	212c      	movs	r1, #44	@ 0x2c
 800122e:	fb01 f303 	mul.w	r3, r1, r3
 8001232:	4413      	add	r3, r2
 8001234:	3310      	adds	r3, #16
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	4a54      	ldr	r2, [pc, #336]	@ (800138c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	212c      	movs	r1, #44	@ 0x2c
 8001240:	fb01 f303 	mul.w	r3, r1, r3
 8001244:	4413      	add	r3, r2
 8001246:	3320      	adds	r3, #32
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800124c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800124e:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8001250:	494e      	ldr	r1, [pc, #312]	@ (800138c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	202c      	movs	r0, #44	@ 0x2c
 8001256:	fb00 f303 	mul.w	r3, r0, r3
 800125a:	440b      	add	r3, r1
 800125c:	3328      	adds	r3, #40	@ 0x28
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3304      	adds	r3, #4
 8001262:	69f9      	ldr	r1, [r7, #28]
 8001264:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800126c:	4a47      	ldr	r2, [pc, #284]	@ (800138c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	212c      	movs	r1, #44	@ 0x2c
 8001272:	fb01 f303 	mul.w	r3, r1, r3
 8001276:	4413      	add	r3, r2
 8001278:	3320      	adds	r3, #32
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	4a43      	ldr	r2, [pc, #268]	@ (800138c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	212c      	movs	r1, #44	@ 0x2c
 8001284:	fb01 f303 	mul.w	r3, r1, r3
 8001288:	4413      	add	r3, r2
 800128a:	3314      	adds	r3, #20
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4403      	add	r3, r0
 8001290:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8001292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001294:	2b00      	cmp	r3, #0
 8001296:	dc01      	bgt.n	800129c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 800129c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800129e:	2b00      	cmp	r3, #0
 80012a0:	dc01      	bgt.n	80012a6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012aa:	e062      	b.n	8001372 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80012b0:	e059      	b.n	8001366 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80012b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b4:	3301      	adds	r3, #1
 80012b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012b8:	3201      	adds	r2, #1
 80012ba:	fb03 f202 	mul.w	r2, r3, r2
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d348      	bcc.n	8001360 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
 80012d2:	e042      	b.n	800135a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80012d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d6:	3301      	adds	r3, #1
 80012d8:	6a3a      	ldr	r2, [r7, #32]
 80012da:	fb03 f202 	mul.w	r2, r3, r2
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80012e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d332      	bcc.n	8001354 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80012ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d82e      	bhi.n	8001354 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 80012f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d02a      	beq.n	8001354 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80012fe:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4924      	ldr	r1, [pc, #144]	@ (8001394 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	440b      	add	r3, r1
 800130e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001310:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8001312:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	491f      	ldr	r1, [pc, #124]	@ (8001394 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	3304      	adds	r3, #4
 8001324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001326:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8001328:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4919      	ldr	r1, [pc, #100]	@ (8001394 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	3308      	adds	r3, #8
 800133a:	6a3a      	ldr	r2, [r7, #32]
 800133c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800133e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001340:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 8001342:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3301      	adds	r3, #1
 8001348:	4a11      	ldr	r2, [pc, #68]	@ (8001390 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800134a:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800134c:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b7f      	cmp	r3, #127	@ 0x7f
 8001352:	d812      	bhi.n	800137a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	3301      	adds	r3, #1
 8001358:	623b      	str	r3, [r7, #32]
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d9b9      	bls.n	80012d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8001360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001362:	3301      	adds	r3, #1
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
 8001366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d9a2      	bls.n	80012b2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800136c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800136e:	3301      	adds	r3, #1
 8001370:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d999      	bls.n	80012ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8001378:	e000      	b.n	800137c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800137a:	bf00      	nop
          }
        }
      }
    }
  }
}
 800137c:	373c      	adds	r7, #60	@ 0x3c
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	3b9aca00 	.word	0x3b9aca00
 800138c:	0800f3e0 	.word	0x0800f3e0
 8001390:	20000dac 	.word	0x20000dac
 8001394:	200003ac 	.word	0x200003ac

08001398 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8001398:	b480      	push	{r7}
 800139a:	b093      	sub	sp, #76	@ 0x4c
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	085a      	lsrs	r2, r3, #1
 80013ac:	4b7a      	ldr	r3, [pc, #488]	@ (8001598 <I2C_Compute_SCLL_SCLH+0x200>)
 80013ae:	4413      	add	r3, r2
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 80013b8:	4a78      	ldr	r2, [pc, #480]	@ (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	212c      	movs	r1, #44	@ 0x2c
 80013be:	fb01 f303 	mul.w	r3, r1, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	085a      	lsrs	r2, r3, #1
 80013c8:	4b73      	ldr	r3, [pc, #460]	@ (8001598 <I2C_Compute_SCLL_SCLH+0x200>)
 80013ca:	4413      	add	r3, r2
 80013cc:	4973      	ldr	r1, [pc, #460]	@ (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	202c      	movs	r0, #44	@ 0x2c
 80013d2:	fb00 f202 	mul.w	r2, r0, r2
 80013d6:	440a      	add	r2, r1
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	fbb3 f3f2 	udiv	r3, r3, r2
 80013de:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80013e0:	2332      	movs	r3, #50	@ 0x32
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80013e4:	4a6d      	ldr	r2, [pc, #436]	@ (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	212c      	movs	r1, #44	@ 0x2c
 80013ea:	fb01 f303 	mul.w	r3, r1, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	3328      	adds	r3, #40	@ 0x28
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80013fc:	4a67      	ldr	r2, [pc, #412]	@ (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	212c      	movs	r1, #44	@ 0x2c
 8001402:	fb01 f303 	mul.w	r3, r1, r3
 8001406:	4413      	add	r3, r2
 8001408:	3304      	adds	r3, #4
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a62      	ldr	r2, [pc, #392]	@ (8001598 <I2C_Compute_SCLL_SCLH+0x200>)
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8001414:	4a61      	ldr	r2, [pc, #388]	@ (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	212c      	movs	r1, #44	@ 0x2c
 800141a:	fb01 f303 	mul.w	r3, r1, r3
 800141e:	4413      	add	r3, r2
 8001420:	3308      	adds	r3, #8
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a5c      	ldr	r2, [pc, #368]	@ (8001598 <I2C_Compute_SCLL_SCLH+0x200>)
 8001426:	fbb2 f3f3 	udiv	r3, r2, r3
 800142a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800142c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800142e:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001430:	2300      	movs	r3, #0
 8001432:	637b      	str	r3, [r7, #52]	@ 0x34
 8001434:	e0a3      	b.n	800157e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8001436:	495a      	ldr	r1, [pc, #360]	@ (80015a0 <I2C_Compute_SCLL_SCLH+0x208>)
 8001438:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800144a:	fb02 f303 	mul.w	r3, r2, r3
 800144e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001450:	2300      	movs	r3, #0
 8001452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001454:	e08c      	b.n	8001570 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001458:	6a3b      	ldr	r3, [r7, #32]
 800145a:	441a      	add	r2, r3
 800145c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800145e:	3301      	adds	r3, #1
 8001460:	6979      	ldr	r1, [r7, #20]
 8001462:	fb03 f101 	mul.w	r1, r3, r1
 8001466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	440b      	add	r3, r1
 800146c:	4413      	add	r3, r2
 800146e:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8001470:	4a4a      	ldr	r2, [pc, #296]	@ (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	212c      	movs	r1, #44	@ 0x2c
 8001476:	fb01 f303 	mul.w	r3, r1, r3
 800147a:	4413      	add	r3, r2
 800147c:	3318      	adds	r3, #24
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	429a      	cmp	r2, r3
 8001484:	d971      	bls.n	800156a <I2C_Compute_SCLL_SCLH+0x1d2>
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	1ad2      	subs	r2, r2, r3
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001494:	429a      	cmp	r2, r3
 8001496:	d268      	bcs.n	800156a <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8001498:	2300      	movs	r3, #0
 800149a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800149c:	e062      	b.n	8001564 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800149e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	441a      	add	r2, r3
 80014a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014a6:	3301      	adds	r3, #1
 80014a8:	6979      	ldr	r1, [r7, #20]
 80014aa:	fb03 f101 	mul.w	r1, r3, r1
 80014ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	440b      	add	r3, r1
 80014b4:	4413      	add	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	441a      	add	r2, r3
 80014be:	4937      	ldr	r1, [pc, #220]	@ (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	202c      	movs	r0, #44	@ 0x2c
 80014c4:	fb00 f303 	mul.w	r3, r0, r3
 80014c8:	440b      	add	r3, r1
 80014ca:	3320      	adds	r3, #32
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	441a      	add	r2, r3
 80014d0:	4932      	ldr	r1, [pc, #200]	@ (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	202c      	movs	r0, #44	@ 0x2c
 80014d6:	fb00 f303 	mul.w	r3, r0, r3
 80014da:	440b      	add	r3, r1
 80014dc:	3324      	adds	r3, #36	@ 0x24
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min)
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d338      	bcc.n	800155e <I2C_Compute_SCLL_SCLH+0x1c6>
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d834      	bhi.n	800155e <I2C_Compute_SCLL_SCLH+0x1c6>
 80014f4:	4a29      	ldr	r2, [pc, #164]	@ (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	212c      	movs	r1, #44	@ 0x2c
 80014fa:	fb01 f303 	mul.w	r3, r1, r3
 80014fe:	4413      	add	r3, r2
 8001500:	331c      	adds	r3, #28
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	429a      	cmp	r2, r3
 8001508:	d329      	bcc.n	800155e <I2C_Compute_SCLL_SCLH+0x1c6>
              && (ti2cclk < tscl_h))
 800150a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	429a      	cmp	r2, r3
 8001510:	d225      	bcs.n	800155e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 800151a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800151c:	2b00      	cmp	r3, #0
 800151e:	da02      	bge.n	8001526 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8001520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001522:	425b      	negs	r3, r3
 8001524:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8001526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001528:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800152a:	429a      	cmp	r2, r3
 800152c:	d917      	bls.n	800155e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800152e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001530:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 8001532:	491b      	ldr	r1, [pc, #108]	@ (80015a0 <I2C_Compute_SCLL_SCLH+0x208>)
 8001534:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	3310      	adds	r3, #16
 8001542:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001544:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8001546:	4916      	ldr	r1, [pc, #88]	@ (80015a0 <I2C_Compute_SCLL_SCLH+0x208>)
 8001548:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	330c      	adds	r3, #12
 8001556:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001558:	601a      	str	r2, [r3, #0]
              ret = count;
 800155a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800155c:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800155e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001560:	3301      	adds	r3, #1
 8001562:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001566:	2bff      	cmp	r3, #255	@ 0xff
 8001568:	d999      	bls.n	800149e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800156a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800156c:	3301      	adds	r3, #1
 800156e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001572:	2bff      	cmp	r3, #255	@ 0xff
 8001574:	f67f af6f 	bls.w	8001456 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800157a:	3301      	adds	r3, #1
 800157c:	637b      	str	r3, [r7, #52]	@ 0x34
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <I2C_Compute_SCLL_SCLH+0x20c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001584:	429a      	cmp	r2, r3
 8001586:	f4ff af56 	bcc.w	8001436 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800158a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800158c:	4618      	mov	r0, r3
 800158e:	374c      	adds	r7, #76	@ 0x4c
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	3b9aca00 	.word	0x3b9aca00
 800159c:	0800f3e0 	.word	0x0800f3e0
 80015a0:	200003ac 	.word	0x200003ac
 80015a4:	20000dac 	.word	0x20000dac

080015a8 <I2C2_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hI2c)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	@ 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 80015b0:	4b2e      	ldr	r3, [pc, #184]	@ (800166c <I2C2_MspInit+0xc4>)
 80015b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015b6:	4a2d      	ldr	r2, [pc, #180]	@ (800166c <I2C2_MspInit+0xc4>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015c0:	4b2a      	ldr	r3, [pc, #168]	@ (800166c <I2C2_MspInit+0xc4>)
 80015c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 80015ce:	4b27      	ldr	r3, [pc, #156]	@ (800166c <I2C2_MspInit+0xc4>)
 80015d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015d4:	4a25      	ldr	r2, [pc, #148]	@ (800166c <I2C2_MspInit+0xc4>)
 80015d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015de:	4b23      	ldr	r3, [pc, #140]	@ (800166c <I2C2_MspInit+0xc4>)
 80015e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SCL_PIN;
 80015ec:	2310      	movs	r3, #16
 80015ee:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 80015f0:	2312      	movs	r3, #18
 80015f2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 80015f4:	2301      	movs	r3, #1
 80015f6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 80015f8:	2302      	movs	r3, #2
 80015fa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SCL_AF;
 80015fc:	2304      	movs	r3, #4
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	481a      	ldr	r0, [pc, #104]	@ (8001670 <I2C2_MspInit+0xc8>)
 8001608:	f003 fd90 	bl	800512c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SDA_PIN;
 800160c:	2320      	movs	r3, #32
 800160e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8001610:	2312      	movs	r3, #18
 8001612:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8001614:	2301      	movs	r3, #1
 8001616:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8001618:	2302      	movs	r3, #2
 800161a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SDA_AF;
 800161c:	2304      	movs	r3, #4
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	4812      	ldr	r0, [pc, #72]	@ (8001670 <I2C2_MspInit+0xc8>)
 8001628:	f003 fd80 	bl	800512c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 800162c:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <I2C2_MspInit+0xc4>)
 800162e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001632:	4a0e      	ldr	r2, [pc, #56]	@ (800166c <I2C2_MspInit+0xc4>)
 8001634:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001638:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800163c:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <I2C2_MspInit+0xc4>)
 800163e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 800164a:	4b08      	ldr	r3, [pc, #32]	@ (800166c <I2C2_MspInit+0xc4>)
 800164c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800164e:	4a07      	ldr	r2, [pc, #28]	@ (800166c <I2C2_MspInit+0xc4>)
 8001650:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001654:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 8001656:	4b05      	ldr	r3, [pc, #20]	@ (800166c <I2C2_MspInit+0xc4>)
 8001658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800165a:	4a04      	ldr	r2, [pc, #16]	@ (800166c <I2C2_MspInit+0xc4>)
 800165c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001660:	6753      	str	r3, [r2, #116]	@ 0x74
}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	@ 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	46020c00 	.word	0x46020c00
 8001670:	42021c00 	.word	0x42021c00

08001674 <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 800167c:	2310      	movs	r3, #16
 800167e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4619      	mov	r1, r3
 8001684:	480a      	ldr	r0, [pc, #40]	@ (80016b0 <I2C2_MspDeInit+0x3c>)
 8001686:	f003 ff29 	bl	80054dc <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 800168a:	2320      	movs	r3, #32
 800168c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4619      	mov	r1, r3
 8001692:	4807      	ldr	r0, [pc, #28]	@ (80016b0 <I2C2_MspDeInit+0x3c>)
 8001694:	f003 ff22 	bl	80054dc <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <I2C2_MspDeInit+0x40>)
 800169a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800169e:	4a05      	ldr	r2, [pc, #20]	@ (80016b4 <I2C2_MspDeInit+0x40>)
 80016a0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80016a4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	42021c00 	.word	0x42021c00
 80016b4:	46020c00 	.word	0x46020c00

080016b8 <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af04      	add	r7, sp, #16
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	4603      	mov	r3, r0
 80016c2:	81fb      	strh	r3, [r7, #14]
 80016c4:	460b      	mov	r3, r1
 80016c6:	81bb      	strh	r3, [r7, #12]
 80016c8:	4613      	mov	r3, r2
 80016ca:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80016cc:	8978      	ldrh	r0, [r7, #10]
 80016ce:	89ba      	ldrh	r2, [r7, #12]
 80016d0:	89f9      	ldrh	r1, [r7, #14]
 80016d2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	8b3b      	ldrh	r3, [r7, #24]
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	4603      	mov	r3, r0
 80016e2:	4807      	ldr	r0, [pc, #28]	@ (8001700 <I2C2_WriteReg+0x48>)
 80016e4:	f004 f8c2 	bl	800586c <HAL_I2C_Mem_Write>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e001      	b.n	80016f6 <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80016f2:	f06f 0307 	mvn.w	r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000db0 	.word	0x20000db0

08001704 <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af04      	add	r7, sp, #16
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	4603      	mov	r3, r0
 800170e:	81fb      	strh	r3, [r7, #14]
 8001710:	460b      	mov	r3, r1
 8001712:	81bb      	strh	r3, [r7, #12]
 8001714:	4613      	mov	r3, r2
 8001716:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8001718:	8978      	ldrh	r0, [r7, #10]
 800171a:	89ba      	ldrh	r2, [r7, #12]
 800171c:	89f9      	ldrh	r1, [r7, #14]
 800171e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	8b3b      	ldrh	r3, [r7, #24]
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	4603      	mov	r3, r0
 800172e:	4807      	ldr	r0, [pc, #28]	@ (800174c <I2C2_ReadReg+0x48>)
 8001730:	f004 f9b0 	bl	8005a94 <HAL_I2C_Mem_Read>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800173a:	2300      	movs	r3, #0
 800173c:	e001      	b.n	8001742 <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800173e:	f06f 0307 	mvn.w	r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000db0 	.word	0x20000db0

08001750 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <BSP_CAMERA_FrameEventCallback>:
  * @brief  Frame Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_FrameEventCallback(uint32_t Instance)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff ffd1 	bl	8001750 <BSP_CAMERA_LineEventCallback>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff ffd0 	bl	8001764 <BSP_CAMERA_FrameEventCallback>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 80017d4:	2000      	movs	r0, #0
 80017d6:	f7ff ffcf 	bl	8001778 <BSP_CAMERA_VsyncEventCallback>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff ffce 	bl	800178c <BSP_CAMERA_ErrorCallback>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_GYRO and/or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d903      	bls.n	8001814 <BSP_MOTION_SENSOR_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 800180c:	f06f 0301 	mvn.w	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	e03a      	b.n	800188a <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 0U) && ((Functions & MOTION_MAGNETO) != 0U))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d108      	bne.n	800182c <BSP_MOTION_SENSOR_Init+0x34>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <BSP_MOTION_SENSOR_Init+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001824:	f06f 030a 	mvn.w	r3, #10
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	e02e      	b.n	800188a <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 1U) && ((Functions & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d108      	bne.n	8001844 <BSP_MOTION_SENSOR_Init+0x4c>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <BSP_MOTION_SENSOR_Init+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800183c:	f06f 030a 	mvn.w	r3, #10
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	e022      	b.n	800188a <BSP_MOTION_SENSOR_Init+0x92>
  }
  else
  {
    /* Probe the motion sensor */
    if (Instance == 0U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <BSP_MOTION_SENSOR_Init+0x66>
    {
      /* Probe the ISM330DHCX sensor */
      if (ISM330DHCX_Probe(Functions) != BSP_ERROR_NONE)
 800184a:	6838      	ldr	r0, [r7, #0]
 800184c:	f000 fb50 	bl	8001ef0 <ISM330DHCX_Probe>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00c      	beq.n	8001870 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8001856:	f06f 0304 	mvn.w	r3, #4
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	e008      	b.n	8001870 <BSP_MOTION_SENSOR_Init+0x78>
      }
    }
    else /* Instance = 1 */
    {
      /* Probe the IIS2MDC sensor */
      if (IIS2MDC_Probe(Functions) != BSP_ERROR_NONE)
 800185e:	6838      	ldr	r0, [r7, #0]
 8001860:	f000 fbbc 	bl	8001fdc <IIS2MDC_Probe>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 800186a:	f06f 0304 	mvn.w	r3, #4
 800186e:	60fb      	str	r3, [r7, #12]
      }
    }

    if (status == BSP_ERROR_NONE)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <BSP_MOTION_SENSOR_Init+0x92>
    {
      /* Store current initialized functions */
      Motion_Sensor_Ctx[Instance].Functions |= Functions;
 8001876:	4a07      	ldr	r2, [pc, #28]	@ (8001894 <BSP_MOTION_SENSOR_Init+0x9c>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	431a      	orrs	r2, r3
 8001882:	4904      	ldr	r1, [pc, #16]	@ (8001894 <BSP_MOTION_SENSOR_Init+0x9c>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }
  return status;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000e4c 	.word	0x20000e4c

08001898 <BSP_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance.
  * @param  Capabilities Pointer to motion sensor capabilities.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetCapabilities(uint32_t Instance, MOTION_SENSOR_Capabilities_t *Capabilities)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Capabilities == NULL))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d802      	bhi.n	80018b2 <BSP_MOTION_SENSOR_GetCapabilities+0x1a>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d103      	bne.n	80018ba <BSP_MOTION_SENSOR_GetCapabilities+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80018b2:	f06f 0301 	mvn.w	r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e01b      	b.n	80018f2 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
  }
  else if (Motion_Sensor_Ctx[Instance].Functions == 0U)
 80018ba:	4a10      	ldr	r2, [pc, #64]	@ (80018fc <BSP_MOTION_SENSOR_GetCapabilities+0x64>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d103      	bne.n	80018ce <BSP_MOTION_SENSOR_GetCapabilities+0x36>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	e011      	b.n	80018f2 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
  }
  else
  {
    /* Get the capabilities of the motion sensor */
    if (Motion_Sensor_Drv[Instance]->GetCapabilities(Motion_Sensor_CompObj[Instance], Capabilities) < 0)
 80018ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001900 <BSP_MOTION_SENSOR_GetCapabilities+0x68>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	490a      	ldr	r1, [pc, #40]	@ (8001904 <BSP_MOTION_SENSOR_GetCapabilities+0x6c>)
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80018e0:	6839      	ldr	r1, [r7, #0]
 80018e2:	4610      	mov	r0, r2
 80018e4:	4798      	blx	r3
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da02      	bge.n	80018f2 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80018ec:	f06f 0304 	mvn.w	r3, #4
 80018f0:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000e4c 	.word	0x20000e4c
 8001900:	20000e5c 	.word	0x20000e5c
 8001904:	20000e54 	.word	0x20000e54

08001908 <BSP_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance.
  * @param  Id Pointer to motion sensor ID.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Id == NULL))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d802      	bhi.n	8001922 <BSP_MOTION_SENSOR_ReadID+0x1a>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d103      	bne.n	800192a <BSP_MOTION_SENSOR_ReadID+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001922:	f06f 0301 	mvn.w	r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	e01b      	b.n	8001962 <BSP_MOTION_SENSOR_ReadID+0x5a>
  }
  else if (Motion_Sensor_Ctx[Instance].Functions == 0U)
 800192a:	4a10      	ldr	r2, [pc, #64]	@ (800196c <BSP_MOTION_SENSOR_ReadID+0x64>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <BSP_MOTION_SENSOR_ReadID+0x36>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e011      	b.n	8001962 <BSP_MOTION_SENSOR_ReadID+0x5a>
  }
  else
  {
    /* Read the motion sensor ID */
    if (Motion_Sensor_Drv[Instance]->ReadID(Motion_Sensor_CompObj[Instance], Id) < 0)
 800193e:	4a0c      	ldr	r2, [pc, #48]	@ (8001970 <BSP_MOTION_SENSOR_ReadID+0x68>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	490a      	ldr	r1, [pc, #40]	@ (8001974 <BSP_MOTION_SENSOR_ReadID+0x6c>)
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	4610      	mov	r0, r2
 8001954:	4798      	blx	r3
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	da02      	bge.n	8001962 <BSP_MOTION_SENSOR_ReadID+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800195c:	f06f 0304 	mvn.w	r3, #4
 8001960:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000e4c 	.word	0x20000e4c
 8001970:	20000e5c 	.word	0x20000e5c
 8001974:	20000e54 	.word	0x20000e54

08001978 <BSP_MOTION_SENSOR_Enable>:
  *         - MOTION_GYRO or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d903      	bls.n	8001994 <BSP_MOTION_SENSOR_Enable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 800198c:	f06f 0301 	mvn.w	r3, #1
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	e045      	b.n	8001a20 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d108      	bne.n	80019ac <BSP_MOTION_SENSOR_Enable+0x34>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <BSP_MOTION_SENSOR_Enable+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80019a4:	f06f 030a 	mvn.w	r3, #10
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	e039      	b.n	8001a20 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d108      	bne.n	80019c4 <BSP_MOTION_SENSOR_Enable+0x4c>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <BSP_MOTION_SENSOR_Enable+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80019bc:	f06f 030a 	mvn.w	r3, #10
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	e02d      	b.n	8001a20 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 80019c4:	4a19      	ldr	r2, [pc, #100]	@ (8001a2c <BSP_MOTION_SENSOR_Enable+0xb4>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d103      	bne.n	80019dc <BSP_MOTION_SENSOR_Enable+0x64>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	e021      	b.n	8001a20 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else
  {
    /* Enable the motion sensor function */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d006      	beq.n	80019f0 <BSP_MOTION_SENSOR_Enable+0x78>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d101      	bne.n	80019ec <BSP_MOTION_SENSOR_Enable+0x74>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e002      	b.n	80019f2 <BSP_MOTION_SENSOR_Enable+0x7a>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e000      	b.n	80019f2 <BSP_MOTION_SENSOR_Enable+0x7a>
 80019f0:	2300      	movs	r3, #0
 80019f2:	72fb      	strb	r3, [r7, #11]
    if (Motion_Sensor_FuncDrv[Instance][index]->Enable(Motion_Sensor_CompObj[Instance]) < 0)
 80019f4:	7af9      	ldrb	r1, [r7, #11]
 80019f6:	480e      	ldr	r0, [pc, #56]	@ (8001a30 <BSP_MOTION_SENSOR_Enable+0xb8>)
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	440b      	add	r3, r1
 8001a02:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	490a      	ldr	r1, [pc, #40]	@ (8001a34 <BSP_MOTION_SENSOR_Enable+0xbc>)
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a10:	4610      	mov	r0, r2
 8001a12:	4798      	blx	r3
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da02      	bge.n	8001a20 <BSP_MOTION_SENSOR_Enable+0xa8>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001a1a:	f06f 0304 	mvn.w	r3, #4
 8001a1e:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8001a20:	68fb      	ldr	r3, [r7, #12]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000e4c 	.word	0x20000e4c
 8001a30:	20000e64 	.word	0x20000e64
 8001a34:	20000e54 	.word	0x20000e54

08001a38 <BSP_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Axes Pointer to motion sensor axes.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_Axes_t *Axes)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Axes == NULL))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d802      	bhi.n	8001a54 <BSP_MOTION_SENSOR_GetAxes+0x1c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d103      	bne.n	8001a5c <BSP_MOTION_SENSOR_GetAxes+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001a54:	f06f 0301 	mvn.w	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e046      	b.n	8001aea <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d108      	bne.n	8001a74 <BSP_MOTION_SENSOR_GetAxes+0x3c>
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <BSP_MOTION_SENSOR_GetAxes+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001a6c:	f06f 030a 	mvn.w	r3, #10
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e03a      	b.n	8001aea <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d108      	bne.n	8001a8c <BSP_MOTION_SENSOR_GetAxes+0x54>
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <BSP_MOTION_SENSOR_GetAxes+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001a84:	f06f 030a 	mvn.w	r3, #10
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e02e      	b.n	8001aea <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001a8c:	4a19      	ldr	r2, [pc, #100]	@ (8001af4 <BSP_MOTION_SENSOR_GetAxes+0xbc>)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d103      	bne.n	8001aa4 <BSP_MOTION_SENSOR_GetAxes+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e022      	b.n	8001aea <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else
  {
    /* Get the motion sensor axes */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d006      	beq.n	8001ab8 <BSP_MOTION_SENSOR_GetAxes+0x80>
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d101      	bne.n	8001ab4 <BSP_MOTION_SENSOR_GetAxes+0x7c>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e002      	b.n	8001aba <BSP_MOTION_SENSOR_GetAxes+0x82>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e000      	b.n	8001aba <BSP_MOTION_SENSOR_GetAxes+0x82>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetAxes(Motion_Sensor_CompObj[Instance], Axes) < 0)
 8001abc:	7cf9      	ldrb	r1, [r7, #19]
 8001abe:	480e      	ldr	r0, [pc, #56]	@ (8001af8 <BSP_MOTION_SENSOR_GetAxes+0xc0>)
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	440b      	add	r3, r1
 8001aca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	490a      	ldr	r1, [pc, #40]	@ (8001afc <BSP_MOTION_SENSOR_GetAxes+0xc4>)
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4610      	mov	r0, r2
 8001adc:	4798      	blx	r3
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	da02      	bge.n	8001aea <BSP_MOTION_SENSOR_GetAxes+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001ae4:	f06f 0304 	mvn.w	r3, #4
 8001ae8:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001aea:	697b      	ldr	r3, [r7, #20]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000e4c 	.word	0x20000e4c
 8001af8:	20000e64 	.word	0x20000e64
 8001afc:	20000e54 	.word	0x20000e54

08001b00 <BSP_MOTION_SENSOR_GetSensitivity>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Sensitivity Pointer to sensitivity.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetSensitivity(uint32_t Instance, uint32_t Function, float_t *Sensitivity)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Sensitivity == NULL))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d802      	bhi.n	8001b1c <BSP_MOTION_SENSOR_GetSensitivity+0x1c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d103      	bne.n	8001b24 <BSP_MOTION_SENSOR_GetSensitivity+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001b1c:	f06f 0301 	mvn.w	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e046      	b.n	8001bb2 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d108      	bne.n	8001b3c <BSP_MOTION_SENSOR_GetSensitivity+0x3c>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <BSP_MOTION_SENSOR_GetSensitivity+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001b34:	f06f 030a 	mvn.w	r3, #10
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e03a      	b.n	8001bb2 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d108      	bne.n	8001b54 <BSP_MOTION_SENSOR_GetSensitivity+0x54>
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <BSP_MOTION_SENSOR_GetSensitivity+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001b4c:	f06f 030a 	mvn.w	r3, #10
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e02e      	b.n	8001bb2 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001b54:	4a19      	ldr	r2, [pc, #100]	@ (8001bbc <BSP_MOTION_SENSOR_GetSensitivity+0xbc>)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d103      	bne.n	8001b6c <BSP_MOTION_SENSOR_GetSensitivity+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e022      	b.n	8001bb2 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else
  {
    /* Get the motion sensor sensitivity */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d006      	beq.n	8001b80 <BSP_MOTION_SENSOR_GetSensitivity+0x80>
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d101      	bne.n	8001b7c <BSP_MOTION_SENSOR_GetSensitivity+0x7c>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e002      	b.n	8001b82 <BSP_MOTION_SENSOR_GetSensitivity+0x82>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e000      	b.n	8001b82 <BSP_MOTION_SENSOR_GetSensitivity+0x82>
 8001b80:	2300      	movs	r3, #0
 8001b82:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetSensitivity(Motion_Sensor_CompObj[Instance], Sensitivity) < 0)
 8001b84:	7cf9      	ldrb	r1, [r7, #19]
 8001b86:	480e      	ldr	r0, [pc, #56]	@ (8001bc0 <BSP_MOTION_SENSOR_GetSensitivity+0xc0>)
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	490a      	ldr	r1, [pc, #40]	@ (8001bc4 <BSP_MOTION_SENSOR_GetSensitivity+0xc4>)
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4798      	blx	r3
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	da02      	bge.n	8001bb2 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001bac:	f06f 0304 	mvn.w	r3, #4
 8001bb0:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001bb2:	697b      	ldr	r3, [r7, #20]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000e4c 	.word	0x20000e4c
 8001bc0:	20000e64 	.word	0x20000e64
 8001bc4:	20000e54 	.word	0x20000e54

08001bc8 <BSP_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Pointer to output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Odr == NULL))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d802      	bhi.n	8001be4 <BSP_MOTION_SENSOR_GetOutputDataRate+0x1c>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d103      	bne.n	8001bec <BSP_MOTION_SENSOR_GetOutputDataRate+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001be4:	f06f 0301 	mvn.w	r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	e046      	b.n	8001c7a <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d108      	bne.n	8001c04 <BSP_MOTION_SENSOR_GetOutputDataRate+0x3c>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <BSP_MOTION_SENSOR_GetOutputDataRate+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001bfc:	f06f 030a 	mvn.w	r3, #10
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e03a      	b.n	8001c7a <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d108      	bne.n	8001c1c <BSP_MOTION_SENSOR_GetOutputDataRate+0x54>
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <BSP_MOTION_SENSOR_GetOutputDataRate+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001c14:	f06f 030a 	mvn.w	r3, #10
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	e02e      	b.n	8001c7a <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001c1c:	4a19      	ldr	r2, [pc, #100]	@ (8001c84 <BSP_MOTION_SENSOR_GetOutputDataRate+0xbc>)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d103      	bne.n	8001c34 <BSP_MOTION_SENSOR_GetOutputDataRate+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	e022      	b.n	8001c7a <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else
  {
    /* Get the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d006      	beq.n	8001c48 <BSP_MOTION_SENSOR_GetOutputDataRate+0x80>
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d101      	bne.n	8001c44 <BSP_MOTION_SENSOR_GetOutputDataRate+0x7c>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e002      	b.n	8001c4a <BSP_MOTION_SENSOR_GetOutputDataRate+0x82>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e000      	b.n	8001c4a <BSP_MOTION_SENSOR_GetOutputDataRate+0x82>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 8001c4c:	7cf9      	ldrb	r1, [r7, #19]
 8001c4e:	480e      	ldr	r0, [pc, #56]	@ (8001c88 <BSP_MOTION_SENSOR_GetOutputDataRate+0xc0>)
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	490a      	ldr	r1, [pc, #40]	@ (8001c8c <BSP_MOTION_SENSOR_GetOutputDataRate+0xc4>)
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4798      	blx	r3
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	da02      	bge.n	8001c7a <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001c74:	f06f 0304 	mvn.w	r3, #4
 8001c78:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001c7a:	697b      	ldr	r3, [r7, #20]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000e4c 	.word	0x20000e4c
 8001c88:	20000e64 	.word	0x20000e64
 8001c8c:	20000e54 	.word	0x20000e54

08001c90 <BSP_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d903      	bls.n	8001cb0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001ca8:	f06f 0301 	mvn.w	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	e047      	b.n	8001d40 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d108      	bne.n	8001cc8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x38>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x38>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001cc0:	f06f 030a 	mvn.w	r3, #10
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e03b      	b.n	8001d40 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d108      	bne.n	8001ce0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x50>
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x50>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001cd8:	f06f 030a 	mvn.w	r3, #10
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	e02f      	b.n	8001d40 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d4c <BSP_MOTION_SENSOR_SetOutputDataRate+0xbc>)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d103      	bne.n	8001cf8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x68>
  {
    status = BSP_ERROR_NO_INIT;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	e023      	b.n	8001d40 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else
  {
    /* Set the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d006      	beq.n	8001d0c <BSP_MOTION_SENSOR_SetOutputDataRate+0x7c>
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d101      	bne.n	8001d08 <BSP_MOTION_SENSOR_SetOutputDataRate+0x78>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e002      	b.n	8001d0e <BSP_MOTION_SENSOR_SetOutputDataRate+0x7e>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e000      	b.n	8001d0e <BSP_MOTION_SENSOR_SetOutputDataRate+0x7e>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->SetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 8001d10:	7cf9      	ldrb	r1, [r7, #19]
 8001d12:	480f      	ldr	r0, [pc, #60]	@ (8001d50 <BSP_MOTION_SENSOR_SetOutputDataRate+0xc0>)
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	490b      	ldr	r1, [pc, #44]	@ (8001d54 <BSP_MOTION_SENSOR_SetOutputDataRate+0xc4>)
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d2c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d30:	4610      	mov	r0, r2
 8001d32:	4798      	blx	r3
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	da02      	bge.n	8001d40 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001d3a:	f06f 0304 	mvn.w	r3, #4
 8001d3e:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001d40:	697b      	ldr	r3, [r7, #20]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000e4c 	.word	0x20000e4c
 8001d50:	20000e64 	.word	0x20000e64
 8001d54:	20000e54 	.word	0x20000e54

08001d58 <BSP_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Pointer to full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Fullscale == NULL))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d802      	bhi.n	8001d74 <BSP_MOTION_SENSOR_GetFullScale+0x1c>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d103      	bne.n	8001d7c <BSP_MOTION_SENSOR_GetFullScale+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001d74:	f06f 0301 	mvn.w	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	e046      	b.n	8001e0a <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d108      	bne.n	8001d94 <BSP_MOTION_SENSOR_GetFullScale+0x3c>
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <BSP_MOTION_SENSOR_GetFullScale+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001d8c:	f06f 030a 	mvn.w	r3, #10
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	e03a      	b.n	8001e0a <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d108      	bne.n	8001dac <BSP_MOTION_SENSOR_GetFullScale+0x54>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <BSP_MOTION_SENSOR_GetFullScale+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001da4:	f06f 030a 	mvn.w	r3, #10
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e02e      	b.n	8001e0a <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001dac:	4a19      	ldr	r2, [pc, #100]	@ (8001e14 <BSP_MOTION_SENSOR_GetFullScale+0xbc>)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d103      	bne.n	8001dc4 <BSP_MOTION_SENSOR_GetFullScale+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8001dbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	e022      	b.n	8001e0a <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else
  {
    /* Get the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d006      	beq.n	8001dd8 <BSP_MOTION_SENSOR_GetFullScale+0x80>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d101      	bne.n	8001dd4 <BSP_MOTION_SENSOR_GetFullScale+0x7c>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e002      	b.n	8001dda <BSP_MOTION_SENSOR_GetFullScale+0x82>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e000      	b.n	8001dda <BSP_MOTION_SENSOR_GetFullScale+0x82>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 8001ddc:	7cf9      	ldrb	r1, [r7, #19]
 8001dde:	480e      	ldr	r0, [pc, #56]	@ (8001e18 <BSP_MOTION_SENSOR_GetFullScale+0xc0>)
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	490a      	ldr	r1, [pc, #40]	@ (8001e1c <BSP_MOTION_SENSOR_GetFullScale+0xc4>)
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4798      	blx	r3
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	da02      	bge.n	8001e0a <BSP_MOTION_SENSOR_GetFullScale+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001e04:	f06f 0304 	mvn.w	r3, #4
 8001e08:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001e0a:	697b      	ldr	r3, [r7, #20]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000e4c 	.word	0x20000e4c
 8001e18:	20000e64 	.word	0x20000e64
 8001e1c:	20000e54 	.word	0x20000e54

08001e20 <BSP_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d903      	bls.n	8001e3e <BSP_MOTION_SENSOR_SetFullScale+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001e36:	f06f 0301 	mvn.w	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	e04d      	b.n	8001eda <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d108      	bne.n	8001e56 <BSP_MOTION_SENSOR_SetFullScale+0x36>
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <BSP_MOTION_SENSOR_SetFullScale+0x36>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001e4e:	f06f 030a 	mvn.w	r3, #10
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	e041      	b.n	8001eda <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d108      	bne.n	8001e6e <BSP_MOTION_SENSOR_SetFullScale+0x4e>
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <BSP_MOTION_SENSOR_SetFullScale+0x4e>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001e66:	f06f 030a 	mvn.w	r3, #10
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e035      	b.n	8001eda <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee4 <BSP_MOTION_SENSOR_SetFullScale+0xc4>)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <BSP_MOTION_SENSOR_SetFullScale+0x66>
  {
    status = BSP_ERROR_NO_INIT;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	e029      	b.n	8001eda <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else
  {
    /* Set the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d006      	beq.n	8001e9a <BSP_MOTION_SENSOR_SetFullScale+0x7a>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d101      	bne.n	8001e96 <BSP_MOTION_SENSOR_SetFullScale+0x76>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e002      	b.n	8001e9c <BSP_MOTION_SENSOR_SetFullScale+0x7c>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e000      	b.n	8001e9c <BSP_MOTION_SENSOR_SetFullScale+0x7c>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	74fb      	strb	r3, [r7, #19]
    if (index == MAGNETO_ID)
 8001e9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d103      	bne.n	8001eac <BSP_MOTION_SENSOR_SetFullScale+0x8c>
    {
      /* Feature not supported for Magneto */
      status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001ea4:	f06f 030a 	mvn.w	r3, #10
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	e016      	b.n	8001eda <BSP_MOTION_SENSOR_SetFullScale+0xba>
    }
    else
    {
      if (Motion_Sensor_FuncDrv[Instance][index]->SetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 8001eac:	7cf9      	ldrb	r1, [r7, #19]
 8001eae:	480e      	ldr	r0, [pc, #56]	@ (8001ee8 <BSP_MOTION_SENSOR_SetFullScale+0xc8>)
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	490a      	ldr	r1, [pc, #40]	@ (8001eec <BSP_MOTION_SENSOR_SetFullScale+0xcc>)
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4798      	blx	r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	da02      	bge.n	8001eda <BSP_MOTION_SENSOR_SetFullScale+0xba>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8001ed4:	f06f 0304 	mvn.w	r3, #4
 8001ed8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return status;
 8001eda:	697b      	ldr	r3, [r7, #20]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000e4c 	.word	0x20000e4c
 8001ee8:	20000e64 	.word	0x20000e64
 8001eec:	20000e54 	.word	0x20000e54

08001ef0 <ISM330DHCX_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status.
  */
static int32_t ISM330DHCX_Probe(uint32_t Functions)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	@ 0x30
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ISM330DHCX_IO_t            IOCtx;
  uint8_t                 ism330dlc_id;
  static ISM330DHCX_Object_t ISM330DHCX_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = ISM330DHCX_I2C_BUS;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = ISM330DHCX_I2C_ADD_H;
 8001f00:	23d7      	movs	r3, #215	@ 0xd7
 8001f02:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8001f04:	4b29      	ldr	r3, [pc, #164]	@ (8001fac <ISM330DHCX_Probe+0xbc>)
 8001f06:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8001f08:	4b29      	ldr	r3, [pc, #164]	@ (8001fb0 <ISM330DHCX_Probe+0xc0>)
 8001f0a:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8001f0c:	4b29      	ldr	r3, [pc, #164]	@ (8001fb4 <ISM330DHCX_Probe+0xc4>)
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8001f10:	4b29      	ldr	r3, [pc, #164]	@ (8001fb8 <ISM330DHCX_Probe+0xc8>)
 8001f12:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 8001f14:	4b29      	ldr	r3, [pc, #164]	@ (8001fbc <ISM330DHCX_Probe+0xcc>)
 8001f16:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Register Component Bus IO operations */
  if (ISM330DHCX_RegisterBusIO(&ISM330DHCX_Obj, &IOCtx) != ISM330DHCX_OK)
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4828      	ldr	r0, [pc, #160]	@ (8001fc0 <ISM330DHCX_Probe+0xd0>)
 8001f20:	f000 fd08 	bl	8002934 <ISM330DHCX_RegisterBusIO>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <ISM330DHCX_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8001f2a:	f06f 0307 	mvn.w	r3, #7
 8001f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f30:	e037      	b.n	8001fa2 <ISM330DHCX_Probe+0xb2>
  }
  /* Read the sensor ID */
  else if (ISM330DHCX_ReadID(&ISM330DHCX_Obj, &ism330dlc_id) != ISM330DHCX_OK)
 8001f32:	f107 030f 	add.w	r3, r7, #15
 8001f36:	4619      	mov	r1, r3
 8001f38:	4821      	ldr	r0, [pc, #132]	@ (8001fc0 <ISM330DHCX_Probe+0xd0>)
 8001f3a:	f000 fe15 	bl	8002b68 <ISM330DHCX_ReadID>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <ISM330DHCX_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8001f44:	f06f 0304 	mvn.w	r3, #4
 8001f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f4a:	e02a      	b.n	8001fa2 <ISM330DHCX_Probe+0xb2>
  }
  /* Check if the returned sensor ID is correct */
  else if (ism330dlc_id != ISM330DHCX_ID)
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	2b6b      	cmp	r3, #107	@ 0x6b
 8001f50:	d003      	beq.n	8001f5a <ISM330DHCX_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8001f52:	f06f 0306 	mvn.w	r3, #6
 8001f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f58:	e023      	b.n	8001fa2 <ISM330DHCX_Probe+0xb2>
  }
  else
  {
    Motion_Sensor_CompObj[0] = &ISM330DHCX_Obj;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc4 <ISM330DHCX_Probe+0xd4>)
 8001f5c:	4a18      	ldr	r2, [pc, #96]	@ (8001fc0 <ISM330DHCX_Probe+0xd0>)
 8001f5e:	601a      	str	r2, [r3, #0]
    Motion_Sensor_Drv[0]     = (MOTION_SENSOR_CommonDrv_t *) &ISM330DHCX_COMMON_Driver;
 8001f60:	4b19      	ldr	r3, [pc, #100]	@ (8001fc8 <ISM330DHCX_Probe+0xd8>)
 8001f62:	4a1a      	ldr	r2, [pc, #104]	@ (8001fcc <ISM330DHCX_Probe+0xdc>)
 8001f64:	601a      	str	r2, [r3, #0]
    /* Initialize the component */
    if (Motion_Sensor_Drv[0]->Init(Motion_Sensor_CompObj[0]) < 0)
 8001f66:	4b18      	ldr	r3, [pc, #96]	@ (8001fc8 <ISM330DHCX_Probe+0xd8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a15      	ldr	r2, [pc, #84]	@ (8001fc4 <ISM330DHCX_Probe+0xd4>)
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	4610      	mov	r0, r2
 8001f72:	4798      	blx	r3
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	da03      	bge.n	8001f82 <ISM330DHCX_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001f7a:	f06f 0304 	mvn.w	r3, #4
 8001f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f80:	e00f      	b.n	8001fa2 <ISM330DHCX_Probe+0xb2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_GYRO) != 0U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <ISM330DHCX_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[0][GYRO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_GYRO_Driver;
 8001f8c:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <ISM330DHCX_Probe+0xe0>)
 8001f8e:	4a11      	ldr	r2, [pc, #68]	@ (8001fd4 <ISM330DHCX_Probe+0xe4>)
 8001f90:	601a      	str	r2, [r3, #0]
      }
      if ((Functions & MOTION_ACCELERO) != 0U)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <ISM330DHCX_Probe+0xb2>
      {
        Motion_Sensor_FuncDrv[0][ACCELERO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_ACC_Driver;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <ISM330DHCX_Probe+0xe0>)
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd8 <ISM330DHCX_Probe+0xe8>)
 8001fa0:	605a      	str	r2, [r3, #4]
      }
    }
  }

  return status;
 8001fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3730      	adds	r7, #48	@ 0x30
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	08000eb5 	.word	0x08000eb5
 8001fb0:	08000f29 	.word	0x08000f29
 8001fb4:	08001051 	.word	0x08001051
 8001fb8:	08000ff5 	.word	0x08000ff5
 8001fbc:	080010ad 	.word	0x080010ad
 8001fc0:	20000e7c 	.word	0x20000e7c
 8001fc4:	20000e54 	.word	0x20000e54
 8001fc8:	20000e5c 	.word	0x20000e5c
 8001fcc:	20000048 	.word	0x20000048
 8001fd0:	20000e64 	.word	0x20000e64
 8001fd4:	2000007c 	.word	0x2000007c
 8001fd8:	20000058 	.word	0x20000058

08001fdc <IIS2MDC_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status.
  */
static int32_t IIS2MDC_Probe(uint32_t Functions)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	@ 0x30
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  IIS2MDC_IO_t            IOCtx;
  uint8_t                 iis2mdc_id;
  static IIS2MDC_Object_t IIS2MDC_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = IIS2MDC_I2C_BUS;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = IIS2MDC_I2C_ADD;
 8001fec:	233d      	movs	r3, #61	@ 0x3d
 8001fee:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8001ff0:	4b25      	ldr	r3, [pc, #148]	@ (8002088 <IIS2MDC_Probe+0xac>)
 8001ff2:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8001ff4:	4b25      	ldr	r3, [pc, #148]	@ (800208c <IIS2MDC_Probe+0xb0>)
 8001ff6:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8001ff8:	4b25      	ldr	r3, [pc, #148]	@ (8002090 <IIS2MDC_Probe+0xb4>)
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8001ffc:	4b25      	ldr	r3, [pc, #148]	@ (8002094 <IIS2MDC_Probe+0xb8>)
 8001ffe:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 8002000:	4b25      	ldr	r3, [pc, #148]	@ (8002098 <IIS2MDC_Probe+0xbc>)
 8002002:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Register Component Bus IO operations */
  if (IIS2MDC_RegisterBusIO(&IIS2MDC_Obj, &IOCtx) != IIS2MDC_OK)
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	4619      	mov	r1, r3
 800200a:	4824      	ldr	r0, [pc, #144]	@ (800209c <IIS2MDC_Probe+0xc0>)
 800200c:	f000 f852 	bl	80020b4 <IIS2MDC_RegisterBusIO>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <IIS2MDC_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8002016:	f06f 0307 	mvn.w	r3, #7
 800201a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800201c:	e02f      	b.n	800207e <IIS2MDC_Probe+0xa2>
  }
  /* Read the sensor ID */
  else if (IIS2MDC_ReadID(&IIS2MDC_Obj, &iis2mdc_id) != IIS2MDC_OK)
 800201e:	f107 030f 	add.w	r3, r7, #15
 8002022:	4619      	mov	r1, r3
 8002024:	481d      	ldr	r0, [pc, #116]	@ (800209c <IIS2MDC_Probe+0xc0>)
 8002026:	f000 f8fc 	bl	8002222 <IIS2MDC_ReadID>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <IIS2MDC_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8002030:	f06f 0304 	mvn.w	r3, #4
 8002034:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002036:	e022      	b.n	800207e <IIS2MDC_Probe+0xa2>
  }
  /* Check if the returned sensor ID is correct */
  else if (iis2mdc_id != IIS2MDC_ID)
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	2b40      	cmp	r3, #64	@ 0x40
 800203c:	d003      	beq.n	8002046 <IIS2MDC_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 800203e:	f06f 0306 	mvn.w	r3, #6
 8002042:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002044:	e01b      	b.n	800207e <IIS2MDC_Probe+0xa2>
  }
  else
  {
    Motion_Sensor_CompObj[1] = &IIS2MDC_Obj;
 8002046:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <IIS2MDC_Probe+0xc4>)
 8002048:	4a14      	ldr	r2, [pc, #80]	@ (800209c <IIS2MDC_Probe+0xc0>)
 800204a:	605a      	str	r2, [r3, #4]
    Motion_Sensor_Drv[1]     = (MOTION_SENSOR_CommonDrv_t *) &IIS2MDC_COMMON_Driver;
 800204c:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <IIS2MDC_Probe+0xc8>)
 800204e:	4a16      	ldr	r2, [pc, #88]	@ (80020a8 <IIS2MDC_Probe+0xcc>)
 8002050:	605a      	str	r2, [r3, #4]
    /* Initialize the component */
    if (Motion_Sensor_Drv[1]->Init(Motion_Sensor_CompObj[1]) < 0)
 8002052:	4b14      	ldr	r3, [pc, #80]	@ (80020a4 <IIS2MDC_Probe+0xc8>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a11      	ldr	r2, [pc, #68]	@ (80020a0 <IIS2MDC_Probe+0xc4>)
 800205a:	6852      	ldr	r2, [r2, #4]
 800205c:	4610      	mov	r0, r2
 800205e:	4798      	blx	r3
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	da03      	bge.n	800206e <IIS2MDC_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8002066:	f06f 0304 	mvn.w	r3, #4
 800206a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800206c:	e007      	b.n	800207e <IIS2MDC_Probe+0xa2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_MAGNETO) != 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <IIS2MDC_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[1][MAGNETO_ID] = (MOTION_SENSOR_FuncDrv_t *) &IIS2MDC_MAG_Driver;
 8002078:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <IIS2MDC_Probe+0xd0>)
 800207a:	4a0d      	ldr	r2, [pc, #52]	@ (80020b0 <IIS2MDC_Probe+0xd4>)
 800207c:	615a      	str	r2, [r3, #20]
      }
    }
  }

  return status;
 800207e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002080:	4618      	mov	r0, r3
 8002082:	3730      	adds	r7, #48	@ 0x30
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	08000eb5 	.word	0x08000eb5
 800208c:	08000f29 	.word	0x08000f29
 8002090:	08001051 	.word	0x08001051
 8002094:	08000ff5 	.word	0x08000ff5
 8002098:	080010ad 	.word	0x080010ad
 800209c:	20000eac 	.word	0x20000eac
 80020a0:	20000e54 	.word	0x20000e54
 80020a4:	20000e5c 	.word	0x20000e5c
 80020a8:	20000014 	.word	0x20000014
 80020ac:	20000e64 	.word	0x20000e64
 80020b0:	20000024 	.word	0x20000024

080020b4 <IIS2MDC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d103      	bne.n	80020d0 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	e04b      	b.n	8002168 <IIS2MDC_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	7b1a      	ldrb	r2, [r3, #12]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a1a      	ldr	r2, [pc, #104]	@ (8002174 <IIS2MDC_RegisterBusIO+0xc0>)
 800210c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a19      	ldr	r2, [pc, #100]	@ (8002178 <IIS2MDC_RegisterBusIO+0xc4>)
 8002112:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d103      	bne.n	800212a <IIS2MDC_RegisterBusIO+0x76>
    {
      ret = IIS2MDC_ERROR;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	e01e      	b.n	8002168 <IIS2MDC_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4798      	blx	r3
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <IIS2MDC_RegisterBusIO+0x8a>
    {
      ret = IIS2MDC_ERROR;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	e014      	b.n	8002168 <IIS2MDC_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d010      	beq.n	8002168 <IIS2MDC_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10b      	bne.n	8002168 <IIS2MDC_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	331c      	adds	r3, #28
 8002154:	2101      	movs	r1, #1
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fbc5 	bl	80028e6 <iis2mdc_i2c_interface_set>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <IIS2MDC_RegisterBusIO+0xb4>
          {
            ret = IIS2MDC_ERROR;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002166:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002168:	68fb      	ldr	r3, [r7, #12]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	0800256f 	.word	0x0800256f
 8002178:	080025d1 	.word	0x080025d1

0800217c <IIS2MDC_Init>:
 * @brief  Initialize the IIS2MDC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	331c      	adds	r3, #28
 8002188:	2101      	movs	r1, #1
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fb06 	bl	800279c <iis2mdc_block_data_update_set>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800219a:	e028      	b.n	80021ee <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	331c      	adds	r3, #28
 80021a0:	2102      	movs	r1, #2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fa75 	bl	8002692 <iis2mdc_operating_mode_set>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021b2:	e01c      	b.n	80021ee <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	331c      	adds	r3, #28
 80021b8:	2103      	movs	r1, #3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fa8f 	bl	80026de <iis2mdc_data_rate_set>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021ca:	e010      	b.n	80021ee <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	331c      	adds	r3, #28
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fb61 	bl	800289a <iis2mdc_self_test_set>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021e2:	e004      	b.n	80021ee <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return IIS2MDC_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <IIS2MDC_DeInit>:
 * @brief  Deinitialize the IIS2MDC magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_DeInit(IIS2MDC_Object_t *pObj)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f874 	bl	80022ec <IIS2MDC_MAG_Disable>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <IIS2MDC_DeInit+0x1a>
  {
    return IIS2MDC_ERROR;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800220e:	e004      	b.n	800221a <IIS2MDC_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return IIS2MDC_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <IIS2MDC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_ReadID(IIS2MDC_Object_t *pObj, uint8_t *Id)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	331c      	adds	r3, #28
 8002230:	6839      	ldr	r1, [r7, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fb20 	bl	8002878 <iis2mdc_device_id_get>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <IIS2MDC_ReadID+0x22>
  {
    return IIS2MDC_ERROR;
 800223e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002242:	e000      	b.n	8002246 <IIS2MDC_ReadID+0x24>
  }

  return IIS2MDC_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <IIS2MDC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
 * @retval Component status
 */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	2200      	movs	r2, #0
 8002264:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2201      	movs	r2, #1
 800226a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2200      	movs	r2, #0
 8002276:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2232      	movs	r2, #50	@ 0x32
 8002282:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <IIS2MDC_GetCapabilities+0x58>)
 8002298:	619a      	str	r2, [r3, #24]
  return IIS2MDC_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	42c80000 	.word	0x42c80000

080022ac <IIS2MDC_MAG_Enable>:
 * @brief Enable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e010      	b.n	80022e4 <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	331c      	adds	r3, #28
 80022c6:	2100      	movs	r1, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 f9e2 	bl	8002692 <iis2mdc_operating_mode_set>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 80022d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022d8:	e004      	b.n	80022e4 <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return IIS2MDC_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <IIS2MDC_MAG_Disable>:
 * @brief Disable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Disable(IIS2MDC_Object_t *pObj)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <IIS2MDC_MAG_Disable+0x16>
  {
    return IIS2MDC_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e010      	b.n	8002324 <IIS2MDC_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	331c      	adds	r3, #28
 8002306:	2102      	movs	r1, #2
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f9c2 	bl	8002692 <iis2mdc_operating_mode_set>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <IIS2MDC_MAG_Disable+0x2e>
  {
    return IIS2MDC_ERROR;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002318:	e004      	b.n	8002324 <IIS2MDC_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return IIS2MDC_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <IIS2MDC_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800233c:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <IIS2MDC_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetOutputDataRate(IIS2MDC_Object_t *pObj, float *Odr)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
  iis2mdc_odr_t odr_low_level;

  /* Get current output data rate. */
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	331c      	adds	r3, #28
 800235e:	f107 020b 	add.w	r2, r7, #11
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f000 f9e1 	bl	800272c <iis2mdc_data_rate_get>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <IIS2MDC_MAG_GetOutputDataRate+0x2a>
  {
    return IIS2MDC_ERROR;
 8002370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002374:	e023      	b.n	80023be <IIS2MDC_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002376:	7afb      	ldrb	r3, [r7, #11]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d81b      	bhi.n	80023b4 <IIS2MDC_MAG_GetOutputDataRate+0x68>
 800237c:	a201      	add	r2, pc, #4	@ (adr r2, 8002384 <IIS2MDC_MAG_GetOutputDataRate+0x38>)
 800237e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002382:	bf00      	nop
 8002384:	08002395 	.word	0x08002395
 8002388:	0800239d 	.word	0x0800239d
 800238c:	080023a5 	.word	0x080023a5
 8002390:	080023ad 	.word	0x080023ad
  {
    case IIS2MDC_ODR_10Hz:
      *Odr = 10.0f;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4a0c      	ldr	r2, [pc, #48]	@ (80023c8 <IIS2MDC_MAG_GetOutputDataRate+0x7c>)
 8002398:	601a      	str	r2, [r3, #0]
      break;
 800239a:	e00f      	b.n	80023bc <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_20Hz:
      *Odr = 20.0f;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	4a0b      	ldr	r2, [pc, #44]	@ (80023cc <IIS2MDC_MAG_GetOutputDataRate+0x80>)
 80023a0:	601a      	str	r2, [r3, #0]
      break;
 80023a2:	e00b      	b.n	80023bc <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_50Hz:
      *Odr = 50.0f;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4a0a      	ldr	r2, [pc, #40]	@ (80023d0 <IIS2MDC_MAG_GetOutputDataRate+0x84>)
 80023a8:	601a      	str	r2, [r3, #0]
      break;
 80023aa:	e007      	b.n	80023bc <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_100Hz:
      *Odr = 100.0f;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	4a09      	ldr	r2, [pc, #36]	@ (80023d4 <IIS2MDC_MAG_GetOutputDataRate+0x88>)
 80023b0:	601a      	str	r2, [r3, #0]
      break;
 80023b2:	e003      	b.n	80023bc <IIS2MDC_MAG_GetOutputDataRate+0x70>

    default:
      ret = IIS2MDC_ERROR;
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023b8:	60fb      	str	r3, [r7, #12]
      break;
 80023ba:	bf00      	nop
  }

  return ret;
 80023bc:	68fb      	ldr	r3, [r7, #12]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	41200000 	.word	0x41200000
 80023cc:	41a00000 	.word	0x41a00000
 80023d0:	42480000 	.word	0x42480000
 80023d4:	42c80000 	.word	0x42c80000

080023d8 <IIS2MDC_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetOutputDataRate(IIS2MDC_Object_t *pObj, float Odr)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	ed87 0a00 	vstr	s0, [r7]
  iis2mdc_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 80023e4:	edd7 7a00 	vldr	s15, [r7]
 80023e8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80023ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f4:	d801      	bhi.n	80023fa <IIS2MDC_MAG_SetOutputDataRate+0x22>
 80023f6:	2300      	movs	r3, #0
 80023f8:	e016      	b.n	8002428 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 80023fa:	edd7 7a00 	vldr	s15, [r7]
 80023fe:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240a:	d801      	bhi.n	8002410 <IIS2MDC_MAG_SetOutputDataRate+0x38>
 800240c:	2301      	movs	r3, #1
 800240e:	e00b      	b.n	8002428 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8002410:	edd7 7a00 	vldr	s15, [r7]
 8002414:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002450 <IIS2MDC_MAG_SetOutputDataRate+0x78>
 8002418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800241c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002420:	d801      	bhi.n	8002426 <IIS2MDC_MAG_SetOutputDataRate+0x4e>
 8002422:	2302      	movs	r3, #2
 8002424:	e000      	b.n	8002428 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8002426:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
 8002428:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? IIS2MDC_ODR_50Hz
            :                    IIS2MDC_ODR_100Hz;

  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	331c      	adds	r3, #28
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f953 	bl	80026de <iis2mdc_data_rate_set>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <IIS2MDC_MAG_SetOutputDataRate+0x6c>
  {
    return IIS2MDC_ERROR;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002442:	e000      	b.n	8002446 <IIS2MDC_MAG_SetOutputDataRate+0x6e>
  }

  return IIS2MDC_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	42480000 	.word	0x42480000

08002454 <IIS2MDC_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *FullScale = 50;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2232      	movs	r2, #50	@ 0x32
 8002462:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <IIS2MDC_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <IIS2MDC_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b084      	sub	sp, #16
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	331c      	adds	r3, #28
 8002498:	f107 0208 	add.w	r2, r7, #8
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f9a2 	bl	80027e8 <iis2mdc_magnetic_raw_get>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <IIS2MDC_MAG_GetAxesRaw+0x26>
  {
    return IIS2MDC_ERROR;
 80024aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024ae:	e00c      	b.n	80024ca <IIS2MDC_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80024b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80024b8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80024c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	809a      	strh	r2, [r3, #4]

  return IIS2MDC_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <IIS2MDC_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	331c      	adds	r3, #28
 80024e0:	f107 0210 	add.w	r2, r7, #16
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f97e 	bl	80027e8 <iis2mdc_magnetic_raw_get>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024f6:	e036      	b.n	8002566 <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	4619      	mov	r1, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ff14 	bl	800232c <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002504:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002510:	edd7 7a03 	vldr	s15, [r7, #12]
 8002514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800251c:	ee17 2a90 	vmov	r2, s15
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002524:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002530:	edd7 7a03 	vldr	s15, [r7, #12]
 8002534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800253c:	ee17 2a90 	vmov	r2, s15
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002544:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002548:	ee07 3a90 	vmov	s15, r3
 800254c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002550:	edd7 7a03 	vldr	s15, [r7, #12]
 8002554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800255c:	ee17 2a90 	vmov	r2, s15
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800256e:	b590      	push	{r4, r7, lr}
 8002570:	b087      	sub	sp, #28
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	461a      	mov	r2, r3
 800257a:	460b      	mov	r3, r1
 800257c:	72fb      	strb	r3, [r7, #11]
 800257e:	4613      	mov	r3, r2
 8002580:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10e      	bne.n	80025ac <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	695c      	ldr	r4, [r3, #20]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	7b1b      	ldrb	r3, [r3, #12]
 8002596:	4618      	mov	r0, r3
 8002598:	7afb      	ldrb	r3, [r7, #11]
 800259a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	4619      	mov	r1, r3
 80025a2:	893b      	ldrh	r3, [r7, #8]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	47a0      	blx	r4
 80025a8:	4603      	mov	r3, r0
 80025aa:	e00d      	b.n	80025c8 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	695c      	ldr	r4, [r3, #20]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	7b1b      	ldrb	r3, [r3, #12]
 80025b4:	4618      	mov	r0, r3
 80025b6:	7afb      	ldrb	r3, [r7, #11]
 80025b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	4619      	mov	r1, r3
 80025c0:	893b      	ldrh	r3, [r7, #8]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	47a0      	blx	r4
 80025c6:	4603      	mov	r3, r0
  }
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd90      	pop	{r4, r7, pc}

080025d0 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	461a      	mov	r2, r3
 80025dc:	460b      	mov	r3, r1
 80025de:	72fb      	strb	r3, [r7, #11]
 80025e0:	4613      	mov	r3, r2
 80025e2:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10e      	bne.n	800260e <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	691c      	ldr	r4, [r3, #16]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	7b1b      	ldrb	r3, [r3, #12]
 80025f8:	4618      	mov	r0, r3
 80025fa:	7afb      	ldrb	r3, [r7, #11]
 80025fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002600:	b2db      	uxtb	r3, r3
 8002602:	4619      	mov	r1, r3
 8002604:	893b      	ldrh	r3, [r7, #8]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	47a0      	blx	r4
 800260a:	4603      	mov	r3, r0
 800260c:	e00d      	b.n	800262a <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	691c      	ldr	r4, [r3, #16]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	7b1b      	ldrb	r3, [r3, #12]
 8002616:	4618      	mov	r0, r3
 8002618:	7afb      	ldrb	r3, [r7, #11]
 800261a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800261e:	b2db      	uxtb	r3, r3
 8002620:	4619      	mov	r1, r3
 8002622:	893b      	ldrh	r3, [r7, #8]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	47a0      	blx	r4
 8002628:	4603      	mov	r3, r0
  }
}
 800262a:	4618      	mov	r0, r3
 800262c:	371c      	adds	r7, #28
 800262e:	46bd      	mov	sp, r7
 8002630:	bd90      	pop	{r4, r7, pc}

08002632 <iis2mdc_read_reg>:
  *
  */
int32_t iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002632:	b590      	push	{r4, r7, lr}
 8002634:	b087      	sub	sp, #28
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	461a      	mov	r2, r3
 800263e:	460b      	mov	r3, r1
 8002640:	72fb      	strb	r3, [r7, #11]
 8002642:	4613      	mov	r3, r2
 8002644:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	685c      	ldr	r4, [r3, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6898      	ldr	r0, [r3, #8]
 800264e:	893b      	ldrh	r3, [r7, #8]
 8002650:	7af9      	ldrb	r1, [r7, #11]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	47a0      	blx	r4
 8002656:	6178      	str	r0, [r7, #20]
  return ret;
 8002658:	697b      	ldr	r3, [r7, #20]
}
 800265a:	4618      	mov	r0, r3
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	bd90      	pop	{r4, r7, pc}

08002662 <iis2mdc_write_reg>:
  *
  */
int32_t iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002662:	b590      	push	{r4, r7, lr}
 8002664:	b087      	sub	sp, #28
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	461a      	mov	r2, r3
 800266e:	460b      	mov	r3, r1
 8002670:	72fb      	strb	r3, [r7, #11]
 8002672:	4613      	mov	r3, r2
 8002674:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681c      	ldr	r4, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6898      	ldr	r0, [r3, #8]
 800267e:	893b      	ldrh	r3, [r7, #8]
 8002680:	7af9      	ldrb	r1, [r7, #11]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	47a0      	blx	r4
 8002686:	6178      	str	r0, [r7, #20]
  return ret;
 8002688:	697b      	ldr	r3, [r7, #20]
}
 800268a:	4618      	mov	r0, r3
 800268c:	371c      	adds	r7, #28
 800268e:	46bd      	mov	sp, r7
 8002690:	bd90      	pop	{r4, r7, pc}

08002692 <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	460b      	mov	r3, r1
 800269c:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800269e:	f107 0208 	add.w	r2, r7, #8
 80026a2:	2301      	movs	r3, #1
 80026a4:	2160      	movs	r1, #96	@ 0x60
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ffc3 	bl	8002632 <iis2mdc_read_reg>
 80026ac:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10f      	bne.n	80026d4 <iis2mdc_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	7a3b      	ldrb	r3, [r7, #8]
 80026be:	f362 0301 	bfi	r3, r2, #0, #2
 80026c2:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80026c4:	f107 0208 	add.w	r2, r7, #8
 80026c8:	2301      	movs	r3, #1
 80026ca:	2160      	movs	r1, #96	@ 0x60
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ffc8 	bl	8002662 <iis2mdc_write_reg>
 80026d2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80026d4:	68fb      	ldr	r3, [r7, #12]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80026ea:	f107 0208 	add.w	r2, r7, #8
 80026ee:	2301      	movs	r3, #1
 80026f0:	2160      	movs	r1, #96	@ 0x60
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ff9d 	bl	8002632 <iis2mdc_read_reg>
 80026f8:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10f      	bne.n	8002720 <iis2mdc_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	b2da      	uxtb	r2, r3
 8002708:	7a3b      	ldrb	r3, [r7, #8]
 800270a:	f362 0383 	bfi	r3, r2, #2, #2
 800270e:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002710:	f107 0208 	add.w	r2, r7, #8
 8002714:	2301      	movs	r3, #1
 8002716:	2160      	movs	r1, #96	@ 0x60
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ffa2 	bl	8002662 <iis2mdc_write_reg>
 800271e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002720:	68fb      	ldr	r3, [r7, #12]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002736:	f107 0208 	add.w	r2, r7, #8
 800273a:	2301      	movs	r3, #1
 800273c:	2160      	movs	r1, #96	@ 0x60
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ff77 	bl	8002632 <iis2mdc_read_reg>
 8002744:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8002746:	7a3b      	ldrb	r3, [r7, #8]
 8002748:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b03      	cmp	r3, #3
 8002750:	d81a      	bhi.n	8002788 <iis2mdc_data_rate_get+0x5c>
 8002752:	a201      	add	r2, pc, #4	@ (adr r2, 8002758 <iis2mdc_data_rate_get+0x2c>)
 8002754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002758:	08002769 	.word	0x08002769
 800275c:	08002771 	.word	0x08002771
 8002760:	08002779 	.word	0x08002779
 8002764:	08002781 	.word	0x08002781
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
      break;
 800276e:	e00f      	b.n	8002790 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_20Hz:
      *val = IIS2MDC_ODR_20Hz;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2201      	movs	r2, #1
 8002774:	701a      	strb	r2, [r3, #0]
      break;
 8002776:	e00b      	b.n	8002790 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_50Hz:
      *val = IIS2MDC_ODR_50Hz;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2202      	movs	r2, #2
 800277c:	701a      	strb	r2, [r3, #0]
      break;
 800277e:	e007      	b.n	8002790 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_100Hz:
      *val = IIS2MDC_ODR_100Hz;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2203      	movs	r2, #3
 8002784:	701a      	strb	r2, [r3, #0]
      break;
 8002786:	e003      	b.n	8002790 <iis2mdc_data_rate_get+0x64>

    default:
      *val = IIS2MDC_ODR_10Hz;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
      break;
 800278e:	bf00      	nop
  }

  return ret;
 8002790:	68fb      	ldr	r3, [r7, #12]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop

0800279c <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80027a8:	f107 0208 	add.w	r2, r7, #8
 80027ac:	2301      	movs	r3, #1
 80027ae:	2162      	movs	r1, #98	@ 0x62
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff3e 	bl	8002632 <iis2mdc_read_reg>
 80027b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10f      	bne.n	80027de <iis2mdc_block_data_update_set+0x42>
    reg.bdu = val;
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	7a3b      	ldrb	r3, [r7, #8]
 80027c8:	f362 1304 	bfi	r3, r2, #4, #1
 80027cc:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80027ce:	f107 0208 	add.w	r2, r7, #8
 80027d2:	2301      	movs	r3, #1
 80027d4:	2162      	movs	r1, #98	@ 0x62
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ff43 	bl	8002662 <iis2mdc_write_reg>
 80027dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 80027f2:	f107 020c 	add.w	r2, r7, #12
 80027f6:	2306      	movs	r3, #6
 80027f8:	2168      	movs	r1, #104	@ 0x68
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff ff19 	bl	8002632 <iis2mdc_read_reg>
 8002800:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002802:	7b7b      	ldrb	r3, [r7, #13]
 8002804:	b21a      	sxth	r2, r3
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002810:	b29b      	uxth	r3, r3
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	b29b      	uxth	r3, r3
 8002816:	7b3a      	ldrb	r2, [r7, #12]
 8002818:	4413      	add	r3, r2
 800281a:	b29b      	uxth	r3, r3
 800281c:	b21a      	sxth	r2, r3
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	3302      	adds	r3, #2
 8002828:	b212      	sxth	r2, r2
 800282a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	3302      	adds	r3, #2
 8002830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002834:	b29b      	uxth	r3, r3
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	b29b      	uxth	r3, r3
 800283a:	7bba      	ldrb	r2, [r7, #14]
 800283c:	4413      	add	r3, r2
 800283e:	b29a      	uxth	r2, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	3302      	adds	r3, #2
 8002844:	b212      	sxth	r2, r2
 8002846:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002848:	7c7a      	ldrb	r2, [r7, #17]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	3304      	adds	r3, #4
 800284e:	b212      	sxth	r2, r2
 8002850:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	3304      	adds	r3, #4
 8002856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800285a:	b29b      	uxth	r3, r3
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	b29b      	uxth	r3, r3
 8002860:	7c3a      	ldrb	r2, [r7, #16]
 8002862:	4413      	add	r3, r2
 8002864:	b29a      	uxth	r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	3304      	adds	r3, #4
 800286a:	b212      	sxth	r2, r2
 800286c:	801a      	strh	r2, [r3, #0]
  return ret;
 800286e:	697b      	ldr	r3, [r7, #20]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 8002882:	2301      	movs	r3, #1
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	214f      	movs	r1, #79	@ 0x4f
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff fed2 	bl	8002632 <iis2mdc_read_reg>
 800288e:	60f8      	str	r0, [r7, #12]
  return ret;
 8002890:	68fb      	ldr	r3, [r7, #12]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	460b      	mov	r3, r1
 80028a4:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80028a6:	f107 0208 	add.w	r2, r7, #8
 80028aa:	2301      	movs	r3, #1
 80028ac:	2162      	movs	r1, #98	@ 0x62
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff febf 	bl	8002632 <iis2mdc_read_reg>
 80028b4:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10f      	bne.n	80028dc <iis2mdc_self_test_set+0x42>
    reg.self_test = val;
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	7a3b      	ldrb	r3, [r7, #8]
 80028c6:	f362 0341 	bfi	r3, r2, #1, #1
 80028ca:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80028cc:	f107 0208 	add.w	r2, r7, #8
 80028d0:	2301      	movs	r3, #1
 80028d2:	2162      	movs	r1, #98	@ 0x62
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff fec4 	bl	8002662 <iis2mdc_write_reg>
 80028da:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028dc:	68fb      	ldr	r3, [r7, #12]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80028f2:	f107 0208 	add.w	r2, r7, #8
 80028f6:	2301      	movs	r3, #1
 80028f8:	2162      	movs	r1, #98	@ 0x62
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff fe99 	bl	8002632 <iis2mdc_read_reg>
 8002900:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10f      	bne.n	8002928 <iis2mdc_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	b2da      	uxtb	r2, r3
 8002910:	7a3b      	ldrb	r3, [r7, #8]
 8002912:	f362 1345 	bfi	r3, r2, #5, #1
 8002916:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8002918:	f107 0208 	add.w	r2, r7, #8
 800291c:	2301      	movs	r3, #1
 800291e:	2162      	movs	r1, #98	@ 0x62
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff fe9e 	bl	8002662 <iis2mdc_write_reg>
 8002926:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002928:	68fb      	ldr	r3, [r7, #12]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <ISM330DHCX_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d103      	bne.n	8002950 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 8002948:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	e04d      	b.n	80029ec <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	7b1a      	ldrb	r2, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	695a      	ldr	r2, [r3, #20]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a1b      	ldr	r2, [pc, #108]	@ (80029f8 <ISM330DHCX_RegisterBusIO+0xc4>)
 800298c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a1a      	ldr	r2, [pc, #104]	@ (80029fc <ISM330DHCX_RegisterBusIO+0xc8>)
 8002992:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d103      	bne.n	80029aa <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 80029a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	e020      	b.n	80029ec <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4798      	blx	r3
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 80029b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	e016      	b.n	80029ec <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d112      	bne.n	80029ec <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10d      	bne.n	80029ec <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80029d0:	230c      	movs	r3, #12
 80029d2:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 80029d4:	7afb      	ldrb	r3, [r7, #11]
 80029d6:	461a      	mov	r2, r3
 80029d8:	2112      	movs	r1, #18
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fd61 	bl	80034a2 <ISM330DHCX_Write_Reg>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029ea:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80029ec:	68fb      	ldr	r3, [r7, #12]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	08003911 	.word	0x08003911
 80029fc:	08003947 	.word	0x08003947

08002a00 <ISM330DHCX_Init>:
 * @brief  Initialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	331c      	adds	r3, #28
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f001 fd12 	bl	8004438 <ism330dhcx_device_conf_set>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a1e:	e078      	b.n	8002b12 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	331c      	adds	r3, #28
 8002a24:	2101      	movs	r1, #1
 8002a26:	4618      	mov	r0, r3
 8002a28:	f001 fd89 	bl	800453e <ism330dhcx_auto_increment_set>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a36:	e06c      	b.n	8002b12 <ISM330DHCX_Init+0x112>
  }

    /* SW reset */
  if ( ism330dhcx_reset_set( &(pObj->Ctx), PROPERTY_ENABLE)!= ISM330DHCX_OK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	331c      	adds	r3, #28
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f001 fd57 	bl	80044f2 <ism330dhcx_reset_set>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 8002a4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a4e:	e060      	b.n	8002b12 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if ( ism330dhcx_auto_increment_set( &(pObj->Ctx), PROPERTY_ENABLE ) != ISM330DHCX_OK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	331c      	adds	r3, #28
 8002a54:	2101      	movs	r1, #1
 8002a56:	4618      	mov	r0, r3
 8002a58:	f001 fd71 	bl	800453e <ism330dhcx_auto_increment_set>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 8002a62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a66:	e054      	b.n	8002b12 <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	331c      	adds	r3, #28
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f001 fc2c 	bl	80042cc <ism330dhcx_block_data_update_set>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a7e:	e048      	b.n	8002b12 <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	331c      	adds	r3, #28
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 fd7f 	bl	800458a <ism330dhcx_fifo_mode_set>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a96:	e03c      	b.n	8002b12 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	331c      	adds	r3, #28
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fff6 	bl	8003a98 <ism330dhcx_xl_data_rate_set>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 8002ab2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ab6:	e02c      	b.n	8002b12 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	331c      	adds	r3, #28
 8002abc:	2100      	movs	r1, #0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 ff8c 	bl	80039dc <ism330dhcx_xl_full_scale_set>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ace:	e020      	b.n	8002b12 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	331c      	adds	r3, #28
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f001 fa26 	bl	8003f30 <ism330dhcx_gy_data_rate_set>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 8002aea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002aee:	e010      	b.n	8002b12 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	331c      	adds	r3, #28
 8002af4:	210c      	movs	r1, #12
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 f9a2 	bl	8003e40 <ism330dhcx_gy_full_scale_set>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b06:	e004      	b.n	8002b12 <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return ISM330DHCX_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <ISM330DHCX_DeInit>:
 * @brief  Deinitialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f888 	bl	8002c38 <ISM330DHCX_ACC_Disable>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 8002b2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b32:	e015      	b.n	8002b60 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fa92 	bl	800305e <ISM330DHCX_GYRO_Disable>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 8002b40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b44:	e00c      	b.n	8002b60 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  pObj->is_initialized = 0;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return ISM330DHCX_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <ISM330DHCX_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	331c      	adds	r3, #28
 8002b76:	6839      	ldr	r1, [r7, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f001 fca9 	bl	80044d0 <ism330dhcx_device_id_get>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 8002b84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b88:	e000      	b.n	8002b8c <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <ISM330DHCX_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to ISM330DHCX sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2200      	movs	r2, #0
 8002bae:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002bbc:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2210      	movs	r2, #16
 8002bc2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	4a07      	ldr	r2, [pc, #28]	@ (8002bec <ISM330DHCX_GetCapabilities+0x58>)
 8002bce:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	4a06      	ldr	r2, [pc, #24]	@ (8002bec <ISM330DHCX_GetCapabilities+0x58>)
 8002bd4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	45d05800 	.word	0x45d05800

08002bf0 <ISM330DHCX_ACC_Enable>:
 * @brief  Enable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e014      	b.n	8002c30 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f103 021c 	add.w	r2, r3, #28
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8002c12:	4619      	mov	r1, r3
 8002c14:	4610      	mov	r0, r2
 8002c16:	f000 ff3f 	bl	8003a98 <ism330dhcx_xl_data_rate_set>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8002c20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c24:	e004      	b.n	8002c30 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return ISM330DHCX_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <ISM330DHCX_ACC_Disable>:
 * @brief  Disable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e01f      	b.n	8002c8e <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f103 021c 	add.w	r2, r3, #28
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	332b      	adds	r3, #43	@ 0x2b
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	f001 f888 	bl	8003d70 <ism330dhcx_xl_data_rate_get>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8002c66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c6a:	e010      	b.n	8002c8e <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	331c      	adds	r3, #28
 8002c70:	2100      	movs	r1, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 ff10 	bl	8003a98 <ism330dhcx_xl_data_rate_set>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c82:	e004      	b.n	8002c8e <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return ISM330DHCX_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <ISM330DHCX_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	331c      	adds	r3, #28
 8002caa:	f107 020b 	add.w	r2, r7, #11
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 feb9 	bl	8003a28 <ism330dhcx_xl_full_scale_get>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cc0:	e023      	b.n	8002d0a <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d81b      	bhi.n	8002d00 <ISM330DHCX_ACC_GetSensitivity+0x68>
 8002cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd0 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 8002cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cce:	bf00      	nop
 8002cd0:	08002ce1 	.word	0x08002ce1
 8002cd4:	08002cf9 	.word	0x08002cf9
 8002cd8:	08002ce9 	.word	0x08002ce9
 8002cdc:	08002cf1 	.word	0x08002cf1
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8002d14 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8002ce4:	601a      	str	r2, [r3, #0]
      break;
 8002ce6:	e00f      	b.n	8002d08 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	4a0b      	ldr	r2, [pc, #44]	@ (8002d18 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 8002cec:	601a      	str	r2, [r3, #0]
      break;
 8002cee:	e00b      	b.n	8002d08 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8002d1c <ISM330DHCX_ACC_GetSensitivity+0x84>)
 8002cf4:	601a      	str	r2, [r3, #0]
      break;
 8002cf6:	e007      	b.n	8002d08 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	4a09      	ldr	r2, [pc, #36]	@ (8002d20 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 8002cfc:	601a      	str	r2, [r3, #0]
      break;
 8002cfe:	e003      	b.n	8002d08 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8002d00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d04:	60fb      	str	r3, [r7, #12]
      break;
 8002d06:	bf00      	nop
  }

  return ret;
 8002d08:	68fb      	ldr	r3, [r7, #12]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	3d79db23 	.word	0x3d79db23
 8002d18:	3df9db23 	.word	0x3df9db23
 8002d1c:	3e79db23 	.word	0x3e79db23
 8002d20:	3ef9db23 	.word	0x3ef9db23

08002d24 <ISM330DHCX_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	331c      	adds	r3, #28
 8002d36:	f107 020b 	add.w	r2, r7, #11
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f001 f817 	bl	8003d70 <ism330dhcx_xl_data_rate_get>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d4c:	e04e      	b.n	8002dec <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8002d4e:	7afb      	ldrb	r3, [r7, #11]
 8002d50:	2b0a      	cmp	r3, #10
 8002d52:	d846      	bhi.n	8002de2 <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 8002d54:	a201      	add	r2, pc, #4	@ (adr r2, 8002d5c <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002d89 	.word	0x08002d89
 8002d60:	08002d93 	.word	0x08002d93
 8002d64:	08002d9b 	.word	0x08002d9b
 8002d68:	08002da3 	.word	0x08002da3
 8002d6c:	08002dab 	.word	0x08002dab
 8002d70:	08002db3 	.word	0x08002db3
 8002d74:	08002dbb 	.word	0x08002dbb
 8002d78:	08002dc3 	.word	0x08002dc3
 8002d7c:	08002dcb 	.word	0x08002dcb
 8002d80:	08002dd3 	.word	0x08002dd3
 8002d84:	08002ddb 	.word	0x08002ddb
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
      break;
 8002d90:	e02b      	b.n	8002dea <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	4a17      	ldr	r2, [pc, #92]	@ (8002df4 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 8002d96:	601a      	str	r2, [r3, #0]
      break;
 8002d98:	e027      	b.n	8002dea <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	4a16      	ldr	r2, [pc, #88]	@ (8002df8 <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 8002d9e:	601a      	str	r2, [r3, #0]
      break;
 8002da0:	e023      	b.n	8002dea <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	4a15      	ldr	r2, [pc, #84]	@ (8002dfc <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 8002da6:	601a      	str	r2, [r3, #0]
      break;
 8002da8:	e01f      	b.n	8002dea <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	4a14      	ldr	r2, [pc, #80]	@ (8002e00 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 8002dae:	601a      	str	r2, [r3, #0]
      break;
 8002db0:	e01b      	b.n	8002dea <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	4a13      	ldr	r2, [pc, #76]	@ (8002e04 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 8002db6:	601a      	str	r2, [r3, #0]
      break;
 8002db8:	e017      	b.n	8002dea <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_417Hz:
      *Odr = 417.0f;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	4a12      	ldr	r2, [pc, #72]	@ (8002e08 <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 8002dbe:	601a      	str	r2, [r3, #0]
      break;
 8002dc0:	e013      	b.n	8002dea <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	4a11      	ldr	r2, [pc, #68]	@ (8002e0c <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 8002dc6:	601a      	str	r2, [r3, #0]
      break;
 8002dc8:	e00f      	b.n	8002dea <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	4a10      	ldr	r2, [pc, #64]	@ (8002e10 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 8002dce:	601a      	str	r2, [r3, #0]
      break;
 8002dd0:	e00b      	b.n	8002dea <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8002e14 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 8002dd6:	601a      	str	r2, [r3, #0]
      break;
 8002dd8:	e007      	b.n	8002dea <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	4a0e      	ldr	r2, [pc, #56]	@ (8002e18 <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 8002dde:	601a      	str	r2, [r3, #0]
      break;
 8002de0:	e003      	b.n	8002dea <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002de6:	60fb      	str	r3, [r7, #12]
      break;
 8002de8:	bf00      	nop
  }

  return ret;
 8002dea:	68fb      	ldr	r3, [r7, #12]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	41480000 	.word	0x41480000
 8002df8:	41d00000 	.word	0x41d00000
 8002dfc:	42500000 	.word	0x42500000
 8002e00:	42d00000 	.word	0x42d00000
 8002e04:	43500000 	.word	0x43500000
 8002e08:	43d08000 	.word	0x43d08000
 8002e0c:	44504000 	.word	0x44504000
 8002e10:	44d06000 	.word	0x44d06000
 8002e14:	45505000 	.word	0x45505000
 8002e18:	45d05800 	.word	0x45d05800

08002e1c <ISM330DHCX_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d106      	bne.n	8002e40 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002e32:	ed97 0a00 	vldr	s0, [r7]
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fb4e 	bl	80034d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	e005      	b.n	8002e4c <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002e40:	ed97 0a00 	vldr	s0, [r7]
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fbd3 	bl	80035f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 8002e4a:	4603      	mov	r3, r0
  }
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <ISM330DHCX_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	331c      	adds	r3, #28
 8002e66:	f107 020b 	add.w	r2, r7, #11
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fddb 	bl	8003a28 <ism330dhcx_xl_full_scale_get>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002e78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e7c:	e023      	b.n	8002ec6 <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002e7e:	7afb      	ldrb	r3, [r7, #11]
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d81b      	bhi.n	8002ebc <ISM330DHCX_ACC_GetFullScale+0x68>
 8002e84:	a201      	add	r2, pc, #4	@ (adr r2, 8002e8c <ISM330DHCX_ACC_GetFullScale+0x38>)
 8002e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8a:	bf00      	nop
 8002e8c:	08002e9d 	.word	0x08002e9d
 8002e90:	08002eb5 	.word	0x08002eb5
 8002e94:	08002ea5 	.word	0x08002ea5
 8002e98:	08002ead 	.word	0x08002ead
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	601a      	str	r2, [r3, #0]
      break;
 8002ea2:	e00f      	b.n	8002ec4 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	601a      	str	r2, [r3, #0]
      break;
 8002eaa:	e00b      	b.n	8002ec4 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2208      	movs	r2, #8
 8002eb0:	601a      	str	r2, [r3, #0]
      break;
 8002eb2:	e007      	b.n	8002ec4 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2210      	movs	r2, #16
 8002eb8:	601a      	str	r2, [r3, #0]
      break;
 8002eba:	e003      	b.n	8002ec4 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8002ebc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ec0:	60fb      	str	r3, [r7, #12]
      break;
 8002ec2:	bf00      	nop
  }

  return ret;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop

08002ed0 <ISM330DHCX_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	dd0b      	ble.n	8002ef8 <ISM330DHCX_ACC_SetFullScale+0x28>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	dd06      	ble.n	8002ef4 <ISM330DHCX_ACC_SetFullScale+0x24>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	dc01      	bgt.n	8002ef0 <ISM330DHCX_ACC_SetFullScale+0x20>
 8002eec:	2303      	movs	r3, #3
 8002eee:	e004      	b.n	8002efa <ISM330DHCX_ACC_SetFullScale+0x2a>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e002      	b.n	8002efa <ISM330DHCX_ACC_SetFullScale+0x2a>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e000      	b.n	8002efa <ISM330DHCX_ACC_SetFullScale+0x2a>
 8002ef8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 8002efa:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	331c      	adds	r3, #28
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fd69 	bl	80039dc <ism330dhcx_xl_full_scale_set>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f14:	e000      	b.n	8002f18 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <ISM330DHCX_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	331c      	adds	r3, #28
 8002f2e:	f107 0208 	add.w	r2, r7, #8
 8002f32:	4611      	mov	r1, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f001 fa37 	bl	80043a8 <ism330dhcx_acceleration_raw_get>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8002f40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f44:	e00c      	b.n	8002f60 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002f46:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002f4e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002f56:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <ISM330DHCX_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	331c      	adds	r3, #28
 8002f7c:	f107 0210 	add.w	r2, r7, #16
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f001 fa10 	bl	80043a8 <ism330dhcx_acceleration_raw_get>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f92:	e03c      	b.n	800300e <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8002f94:	f107 030c 	add.w	r3, r7, #12
 8002f98:	4619      	mov	r1, r3
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff fe7c 	bl	8002c98 <ISM330DHCX_ACC_GetSensitivity>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002faa:	e030      	b.n	800300e <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002fac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002fb0:	ee07 3a90 	vmov	s15, r3
 8002fb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fc4:	ee17 2a90 	vmov	r2, s15
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002fcc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002fd0:	ee07 3a90 	vmov	s15, r3
 8002fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fe4:	ee17 2a90 	vmov	r2, s15
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002fec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ff0:	ee07 3a90 	vmov	s15, r3
 8002ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003004:	ee17 2a90 	vmov	r2, s15
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <ISM330DHCX_GYRO_Enable>:
 * @brief  Enable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	e014      	b.n	8003056 <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f103 021c 	add.w	r2, r3, #28
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003038:	4619      	mov	r1, r3
 800303a:	4610      	mov	r0, r2
 800303c:	f000 ff78 	bl	8003f30 <ism330dhcx_gy_data_rate_set>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8003046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800304a:	e004      	b.n	8003056 <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return ISM330DHCX_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <ISM330DHCX_GYRO_Disable>:
 * @brief  Disable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	e01f      	b.n	80030b4 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f103 021c 	add.w	r2, r3, #28
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	332c      	adds	r3, #44	@ 0x2c
 800307e:	4619      	mov	r1, r3
 8003080:	4610      	mov	r0, r2
 8003082:	f001 f8c1 	bl	8004208 <ism330dhcx_gy_data_rate_get>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 800308c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003090:	e010      	b.n	80030b4 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	331c      	adds	r3, #28
 8003096:	2100      	movs	r1, #0
 8003098:	4618      	mov	r0, r3
 800309a:	f000 ff49 	bl	8003f30 <ism330dhcx_gy_data_rate_set>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 80030a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030a8:	e004      	b.n	80030b4 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return ISM330DHCX_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <ISM330DHCX_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	331c      	adds	r3, #28
 80030ce:	f107 020b 	add.w	r2, r7, #11
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fed9 	bl	8003e8c <ism330dhcx_gy_full_scale_get>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 80030e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030e4:	e039      	b.n	800315a <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80030e6:	7afb      	ldrb	r3, [r7, #11]
 80030e8:	2b0c      	cmp	r3, #12
 80030ea:	d831      	bhi.n	8003150 <ISM330DHCX_GYRO_GetSensitivity+0x94>
 80030ec:	a201      	add	r2, pc, #4	@ (adr r2, 80030f4 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 80030ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f2:	bf00      	nop
 80030f4:	08003131 	.word	0x08003131
 80030f8:	08003151 	.word	0x08003151
 80030fc:	08003129 	.word	0x08003129
 8003100:	08003151 	.word	0x08003151
 8003104:	08003139 	.word	0x08003139
 8003108:	08003151 	.word	0x08003151
 800310c:	08003151 	.word	0x08003151
 8003110:	08003151 	.word	0x08003151
 8003114:	08003141 	.word	0x08003141
 8003118:	08003151 	.word	0x08003151
 800311c:	08003151 	.word	0x08003151
 8003120:	08003151 	.word	0x08003151
 8003124:	08003149 	.word	0x08003149
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4a0e      	ldr	r2, [pc, #56]	@ (8003164 <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 800312c:	601a      	str	r2, [r3, #0]
      break;
 800312e:	e013      	b.n	8003158 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4a0d      	ldr	r2, [pc, #52]	@ (8003168 <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 8003134:	601a      	str	r2, [r3, #0]
      break;
 8003136:	e00f      	b.n	8003158 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4a0c      	ldr	r2, [pc, #48]	@ (800316c <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 800313c:	601a      	str	r2, [r3, #0]
      break;
 800313e:	e00b      	b.n	8003158 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	4a0b      	ldr	r2, [pc, #44]	@ (8003170 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 8003144:	601a      	str	r2, [r3, #0]
      break;
 8003146:	e007      	b.n	8003158 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	4a0a      	ldr	r2, [pc, #40]	@ (8003174 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 800314c:	601a      	str	r2, [r3, #0]
      break;
 800314e:	e003      	b.n	8003158 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 8003150:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003154:	60fb      	str	r3, [r7, #12]
      break;
 8003156:	bf00      	nop
  }

  return ret;
 8003158:	68fb      	ldr	r3, [r7, #12]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	408c0000 	.word	0x408c0000
 8003168:	410c0000 	.word	0x410c0000
 800316c:	418c0000 	.word	0x418c0000
 8003170:	420c0000 	.word	0x420c0000
 8003174:	428c0000 	.word	0x428c0000

08003178 <ISM330DHCX_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	331c      	adds	r3, #28
 800318a:	f107 020b 	add.w	r2, r7, #11
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f001 f839 	bl	8004208 <ism330dhcx_gy_data_rate_get>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 800319c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031a0:	e04e      	b.n	8003240 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80031a2:	7afb      	ldrb	r3, [r7, #11]
 80031a4:	2b0a      	cmp	r3, #10
 80031a6:	d846      	bhi.n	8003236 <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 80031a8:	a201      	add	r2, pc, #4	@ (adr r2, 80031b0 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 80031aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ae:	bf00      	nop
 80031b0:	080031dd 	.word	0x080031dd
 80031b4:	080031e7 	.word	0x080031e7
 80031b8:	080031ef 	.word	0x080031ef
 80031bc:	080031f7 	.word	0x080031f7
 80031c0:	080031ff 	.word	0x080031ff
 80031c4:	08003207 	.word	0x08003207
 80031c8:	0800320f 	.word	0x0800320f
 80031cc:	08003217 	.word	0x08003217
 80031d0:	0800321f 	.word	0x0800321f
 80031d4:	08003227 	.word	0x08003227
 80031d8:	0800322f 	.word	0x0800322f
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
      break;
 80031e4:	e02b      	b.n	800323e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	4a17      	ldr	r2, [pc, #92]	@ (8003248 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 80031ea:	601a      	str	r2, [r3, #0]
      break;
 80031ec:	e027      	b.n	800323e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	4a16      	ldr	r2, [pc, #88]	@ (800324c <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 80031f2:	601a      	str	r2, [r3, #0]
      break;
 80031f4:	e023      	b.n	800323e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	4a15      	ldr	r2, [pc, #84]	@ (8003250 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 80031fa:	601a      	str	r2, [r3, #0]
      break;
 80031fc:	e01f      	b.n	800323e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	4a14      	ldr	r2, [pc, #80]	@ (8003254 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 8003202:	601a      	str	r2, [r3, #0]
      break;
 8003204:	e01b      	b.n	800323e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	4a13      	ldr	r2, [pc, #76]	@ (8003258 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 800320a:	601a      	str	r2, [r3, #0]
      break;
 800320c:	e017      	b.n	800323e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_417Hz:
      *Odr = 417.0f;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	4a12      	ldr	r2, [pc, #72]	@ (800325c <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 8003212:	601a      	str	r2, [r3, #0]
      break;
 8003214:	e013      	b.n	800323e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	4a11      	ldr	r2, [pc, #68]	@ (8003260 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 800321a:	601a      	str	r2, [r3, #0]
      break;
 800321c:	e00f      	b.n	800323e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	4a10      	ldr	r2, [pc, #64]	@ (8003264 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 8003222:	601a      	str	r2, [r3, #0]
      break;
 8003224:	e00b      	b.n	800323e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	4a0f      	ldr	r2, [pc, #60]	@ (8003268 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 800322a:	601a      	str	r2, [r3, #0]
      break;
 800322c:	e007      	b.n	800323e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	4a0e      	ldr	r2, [pc, #56]	@ (800326c <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 8003232:	601a      	str	r2, [r3, #0]
      break;
 8003234:	e003      	b.n	800323e <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8003236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800323a:	60fb      	str	r3, [r7, #12]
      break;
 800323c:	bf00      	nop
  }

  return ret;
 800323e:	68fb      	ldr	r3, [r7, #12]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	41480000 	.word	0x41480000
 800324c:	41d00000 	.word	0x41d00000
 8003250:	42500000 	.word	0x42500000
 8003254:	42d00000 	.word	0x42d00000
 8003258:	43500000 	.word	0x43500000
 800325c:	43d08000 	.word	0x43d08000
 8003260:	44504000 	.word	0x44504000
 8003264:	44d06000 	.word	0x44d06000
 8003268:	45505000 	.word	0x45505000
 800326c:	45d05800 	.word	0x45d05800

08003270 <ISM330DHCX_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003282:	2b01      	cmp	r3, #1
 8003284:	d106      	bne.n	8003294 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003286:	ed97 0a00 	vldr	s0, [r7]
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fa32 	bl	80036f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8003290:	4603      	mov	r3, r0
 8003292:	e005      	b.n	80032a0 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003294:	ed97 0a00 	vldr	s0, [r7]
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 fab7 	bl	800380c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 800329e:	4603      	mov	r3, r0
  }
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <ISM330DHCX_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	331c      	adds	r3, #28
 80032ba:	f107 020b 	add.w	r2, r7, #11
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fde3 	bl	8003e8c <ism330dhcx_gy_full_scale_get>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 80032cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032d0:	e03c      	b.n	800334c <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 80032d2:	7afb      	ldrb	r3, [r7, #11]
 80032d4:	2b0c      	cmp	r3, #12
 80032d6:	d834      	bhi.n	8003342 <ISM330DHCX_GYRO_GetFullScale+0x9a>
 80032d8:	a201      	add	r2, pc, #4	@ (adr r2, 80032e0 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 80032da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032de:	bf00      	nop
 80032e0:	0800331d 	.word	0x0800331d
 80032e4:	08003343 	.word	0x08003343
 80032e8:	08003315 	.word	0x08003315
 80032ec:	08003343 	.word	0x08003343
 80032f0:	08003325 	.word	0x08003325
 80032f4:	08003343 	.word	0x08003343
 80032f8:	08003343 	.word	0x08003343
 80032fc:	08003343 	.word	0x08003343
 8003300:	0800332f 	.word	0x0800332f
 8003304:	08003343 	.word	0x08003343
 8003308:	08003343 	.word	0x08003343
 800330c:	08003343 	.word	0x08003343
 8003310:	08003339 	.word	0x08003339
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	227d      	movs	r2, #125	@ 0x7d
 8003318:	601a      	str	r2, [r3, #0]
      break;
 800331a:	e016      	b.n	800334a <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	22fa      	movs	r2, #250	@ 0xfa
 8003320:	601a      	str	r2, [r3, #0]
      break;
 8003322:	e012      	b.n	800334a <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800332a:	601a      	str	r2, [r3, #0]
      break;
 800332c:	e00d      	b.n	800334a <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003334:	601a      	str	r2, [r3, #0]
      break;
 8003336:	e008      	b.n	800334a <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800333e:	601a      	str	r2, [r3, #0]
      break;
 8003340:	e003      	b.n	800334a <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 8003342:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003346:	60fb      	str	r3, [r7, #12]
      break;
 8003348:	bf00      	nop
  }

  return ret;
 800334a:	68fb      	ldr	r3, [r7, #12]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <ISM330DHCX_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b7d      	cmp	r3, #125	@ 0x7d
 8003362:	dd12      	ble.n	800338a <ISM330DHCX_GYRO_SetFullScale+0x36>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2bfa      	cmp	r3, #250	@ 0xfa
 8003368:	dd0d      	ble.n	8003386 <ISM330DHCX_GYRO_SetFullScale+0x32>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003370:	dd07      	ble.n	8003382 <ISM330DHCX_GYRO_SetFullScale+0x2e>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003378:	dc01      	bgt.n	800337e <ISM330DHCX_GYRO_SetFullScale+0x2a>
 800337a:	2308      	movs	r3, #8
 800337c:	e006      	b.n	800338c <ISM330DHCX_GYRO_SetFullScale+0x38>
 800337e:	230c      	movs	r3, #12
 8003380:	e004      	b.n	800338c <ISM330DHCX_GYRO_SetFullScale+0x38>
 8003382:	2304      	movs	r3, #4
 8003384:	e002      	b.n	800338c <ISM330DHCX_GYRO_SetFullScale+0x38>
 8003386:	2300      	movs	r3, #0
 8003388:	e000      	b.n	800338c <ISM330DHCX_GYRO_SetFullScale+0x38>
 800338a:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 800338c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	331c      	adds	r3, #28
 8003392:	7bfa      	ldrb	r2, [r7, #15]
 8003394:	4611      	mov	r1, r2
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fd52 	bl	8003e40 <ism330dhcx_gy_full_scale_set>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033a6:	e000      	b.n	80033aa <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <ISM330DHCX_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	331c      	adds	r3, #28
 80033c0:	f107 0208 	add.w	r2, r7, #8
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 ffa6 	bl	8004318 <ism330dhcx_angular_rate_raw_get>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033d6:	e00c      	b.n	80033f2 <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80033d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80033e0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80033e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <ISM330DHCX_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b086      	sub	sp, #24
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	331c      	adds	r3, #28
 8003408:	f107 0210 	add.w	r2, r7, #16
 800340c:	4611      	mov	r1, r2
 800340e:	4618      	mov	r0, r3
 8003410:	f000 ff82 	bl	8004318 <ism330dhcx_angular_rate_raw_get>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 800341a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800341e:	e03c      	b.n	800349a <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8003420:	f107 030c 	add.w	r3, r7, #12
 8003424:	4619      	mov	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff fe48 	bl	80030bc <ISM330DHCX_GYRO_GetSensitivity>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 8003432:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003436:	e030      	b.n	800349a <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003438:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800343c:	ee07 3a90 	vmov	s15, r3
 8003440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003444:	edd7 7a03 	vldr	s15, [r7, #12]
 8003448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003450:	ee17 2a90 	vmov	r2, s15
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003458:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800345c:	ee07 3a90 	vmov	s15, r3
 8003460:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003464:	edd7 7a03 	vldr	s15, [r7, #12]
 8003468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003470:	ee17 2a90 	vmov	r2, s15
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003478:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800347c:	ee07 3a90 	vmov	s15, r3
 8003480:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003484:	edd7 7a03 	vldr	s15, [r7, #12]
 8003488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003490:	ee17 2a90 	vmov	r2, s15
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <ISM330DHCX_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	460b      	mov	r3, r1
 80034ac:	70fb      	strb	r3, [r7, #3]
 80034ae:	4613      	mov	r3, r2
 80034b0:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f103 001c 	add.w	r0, r3, #28
 80034b8:	1cba      	adds	r2, r7, #2
 80034ba:	78f9      	ldrb	r1, [r7, #3]
 80034bc:	2301      	movs	r3, #1
 80034be:	f000 fa75 	bl	80039ac <ism330dhcx_write_reg>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 80034c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034cc:	e000      	b.n	80034d0 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80034e4:	edd7 7a00 	vldr	s15, [r7]
 80034e8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80034ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f4:	d801      	bhi.n	80034fa <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e058      	b.n	80035ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80034fa:	edd7 7a00 	vldr	s15, [r7]
 80034fe:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8003502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350a:	d801      	bhi.n	8003510 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 800350c:	2302      	movs	r3, #2
 800350e:	e04d      	b.n	80035ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003510:	edd7 7a00 	vldr	s15, [r7]
 8003514:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80035d4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8003518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800351c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003520:	d801      	bhi.n	8003526 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003522:	2303      	movs	r3, #3
 8003524:	e042      	b.n	80035ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003526:	edd7 7a00 	vldr	s15, [r7]
 800352a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80035d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 800352e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003536:	d801      	bhi.n	800353c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003538:	2304      	movs	r3, #4
 800353a:	e037      	b.n	80035ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800353c:	edd7 7a00 	vldr	s15, [r7]
 8003540:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80035dc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 8003544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354c:	d801      	bhi.n	8003552 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800354e:	2305      	movs	r3, #5
 8003550:	e02c      	b.n	80035ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003552:	edd7 7a00 	vldr	s15, [r7]
 8003556:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80035e0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 800355a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800355e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003562:	d801      	bhi.n	8003568 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003564:	2306      	movs	r3, #6
 8003566:	e021      	b.n	80035ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003568:	edd7 7a00 	vldr	s15, [r7]
 800356c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80035e4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8003570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003578:	d801      	bhi.n	800357e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800357a:	2307      	movs	r3, #7
 800357c:	e016      	b.n	80035ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800357e:	edd7 7a00 	vldr	s15, [r7]
 8003582:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80035e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 8003586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800358a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358e:	d801      	bhi.n	8003594 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003590:	2308      	movs	r3, #8
 8003592:	e00b      	b.n	80035ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003594:	edd7 7a00 	vldr	s15, [r7]
 8003598:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80035ec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 800359c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a4:	d801      	bhi.n	80035aa <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80035a6:	2309      	movs	r3, #9
 80035a8:	e000      	b.n	80035ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80035aa:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80035ac:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
          :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	331c      	adds	r3, #28
 80035b2:	7bfa      	ldrb	r2, [r7, #15]
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fa6e 	bl	8003a98 <ism330dhcx_xl_data_rate_set>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 80035c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035c6:	e000      	b.n	80035ca <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	42500000 	.word	0x42500000
 80035d8:	42d00000 	.word	0x42d00000
 80035dc:	43500000 	.word	0x43500000
 80035e0:	43d08000 	.word	0x43d08000
 80035e4:	44504000 	.word	0x44504000
 80035e8:	44d06000 	.word	0x44d06000
 80035ec:	45505000 	.word	0x45505000

080035f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80035fc:	edd7 7a00 	vldr	s15, [r7]
 8003600:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360c:	d801      	bhi.n	8003612 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 800360e:	2301      	movs	r3, #1
 8003610:	e058      	b.n	80036c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003612:	edd7 7a00 	vldr	s15, [r7]
 8003616:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800361a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800361e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003622:	d801      	bhi.n	8003628 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003624:	2302      	movs	r3, #2
 8003626:	e04d      	b.n	80036c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003628:	edd7 7a00 	vldr	s15, [r7]
 800362c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80036d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8003630:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003638:	d801      	bhi.n	800363e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800363a:	2303      	movs	r3, #3
 800363c:	e042      	b.n	80036c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800363e:	edd7 7a00 	vldr	s15, [r7]
 8003642:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80036dc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 8003646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800364a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364e:	d801      	bhi.n	8003654 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003650:	2304      	movs	r3, #4
 8003652:	e037      	b.n	80036c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003654:	edd7 7a00 	vldr	s15, [r7]
 8003658:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80036e0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 800365c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003664:	d801      	bhi.n	800366a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003666:	2305      	movs	r3, #5
 8003668:	e02c      	b.n	80036c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800366a:	edd7 7a00 	vldr	s15, [r7]
 800366e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80036e4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367a:	d801      	bhi.n	8003680 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 800367c:	2306      	movs	r3, #6
 800367e:	e021      	b.n	80036c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003680:	edd7 7a00 	vldr	s15, [r7]
 8003684:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80036e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8003688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800368c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003690:	d801      	bhi.n	8003696 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8003692:	2307      	movs	r3, #7
 8003694:	e016      	b.n	80036c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003696:	edd7 7a00 	vldr	s15, [r7]
 800369a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80036ec <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800369e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a6:	d801      	bhi.n	80036ac <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80036a8:	2308      	movs	r3, #8
 80036aa:	e00b      	b.n	80036c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80036ac:	edd7 7a00 	vldr	s15, [r7]
 80036b0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80036f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 80036b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036bc:	d801      	bhi.n	80036c2 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80036be:	2309      	movs	r3, #9
 80036c0:	e000      	b.n	80036c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80036c2:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
                : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
                :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	42500000 	.word	0x42500000
 80036dc:	42d00000 	.word	0x42d00000
 80036e0:	43500000 	.word	0x43500000
 80036e4:	43d08000 	.word	0x43d08000
 80036e8:	44504000 	.word	0x44504000
 80036ec:	44d06000 	.word	0x44d06000
 80036f0:	45505000 	.word	0x45505000

080036f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003700:	edd7 7a00 	vldr	s15, [r7]
 8003704:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003710:	d801      	bhi.n	8003716 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8003712:	2301      	movs	r3, #1
 8003714:	e058      	b.n	80037c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003716:	edd7 7a00 	vldr	s15, [r7]
 800371a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800371e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003726:	d801      	bhi.n	800372c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8003728:	2302      	movs	r3, #2
 800372a:	e04d      	b.n	80037c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800372c:	edd7 7a00 	vldr	s15, [r7]
 8003730:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80037f0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8003734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373c:	d801      	bhi.n	8003742 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800373e:	2303      	movs	r3, #3
 8003740:	e042      	b.n	80037c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003742:	edd7 7a00 	vldr	s15, [r7]
 8003746:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80037f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800374a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800374e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003752:	d801      	bhi.n	8003758 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8003754:	2304      	movs	r3, #4
 8003756:	e037      	b.n	80037c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003758:	edd7 7a00 	vldr	s15, [r7]
 800375c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80037f8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8003760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003768:	d801      	bhi.n	800376e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800376a:	2305      	movs	r3, #5
 800376c:	e02c      	b.n	80037c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800376e:	edd7 7a00 	vldr	s15, [r7]
 8003772:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80037fc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8003776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800377a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377e:	d801      	bhi.n	8003784 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8003780:	2306      	movs	r3, #6
 8003782:	e021      	b.n	80037c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003784:	edd7 7a00 	vldr	s15, [r7]
 8003788:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003800 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800378c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003794:	d801      	bhi.n	800379a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8003796:	2307      	movs	r3, #7
 8003798:	e016      	b.n	80037c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800379a:	edd7 7a00 	vldr	s15, [r7]
 800379e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003804 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80037a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037aa:	d801      	bhi.n	80037b0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80037ac:	2308      	movs	r3, #8
 80037ae:	e00b      	b.n	80037c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80037b0:	edd7 7a00 	vldr	s15, [r7]
 80037b4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003808 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80037b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c0:	d801      	bhi.n	80037c6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80037c2:	2309      	movs	r3, #9
 80037c4:	e000      	b.n	80037c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80037c6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 80037c8:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
          :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	331c      	adds	r3, #28
 80037ce:	7bfa      	ldrb	r2, [r7, #15]
 80037d0:	4611      	mov	r1, r2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fbac 	bl	8003f30 <ism330dhcx_gy_data_rate_set>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 80037de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037e2:	e000      	b.n	80037e6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	42500000 	.word	0x42500000
 80037f4:	42d00000 	.word	0x42d00000
 80037f8:	43500000 	.word	0x43500000
 80037fc:	43d08000 	.word	0x43d08000
 8003800:	44504000 	.word	0x44504000
 8003804:	44d06000 	.word	0x44d06000
 8003808:	45505000 	.word	0x45505000

0800380c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003818:	edd7 7a00 	vldr	s15, [r7]
 800381c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003828:	d801      	bhi.n	800382e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800382a:	2301      	movs	r3, #1
 800382c:	e058      	b.n	80038e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800382e:	edd7 7a00 	vldr	s15, [r7]
 8003832:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8003836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800383a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383e:	d801      	bhi.n	8003844 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8003840:	2302      	movs	r3, #2
 8003842:	e04d      	b.n	80038e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003844:	edd7 7a00 	vldr	s15, [r7]
 8003848:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80038f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800384c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003854:	d801      	bhi.n	800385a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8003856:	2303      	movs	r3, #3
 8003858:	e042      	b.n	80038e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800385a:	edd7 7a00 	vldr	s15, [r7]
 800385e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80038f8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8003862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386a:	d801      	bhi.n	8003870 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800386c:	2304      	movs	r3, #4
 800386e:	e037      	b.n	80038e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003870:	edd7 7a00 	vldr	s15, [r7]
 8003874:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80038fc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8003878:	eef4 7ac7 	vcmpe.f32	s15, s14
 800387c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003880:	d801      	bhi.n	8003886 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8003882:	2305      	movs	r3, #5
 8003884:	e02c      	b.n	80038e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003886:	edd7 7a00 	vldr	s15, [r7]
 800388a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003900 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800388e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003896:	d801      	bhi.n	800389c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8003898:	2306      	movs	r3, #6
 800389a:	e021      	b.n	80038e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800389c:	edd7 7a00 	vldr	s15, [r7]
 80038a0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003904 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80038a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ac:	d801      	bhi.n	80038b2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80038ae:	2307      	movs	r3, #7
 80038b0:	e016      	b.n	80038e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80038b2:	edd7 7a00 	vldr	s15, [r7]
 80038b6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003908 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80038ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c2:	d801      	bhi.n	80038c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80038c4:	2308      	movs	r3, #8
 80038c6:	e00b      	b.n	80038e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80038c8:	edd7 7a00 	vldr	s15, [r7]
 80038cc:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800390c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80038d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d8:	d801      	bhi.n	80038de <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80038da:	2309      	movs	r3, #9
 80038dc:	e000      	b.n	80038e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80038de:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
                 : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
                 :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	42500000 	.word	0x42500000
 80038f8:	42d00000 	.word	0x42d00000
 80038fc:	43500000 	.word	0x43500000
 8003900:	43d08000 	.word	0x43d08000
 8003904:	44504000 	.word	0x44504000
 8003908:	44d06000 	.word	0x44d06000
 800390c:	45505000 	.word	0x45505000

08003910 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	461a      	mov	r2, r3
 800391c:	460b      	mov	r3, r1
 800391e:	72fb      	strb	r3, [r7, #11]
 8003920:	4613      	mov	r3, r2
 8003922:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	695c      	ldr	r4, [r3, #20]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	7b1b      	ldrb	r3, [r3, #12]
 8003930:	4618      	mov	r0, r3
 8003932:	7afb      	ldrb	r3, [r7, #11]
 8003934:	b299      	uxth	r1, r3
 8003936:	893b      	ldrh	r3, [r7, #8]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	47a0      	blx	r4
 800393c:	4603      	mov	r3, r0
}
 800393e:	4618      	mov	r0, r3
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	bd90      	pop	{r4, r7, pc}

08003946 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003946:	b590      	push	{r4, r7, lr}
 8003948:	b087      	sub	sp, #28
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	461a      	mov	r2, r3
 8003952:	460b      	mov	r3, r1
 8003954:	72fb      	strb	r3, [r7, #11]
 8003956:	4613      	mov	r3, r2
 8003958:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	691c      	ldr	r4, [r3, #16]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	7b1b      	ldrb	r3, [r3, #12]
 8003966:	4618      	mov	r0, r3
 8003968:	7afb      	ldrb	r3, [r7, #11]
 800396a:	b299      	uxth	r1, r3
 800396c:	893b      	ldrh	r3, [r7, #8]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	47a0      	blx	r4
 8003972:	4603      	mov	r3, r0
}
 8003974:	4618      	mov	r0, r3
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	bd90      	pop	{r4, r7, pc}

0800397c <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	461a      	mov	r2, r3
 8003988:	460b      	mov	r3, r1
 800398a:	72fb      	strb	r3, [r7, #11]
 800398c:	4613      	mov	r3, r2
 800398e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	685c      	ldr	r4, [r3, #4]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6898      	ldr	r0, [r3, #8]
 8003998:	893b      	ldrh	r3, [r7, #8]
 800399a:	7af9      	ldrb	r1, [r7, #11]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	47a0      	blx	r4
 80039a0:	6178      	str	r0, [r7, #20]
  return ret;
 80039a2:	697b      	ldr	r3, [r7, #20]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd90      	pop	{r4, r7, pc}

080039ac <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 80039ac:	b590      	push	{r4, r7, lr}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	461a      	mov	r2, r3
 80039b8:	460b      	mov	r3, r1
 80039ba:	72fb      	strb	r3, [r7, #11]
 80039bc:	4613      	mov	r3, r2
 80039be:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681c      	ldr	r4, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6898      	ldr	r0, [r3, #8]
 80039c8:	893b      	ldrh	r3, [r7, #8]
 80039ca:	7af9      	ldrb	r1, [r7, #11]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	47a0      	blx	r4
 80039d0:	6178      	str	r0, [r7, #20]
  return ret;
 80039d2:	697b      	ldr	r3, [r7, #20]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	371c      	adds	r7, #28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd90      	pop	{r4, r7, pc}

080039dc <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80039e8:	f107 0208 	add.w	r2, r7, #8
 80039ec:	2301      	movs	r3, #1
 80039ee:	2110      	movs	r1, #16
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff ffc3 	bl	800397c <ism330dhcx_read_reg>
 80039f6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0) {
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10f      	bne.n	8003a1e <ism330dhcx_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	7a3b      	ldrb	r3, [r7, #8]
 8003a08:	f362 0383 	bfi	r3, r2, #2, #2
 8003a0c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003a0e:	f107 0208 	add.w	r2, r7, #8
 8003a12:	2301      	movs	r3, #1
 8003a14:	2110      	movs	r1, #16
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff ffc8 	bl	80039ac <ism330dhcx_write_reg>
 8003a1c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003a32:	f107 0208 	add.w	r2, r7, #8
 8003a36:	2301      	movs	r3, #1
 8003a38:	2110      	movs	r1, #16
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff ff9e 	bl	800397c <ism330dhcx_read_reg>
 8003a40:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl) {
 8003a42:	7a3b      	ldrb	r3, [r7, #8]
 8003a44:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d81a      	bhi.n	8003a84 <ism330dhcx_xl_full_scale_get+0x5c>
 8003a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a54 <ism330dhcx_xl_full_scale_get+0x2c>)
 8003a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a54:	08003a65 	.word	0x08003a65
 8003a58:	08003a6d 	.word	0x08003a6d
 8003a5c:	08003a75 	.word	0x08003a75
 8003a60:	08003a7d 	.word	0x08003a7d
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]
      break;
 8003a6a:	e00f      	b.n	8003a8c <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	701a      	strb	r2, [r3, #0]
      break;
 8003a72:	e00b      	b.n	8003a8c <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2202      	movs	r2, #2
 8003a78:	701a      	strb	r2, [r3, #0]
      break;
 8003a7a:	e007      	b.n	8003a8c <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2203      	movs	r2, #3
 8003a80:	701a      	strb	r2, [r3, #0]
      break;
 8003a82:	e003      	b.n	8003a8c <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
      break;
 8003a8a:	bf00      	nop
  }

  return ret;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop

08003a98 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8003aa8:	f107 030c 	add.w	r3, r7, #12
 8003aac:	4619      	mov	r1, r3
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fd91 	bl	80045d6 <ism330dhcx_fsm_enable_get>
 8003ab4:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f040 80c4 	bne.w	8003c46 <ism330dhcx_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003abe:	7b3b      	ldrb	r3, [r7, #12]
 8003ac0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ac4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8003ac6:	7b3b      	ldrb	r3, [r7, #12]
 8003ac8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003acc:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8003ad2:	7b3b      	ldrb	r3, [r7, #12]
 8003ad4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003ad8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8003ada:	4313      	orrs	r3, r2
 8003adc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003ade:	7b3b      	ldrb	r3, [r7, #12]
 8003ae0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003ae4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003aea:	7b3b      	ldrb	r3, [r7, #12]
 8003aec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003af0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003af2:	4313      	orrs	r3, r2
 8003af4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8003af6:	7b3b      	ldrb	r3, [r7, #12]
 8003af8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003afc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003afe:	4313      	orrs	r3, r2
 8003b00:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8003b02:	7b3b      	ldrb	r3, [r7, #12]
 8003b04:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003b08:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003b0e:	7b3b      	ldrb	r3, [r7, #12]
 8003b10:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003b14:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8003b16:	4313      	orrs	r3, r2
 8003b18:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003b1a:	7b7b      	ldrb	r3, [r7, #13]
 8003b1c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b20:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003b22:	4313      	orrs	r3, r2
 8003b24:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003b26:	7b7b      	ldrb	r3, [r7, #13]
 8003b28:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003b2c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003b32:	7b7b      	ldrb	r3, [r7, #13]
 8003b34:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003b38:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003b3e:	7b7b      	ldrb	r3, [r7, #13]
 8003b40:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003b44:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003b46:	4313      	orrs	r3, r2
 8003b48:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003b4a:	7b7b      	ldrb	r3, [r7, #13]
 8003b4c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003b50:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003b52:	4313      	orrs	r3, r2
 8003b54:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8003b56:	7b7b      	ldrb	r3, [r7, #13]
 8003b58:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003b5c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8003b62:	7b7b      	ldrb	r3, [r7, #13]
 8003b64:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003b68:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8003b6e:	7b7b      	ldrb	r3, [r7, #13]
 8003b70:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003b74:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8003b76:	4313      	orrs	r3, r2
 8003b78:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d163      	bne.n	8003c46 <ism330dhcx_xl_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8003b7e:	f107 030b 	add.w	r3, r7, #11
 8003b82:	4619      	mov	r1, r3
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fd53 	bl	8004630 <ism330dhcx_fsm_data_rate_get>
 8003b8a:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d159      	bne.n	8003c46 <ism330dhcx_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8003b92:	7afb      	ldrb	r3, [r7, #11]
 8003b94:	2b03      	cmp	r3, #3
 8003b96:	d853      	bhi.n	8003c40 <ism330dhcx_xl_data_rate_set+0x1a8>
 8003b98:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba0 <ism330dhcx_xl_data_rate_set+0x108>)
 8003b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9e:	bf00      	nop
 8003ba0:	08003bb1 	.word	0x08003bb1
 8003ba4:	08003bc3 	.word	0x08003bc3
 8003ba8:	08003be1 	.word	0x08003be1
 8003bac:	08003c0b 	.word	0x08003c0b
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d102      	bne.n	8003bbc <ism330dhcx_xl_data_rate_set+0x124>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003bba:	e044      	b.n	8003c46 <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	75fb      	strb	r3, [r7, #23]
            break;
 8003bc0:	e041      	b.n	8003c46 <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d102      	bne.n	8003bce <ism330dhcx_xl_data_rate_set+0x136>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003bcc:	e03b      	b.n	8003c46 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d102      	bne.n	8003bda <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	75fb      	strb	r3, [r7, #23]
            break;
 8003bd8:	e035      	b.n	8003c46 <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	75fb      	strb	r3, [r7, #23]
            break;
 8003bde:	e032      	b.n	8003c46 <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d102      	bne.n	8003bec <ism330dhcx_xl_data_rate_set+0x154>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003be6:	2303      	movs	r3, #3
 8003be8:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003bea:	e02c      	b.n	8003c46 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d102      	bne.n	8003bf8 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	75fb      	strb	r3, [r7, #23]
            break;
 8003bf6:	e026      	b.n	8003c46 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d102      	bne.n	8003c04 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	75fb      	strb	r3, [r7, #23]
            break;
 8003c02:	e020      	b.n	8003c46 <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	75fb      	strb	r3, [r7, #23]
            break;
 8003c08:	e01d      	b.n	8003c46 <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d102      	bne.n	8003c16 <ism330dhcx_xl_data_rate_set+0x17e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003c10:	2304      	movs	r3, #4
 8003c12:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003c14:	e017      	b.n	8003c46 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d102      	bne.n	8003c22 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	75fb      	strb	r3, [r7, #23]
            break;
 8003c20:	e011      	b.n	8003c46 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003c22:	78fb      	ldrb	r3, [r7, #3]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d102      	bne.n	8003c2e <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003c28:	2304      	movs	r3, #4
 8003c2a:	75fb      	strb	r3, [r7, #23]
            break;
 8003c2c:	e00b      	b.n	8003c46 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d102      	bne.n	8003c3a <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003c34:	2304      	movs	r3, #4
 8003c36:	75fb      	strb	r3, [r7, #23]
            break;
 8003c38:	e005      	b.n	8003c46 <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	75fb      	strb	r3, [r7, #23]
            break;
 8003c3e:	e002      	b.n	8003c46 <ism330dhcx_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	75fb      	strb	r3, [r7, #23]
            break;
 8003c44:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d16c      	bne.n	8003d2a <ism330dhcx_xl_data_rate_set+0x292>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8003c50:	f107 030a 	add.w	r3, r7, #10
 8003c54:	4619      	mov	r1, r3
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fd32 	bl	80046c0 <ism330dhcx_mlc_get>
 8003c5c:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 8003c5e:	7abb      	ldrb	r3, [r7, #10]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d162      	bne.n	8003d2a <ism330dhcx_xl_data_rate_set+0x292>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8003c64:	f107 0309 	add.w	r3, r7, #9
 8003c68:	4619      	mov	r1, r3
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fd52 	bl	8004714 <ism330dhcx_mlc_data_rate_get>
 8003c70:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d158      	bne.n	8003d2a <ism330dhcx_xl_data_rate_set+0x292>
        switch (mlc_odr) {
 8003c78:	7a7b      	ldrb	r3, [r7, #9]
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d852      	bhi.n	8003d24 <ism330dhcx_xl_data_rate_set+0x28c>
 8003c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c84 <ism330dhcx_xl_data_rate_set+0x1ec>)
 8003c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c84:	08003c95 	.word	0x08003c95
 8003c88:	08003ca7 	.word	0x08003ca7
 8003c8c:	08003cc5 	.word	0x08003cc5
 8003c90:	08003cef 	.word	0x08003cef
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d102      	bne.n	8003ca0 <ism330dhcx_xl_data_rate_set+0x208>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003c9e:	e044      	b.n	8003d2a <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	75fb      	strb	r3, [r7, #23]
            break;
 8003ca4:	e041      	b.n	8003d2a <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003ca6:	78fb      	ldrb	r3, [r7, #3]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d102      	bne.n	8003cb2 <ism330dhcx_xl_data_rate_set+0x21a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003cac:	2302      	movs	r3, #2
 8003cae:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003cb0:	e03b      	b.n	8003d2a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d102      	bne.n	8003cbe <ism330dhcx_xl_data_rate_set+0x226>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	75fb      	strb	r3, [r7, #23]
            break;
 8003cbc:	e035      	b.n	8003d2a <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	75fb      	strb	r3, [r7, #23]
            break;
 8003cc2:	e032      	b.n	8003d2a <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d102      	bne.n	8003cd0 <ism330dhcx_xl_data_rate_set+0x238>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003cce:	e02c      	b.n	8003d2a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d102      	bne.n	8003cdc <ism330dhcx_xl_data_rate_set+0x244>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	75fb      	strb	r3, [r7, #23]
            break;
 8003cda:	e026      	b.n	8003d2a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d102      	bne.n	8003ce8 <ism330dhcx_xl_data_rate_set+0x250>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	75fb      	strb	r3, [r7, #23]
            break;
 8003ce6:	e020      	b.n	8003d2a <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	75fb      	strb	r3, [r7, #23]
            break;
 8003cec:	e01d      	b.n	8003d2a <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003cee:	78fb      	ldrb	r3, [r7, #3]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d102      	bne.n	8003cfa <ism330dhcx_xl_data_rate_set+0x262>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003cf8:	e017      	b.n	8003d2a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d102      	bne.n	8003d06 <ism330dhcx_xl_data_rate_set+0x26e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003d00:	2304      	movs	r3, #4
 8003d02:	75fb      	strb	r3, [r7, #23]
            break;
 8003d04:	e011      	b.n	8003d2a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d102      	bne.n	8003d12 <ism330dhcx_xl_data_rate_set+0x27a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	75fb      	strb	r3, [r7, #23]
            break;
 8003d10:	e00b      	b.n	8003d2a <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d102      	bne.n	8003d1e <ism330dhcx_xl_data_rate_set+0x286>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003d18:	2304      	movs	r3, #4
 8003d1a:	75fb      	strb	r3, [r7, #23]
            break;
 8003d1c:	e005      	b.n	8003d2a <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003d1e:	78fb      	ldrb	r3, [r7, #3]
 8003d20:	75fb      	strb	r3, [r7, #23]
            break;
 8003d22:	e002      	b.n	8003d2a <ism330dhcx_xl_data_rate_set+0x292>

          default:
            odr_xl = val;
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	75fb      	strb	r3, [r7, #23]
            break;
 8003d28:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0) {
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d107      	bne.n	8003d40 <ism330dhcx_xl_data_rate_set+0x2a8>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003d30:	f107 0208 	add.w	r2, r7, #8
 8003d34:	2301      	movs	r3, #1
 8003d36:	2110      	movs	r1, #16
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff fe1f 	bl	800397c <ism330dhcx_read_reg>
 8003d3e:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0) {
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10f      	bne.n	8003d66 <ism330dhcx_xl_data_rate_set+0x2ce>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	7a3b      	ldrb	r3, [r7, #8]
 8003d50:	f362 1307 	bfi	r3, r2, #4, #4
 8003d54:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003d56:	f107 0208 	add.w	r2, r7, #8
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	2110      	movs	r1, #16
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff fe24 	bl	80039ac <ism330dhcx_write_reg>
 8003d64:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003d66:	693b      	ldr	r3, [r7, #16]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003d7a:	f107 0208 	add.w	r2, r7, #8
 8003d7e:	2301      	movs	r3, #1
 8003d80:	2110      	movs	r1, #16
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff fdfa 	bl	800397c <ism330dhcx_read_reg>
 8003d88:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl) {
 8003d8a:	7a3b      	ldrb	r3, [r7, #8]
 8003d8c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b0b      	cmp	r3, #11
 8003d94:	d84a      	bhi.n	8003e2c <ism330dhcx_xl_data_rate_get+0xbc>
 8003d96:	a201      	add	r2, pc, #4	@ (adr r2, 8003d9c <ism330dhcx_xl_data_rate_get+0x2c>)
 8003d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9c:	08003dcd 	.word	0x08003dcd
 8003da0:	08003dd5 	.word	0x08003dd5
 8003da4:	08003ddd 	.word	0x08003ddd
 8003da8:	08003de5 	.word	0x08003de5
 8003dac:	08003ded 	.word	0x08003ded
 8003db0:	08003df5 	.word	0x08003df5
 8003db4:	08003dfd 	.word	0x08003dfd
 8003db8:	08003e05 	.word	0x08003e05
 8003dbc:	08003e0d 	.word	0x08003e0d
 8003dc0:	08003e15 	.word	0x08003e15
 8003dc4:	08003e1d 	.word	0x08003e1d
 8003dc8:	08003e25 	.word	0x08003e25
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	701a      	strb	r2, [r3, #0]
      break;
 8003dd2:	e02f      	b.n	8003e34 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	701a      	strb	r2, [r3, #0]
      break;
 8003dda:	e02b      	b.n	8003e34 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2202      	movs	r2, #2
 8003de0:	701a      	strb	r2, [r3, #0]
      break;
 8003de2:	e027      	b.n	8003e34 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2203      	movs	r2, #3
 8003de8:	701a      	strb	r2, [r3, #0]
      break;
 8003dea:	e023      	b.n	8003e34 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2204      	movs	r2, #4
 8003df0:	701a      	strb	r2, [r3, #0]
      break;
 8003df2:	e01f      	b.n	8003e34 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2205      	movs	r2, #5
 8003df8:	701a      	strb	r2, [r3, #0]
      break;
 8003dfa:	e01b      	b.n	8003e34 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_417Hz:
      *val = ISM330DHCX_XL_ODR_417Hz;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2206      	movs	r2, #6
 8003e00:	701a      	strb	r2, [r3, #0]
      break;
 8003e02:	e017      	b.n	8003e34 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2207      	movs	r2, #7
 8003e08:	701a      	strb	r2, [r3, #0]
      break;
 8003e0a:	e013      	b.n	8003e34 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1667Hz:
      *val = ISM330DHCX_XL_ODR_1667Hz;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2208      	movs	r2, #8
 8003e10:	701a      	strb	r2, [r3, #0]
      break;
 8003e12:	e00f      	b.n	8003e34 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3333Hz:
      *val = ISM330DHCX_XL_ODR_3333Hz;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2209      	movs	r2, #9
 8003e18:	701a      	strb	r2, [r3, #0]
      break;
 8003e1a:	e00b      	b.n	8003e34 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	220a      	movs	r2, #10
 8003e20:	701a      	strb	r2, [r3, #0]
      break;
 8003e22:	e007      	b.n	8003e34 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6Hz5:
      *val = ISM330DHCX_XL_ODR_6Hz5;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	220b      	movs	r2, #11
 8003e28:	701a      	strb	r2, [r3, #0]
      break;
 8003e2a:	e003      	b.n	8003e34 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]
      break;
 8003e32:	bf00      	nop
  }

  return ret;
 8003e34:	68fb      	ldr	r3, [r7, #12]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop

08003e40 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8003e4c:	f107 0208 	add.w	r2, r7, #8
 8003e50:	2301      	movs	r3, #1
 8003e52:	2111      	movs	r1, #17
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fd91 	bl	800397c <ism330dhcx_read_reg>
 8003e5a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0) {
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10f      	bne.n	8003e82 <ism330dhcx_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	7a3b      	ldrb	r3, [r7, #8]
 8003e6c:	f362 0303 	bfi	r3, r2, #0, #4
 8003e70:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8003e72:	f107 0208 	add.w	r2, r7, #8
 8003e76:	2301      	movs	r3, #1
 8003e78:	2111      	movs	r1, #17
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff fd96 	bl	80039ac <ism330dhcx_write_reg>
 8003e80:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8003e82:	68fb      	ldr	r3, [r7, #12]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8003e96:	f107 0208 	add.w	r2, r7, #8
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	2111      	movs	r1, #17
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff fd6c 	bl	800397c <ism330dhcx_read_reg>
 8003ea4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g) {
 8003ea6:	7a3b      	ldrb	r3, [r7, #8]
 8003ea8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b0c      	cmp	r3, #12
 8003eb0:	d834      	bhi.n	8003f1c <ism330dhcx_gy_full_scale_get+0x90>
 8003eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb8 <ism330dhcx_gy_full_scale_get+0x2c>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003ef5 	.word	0x08003ef5
 8003ebc:	08003f15 	.word	0x08003f15
 8003ec0:	08003eed 	.word	0x08003eed
 8003ec4:	08003f1d 	.word	0x08003f1d
 8003ec8:	08003efd 	.word	0x08003efd
 8003ecc:	08003f1d 	.word	0x08003f1d
 8003ed0:	08003f1d 	.word	0x08003f1d
 8003ed4:	08003f1d 	.word	0x08003f1d
 8003ed8:	08003f05 	.word	0x08003f05
 8003edc:	08003f1d 	.word	0x08003f1d
 8003ee0:	08003f1d 	.word	0x08003f1d
 8003ee4:	08003f1d 	.word	0x08003f1d
 8003ee8:	08003f0d 	.word	0x08003f0d
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	701a      	strb	r2, [r3, #0]
      break;
 8003ef2:	e017      	b.n	8003f24 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	701a      	strb	r2, [r3, #0]
      break;
 8003efa:	e013      	b.n	8003f24 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2204      	movs	r2, #4
 8003f00:	701a      	strb	r2, [r3, #0]
      break;
 8003f02:	e00f      	b.n	8003f24 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2208      	movs	r2, #8
 8003f08:	701a      	strb	r2, [r3, #0]
      break;
 8003f0a:	e00b      	b.n	8003f24 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	220c      	movs	r2, #12
 8003f10:	701a      	strb	r2, [r3, #0]
      break;
 8003f12:	e007      	b.n	8003f24 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2201      	movs	r2, #1
 8003f18:	701a      	strb	r2, [r3, #0]
      break;
 8003f1a:	e003      	b.n	8003f24 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	701a      	strb	r2, [r3, #0]
      break;
 8003f22:	bf00      	nop
  }

  return ret;
 8003f24:	68fb      	ldr	r3, [r7, #12]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop

08003f30 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8003f40:	f107 030c 	add.w	r3, r7, #12
 8003f44:	4619      	mov	r1, r3
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fb45 	bl	80045d6 <ism330dhcx_fsm_enable_get>
 8003f4c:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f040 80c4 	bne.w	80040de <ism330dhcx_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003f56:	7b3b      	ldrb	r3, [r7, #12]
 8003f58:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003f5c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8003f5e:	7b3b      	ldrb	r3, [r7, #12]
 8003f60:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003f64:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003f66:	4313      	orrs	r3, r2
 8003f68:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8003f6a:	7b3b      	ldrb	r3, [r7, #12]
 8003f6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003f70:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8003f72:	4313      	orrs	r3, r2
 8003f74:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003f76:	7b3b      	ldrb	r3, [r7, #12]
 8003f78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003f7c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003f82:	7b3b      	ldrb	r3, [r7, #12]
 8003f84:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003f88:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8003f8e:	7b3b      	ldrb	r3, [r7, #12]
 8003f90:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003f94:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003f96:	4313      	orrs	r3, r2
 8003f98:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8003f9a:	7b3b      	ldrb	r3, [r7, #12]
 8003f9c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003fa0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003fa6:	7b3b      	ldrb	r3, [r7, #12]
 8003fa8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003fac:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003fb2:	7b7b      	ldrb	r3, [r7, #13]
 8003fb4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003fb8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003fbe:	7b7b      	ldrb	r3, [r7, #13]
 8003fc0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003fc4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003fca:	7b7b      	ldrb	r3, [r7, #13]
 8003fcc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003fd0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003fd6:	7b7b      	ldrb	r3, [r7, #13]
 8003fd8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003fdc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003fe2:	7b7b      	ldrb	r3, [r7, #13]
 8003fe4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003fe8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003fea:	4313      	orrs	r3, r2
 8003fec:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8003fee:	7b7b      	ldrb	r3, [r7, #13]
 8003ff0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003ff4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8003ffa:	7b7b      	ldrb	r3, [r7, #13]
 8003ffc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004000:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8004002:	4313      	orrs	r3, r2
 8004004:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8004006:	7b7b      	ldrb	r3, [r7, #13]
 8004008:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800400c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800400e:	4313      	orrs	r3, r2
 8004010:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004012:	2b01      	cmp	r3, #1
 8004014:	d163      	bne.n	80040de <ism330dhcx_gy_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8004016:	f107 030b 	add.w	r3, r7, #11
 800401a:	4619      	mov	r1, r3
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fb07 	bl	8004630 <ism330dhcx_fsm_data_rate_get>
 8004022:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d159      	bne.n	80040de <ism330dhcx_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 800402a:	7afb      	ldrb	r3, [r7, #11]
 800402c:	2b03      	cmp	r3, #3
 800402e:	d853      	bhi.n	80040d8 <ism330dhcx_gy_data_rate_set+0x1a8>
 8004030:	a201      	add	r2, pc, #4	@ (adr r2, 8004038 <ism330dhcx_gy_data_rate_set+0x108>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	08004049 	.word	0x08004049
 800403c:	0800405b 	.word	0x0800405b
 8004040:	08004079 	.word	0x08004079
 8004044:	080040a3 	.word	0x080040a3
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <ism330dhcx_gy_data_rate_set+0x124>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 800404e:	2301      	movs	r3, #1
 8004050:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004052:	e044      	b.n	80040de <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	75fb      	strb	r3, [r7, #23]
            break;
 8004058:	e041      	b.n	80040de <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d102      	bne.n	8004066 <ism330dhcx_gy_data_rate_set+0x136>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004060:	2302      	movs	r3, #2
 8004062:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004064:	e03b      	b.n	80040de <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d102      	bne.n	8004072 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 800406c:	2302      	movs	r3, #2
 800406e:	75fb      	strb	r3, [r7, #23]
            break;
 8004070:	e035      	b.n	80040de <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	75fb      	strb	r3, [r7, #23]
            break;
 8004076:	e032      	b.n	80040de <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d102      	bne.n	8004084 <ism330dhcx_gy_data_rate_set+0x154>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800407e:	2303      	movs	r3, #3
 8004080:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004082:	e02c      	b.n	80040de <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d102      	bne.n	8004090 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800408a:	2303      	movs	r3, #3
 800408c:	75fb      	strb	r3, [r7, #23]
            break;
 800408e:	e026      	b.n	80040de <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d102      	bne.n	800409c <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004096:	2303      	movs	r3, #3
 8004098:	75fb      	strb	r3, [r7, #23]
            break;
 800409a:	e020      	b.n	80040de <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	75fb      	strb	r3, [r7, #23]
            break;
 80040a0:	e01d      	b.n	80040de <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d102      	bne.n	80040ae <ism330dhcx_gy_data_rate_set+0x17e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80040a8:	2304      	movs	r3, #4
 80040aa:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80040ac:	e017      	b.n	80040de <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d102      	bne.n	80040ba <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80040b4:	2304      	movs	r3, #4
 80040b6:	75fb      	strb	r3, [r7, #23]
            break;
 80040b8:	e011      	b.n	80040de <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d102      	bne.n	80040c6 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80040c0:	2304      	movs	r3, #4
 80040c2:	75fb      	strb	r3, [r7, #23]
            break;
 80040c4:	e00b      	b.n	80040de <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 80040c6:	78fb      	ldrb	r3, [r7, #3]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d102      	bne.n	80040d2 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80040cc:	2304      	movs	r3, #4
 80040ce:	75fb      	strb	r3, [r7, #23]
            break;
 80040d0:	e005      	b.n	80040de <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	75fb      	strb	r3, [r7, #23]
            break;
 80040d6:	e002      	b.n	80040de <ism330dhcx_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	75fb      	strb	r3, [r7, #23]
            break;
 80040dc:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 80040de:	2300      	movs	r3, #0
 80040e0:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d16c      	bne.n	80041c2 <ism330dhcx_gy_data_rate_set+0x292>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 80040e8:	f107 030a 	add.w	r3, r7, #10
 80040ec:	4619      	mov	r1, r3
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fae6 	bl	80046c0 <ism330dhcx_mlc_get>
 80040f4:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 80040f6:	7abb      	ldrb	r3, [r7, #10]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d162      	bne.n	80041c2 <ism330dhcx_gy_data_rate_set+0x292>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80040fc:	f107 0309 	add.w	r3, r7, #9
 8004100:	4619      	mov	r1, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fb06 	bl	8004714 <ism330dhcx_mlc_data_rate_get>
 8004108:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d158      	bne.n	80041c2 <ism330dhcx_gy_data_rate_set+0x292>
        switch (mlc_odr) {
 8004110:	7a7b      	ldrb	r3, [r7, #9]
 8004112:	2b03      	cmp	r3, #3
 8004114:	d852      	bhi.n	80041bc <ism330dhcx_gy_data_rate_set+0x28c>
 8004116:	a201      	add	r2, pc, #4	@ (adr r2, 800411c <ism330dhcx_gy_data_rate_set+0x1ec>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	0800412d 	.word	0x0800412d
 8004120:	0800413f 	.word	0x0800413f
 8004124:	0800415d 	.word	0x0800415d
 8004128:	08004187 	.word	0x08004187
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d102      	bne.n	8004138 <ism330dhcx_gy_data_rate_set+0x208>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8004132:	2301      	movs	r3, #1
 8004134:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004136:	e044      	b.n	80041c2 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	75fb      	strb	r3, [r7, #23]
            break;
 800413c:	e041      	b.n	80041c2 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d102      	bne.n	800414a <ism330dhcx_gy_data_rate_set+0x21a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004144:	2302      	movs	r3, #2
 8004146:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004148:	e03b      	b.n	80041c2 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d102      	bne.n	8004156 <ism330dhcx_gy_data_rate_set+0x226>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004150:	2302      	movs	r3, #2
 8004152:	75fb      	strb	r3, [r7, #23]
            break;
 8004154:	e035      	b.n	80041c2 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	75fb      	strb	r3, [r7, #23]
            break;
 800415a:	e032      	b.n	80041c2 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <ism330dhcx_gy_data_rate_set+0x238>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004162:	2303      	movs	r3, #3
 8004164:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004166:	e02c      	b.n	80041c2 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d102      	bne.n	8004174 <ism330dhcx_gy_data_rate_set+0x244>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800416e:	2303      	movs	r3, #3
 8004170:	75fb      	strb	r3, [r7, #23]
            break;
 8004172:	e026      	b.n	80041c2 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d102      	bne.n	8004180 <ism330dhcx_gy_data_rate_set+0x250>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800417a:	2303      	movs	r3, #3
 800417c:	75fb      	strb	r3, [r7, #23]
            break;
 800417e:	e020      	b.n	80041c2 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	75fb      	strb	r3, [r7, #23]
            break;
 8004184:	e01d      	b.n	80041c2 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d102      	bne.n	8004192 <ism330dhcx_gy_data_rate_set+0x262>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800418c:	2304      	movs	r3, #4
 800418e:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004190:	e017      	b.n	80041c2 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d102      	bne.n	800419e <ism330dhcx_gy_data_rate_set+0x26e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004198:	2304      	movs	r3, #4
 800419a:	75fb      	strb	r3, [r7, #23]
            break;
 800419c:	e011      	b.n	80041c2 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d102      	bne.n	80041aa <ism330dhcx_gy_data_rate_set+0x27a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80041a4:	2304      	movs	r3, #4
 80041a6:	75fb      	strb	r3, [r7, #23]
            break;
 80041a8:	e00b      	b.n	80041c2 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d102      	bne.n	80041b6 <ism330dhcx_gy_data_rate_set+0x286>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80041b0:	2304      	movs	r3, #4
 80041b2:	75fb      	strb	r3, [r7, #23]
            break;
 80041b4:	e005      	b.n	80041c2 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 80041b6:	78fb      	ldrb	r3, [r7, #3]
 80041b8:	75fb      	strb	r3, [r7, #23]
            break;
 80041ba:	e002      	b.n	80041c2 <ism330dhcx_gy_data_rate_set+0x292>

          default:
            odr_gy = val;
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	75fb      	strb	r3, [r7, #23]
            break;
 80041c0:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0) {
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d107      	bne.n	80041d8 <ism330dhcx_gy_data_rate_set+0x2a8>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80041c8:	f107 0208 	add.w	r2, r7, #8
 80041cc:	2301      	movs	r3, #1
 80041ce:	2111      	movs	r1, #17
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff fbd3 	bl	800397c <ism330dhcx_read_reg>
 80041d6:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0) {
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10f      	bne.n	80041fe <ism330dhcx_gy_data_rate_set+0x2ce>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80041de:	7dfb      	ldrb	r3, [r7, #23]
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	7a3b      	ldrb	r3, [r7, #8]
 80041e8:	f362 1307 	bfi	r3, r2, #4, #4
 80041ec:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 80041ee:	f107 0208 	add.w	r2, r7, #8
 80041f2:	2301      	movs	r3, #1
 80041f4:	2111      	movs	r1, #17
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff fbd8 	bl	80039ac <ism330dhcx_write_reg>
 80041fc:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 80041fe:	693b      	ldr	r3, [r7, #16]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004212:	f107 0208 	add.w	r2, r7, #8
 8004216:	2301      	movs	r3, #1
 8004218:	2111      	movs	r1, #17
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff fbae 	bl	800397c <ism330dhcx_read_reg>
 8004220:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g) {
 8004222:	7a3b      	ldrb	r3, [r7, #8]
 8004224:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b0a      	cmp	r3, #10
 800422c:	d844      	bhi.n	80042b8 <ism330dhcx_gy_data_rate_get+0xb0>
 800422e:	a201      	add	r2, pc, #4	@ (adr r2, 8004234 <ism330dhcx_gy_data_rate_get+0x2c>)
 8004230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004234:	08004261 	.word	0x08004261
 8004238:	08004269 	.word	0x08004269
 800423c:	08004271 	.word	0x08004271
 8004240:	08004279 	.word	0x08004279
 8004244:	08004281 	.word	0x08004281
 8004248:	08004289 	.word	0x08004289
 800424c:	08004291 	.word	0x08004291
 8004250:	08004299 	.word	0x08004299
 8004254:	080042a1 	.word	0x080042a1
 8004258:	080042a9 	.word	0x080042a9
 800425c:	080042b1 	.word	0x080042b1
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2200      	movs	r2, #0
 8004264:	701a      	strb	r2, [r3, #0]
      break;
 8004266:	e02b      	b.n	80042c0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2201      	movs	r2, #1
 800426c:	701a      	strb	r2, [r3, #0]
      break;
 800426e:	e027      	b.n	80042c0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2202      	movs	r2, #2
 8004274:	701a      	strb	r2, [r3, #0]
      break;
 8004276:	e023      	b.n	80042c0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2203      	movs	r2, #3
 800427c:	701a      	strb	r2, [r3, #0]
      break;
 800427e:	e01f      	b.n	80042c0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2204      	movs	r2, #4
 8004284:	701a      	strb	r2, [r3, #0]
      break;
 8004286:	e01b      	b.n	80042c0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2205      	movs	r2, #5
 800428c:	701a      	strb	r2, [r3, #0]
      break;
 800428e:	e017      	b.n	80042c0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_417Hz:
      *val = ISM330DHCX_GY_ODR_417Hz;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2206      	movs	r2, #6
 8004294:	701a      	strb	r2, [r3, #0]
      break;
 8004296:	e013      	b.n	80042c0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2207      	movs	r2, #7
 800429c:	701a      	strb	r2, [r3, #0]
      break;
 800429e:	e00f      	b.n	80042c0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1667Hz:
      *val = ISM330DHCX_GY_ODR_1667Hz;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2208      	movs	r2, #8
 80042a4:	701a      	strb	r2, [r3, #0]
      break;
 80042a6:	e00b      	b.n	80042c0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3333Hz:
      *val = ISM330DHCX_GY_ODR_3333Hz;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2209      	movs	r2, #9
 80042ac:	701a      	strb	r2, [r3, #0]
      break;
 80042ae:	e007      	b.n	80042c0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	220a      	movs	r2, #10
 80042b4:	701a      	strb	r2, [r3, #0]
      break;
 80042b6:	e003      	b.n	80042c0 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]
      break;
 80042be:	bf00      	nop
  }

  return ret;
 80042c0:	68fb      	ldr	r3, [r7, #12]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop

080042cc <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80042d8:	f107 0208 	add.w	r2, r7, #8
 80042dc:	2301      	movs	r3, #1
 80042de:	2112      	movs	r1, #18
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff fb4b 	bl	800397c <ism330dhcx_read_reg>
 80042e6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10f      	bne.n	800430e <ism330dhcx_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 80042ee:	78fb      	ldrb	r3, [r7, #3]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	7a3b      	ldrb	r3, [r7, #8]
 80042f8:	f362 1386 	bfi	r3, r2, #6, #1
 80042fc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80042fe:	f107 0208 	add.w	r2, r7, #8
 8004302:	2301      	movs	r3, #1
 8004304:	2112      	movs	r1, #18
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff fb50 	bl	80039ac <ism330dhcx_write_reg>
 800430c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800430e:	68fb      	ldr	r3, [r7, #12]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8004322:	f107 020c 	add.w	r2, r7, #12
 8004326:	2306      	movs	r3, #6
 8004328:	2122      	movs	r1, #34	@ 0x22
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff fb26 	bl	800397c <ism330dhcx_read_reg>
 8004330:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004332:	7b7b      	ldrb	r3, [r7, #13]
 8004334:	b21a      	sxth	r2, r3
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004340:	b29b      	uxth	r3, r3
 8004342:	021b      	lsls	r3, r3, #8
 8004344:	b29b      	uxth	r3, r3
 8004346:	7b3a      	ldrb	r2, [r7, #12]
 8004348:	4413      	add	r3, r2
 800434a:	b29b      	uxth	r3, r3
 800434c:	b21a      	sxth	r2, r3
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004352:	7bfa      	ldrb	r2, [r7, #15]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	3302      	adds	r3, #2
 8004358:	b212      	sxth	r2, r2
 800435a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	3302      	adds	r3, #2
 8004360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004364:	b29b      	uxth	r3, r3
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	b29b      	uxth	r3, r3
 800436a:	7bba      	ldrb	r2, [r7, #14]
 800436c:	4413      	add	r3, r2
 800436e:	b29a      	uxth	r2, r3
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	3302      	adds	r3, #2
 8004374:	b212      	sxth	r2, r2
 8004376:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004378:	7c7a      	ldrb	r2, [r7, #17]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	3304      	adds	r3, #4
 800437e:	b212      	sxth	r2, r2
 8004380:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	3304      	adds	r3, #4
 8004386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800438a:	b29b      	uxth	r3, r3
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	b29b      	uxth	r3, r3
 8004390:	7c3a      	ldrb	r2, [r7, #16]
 8004392:	4413      	add	r3, r2
 8004394:	b29a      	uxth	r2, r3
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	3304      	adds	r3, #4
 800439a:	b212      	sxth	r2, r2
 800439c:	801a      	strh	r2, [r3, #0]
  return ret;
 800439e:	697b      	ldr	r3, [r7, #20]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 80043b2:	f107 020c 	add.w	r2, r7, #12
 80043b6:	2306      	movs	r3, #6
 80043b8:	2128      	movs	r1, #40	@ 0x28
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff fade 	bl	800397c <ism330dhcx_read_reg>
 80043c0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80043c2:	7b7b      	ldrb	r3, [r7, #13]
 80043c4:	b21a      	sxth	r2, r3
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	7b3a      	ldrb	r2, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	b29b      	uxth	r3, r3
 80043dc:	b21a      	sxth	r2, r3
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80043e2:	7bfa      	ldrb	r2, [r7, #15]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	3302      	adds	r3, #2
 80043e8:	b212      	sxth	r2, r2
 80043ea:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	3302      	adds	r3, #2
 80043f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	7bba      	ldrb	r2, [r7, #14]
 80043fc:	4413      	add	r3, r2
 80043fe:	b29a      	uxth	r2, r3
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	3302      	adds	r3, #2
 8004404:	b212      	sxth	r2, r2
 8004406:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004408:	7c7a      	ldrb	r2, [r7, #17]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	3304      	adds	r3, #4
 800440e:	b212      	sxth	r2, r2
 8004410:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	3304      	adds	r3, #4
 8004416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800441a:	b29b      	uxth	r3, r3
 800441c:	021b      	lsls	r3, r3, #8
 800441e:	b29b      	uxth	r3, r3
 8004420:	7c3a      	ldrb	r2, [r7, #16]
 8004422:	4413      	add	r3, r2
 8004424:	b29a      	uxth	r2, r3
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	3304      	adds	r3, #4
 800442a:	b212      	sxth	r2, r2
 800442c:	801a      	strh	r2, [r3, #0]
  return ret;
 800442e:	697b      	ldr	r3, [r7, #20]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 8004444:	f107 0208 	add.w	r2, r7, #8
 8004448:	2301      	movs	r3, #1
 800444a:	2118      	movs	r1, #24
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff fa95 	bl	800397c <ism330dhcx_read_reg>
 8004452:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0) {
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10f      	bne.n	800447a <ism330dhcx_device_conf_set+0x42>
    ctrl9_xl.device_conf = (uint8_t)val;
 800445a:	78fb      	ldrb	r3, [r7, #3]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	b2da      	uxtb	r2, r3
 8004462:	7a3b      	ldrb	r3, [r7, #8]
 8004464:	f362 0341 	bfi	r3, r2, #1, #1
 8004468:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 800446a:	f107 0208 	add.w	r2, r7, #8
 800446e:	2301      	movs	r3, #1
 8004470:	2118      	movs	r1, #24
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff fa9a 	bl	80039ac <ism330dhcx_write_reg>
 8004478:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 800447a:	68fb      	ldr	r3, [r7, #12]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8004490:	f107 0208 	add.w	r2, r7, #8
 8004494:	2301      	movs	r3, #1
 8004496:	2101      	movs	r1, #1
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff fa6f 	bl	800397c <ism330dhcx_read_reg>
 800449e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10f      	bne.n	80044c6 <ism330dhcx_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 80044a6:	78fb      	ldrb	r3, [r7, #3]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	7a3b      	ldrb	r3, [r7, #8]
 80044b0:	f362 1387 	bfi	r3, r2, #6, #2
 80044b4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 80044b6:	f107 0208 	add.w	r2, r7, #8
 80044ba:	2301      	movs	r3, #1
 80044bc:	2101      	movs	r1, #1
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff fa74 	bl	80039ac <ism330dhcx_write_reg>
 80044c4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80044c6:	68fb      	ldr	r3, [r7, #12]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 80044da:	2301      	movs	r3, #1
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	210f      	movs	r1, #15
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff fa4b 	bl	800397c <ism330dhcx_read_reg>
 80044e6:	60f8      	str	r0, [r7, #12]
  return ret;
 80044e8:	68fb      	ldr	r3, [r7, #12]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	460b      	mov	r3, r1
 80044fc:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80044fe:	f107 0208 	add.w	r2, r7, #8
 8004502:	2301      	movs	r3, #1
 8004504:	2112      	movs	r1, #18
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff fa38 	bl	800397c <ism330dhcx_read_reg>
 800450c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10f      	bne.n	8004534 <ism330dhcx_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	b2da      	uxtb	r2, r3
 800451c:	7a3b      	ldrb	r3, [r7, #8]
 800451e:	f362 0300 	bfi	r3, r2, #0, #1
 8004522:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8004524:	f107 0208 	add.w	r2, r7, #8
 8004528:	2301      	movs	r3, #1
 800452a:	2112      	movs	r1, #18
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff fa3d 	bl	80039ac <ism330dhcx_write_reg>
 8004532:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004534:	68fb      	ldr	r3, [r7, #12]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	460b      	mov	r3, r1
 8004548:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800454a:	f107 0208 	add.w	r2, r7, #8
 800454e:	2301      	movs	r3, #1
 8004550:	2112      	movs	r1, #18
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff fa12 	bl	800397c <ism330dhcx_read_reg>
 8004558:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10f      	bne.n	8004580 <ism330dhcx_auto_increment_set+0x42>
    ctrl3_c.if_inc = (uint8_t)val;
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	b2da      	uxtb	r2, r3
 8004568:	7a3b      	ldrb	r3, [r7, #8]
 800456a:	f362 0382 	bfi	r3, r2, #2, #1
 800456e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8004570:	f107 0208 	add.w	r2, r7, #8
 8004574:	2301      	movs	r3, #1
 8004576:	2112      	movs	r1, #18
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff fa17 	bl	80039ac <ism330dhcx_write_reg>
 800457e:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004580:	68fb      	ldr	r3, [r7, #12]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8004596:	f107 0208 	add.w	r2, r7, #8
 800459a:	2301      	movs	r3, #1
 800459c:	210a      	movs	r1, #10
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff f9ec 	bl	800397c <ism330dhcx_read_reg>
 80045a4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10f      	bne.n	80045cc <ism330dhcx_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	7a3b      	ldrb	r3, [r7, #8]
 80045b6:	f362 0302 	bfi	r3, r2, #0, #3
 80045ba:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80045bc:	f107 0208 	add.w	r2, r7, #8
 80045c0:	2301      	movs	r3, #1
 80045c2:	210a      	movs	r1, #10
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff f9f1 	bl	80039ac <ism330dhcx_write_reg>
 80045ca:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 80045cc:	68fb      	ldr	r3, [r7, #12]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80045e0:	2102      	movs	r1, #2
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff ff4e 	bl	8004484 <ism330dhcx_mem_bank_set>
 80045e8:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d106      	bne.n	80045fe <ism330dhcx_fsm_enable_get+0x28>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 80045f0:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 80045f2:	2301      	movs	r3, #1
 80045f4:	2146      	movs	r1, #70	@ 0x46
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff f9c0 	bl	800397c <ism330dhcx_read_reg>
 80045fc:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d107      	bne.n	8004614 <ism330dhcx_fsm_enable_get+0x3e>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8004608:	2301      	movs	r3, #1
 800460a:	2147      	movs	r1, #71	@ 0x47
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff f9b5 	bl	800397c <ism330dhcx_read_reg>
 8004612:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <ism330dhcx_fsm_enable_get+0x4e>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800461a:	2100      	movs	r1, #0
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff ff31 	bl	8004484 <ism330dhcx_mem_bank_set>
 8004622:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004624:	68fb      	ldr	r3, [r7, #12]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800463a:	2102      	movs	r1, #2
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff ff21 	bl	8004484 <ism330dhcx_mem_bank_set>
 8004642:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d107      	bne.n	800465a <ism330dhcx_fsm_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 800464a:	f107 0208 	add.w	r2, r7, #8
 800464e:	2301      	movs	r3, #1
 8004650:	215f      	movs	r1, #95	@ 0x5f
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff f992 	bl	800397c <ism330dhcx_read_reg>
 8004658:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <ism330dhcx_fsm_data_rate_get+0x3a>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004660:	2100      	movs	r1, #0
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff ff0e 	bl	8004484 <ism330dhcx_mem_bank_set>
 8004668:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 800466a:	7a3b      	ldrb	r3, [r7, #8]
 800466c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b03      	cmp	r3, #3
 8004674:	d81a      	bhi.n	80046ac <ism330dhcx_fsm_data_rate_get+0x7c>
 8004676:	a201      	add	r2, pc, #4	@ (adr r2, 800467c <ism330dhcx_fsm_data_rate_get+0x4c>)
 8004678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467c:	0800468d 	.word	0x0800468d
 8004680:	08004695 	.word	0x08004695
 8004684:	0800469d 	.word	0x0800469d
 8004688:	080046a5 	.word	0x080046a5
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2200      	movs	r2, #0
 8004690:	701a      	strb	r2, [r3, #0]
      break;
 8004692:	e00f      	b.n	80046b4 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2201      	movs	r2, #1
 8004698:	701a      	strb	r2, [r3, #0]
      break;
 800469a:	e00b      	b.n	80046b4 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2202      	movs	r2, #2
 80046a0:	701a      	strb	r2, [r3, #0]
      break;
 80046a2:	e007      	b.n	80046b4 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2203      	movs	r2, #3
 80046a8:	701a      	strb	r2, [r3, #0]
      break;
 80046aa:	e003      	b.n	80046b4 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2200      	movs	r2, #0
 80046b0:	701a      	strb	r2, [r3, #0]
      break;
 80046b2:	bf00      	nop
  }

  return ret;
 80046b4:	68fb      	ldr	r3, [r7, #12]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop

080046c0 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80046ca:	2102      	movs	r1, #2
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff fed9 	bl	8004484 <ism330dhcx_mem_bank_set>
 80046d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d107      	bne.n	80046ea <ism330dhcx_mlc_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 80046da:	f107 0208 	add.w	r2, r7, #8
 80046de:	2301      	movs	r3, #1
 80046e0:	2105      	movs	r1, #5
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff f94a 	bl	800397c <ism330dhcx_read_reg>
 80046e8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10b      	bne.n	8004708 <ism330dhcx_mlc_get+0x48>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80046f0:	2100      	movs	r1, #0
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff fec6 	bl	8004484 <ism330dhcx_mem_bank_set>
 80046f8:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 80046fa:	7a3b      	ldrb	r3, [r7, #8]
 80046fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004700:	b2db      	uxtb	r3, r3
 8004702:	461a      	mov	r2, r3
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004708:	68fb      	ldr	r3, [r7, #12]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800471e:	2102      	movs	r1, #2
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff feaf 	bl	8004484 <ism330dhcx_mem_bank_set>
 8004726:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d107      	bne.n	800473e <ism330dhcx_mlc_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 800472e:	f107 0208 	add.w	r2, r7, #8
 8004732:	2301      	movs	r3, #1
 8004734:	2160      	movs	r1, #96	@ 0x60
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff f920 	bl	800397c <ism330dhcx_read_reg>
 800473c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d12a      	bne.n	800479a <ism330dhcx_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 8004744:	7a3b      	ldrb	r3, [r7, #8]
 8004746:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b03      	cmp	r3, #3
 800474e:	d81b      	bhi.n	8004788 <ism330dhcx_mlc_data_rate_get+0x74>
 8004750:	a201      	add	r2, pc, #4	@ (adr r2, 8004758 <ism330dhcx_mlc_data_rate_get+0x44>)
 8004752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004756:	bf00      	nop
 8004758:	08004769 	.word	0x08004769
 800475c:	08004771 	.word	0x08004771
 8004760:	08004779 	.word	0x08004779
 8004764:	08004781 	.word	0x08004781
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2200      	movs	r2, #0
 800476c:	701a      	strb	r2, [r3, #0]
        break;
 800476e:	e00f      	b.n	8004790 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2201      	movs	r2, #1
 8004774:	701a      	strb	r2, [r3, #0]
        break;
 8004776:	e00b      	b.n	8004790 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2202      	movs	r2, #2
 800477c:	701a      	strb	r2, [r3, #0]
        break;
 800477e:	e007      	b.n	8004790 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2203      	movs	r2, #3
 8004784:	701a      	strb	r2, [r3, #0]
        break;
 8004786:	e003      	b.n	8004790 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2200      	movs	r2, #0
 800478c:	701a      	strb	r2, [r3, #0]
        break;
 800478e:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004790:	2100      	movs	r1, #0
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff fe76 	bl	8004484 <ism330dhcx_mem_bank_set>
 8004798:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800479a:	68fb      	ldr	r3, [r7, #12]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80047a8:	4b18      	ldr	r3, [pc, #96]	@ (800480c <SystemInit+0x68>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ae:	4a17      	ldr	r2, [pc, #92]	@ (800480c <SystemInit+0x68>)
 80047b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80047b8:	4b15      	ldr	r3, [pc, #84]	@ (8004810 <SystemInit+0x6c>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80047be:	4b14      	ldr	r3, [pc, #80]	@ (8004810 <SystemInit+0x6c>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80047c4:	4b12      	ldr	r3, [pc, #72]	@ (8004810 <SystemInit+0x6c>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80047ca:	4b11      	ldr	r3, [pc, #68]	@ (8004810 <SystemInit+0x6c>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80047d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004810 <SystemInit+0x6c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a0e      	ldr	r2, [pc, #56]	@ (8004810 <SystemInit+0x6c>)
 80047d6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80047da:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80047de:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80047e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <SystemInit+0x6c>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80047e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004810 <SystemInit+0x6c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a09      	ldr	r2, [pc, #36]	@ (8004810 <SystemInit+0x6c>)
 80047ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80047f2:	4b07      	ldr	r3, [pc, #28]	@ (8004810 <SystemInit+0x6c>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047f8:	4b04      	ldr	r3, [pc, #16]	@ (800480c <SystemInit+0x68>)
 80047fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80047fe:	609a      	str	r2, [r3, #8]
  #endif
}
 8004800:	bf00      	nop
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	e000ed00 	.word	0xe000ed00
 8004810:	46020c00 	.word	0x46020c00

08004814 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004818:	4b11      	ldr	r3, [pc, #68]	@ (8004860 <HAL_Init+0x4c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a10      	ldr	r2, [pc, #64]	@ (8004860 <HAL_Init+0x4c>)
 800481e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004824:	2003      	movs	r0, #3
 8004826:	f000 f96d 	bl	8004b04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800482a:	f002 ff6f 	bl	800770c <HAL_RCC_GetSysClockFreq>
 800482e:	4602      	mov	r2, r0
 8004830:	4b0c      	ldr	r3, [pc, #48]	@ (8004864 <HAL_Init+0x50>)
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f003 030f 	and.w	r3, r3, #15
 8004838:	490b      	ldr	r1, [pc, #44]	@ (8004868 <HAL_Init+0x54>)
 800483a:	5ccb      	ldrb	r3, [r1, r3]
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
 8004840:	4a0a      	ldr	r2, [pc, #40]	@ (800486c <HAL_Init+0x58>)
 8004842:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004844:	200f      	movs	r0, #15
 8004846:	f000 f813 	bl	8004870 <HAL_InitTick>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e002      	b.n	800485a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004854:	f006 fa04 	bl	800ac60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40022000 	.word	0x40022000
 8004864:	46020c00 	.word	0x46020c00
 8004868:	0800f464 	.word	0x0800f464
 800486c:	200000a0 	.word	0x200000a0

08004870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8004878:	4b15      	ldr	r3, [pc, #84]	@ (80048d0 <HAL_InitTick+0x60>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e021      	b.n	80048c8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004884:	4b13      	ldr	r3, [pc, #76]	@ (80048d4 <HAL_InitTick+0x64>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	4b11      	ldr	r3, [pc, #68]	@ (80048d0 <HAL_InitTick+0x60>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	4619      	mov	r1, r3
 800488e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004892:	fbb3 f3f1 	udiv	r3, r3, r1
 8004896:	fbb2 f3f3 	udiv	r3, r2, r3
 800489a:	4618      	mov	r0, r3
 800489c:	f000 f965 	bl	8004b6a <HAL_SYSTICK_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e00e      	b.n	80048c8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b0f      	cmp	r3, #15
 80048ae:	d80a      	bhi.n	80048c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048b0:	2200      	movs	r2, #0
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048b8:	f000 f92f 	bl	8004b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048bc:	4a06      	ldr	r2, [pc, #24]	@ (80048d8 <HAL_InitTick+0x68>)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e000      	b.n	80048c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	200000a8 	.word	0x200000a8
 80048d4:	200000a0 	.word	0x200000a0
 80048d8:	200000a4 	.word	0x200000a4

080048dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80048e0:	4b06      	ldr	r3, [pc, #24]	@ (80048fc <HAL_IncTick+0x20>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	4b06      	ldr	r3, [pc, #24]	@ (8004900 <HAL_IncTick+0x24>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4413      	add	r3, r2
 80048ec:	4a04      	ldr	r2, [pc, #16]	@ (8004900 <HAL_IncTick+0x24>)
 80048ee:	6013      	str	r3, [r2, #0]
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	200000a8 	.word	0x200000a8
 8004900:	20000ed8 	.word	0x20000ed8

08004904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return uwTick;
 8004908:	4b03      	ldr	r3, [pc, #12]	@ (8004918 <HAL_GetTick+0x14>)
 800490a:	681b      	ldr	r3, [r3, #0]
}
 800490c:	4618      	mov	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000ed8 	.word	0x20000ed8

0800491c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004924:	f7ff ffee 	bl	8004904 <HAL_GetTick>
 8004928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004934:	d005      	beq.n	8004942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004936:	4b0a      	ldr	r3, [pc, #40]	@ (8004960 <HAL_Delay+0x44>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004942:	bf00      	nop
 8004944:	f7ff ffde 	bl	8004904 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	429a      	cmp	r2, r3
 8004952:	d8f7      	bhi.n	8004944 <HAL_Delay+0x28>
  {
  }
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	200000a8 	.word	0x200000a8

08004964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004974:	4b0c      	ldr	r3, [pc, #48]	@ (80049a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004980:	4013      	ands	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800498c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004996:	4a04      	ldr	r2, [pc, #16]	@ (80049a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	60d3      	str	r3, [r2, #12]
}
 800499c:	bf00      	nop
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	e000ed00 	.word	0xe000ed00

080049ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049b0:	4b04      	ldr	r3, [pc, #16]	@ (80049c4 <__NVIC_GetPriorityGrouping+0x18>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	0a1b      	lsrs	r3, r3, #8
 80049b6:	f003 0307 	and.w	r3, r3, #7
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	e000ed00 	.word	0xe000ed00

080049c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	db0b      	blt.n	80049f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	f003 021f 	and.w	r2, r3, #31
 80049e0:	4907      	ldr	r1, [pc, #28]	@ (8004a00 <__NVIC_EnableIRQ+0x38>)
 80049e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	2001      	movs	r0, #1
 80049ea:	fa00 f202 	lsl.w	r2, r0, r2
 80049ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	e000e100 	.word	0xe000e100

08004a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	6039      	str	r1, [r7, #0]
 8004a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	db0a      	blt.n	8004a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	490c      	ldr	r1, [pc, #48]	@ (8004a50 <__NVIC_SetPriority+0x4c>)
 8004a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a22:	0112      	lsls	r2, r2, #4
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	440b      	add	r3, r1
 8004a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a2c:	e00a      	b.n	8004a44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	4908      	ldr	r1, [pc, #32]	@ (8004a54 <__NVIC_SetPriority+0x50>)
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	3b04      	subs	r3, #4
 8004a3c:	0112      	lsls	r2, r2, #4
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	440b      	add	r3, r1
 8004a42:	761a      	strb	r2, [r3, #24]
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	e000e100 	.word	0xe000e100
 8004a54:	e000ed00 	.word	0xe000ed00

08004a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b089      	sub	sp, #36	@ 0x24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f1c3 0307 	rsb	r3, r3, #7
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	bf28      	it	cs
 8004a76:	2304      	movcs	r3, #4
 8004a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	2b06      	cmp	r3, #6
 8004a80:	d902      	bls.n	8004a88 <NVIC_EncodePriority+0x30>
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3b03      	subs	r3, #3
 8004a86:	e000      	b.n	8004a8a <NVIC_EncodePriority+0x32>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	43da      	mvns	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	401a      	ands	r2, r3
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aa0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aaa:	43d9      	mvns	r1, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab0:	4313      	orrs	r3, r2
         );
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3724      	adds	r7, #36	@ 0x24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
	...

08004ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ad0:	d301      	bcc.n	8004ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e00f      	b.n	8004af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8004b00 <SysTick_Config+0x40>)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ade:	210f      	movs	r1, #15
 8004ae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ae4:	f7ff ff8e 	bl	8004a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ae8:	4b05      	ldr	r3, [pc, #20]	@ (8004b00 <SysTick_Config+0x40>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aee:	4b04      	ldr	r3, [pc, #16]	@ (8004b00 <SysTick_Config+0x40>)
 8004af0:	2207      	movs	r2, #7
 8004af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	e000e010 	.word	0xe000e010

08004b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff ff29 	bl	8004964 <__NVIC_SetPriorityGrouping>
}
 8004b12:	bf00      	nop
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b086      	sub	sp, #24
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	4603      	mov	r3, r0
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	607a      	str	r2, [r7, #4]
 8004b26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b28:	f7ff ff40 	bl	80049ac <__NVIC_GetPriorityGrouping>
 8004b2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	6978      	ldr	r0, [r7, #20]
 8004b34:	f7ff ff90 	bl	8004a58 <NVIC_EncodePriority>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b3e:	4611      	mov	r1, r2
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff ff5f 	bl	8004a04 <__NVIC_SetPriority>
}
 8004b46:	bf00      	nop
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	4603      	mov	r3, r0
 8004b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff ff33 	bl	80049c8 <__NVIC_EnableIRQ>
}
 8004b62:	bf00      	nop
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff ffa4 	bl	8004ac0 <SysTick_Config>
 8004b78:	4603      	mov	r3, r0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d01e      	beq.n	8004bdc <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004baa:	f043 0202 	orr.w	r2, r3, #2
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bbe:	4a39      	ldr	r2, [pc, #228]	@ (8004ca4 <HAL_DCMI_IRQHandler+0x120>)
 8004bc0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 f88b 	bl	8004ce2 <HAL_DMA_Abort_IT>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d004      	beq.n	8004bdc <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f866 	bl	8004ca8 <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01e      	beq.n	8004c24 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2202      	movs	r2, #2
 8004bec:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bf2:	f043 0201 	orr.w	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c06:	4a27      	ldr	r2, [pc, #156]	@ (8004ca4 <HAL_DCMI_IRQHandler+0x120>)
 8004c08:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 f867 	bl	8004ce2 <HAL_DMA_Abort_IT>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d004      	beq.n	8004c24 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 f842 	bl	8004ca8 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d006      	beq.n	8004c3c <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2210      	movs	r2, #16
 8004c34:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fc fdb2 	bl	80017a0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d006      	beq.n	8004c54 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2208      	movs	r2, #8
 8004c4c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fc fdbc 	bl	80017cc <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d01d      	beq.n	8004c9a <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d107      	bne.n	8004c7c <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 021e 	bic.w	r2, r2, #30
 8004c7a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0201 	bic.w	r2, r2, #1
 8004c8a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2201      	movs	r2, #1
 8004c92:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7fc fd8e 	bl	80017b6 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004c9a:	bf00      	nop
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	08004ca9 	.word	0x08004ca9

08004ca8 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb4:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_ULE)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d009      	beq.n	8004cd4 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ccc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f7fc fd84 	bl	80017e2 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e019      	b.n	8004d28 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d004      	beq.n	8004d0a <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e00e      	b.n	8004d28 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6812      	ldr	r2, [r2, #0]
 8004d1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d20:	f043 0304 	orr.w	r3, r3, #4
 8004d24:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004d44:	f023 030f 	bic.w	r3, r3, #15
 8004d48:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d52:	3b50      	subs	r3, #80	@ 0x50
 8004d54:	09db      	lsrs	r3, r3, #7
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 8150 	beq.w	8005010 <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d011      	beq.n	8004da2 <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d94:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9a:	f043 0201 	orr.w	r2, r3, #1
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d011      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004dc6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dcc:	f043 0202 	orr.w	r2, r3, #2
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d011      	beq.n	8004e06 <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004df8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfe:	f043 0204 	orr.w	r2, r3, #4
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d011      	beq.n	8004e38 <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004e2a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e30:	f043 0208 	orr.w	r2, r3, #8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d013      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00c      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e5c:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d055      	beq.n	8004f28 <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d04e      	beq.n	8004f28 <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004e92:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d137      	bne.n	8004f10 <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004eae:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695a      	ldr	r2, [r3, #20]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0202 	orr.w	r2, r2, #2
 8004ebe:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d004      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2203      	movs	r2, #3
 8004ed2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004ed6:	e003      	b.n	8004ee0 <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8087 	beq.w	8005014 <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	4798      	blx	r3
        }

        return;
 8004f0e:	e081      	b.n	8005014 <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2205      	movs	r2, #5
 8004f14:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d039      	beq.n	8004faa <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d032      	beq.n	8004faa <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d012      	beq.n	8004f76 <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d116      	bne.n	8004f88 <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d111      	bne.n	8004f88 <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f70:	2201      	movs	r2, #1
 8004f72:	731a      	strb	r2, [r3, #12]
 8004f74:	e008      	b.n	8004f88 <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d103      	bne.n	8004f88 <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004f90:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d031      	beq.n	8005016 <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695a      	ldr	r2, [r3, #20]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0202 	orr.w	r2, r2, #2
 8004fc0:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d004      	beq.n	8004fda <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2203      	movs	r2, #3
 8004fd4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004fd8:	e003      	b.n	8004fe2 <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005002:	2b00      	cmp	r3, #0
 8005004:	d007      	beq.n	8005016 <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	4798      	blx	r3
 800500e:	e002      	b.n	8005016 <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005010:	bf00      	nop
 8005012:	e000      	b.n	8005016 <HAL_DMA_IRQHandler+0x2e2>
        return;
 8005014:	bf00      	nop
    }
  }
}
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	460b      	mov	r3, r1
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800502e:	7afb      	ldrb	r3, [r7, #11]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d011      	beq.n	8005058 <HAL_EXTI_RegisterCallback+0x3c>
 8005034:	2b02      	cmp	r3, #2
 8005036:	dc13      	bgt.n	8005060 <HAL_EXTI_RegisterCallback+0x44>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_EXTI_RegisterCallback+0x26>
 800503c:	2b01      	cmp	r3, #1
 800503e:	d007      	beq.n	8005050 <HAL_EXTI_RegisterCallback+0x34>
 8005040:	e00e      	b.n	8005060 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	609a      	str	r2, [r3, #8]
      break;
 800504e:	e00a      	b.n	8005066 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	605a      	str	r2, [r3, #4]
      break;
 8005056:	e006      	b.n	8005066 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	609a      	str	r2, [r3, #8]
      break;
 800505e:	e002      	b.n	8005066 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	75fb      	strb	r3, [r7, #23]
      break;
 8005064:	bf00      	nop
  }

  return status;
 8005066:	7dfb      	ldrb	r3, [r7, #23]
}
 8005068:	4618      	mov	r0, r3
 800506a:	371c      	adds	r7, #28
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e003      	b.n	8005090 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800508e:	2300      	movs	r3, #0
  }
}
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	0c1b      	lsrs	r3, r3, #16
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 031f 	and.w	r3, r3, #31
 80050b8:	2201      	movs	r2, #1
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	4b17      	ldr	r3, [pc, #92]	@ (8005124 <HAL_EXTI_IRQHandler+0x88>)
 80050c6:	4413      	add	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4013      	ands	r3, r2
 80050d2:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005128 <HAL_EXTI_IRQHandler+0x8c>)
 80050f4:	4413      	add	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4013      	ands	r3, r2
 8005100:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d009      	beq.n	800511c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	4798      	blx	r3
    }
  }
}
 800511c:	bf00      	nop
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	4602200c 	.word	0x4602200c
 8005128:	46022010 	.word	0x46022010

0800512c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800512c:	b480      	push	{r7}
 800512e:	b089      	sub	sp, #36	@ 0x24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800513e:	e1ba      	b.n	80054b6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	2101      	movs	r1, #1
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	fa01 f303 	lsl.w	r3, r1, r3
 800514c:	4013      	ands	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 81aa 	beq.w	80054b0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a55      	ldr	r2, [pc, #340]	@ (80052b4 <HAL_GPIO_Init+0x188>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d15d      	bne.n	8005220 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800516a:	2201      	movs	r2, #1
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43db      	mvns	r3, r3
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	4013      	ands	r3, r2
 8005178:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f003 0201 	and.w	r2, r3, #1
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	4313      	orrs	r3, r2
 800518c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8005194:	4a48      	ldr	r2, [pc, #288]	@ (80052b8 <HAL_GPIO_Init+0x18c>)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800519c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800519e:	4a46      	ldr	r2, [pc, #280]	@ (80052b8 <HAL_GPIO_Init+0x18c>)
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	4413      	add	r3, r2
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	08da      	lsrs	r2, r3, #3
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	3208      	adds	r2, #8
 80051b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	220f      	movs	r2, #15
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	43db      	mvns	r3, r3
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	4013      	ands	r3, r2
 80051cc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	220b      	movs	r2, #11
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	69fa      	ldr	r2, [r7, #28]
 80051de:	4313      	orrs	r3, r2
 80051e0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	08da      	lsrs	r2, r3, #3
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	3208      	adds	r2, #8
 80051ea:	69f9      	ldr	r1, [r7, #28]
 80051ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	2203      	movs	r2, #3
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	43db      	mvns	r3, r3
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	4013      	ands	r3, r2
 8005206:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	2202      	movs	r2, #2
 800520e:	fa02 f303 	lsl.w	r3, r2, r3
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	4313      	orrs	r3, r2
 8005216:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e067      	b.n	80052f0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b02      	cmp	r3, #2
 8005226:	d003      	beq.n	8005230 <HAL_GPIO_Init+0x104>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b12      	cmp	r3, #18
 800522e:	d145      	bne.n	80052bc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	08da      	lsrs	r2, r3, #3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3208      	adds	r2, #8
 8005238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800523c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	220f      	movs	r2, #15
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	43db      	mvns	r3, r3
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	4013      	ands	r3, r2
 8005252:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f003 020f 	and.w	r2, r3, #15
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	4313      	orrs	r3, r2
 800526c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	08da      	lsrs	r2, r3, #3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3208      	adds	r2, #8
 8005276:	69f9      	ldr	r1, [r7, #28]
 8005278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	2203      	movs	r2, #3
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	43db      	mvns	r3, r3
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	4013      	ands	r3, r2
 8005292:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f003 0203 	and.w	r2, r3, #3
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	e01e      	b.n	80052f0 <HAL_GPIO_Init+0x1c4>
 80052b2:	bf00      	nop
 80052b4:	46020000 	.word	0x46020000
 80052b8:	0800f4bc 	.word	0x0800f4bc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	2203      	movs	r2, #3
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	43db      	mvns	r3, r3
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	4013      	ands	r3, r2
 80052d2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f003 0203 	and.w	r2, r3, #3
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d00b      	beq.n	8005310 <HAL_GPIO_Init+0x1e4>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d007      	beq.n	8005310 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005304:	2b11      	cmp	r3, #17
 8005306:	d003      	beq.n	8005310 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b12      	cmp	r3, #18
 800530e:	d130      	bne.n	8005372 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	2203      	movs	r2, #3
 800531c:	fa02 f303 	lsl.w	r3, r2, r3
 8005320:	43db      	mvns	r3, r3
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	4013      	ands	r3, r2
 8005326:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	4313      	orrs	r3, r2
 8005338:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	69fa      	ldr	r2, [r7, #28]
 800533e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8005346:	2201      	movs	r2, #1
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	43db      	mvns	r3, r3
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	4013      	ands	r3, r2
 8005354:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	091b      	lsrs	r3, r3, #4
 800535c:	f003 0201 	and.w	r2, r3, #1
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	4313      	orrs	r3, r2
 800536a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b03      	cmp	r3, #3
 8005378:	d017      	beq.n	80053aa <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	2203      	movs	r2, #3
 8005386:	fa02 f303 	lsl.w	r3, r2, r3
 800538a:	43db      	mvns	r3, r3
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	4013      	ands	r3, r2
 8005390:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	fa02 f303 	lsl.w	r3, r2, r3
 800539e:	69fa      	ldr	r2, [r7, #28]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d07c      	beq.n	80054b0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80053b6:	4a47      	ldr	r2, [pc, #284]	@ (80054d4 <HAL_GPIO_Init+0x3a8>)
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	089b      	lsrs	r3, r3, #2
 80053bc:	3318      	adds	r3, #24
 80053be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	220f      	movs	r2, #15
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	43db      	mvns	r3, r3
 80053d4:	69fa      	ldr	r2, [r7, #28]
 80053d6:	4013      	ands	r3, r2
 80053d8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	0a9a      	lsrs	r2, r3, #10
 80053de:	4b3e      	ldr	r3, [pc, #248]	@ (80054d8 <HAL_GPIO_Init+0x3ac>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	f002 0203 	and.w	r2, r2, #3
 80053e8:	00d2      	lsls	r2, r2, #3
 80053ea:	4093      	lsls	r3, r2
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80053f2:	4938      	ldr	r1, [pc, #224]	@ (80054d4 <HAL_GPIO_Init+0x3a8>)
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	089b      	lsrs	r3, r3, #2
 80053f8:	3318      	adds	r3, #24
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005400:	4b34      	ldr	r3, [pc, #208]	@ (80054d4 <HAL_GPIO_Init+0x3a8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	43db      	mvns	r3, r3
 800540a:	69fa      	ldr	r2, [r7, #28]
 800540c:	4013      	ands	r3, r2
 800540e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005424:	4a2b      	ldr	r2, [pc, #172]	@ (80054d4 <HAL_GPIO_Init+0x3a8>)
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800542a:	4b2a      	ldr	r3, [pc, #168]	@ (80054d4 <HAL_GPIO_Init+0x3a8>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	43db      	mvns	r3, r3
 8005434:	69fa      	ldr	r2, [r7, #28]
 8005436:	4013      	ands	r3, r2
 8005438:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800544e:	4a21      	ldr	r2, [pc, #132]	@ (80054d4 <HAL_GPIO_Init+0x3a8>)
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005454:	4b1f      	ldr	r3, [pc, #124]	@ (80054d4 <HAL_GPIO_Init+0x3a8>)
 8005456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800545a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	43db      	mvns	r3, r3
 8005460:	69fa      	ldr	r2, [r7, #28]
 8005462:	4013      	ands	r3, r2
 8005464:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800547a:	4a16      	ldr	r2, [pc, #88]	@ (80054d4 <HAL_GPIO_Init+0x3a8>)
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8005482:	4b14      	ldr	r3, [pc, #80]	@ (80054d4 <HAL_GPIO_Init+0x3a8>)
 8005484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005488:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	43db      	mvns	r3, r3
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	4013      	ands	r3, r2
 8005492:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80054a8:	4a0a      	ldr	r2, [pc, #40]	@ (80054d4 <HAL_GPIO_Init+0x3a8>)
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	3301      	adds	r3, #1
 80054b4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	fa22 f303 	lsr.w	r3, r2, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f47f ae3d 	bne.w	8005140 <HAL_GPIO_Init+0x14>
  }
}
 80054c6:	bf00      	nop
 80054c8:	bf00      	nop
 80054ca:	3724      	adds	r7, #36	@ 0x24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	46022000 	.word	0x46022000
 80054d8:	002f7f7f 	.word	0x002f7f7f

080054dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80054dc:	b480      	push	{r7}
 80054de:	b089      	sub	sp, #36	@ 0x24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80054ee:	e0bc      	b.n	800566a <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80054f0:	2201      	movs	r2, #1
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	4013      	ands	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 80ad 	beq.w	8005664 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a5e      	ldr	r2, [pc, #376]	@ (8005688 <HAL_GPIO_DeInit+0x1ac>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d115      	bne.n	800553e <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8005512:	4a5e      	ldr	r2, [pc, #376]	@ (800568c <HAL_GPIO_DeInit+0x1b0>)
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800551a:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800551c:	4a5b      	ldr	r2, [pc, #364]	@ (800568c <HAL_GPIO_DeInit+0x1b0>)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	4413      	add	r3, r2
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8005528:	4b57      	ldr	r3, [pc, #348]	@ (8005688 <HAL_GPIO_DeInit+0x1ac>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	2101      	movs	r1, #1
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	fa01 f303 	lsl.w	r3, r1, r3
 8005534:	43db      	mvns	r3, r3
 8005536:	4954      	ldr	r1, [pc, #336]	@ (8005688 <HAL_GPIO_DeInit+0x1ac>)
 8005538:	4013      	ands	r3, r2
 800553a:	600b      	str	r3, [r1, #0]
 800553c:	e053      	b.n	80055e6 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 800553e:	4a54      	ldr	r2, [pc, #336]	@ (8005690 <HAL_GPIO_DeInit+0x1b4>)
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	089b      	lsrs	r3, r3, #2
 8005544:	3318      	adds	r3, #24
 8005546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554a:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	220f      	movs	r2, #15
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4013      	ands	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	0a9a      	lsrs	r2, r3, #10
 8005564:	4b4b      	ldr	r3, [pc, #300]	@ (8005694 <HAL_GPIO_DeInit+0x1b8>)
 8005566:	4013      	ands	r3, r2
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	f002 0203 	and.w	r2, r2, #3
 800556e:	00d2      	lsls	r2, r2, #3
 8005570:	4093      	lsls	r3, r2
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	429a      	cmp	r2, r3
 8005576:	d136      	bne.n	80055e6 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8005578:	4b45      	ldr	r3, [pc, #276]	@ (8005690 <HAL_GPIO_DeInit+0x1b4>)
 800557a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	43db      	mvns	r3, r3
 8005582:	4943      	ldr	r1, [pc, #268]	@ (8005690 <HAL_GPIO_DeInit+0x1b4>)
 8005584:	4013      	ands	r3, r2
 8005586:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800558a:	4b41      	ldr	r3, [pc, #260]	@ (8005690 <HAL_GPIO_DeInit+0x1b4>)
 800558c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	43db      	mvns	r3, r3
 8005594:	493e      	ldr	r1, [pc, #248]	@ (8005690 <HAL_GPIO_DeInit+0x1b4>)
 8005596:	4013      	ands	r3, r2
 8005598:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 800559c:	4b3c      	ldr	r3, [pc, #240]	@ (8005690 <HAL_GPIO_DeInit+0x1b4>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	43db      	mvns	r3, r3
 80055a4:	493a      	ldr	r1, [pc, #232]	@ (8005690 <HAL_GPIO_DeInit+0x1b4>)
 80055a6:	4013      	ands	r3, r2
 80055a8:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 80055aa:	4b39      	ldr	r3, [pc, #228]	@ (8005690 <HAL_GPIO_DeInit+0x1b4>)
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	43db      	mvns	r3, r3
 80055b2:	4937      	ldr	r1, [pc, #220]	@ (8005690 <HAL_GPIO_DeInit+0x1b4>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	220f      	movs	r2, #15
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 80055c8:	4a31      	ldr	r2, [pc, #196]	@ (8005690 <HAL_GPIO_DeInit+0x1b4>)
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	089b      	lsrs	r3, r3, #2
 80055ce:	3318      	adds	r3, #24
 80055d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	43da      	mvns	r2, r3
 80055d8:	482d      	ldr	r0, [pc, #180]	@ (8005690 <HAL_GPIO_DeInit+0x1b4>)
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	089b      	lsrs	r3, r3, #2
 80055de:	400a      	ands	r2, r1
 80055e0:	3318      	adds	r3, #24
 80055e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	2103      	movs	r1, #3
 80055f0:	fa01 f303 	lsl.w	r3, r1, r3
 80055f4:	431a      	orrs	r2, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	08da      	lsrs	r2, r3, #3
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	3208      	adds	r2, #8
 8005602:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	220f      	movs	r2, #15
 8005610:	fa02 f303 	lsl.w	r3, r2, r3
 8005614:	43db      	mvns	r3, r3
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	08d2      	lsrs	r2, r2, #3
 800561a:	4019      	ands	r1, r3
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	3208      	adds	r2, #8
 8005620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	2103      	movs	r1, #3
 800562e:	fa01 f303 	lsl.w	r3, r1, r3
 8005632:	43db      	mvns	r3, r3
 8005634:	401a      	ands	r2, r3
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	2101      	movs	r1, #1
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	fa01 f303 	lsl.w	r3, r1, r3
 8005646:	43db      	mvns	r3, r3
 8005648:	401a      	ands	r2, r3
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	2103      	movs	r1, #3
 8005658:	fa01 f303 	lsl.w	r3, r1, r3
 800565c:	43db      	mvns	r3, r3
 800565e:	401a      	ands	r2, r3
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	3301      	adds	r3, #1
 8005668:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	fa22 f303 	lsr.w	r3, r2, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	f47f af3c 	bne.w	80054f0 <HAL_GPIO_DeInit+0x14>
  }
}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	3724      	adds	r7, #36	@ 0x24
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	46020000 	.word	0x46020000
 800568c:	0800f4bc 	.word	0x0800f4bc
 8005690:	46022000 	.word	0x46022000
 8005694:	002f7f7f 	.word	0x002f7f7f

08005698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	807b      	strh	r3, [r7, #2]
 80056a4:	4613      	mov	r3, r2
 80056a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056a8:	787b      	ldrb	r3, [r7, #1]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056ae:	887a      	ldrh	r2, [r7, #2]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80056b4:	e002      	b.n	80056bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80056b6:	887a      	ldrh	r2, [r7, #2]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e081      	b.n	80057de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f8a8 	bl	8005844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2224      	movs	r2, #36	@ 0x24
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0201 	bic.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005718:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005728:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d107      	bne.n	8005742 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800573e:	609a      	str	r2, [r3, #8]
 8005740:	e006      	b.n	8005750 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800574e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	2b02      	cmp	r3, #2
 8005756:	d104      	bne.n	8005762 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005760:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005770:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005774:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005784:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691a      	ldr	r2, [r3, #16]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	69d9      	ldr	r1, [r3, #28]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a1a      	ldr	r2, [r3, #32]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e021      	b.n	800583c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2224      	movs	r2, #36	@ 0x24
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f821 	bl	8005858 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b088      	sub	sp, #32
 8005870:	af02      	add	r7, sp, #8
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	4608      	mov	r0, r1
 8005876:	4611      	mov	r1, r2
 8005878:	461a      	mov	r2, r3
 800587a:	4603      	mov	r3, r0
 800587c:	817b      	strh	r3, [r7, #10]
 800587e:	460b      	mov	r3, r1
 8005880:	813b      	strh	r3, [r7, #8]
 8005882:	4613      	mov	r3, r2
 8005884:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b20      	cmp	r3, #32
 8005890:	f040 80f9 	bne.w	8005a86 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_I2C_Mem_Write+0x34>
 800589a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800589c:	2b00      	cmp	r3, #0
 800589e:	d105      	bne.n	80058ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0ed      	b.n	8005a88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <HAL_I2C_Mem_Write+0x4e>
 80058b6:	2302      	movs	r3, #2
 80058b8:	e0e6      	b.n	8005a88 <HAL_I2C_Mem_Write+0x21c>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058c2:	f7ff f81f 	bl	8004904 <HAL_GetTick>
 80058c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	2319      	movs	r3, #25
 80058ce:	2201      	movs	r2, #1
 80058d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 fadd 	bl	8005e94 <I2C_WaitOnFlagUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0d1      	b.n	8005a88 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2221      	movs	r2, #33	@ 0x21
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2240      	movs	r2, #64	@ 0x40
 80058f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a3a      	ldr	r2, [r7, #32]
 80058fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005904:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800590c:	88f8      	ldrh	r0, [r7, #6]
 800590e:	893a      	ldrh	r2, [r7, #8]
 8005910:	8979      	ldrh	r1, [r7, #10]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	9301      	str	r3, [sp, #4]
 8005916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	4603      	mov	r3, r0
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f9ed 	bl	8005cfc <I2C_RequestMemoryWrite>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e0a9      	b.n	8005a88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005938:	b29b      	uxth	r3, r3
 800593a:	2bff      	cmp	r3, #255	@ 0xff
 800593c:	d90e      	bls.n	800595c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	22ff      	movs	r2, #255	@ 0xff
 8005942:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005948:	b2da      	uxtb	r2, r3
 800594a:	8979      	ldrh	r1, [r7, #10]
 800594c:	2300      	movs	r3, #0
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 fc45 	bl	80061e4 <I2C_TransferConfig>
 800595a:	e00f      	b.n	800597c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800596a:	b2da      	uxtb	r2, r3
 800596c:	8979      	ldrh	r1, [r7, #10]
 800596e:	2300      	movs	r3, #0
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 fc34 	bl	80061e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 fac7 	bl	8005f14 <I2C_WaitOnTXISFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e07b      	b.n	8005a88 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005994:	781a      	ldrb	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d034      	beq.n	8005a34 <HAL_I2C_Mem_Write+0x1c8>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d130      	bne.n	8005a34 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d8:	2200      	movs	r2, #0
 80059da:	2180      	movs	r1, #128	@ 0x80
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 fa59 	bl	8005e94 <I2C_WaitOnFlagUntilTimeout>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e04d      	b.n	8005a88 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2bff      	cmp	r3, #255	@ 0xff
 80059f4:	d90e      	bls.n	8005a14 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	22ff      	movs	r2, #255	@ 0xff
 80059fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	8979      	ldrh	r1, [r7, #10]
 8005a04:	2300      	movs	r3, #0
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 fbe9 	bl	80061e4 <I2C_TransferConfig>
 8005a12:	e00f      	b.n	8005a34 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	8979      	ldrh	r1, [r7, #10]
 8005a26:	2300      	movs	r3, #0
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 fbd8 	bl	80061e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d19e      	bne.n	800597c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 faa6 	bl	8005f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e01a      	b.n	8005a88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2220      	movs	r2, #32
 8005a58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6859      	ldr	r1, [r3, #4]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <HAL_I2C_Mem_Write+0x224>)
 8005a66:	400b      	ands	r3, r1
 8005a68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	e000      	b.n	8005a88 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005a86:	2302      	movs	r3, #2
  }
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	fe00e800 	.word	0xfe00e800

08005a94 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	4608      	mov	r0, r1
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	817b      	strh	r3, [r7, #10]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	813b      	strh	r3, [r7, #8]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	f040 80fd 	bne.w	8005cb6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <HAL_I2C_Mem_Read+0x34>
 8005ac2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d105      	bne.n	8005ad4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ace:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e0f1      	b.n	8005cb8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_I2C_Mem_Read+0x4e>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e0ea      	b.n	8005cb8 <HAL_I2C_Mem_Read+0x224>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005aea:	f7fe ff0b 	bl	8004904 <HAL_GetTick>
 8005aee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	2319      	movs	r3, #25
 8005af6:	2201      	movs	r2, #1
 8005af8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 f9c9 	bl	8005e94 <I2C_WaitOnFlagUntilTimeout>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0d5      	b.n	8005cb8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2222      	movs	r2, #34	@ 0x22
 8005b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2240      	movs	r2, #64	@ 0x40
 8005b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a3a      	ldr	r2, [r7, #32]
 8005b26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b34:	88f8      	ldrh	r0, [r7, #6]
 8005b36:	893a      	ldrh	r2, [r7, #8]
 8005b38:	8979      	ldrh	r1, [r7, #10]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	4603      	mov	r3, r0
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 f92d 	bl	8005da4 <I2C_RequestMemoryRead>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d005      	beq.n	8005b5c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e0ad      	b.n	8005cb8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2bff      	cmp	r3, #255	@ 0xff
 8005b64:	d90e      	bls.n	8005b84 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	22ff      	movs	r2, #255	@ 0xff
 8005b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	8979      	ldrh	r1, [r7, #10]
 8005b74:	4b52      	ldr	r3, [pc, #328]	@ (8005cc0 <HAL_I2C_Mem_Read+0x22c>)
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 fb31 	bl	80061e4 <I2C_TransferConfig>
 8005b82:	e00f      	b.n	8005ba4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	8979      	ldrh	r1, [r7, #10]
 8005b96:	4b4a      	ldr	r3, [pc, #296]	@ (8005cc0 <HAL_I2C_Mem_Read+0x22c>)
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 fb20 	bl	80061e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005baa:	2200      	movs	r2, #0
 8005bac:	2104      	movs	r1, #4
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 f970 	bl	8005e94 <I2C_WaitOnFlagUntilTimeout>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e07c      	b.n	8005cb8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d034      	beq.n	8005c64 <HAL_I2C_Mem_Read+0x1d0>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d130      	bne.n	8005c64 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2180      	movs	r1, #128	@ 0x80
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 f941 	bl	8005e94 <I2C_WaitOnFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e04d      	b.n	8005cb8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2bff      	cmp	r3, #255	@ 0xff
 8005c24:	d90e      	bls.n	8005c44 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	22ff      	movs	r2, #255	@ 0xff
 8005c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	8979      	ldrh	r1, [r7, #10]
 8005c34:	2300      	movs	r3, #0
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 fad1 	bl	80061e4 <I2C_TransferConfig>
 8005c42:	e00f      	b.n	8005c64 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	8979      	ldrh	r1, [r7, #10]
 8005c56:	2300      	movs	r3, #0
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 fac0 	bl	80061e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d19a      	bne.n	8005ba4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 f98e 	bl	8005f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e01a      	b.n	8005cb8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2220      	movs	r2, #32
 8005c88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6859      	ldr	r1, [r3, #4]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc4 <HAL_I2C_Mem_Read+0x230>)
 8005c96:	400b      	ands	r3, r1
 8005c98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e000      	b.n	8005cb8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005cb6:	2302      	movs	r3, #2
  }
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	80002400 	.word	0x80002400
 8005cc4:	fe00e800 	.word	0xfe00e800

08005cc8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cd6:	b2db      	uxtb	r3, r3
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	4608      	mov	r0, r1
 8005d06:	4611      	mov	r1, r2
 8005d08:	461a      	mov	r2, r3
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	817b      	strh	r3, [r7, #10]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	813b      	strh	r3, [r7, #8]
 8005d12:	4613      	mov	r3, r2
 8005d14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	8979      	ldrh	r1, [r7, #10]
 8005d1c:	4b20      	ldr	r3, [pc, #128]	@ (8005da0 <I2C_RequestMemoryWrite+0xa4>)
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 fa5d 	bl	80061e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d2a:	69fa      	ldr	r2, [r7, #28]
 8005d2c:	69b9      	ldr	r1, [r7, #24]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 f8f0 	bl	8005f14 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e02c      	b.n	8005d98 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d105      	bne.n	8005d50 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d44:	893b      	ldrh	r3, [r7, #8]
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d4e:	e015      	b.n	8005d7c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d50:	893b      	ldrh	r3, [r7, #8]
 8005d52:	0a1b      	lsrs	r3, r3, #8
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	69b9      	ldr	r1, [r7, #24]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 f8d6 	bl	8005f14 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e012      	b.n	8005d98 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d72:	893b      	ldrh	r3, [r7, #8]
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	2200      	movs	r2, #0
 8005d84:	2180      	movs	r1, #128	@ 0x80
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f884 	bl	8005e94 <I2C_WaitOnFlagUntilTimeout>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	80002000 	.word	0x80002000

08005da4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	4608      	mov	r0, r1
 8005dae:	4611      	mov	r1, r2
 8005db0:	461a      	mov	r2, r3
 8005db2:	4603      	mov	r3, r0
 8005db4:	817b      	strh	r3, [r7, #10]
 8005db6:	460b      	mov	r3, r1
 8005db8:	813b      	strh	r3, [r7, #8]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	8979      	ldrh	r1, [r7, #10]
 8005dc4:	4b20      	ldr	r3, [pc, #128]	@ (8005e48 <I2C_RequestMemoryRead+0xa4>)
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fa0a 	bl	80061e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	69b9      	ldr	r1, [r7, #24]
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 f89d 	bl	8005f14 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e02c      	b.n	8005e3e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005de4:	88fb      	ldrh	r3, [r7, #6]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d105      	bne.n	8005df6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dea:	893b      	ldrh	r3, [r7, #8]
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005df4:	e015      	b.n	8005e22 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005df6:	893b      	ldrh	r3, [r7, #8]
 8005df8:	0a1b      	lsrs	r3, r3, #8
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	69b9      	ldr	r1, [r7, #24]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f883 	bl	8005f14 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e012      	b.n	8005e3e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e18:	893b      	ldrh	r3, [r7, #8]
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2140      	movs	r1, #64	@ 0x40
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f831 	bl	8005e94 <I2C_WaitOnFlagUntilTimeout>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e000      	b.n	8005e3e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	80002000 	.word	0x80002000

08005e4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d103      	bne.n	8005e6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2200      	movs	r2, #0
 8005e68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d007      	beq.n	8005e88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699a      	ldr	r2, [r3, #24]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0201 	orr.w	r2, r2, #1
 8005e86:	619a      	str	r2, [r3, #24]
  }
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	603b      	str	r3, [r7, #0]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ea4:	e022      	b.n	8005eec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005eac:	d01e      	beq.n	8005eec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eae:	f7fe fd29 	bl	8004904 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d302      	bcc.n	8005ec4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d113      	bne.n	8005eec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec8:	f043 0220 	orr.w	r2, r3, #32
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e00f      	b.n	8005f0c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	bf0c      	ite	eq
 8005efc:	2301      	moveq	r3, #1
 8005efe:	2300      	movne	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	461a      	mov	r2, r3
 8005f04:	79fb      	ldrb	r3, [r7, #7]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d0cd      	beq.n	8005ea6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f20:	e02c      	b.n	8005f7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 f870 	bl	800600c <I2C_IsErrorOccurred>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e02a      	b.n	8005f8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f3c:	d01e      	beq.n	8005f7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3e:	f7fe fce1 	bl	8004904 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d302      	bcc.n	8005f54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d113      	bne.n	8005f7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f58:	f043 0220 	orr.w	r2, r3, #32
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e007      	b.n	8005f8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d1cb      	bne.n	8005f22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fa0:	e028      	b.n	8005ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 f830 	bl	800600c <I2C_IsErrorOccurred>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e026      	b.n	8006004 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb6:	f7fe fca5 	bl	8004904 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d302      	bcc.n	8005fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d113      	bne.n	8005ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd0:	f043 0220 	orr.w	r2, r3, #32
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e007      	b.n	8006004 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	d1cf      	bne.n	8005fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08a      	sub	sp, #40	@ 0x28
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b00      	cmp	r3, #0
 8006036:	d075      	beq.n	8006124 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2210      	movs	r2, #16
 800603e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006040:	e056      	b.n	80060f0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006048:	d052      	beq.n	80060f0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800604a:	f7fe fc5b 	bl	8004904 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	429a      	cmp	r2, r3
 8006058:	d302      	bcc.n	8006060 <I2C_IsErrorOccurred+0x54>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d147      	bne.n	80060f0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800606a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006072:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800607e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006082:	d12e      	bne.n	80060e2 <I2C_IsErrorOccurred+0xd6>
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800608a:	d02a      	beq.n	80060e2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800608c:	7cfb      	ldrb	r3, [r7, #19]
 800608e:	2b20      	cmp	r3, #32
 8006090:	d027      	beq.n	80060e2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80060a2:	f7fe fc2f 	bl	8004904 <HAL_GetTick>
 80060a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060a8:	e01b      	b.n	80060e2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80060aa:	f7fe fc2b 	bl	8004904 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b19      	cmp	r3, #25
 80060b6:	d914      	bls.n	80060e2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060bc:	f043 0220 	orr.w	r2, r3, #32
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2220      	movs	r2, #32
 80060c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

              status = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d1dc      	bne.n	80060aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	f003 0320 	and.w	r3, r3, #32
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	d003      	beq.n	8006106 <I2C_IsErrorOccurred+0xfa>
 80060fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006102:	2b00      	cmp	r3, #0
 8006104:	d09d      	beq.n	8006042 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006106:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2220      	movs	r2, #32
 8006114:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	f043 0304 	orr.w	r3, r3, #4
 800611c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00b      	beq.n	800614e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	f043 0301 	orr.w	r3, r3, #1
 800613c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006146:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	f043 0308 	orr.w	r3, r3, #8
 800615e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006168:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00b      	beq.n	8006192 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	f043 0302 	orr.w	r3, r3, #2
 8006180:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800618a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006192:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006196:	2b00      	cmp	r3, #0
 8006198:	d01c      	beq.n	80061d4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff fe56 	bl	8005e4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6859      	ldr	r1, [r3, #4]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	4b0d      	ldr	r3, [pc, #52]	@ (80061e0 <I2C_IsErrorOccurred+0x1d4>)
 80061ac:	400b      	ands	r3, r1
 80061ae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	431a      	orrs	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2220      	movs	r2, #32
 80061c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80061d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3728      	adds	r7, #40	@ 0x28
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	fe00e800 	.word	0xfe00e800

080061e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	607b      	str	r3, [r7, #4]
 80061ee:	460b      	mov	r3, r1
 80061f0:	817b      	strh	r3, [r7, #10]
 80061f2:	4613      	mov	r3, r2
 80061f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061f6:	897b      	ldrh	r3, [r7, #10]
 80061f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061fc:	7a7b      	ldrb	r3, [r7, #9]
 80061fe:	041b      	lsls	r3, r3, #16
 8006200:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006204:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	4313      	orrs	r3, r2
 800620e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006212:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	0d5b      	lsrs	r3, r3, #21
 800621e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006222:	4b08      	ldr	r3, [pc, #32]	@ (8006244 <I2C_TransferConfig+0x60>)
 8006224:	430b      	orrs	r3, r1
 8006226:	43db      	mvns	r3, r3
 8006228:	ea02 0103 	and.w	r1, r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	430a      	orrs	r2, r1
 8006234:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006236:	bf00      	nop
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	03ff63ff 	.word	0x03ff63ff

08006248 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b20      	cmp	r3, #32
 800625c:	d138      	bne.n	80062d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006268:	2302      	movs	r3, #2
 800626a:	e032      	b.n	80062d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2224      	movs	r2, #36	@ 0x24
 8006278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0201 	bic.w	r2, r2, #1
 800628a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800629a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6819      	ldr	r1, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062cc:	2300      	movs	r3, #0
 80062ce:	e000      	b.n	80062d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062d0:	2302      	movs	r3, #2
  }
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062de:	b480      	push	{r7}
 80062e0:	b085      	sub	sp, #20
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d139      	bne.n	8006368 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062fe:	2302      	movs	r3, #2
 8006300:	e033      	b.n	800636a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2224      	movs	r2, #36	@ 0x24
 800630e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0201 	bic.w	r2, r2, #1
 8006320:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006330:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0201 	orr.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2220      	movs	r2, #32
 8006358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	e000      	b.n	800636a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006368:	2302      	movs	r3, #2
  }
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
	...

08006378 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006384:	4b0b      	ldr	r3, [pc, #44]	@ (80063b4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	73fb      	strb	r3, [r7, #15]
 8006394:	e007      	b.n	80063a6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8006396:	4b07      	ldr	r3, [pc, #28]	@ (80063b4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f023 0204 	bic.w	r2, r3, #4
 800639e:	4905      	ldr	r1, [pc, #20]	@ (80063b4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr
 80063b4:	40030400 	.word	0x40030400

080063b8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80063bc:	4b05      	ldr	r3, [pc, #20]	@ (80063d4 <HAL_ICACHE_Enable+0x1c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a04      	ldr	r2, [pc, #16]	@ (80063d4 <HAL_ICACHE_Enable+0x1c>)
 80063c2:	f043 0301 	orr.w	r3, r3, #1
 80063c6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	40030400 	.word	0x40030400

080063d8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80063e0:	4b34      	ldr	r3, [pc, #208]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80063e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80063e8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d101      	bne.n	80063f6 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	e057      	b.n	80064a6 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063fc:	d90a      	bls.n	8006414 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80063fe:	4b2d      	ldr	r3, [pc, #180]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4313      	orrs	r3, r2
 800640a:	4a2a      	ldr	r2, [pc, #168]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800640c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006410:	60d3      	str	r3, [r2, #12]
 8006412:	e007      	b.n	8006424 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006414:	4b27      	ldr	r3, [pc, #156]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800641c:	4925      	ldr	r1, [pc, #148]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4313      	orrs	r3, r2
 8006422:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006424:	4b24      	ldr	r3, [pc, #144]	@ (80064b8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a24      	ldr	r2, [pc, #144]	@ (80064bc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800642a:	fba2 2303 	umull	r2, r3, r2, r3
 800642e:	099b      	lsrs	r3, r3, #6
 8006430:	2232      	movs	r2, #50	@ 0x32
 8006432:	fb02 f303 	mul.w	r3, r2, r3
 8006436:	4a21      	ldr	r2, [pc, #132]	@ (80064bc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006438:	fba2 2303 	umull	r2, r3, r2, r3
 800643c:	099b      	lsrs	r3, r3, #6
 800643e:	3301      	adds	r3, #1
 8006440:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006442:	e002      	b.n	800644a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3b01      	subs	r3, #1
 8006448:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800644a:	4b1a      	ldr	r3, [pc, #104]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d102      	bne.n	800645c <HAL_PWREx_ControlVoltageScaling+0x84>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1f3      	bne.n	8006444 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d01b      	beq.n	800649a <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006462:	4b15      	ldr	r3, [pc, #84]	@ (80064b8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a15      	ldr	r2, [pc, #84]	@ (80064bc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006468:	fba2 2303 	umull	r2, r3, r2, r3
 800646c:	099b      	lsrs	r3, r3, #6
 800646e:	2232      	movs	r2, #50	@ 0x32
 8006470:	fb02 f303 	mul.w	r3, r2, r3
 8006474:	4a11      	ldr	r2, [pc, #68]	@ (80064bc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006476:	fba2 2303 	umull	r2, r3, r2, r3
 800647a:	099b      	lsrs	r3, r3, #6
 800647c:	3301      	adds	r3, #1
 800647e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006480:	e002      	b.n	8006488 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3b01      	subs	r3, #1
 8006486:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006488:	4b0a      	ldr	r3, [pc, #40]	@ (80064b4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800648a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d102      	bne.n	800649a <HAL_PWREx_ControlVoltageScaling+0xc2>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1f3      	bne.n	8006482 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e000      	b.n	80064a6 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	46020800 	.word	0x46020800
 80064b8:	200000a0 	.word	0x200000a0
 80064bc:	10624dd3 	.word	0x10624dd3

080064c0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80064c4:	4b04      	ldr	r3, [pc, #16]	@ (80064d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80064c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	46020800 	.word	0x46020800

080064dc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80064e4:	4b22      	ldr	r3, [pc, #136]	@ (8006570 <HAL_PWREx_ConfigSupply+0x94>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a22      	ldr	r2, [pc, #136]	@ (8006574 <HAL_PWREx_ConfigSupply+0x98>)
 80064ea:	fba2 2303 	umull	r2, r3, r2, r3
 80064ee:	099b      	lsrs	r3, r3, #6
 80064f0:	2232      	movs	r2, #50	@ 0x32
 80064f2:	fb02 f303 	mul.w	r3, r2, r3
 80064f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006574 <HAL_PWREx_ConfigSupply+0x98>)
 80064f8:	fba2 2303 	umull	r2, r3, r2, r3
 80064fc:	099b      	lsrs	r3, r3, #6
 80064fe:	3301      	adds	r3, #1
 8006500:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d113      	bne.n	8006530 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006508:	4b1b      	ldr	r3, [pc, #108]	@ (8006578 <HAL_PWREx_ConfigSupply+0x9c>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	4a1a      	ldr	r2, [pc, #104]	@ (8006578 <HAL_PWREx_ConfigSupply+0x9c>)
 800650e:	f023 0302 	bic.w	r3, r3, #2
 8006512:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006514:	e002      	b.n	800651c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3b01      	subs	r3, #1
 800651a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800651c:	4b16      	ldr	r3, [pc, #88]	@ (8006578 <HAL_PWREx_ConfigSupply+0x9c>)
 800651e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b02      	cmp	r3, #2
 8006526:	d116      	bne.n	8006556 <HAL_PWREx_ConfigSupply+0x7a>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1f3      	bne.n	8006516 <HAL_PWREx_ConfigSupply+0x3a>
 800652e:	e012      	b.n	8006556 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006530:	4b11      	ldr	r3, [pc, #68]	@ (8006578 <HAL_PWREx_ConfigSupply+0x9c>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	4a10      	ldr	r2, [pc, #64]	@ (8006578 <HAL_PWREx_ConfigSupply+0x9c>)
 8006536:	f043 0302 	orr.w	r3, r3, #2
 800653a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800653c:	e002      	b.n	8006544 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3b01      	subs	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006544:	4b0c      	ldr	r3, [pc, #48]	@ (8006578 <HAL_PWREx_ConfigSupply+0x9c>)
 8006546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <HAL_PWREx_ConfigSupply+0x7a>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1f3      	bne.n	800653e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e000      	b.n	8006562 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	200000a0 	.word	0x200000a0
 8006574:	10624dd3 	.word	0x10624dd3
 8006578:	46020800 	.word	0x46020800

0800657c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08e      	sub	sp, #56	@ 0x38
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006584:	2300      	movs	r3, #0
 8006586:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d102      	bne.n	8006596 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	f000 bec3 	b.w	800731c <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006596:	4b9c      	ldr	r3, [pc, #624]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	f003 030c 	and.w	r3, r3, #12
 800659e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065a0:	4b99      	ldr	r3, [pc, #612]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80065a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a4:	f003 0303 	and.w	r3, r3, #3
 80065a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0310 	and.w	r3, r3, #16
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 8172 	beq.w	800689c <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80065b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d007      	beq.n	80065ce <HAL_RCC_OscConfig+0x52>
 80065be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c0:	2b0c      	cmp	r3, #12
 80065c2:	f040 80e4 	bne.w	800678e <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80065c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	f040 80e0 	bne.w	800678e <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065ce:	4b8e      	ldr	r3, [pc, #568]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0304 	and.w	r3, r3, #4
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d006      	beq.n	80065e8 <HAL_RCC_OscConfig+0x6c>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d102      	bne.n	80065e8 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f000 be9a 	b.w	800731c <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065ec:	4b86      	ldr	r3, [pc, #536]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d004      	beq.n	8006602 <HAL_RCC_OscConfig+0x86>
 80065f8:	4b83      	ldr	r3, [pc, #524]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006600:	e005      	b.n	800660e <HAL_RCC_OscConfig+0x92>
 8006602:	4b81      	ldr	r3, [pc, #516]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 8006604:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006608:	041b      	lsls	r3, r3, #16
 800660a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800660e:	4293      	cmp	r3, r2
 8006610:	d255      	bcs.n	80066be <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10a      	bne.n	800662e <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661c:	4618      	mov	r0, r3
 800661e:	f001 f9ab 	bl	8007978 <RCC_SetFlashLatencyFromMSIRange>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	f000 be77 	b.w	800731c <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800662e:	4b76      	ldr	r3, [pc, #472]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	4a75      	ldr	r2, [pc, #468]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 8006634:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006638:	6093      	str	r3, [r2, #8]
 800663a:	4b73      	ldr	r3, [pc, #460]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006646:	4970      	ldr	r1, [pc, #448]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 8006648:	4313      	orrs	r3, r2
 800664a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006650:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006654:	d309      	bcc.n	800666a <HAL_RCC_OscConfig+0xee>
 8006656:	4b6c      	ldr	r3, [pc, #432]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f023 021f 	bic.w	r2, r3, #31
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	4969      	ldr	r1, [pc, #420]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 8006664:	4313      	orrs	r3, r2
 8006666:	60cb      	str	r3, [r1, #12]
 8006668:	e07e      	b.n	8006768 <HAL_RCC_OscConfig+0x1ec>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666e:	2b00      	cmp	r3, #0
 8006670:	da0a      	bge.n	8006688 <HAL_RCC_OscConfig+0x10c>
 8006672:	4b65      	ldr	r3, [pc, #404]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	015b      	lsls	r3, r3, #5
 8006680:	4961      	ldr	r1, [pc, #388]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 8006682:	4313      	orrs	r3, r2
 8006684:	60cb      	str	r3, [r1, #12]
 8006686:	e06f      	b.n	8006768 <HAL_RCC_OscConfig+0x1ec>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006690:	d30a      	bcc.n	80066a8 <HAL_RCC_OscConfig+0x12c>
 8006692:	4b5d      	ldr	r3, [pc, #372]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	029b      	lsls	r3, r3, #10
 80066a0:	4959      	ldr	r1, [pc, #356]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60cb      	str	r3, [r1, #12]
 80066a6:	e05f      	b.n	8006768 <HAL_RCC_OscConfig+0x1ec>
 80066a8:	4b57      	ldr	r3, [pc, #348]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	03db      	lsls	r3, r3, #15
 80066b6:	4954      	ldr	r1, [pc, #336]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60cb      	str	r3, [r1, #12]
 80066bc:	e054      	b.n	8006768 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80066be:	4b52      	ldr	r3, [pc, #328]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	4a51      	ldr	r2, [pc, #324]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80066c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80066c8:	6093      	str	r3, [r2, #8]
 80066ca:	4b4f      	ldr	r3, [pc, #316]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d6:	494c      	ldr	r1, [pc, #304]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80066e4:	d309      	bcc.n	80066fa <HAL_RCC_OscConfig+0x17e>
 80066e6:	4b48      	ldr	r3, [pc, #288]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f023 021f 	bic.w	r2, r3, #31
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	4945      	ldr	r1, [pc, #276]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60cb      	str	r3, [r1, #12]
 80066f8:	e028      	b.n	800674c <HAL_RCC_OscConfig+0x1d0>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fe:	2b00      	cmp	r3, #0
 8006700:	da0a      	bge.n	8006718 <HAL_RCC_OscConfig+0x19c>
 8006702:	4b41      	ldr	r3, [pc, #260]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	015b      	lsls	r3, r3, #5
 8006710:	493d      	ldr	r1, [pc, #244]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 8006712:	4313      	orrs	r3, r2
 8006714:	60cb      	str	r3, [r1, #12]
 8006716:	e019      	b.n	800674c <HAL_RCC_OscConfig+0x1d0>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006720:	d30a      	bcc.n	8006738 <HAL_RCC_OscConfig+0x1bc>
 8006722:	4b39      	ldr	r3, [pc, #228]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	029b      	lsls	r3, r3, #10
 8006730:	4935      	ldr	r1, [pc, #212]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 8006732:	4313      	orrs	r3, r2
 8006734:	60cb      	str	r3, [r1, #12]
 8006736:	e009      	b.n	800674c <HAL_RCC_OscConfig+0x1d0>
 8006738:	4b33      	ldr	r3, [pc, #204]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	03db      	lsls	r3, r3, #15
 8006746:	4930      	ldr	r1, [pc, #192]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 8006748:	4313      	orrs	r3, r2
 800674a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800674c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10a      	bne.n	8006768 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006756:	4618      	mov	r0, r3
 8006758:	f001 f90e 	bl	8007978 <RCC_SetFlashLatencyFromMSIRange>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	f000 bdda 	b.w	800731c <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8006768:	f001 f8d8 	bl	800791c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800676c:	4b27      	ldr	r3, [pc, #156]	@ (800680c <HAL_RCC_OscConfig+0x290>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4618      	mov	r0, r3
 8006772:	f7fe f87d 	bl	8004870 <HAL_InitTick>
 8006776:	4603      	mov	r3, r0
 8006778:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800677c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 808a 	beq.w	800689a <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8006786:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800678a:	f000 bdc7 	b.w	800731c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d066      	beq.n	8006864 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8006796:	4b1c      	ldr	r3, [pc, #112]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a1b      	ldr	r2, [pc, #108]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 800679c:	f043 0301 	orr.w	r3, r3, #1
 80067a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80067a2:	f7fe f8af 	bl	8004904 <HAL_GetTick>
 80067a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80067a8:	e009      	b.n	80067be <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067aa:	f7fe f8ab 	bl	8004904 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d902      	bls.n	80067be <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	f000 bdaf 	b.w	800731c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80067be:	4b12      	ldr	r3, [pc, #72]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0304 	and.w	r3, r3, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0ef      	beq.n	80067aa <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80067ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	4a0e      	ldr	r2, [pc, #56]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80067d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80067d4:	6093      	str	r3, [r2, #8]
 80067d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	4909      	ldr	r1, [pc, #36]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80067f0:	d30e      	bcc.n	8006810 <HAL_RCC_OscConfig+0x294>
 80067f2:	4b05      	ldr	r3, [pc, #20]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f023 021f 	bic.w	r2, r3, #31
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	4902      	ldr	r1, [pc, #8]	@ (8006808 <HAL_RCC_OscConfig+0x28c>)
 8006800:	4313      	orrs	r3, r2
 8006802:	60cb      	str	r3, [r1, #12]
 8006804:	e04a      	b.n	800689c <HAL_RCC_OscConfig+0x320>
 8006806:	bf00      	nop
 8006808:	46020c00 	.word	0x46020c00
 800680c:	200000a4 	.word	0x200000a4
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006814:	2b00      	cmp	r3, #0
 8006816:	da0a      	bge.n	800682e <HAL_RCC_OscConfig+0x2b2>
 8006818:	4b9b      	ldr	r3, [pc, #620]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	015b      	lsls	r3, r3, #5
 8006826:	4998      	ldr	r1, [pc, #608]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006828:	4313      	orrs	r3, r2
 800682a:	60cb      	str	r3, [r1, #12]
 800682c:	e036      	b.n	800689c <HAL_RCC_OscConfig+0x320>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006836:	d30a      	bcc.n	800684e <HAL_RCC_OscConfig+0x2d2>
 8006838:	4b93      	ldr	r3, [pc, #588]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	029b      	lsls	r3, r3, #10
 8006846:	4990      	ldr	r1, [pc, #576]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006848:	4313      	orrs	r3, r2
 800684a:	60cb      	str	r3, [r1, #12]
 800684c:	e026      	b.n	800689c <HAL_RCC_OscConfig+0x320>
 800684e:	4b8e      	ldr	r3, [pc, #568]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	03db      	lsls	r3, r3, #15
 800685c:	498a      	ldr	r1, [pc, #552]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 800685e:	4313      	orrs	r3, r2
 8006860:	60cb      	str	r3, [r1, #12]
 8006862:	e01b      	b.n	800689c <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8006864:	4b88      	ldr	r3, [pc, #544]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a87      	ldr	r2, [pc, #540]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006870:	f7fe f848 	bl	8004904 <HAL_GetTick>
 8006874:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006876:	e009      	b.n	800688c <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006878:	f7fe f844 	bl	8004904 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d902      	bls.n	800688c <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	f000 bd48 	b.w	800731c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800688c:	4b7e      	ldr	r3, [pc, #504]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1ef      	bne.n	8006878 <HAL_RCC_OscConfig+0x2fc>
 8006898:	e000      	b.n	800689c <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800689a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8094 	beq.w	80069d2 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80068aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d005      	beq.n	80068bc <HAL_RCC_OscConfig+0x340>
 80068b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b2:	2b0c      	cmp	r3, #12
 80068b4:	d110      	bne.n	80068d8 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80068b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d10d      	bne.n	80068d8 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068bc:	4b72      	ldr	r3, [pc, #456]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8083 	beq.w	80069d0 <HAL_RCC_OscConfig+0x454>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d17e      	bne.n	80069d0 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	f000 bd22 	b.w	800731c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068e0:	d106      	bne.n	80068f0 <HAL_RCC_OscConfig+0x374>
 80068e2:	4b69      	ldr	r3, [pc, #420]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a68      	ldr	r2, [pc, #416]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 80068e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	e041      	b.n	8006974 <HAL_RCC_OscConfig+0x3f8>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068f8:	d112      	bne.n	8006920 <HAL_RCC_OscConfig+0x3a4>
 80068fa:	4b63      	ldr	r3, [pc, #396]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a62      	ldr	r2, [pc, #392]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	4b60      	ldr	r3, [pc, #384]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a5f      	ldr	r2, [pc, #380]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 800690c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	4b5d      	ldr	r3, [pc, #372]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a5c      	ldr	r2, [pc, #368]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	e029      	b.n	8006974 <HAL_RCC_OscConfig+0x3f8>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006928:	d112      	bne.n	8006950 <HAL_RCC_OscConfig+0x3d4>
 800692a:	4b57      	ldr	r3, [pc, #348]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a56      	ldr	r2, [pc, #344]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006930:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006934:	6013      	str	r3, [r2, #0]
 8006936:	4b54      	ldr	r3, [pc, #336]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a53      	ldr	r2, [pc, #332]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 800693c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	4b51      	ldr	r3, [pc, #324]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a50      	ldr	r2, [pc, #320]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	e011      	b.n	8006974 <HAL_RCC_OscConfig+0x3f8>
 8006950:	4b4d      	ldr	r3, [pc, #308]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a4c      	ldr	r2, [pc, #304]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800695a:	6013      	str	r3, [r2, #0]
 800695c:	4b4a      	ldr	r3, [pc, #296]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a49      	ldr	r2, [pc, #292]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	4b47      	ldr	r3, [pc, #284]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a46      	ldr	r2, [pc, #280]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 800696e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d014      	beq.n	80069a6 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800697c:	f7fd ffc2 	bl	8004904 <HAL_GetTick>
 8006980:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006982:	e009      	b.n	8006998 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006984:	f7fd ffbe 	bl	8004904 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b64      	cmp	r3, #100	@ 0x64
 8006990:	d902      	bls.n	8006998 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	f000 bcc2 	b.w	800731c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006998:	4b3b      	ldr	r3, [pc, #236]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0ef      	beq.n	8006984 <HAL_RCC_OscConfig+0x408>
 80069a4:	e015      	b.n	80069d2 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80069a6:	f7fd ffad 	bl	8004904 <HAL_GetTick>
 80069aa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069ac:	e009      	b.n	80069c2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069ae:	f7fd ffa9 	bl	8004904 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b64      	cmp	r3, #100	@ 0x64
 80069ba:	d902      	bls.n	80069c2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	f000 bcad 	b.w	800731c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069c2:	4b31      	ldr	r3, [pc, #196]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1ef      	bne.n	80069ae <HAL_RCC_OscConfig+0x432>
 80069ce:	e000      	b.n	80069d2 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d066      	beq.n	8006aac <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80069de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d005      	beq.n	80069f0 <HAL_RCC_OscConfig+0x474>
 80069e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e6:	2b0c      	cmp	r3, #12
 80069e8:	d11a      	bne.n	8006a20 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80069ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d117      	bne.n	8006a20 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069f0:	4b25      	ldr	r3, [pc, #148]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d006      	beq.n	8006a0a <HAL_RCC_OscConfig+0x48e>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d102      	bne.n	8006a0a <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	f000 bc89 	b.w	800731c <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	041b      	lsls	r3, r3, #16
 8006a18:	491b      	ldr	r1, [pc, #108]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a1e:	e045      	b.n	8006aac <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d024      	beq.n	8006a72 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8006a28:	4b17      	ldr	r3, [pc, #92]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a16      	ldr	r2, [pc, #88]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a32:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a34:	f7fd ff66 	bl	8004904 <HAL_GetTick>
 8006a38:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a3a:	e009      	b.n	8006a50 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a3c:	f7fd ff62 	bl	8004904 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d902      	bls.n	8006a50 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	f000 bc66 	b.w	800731c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a50:	4b0d      	ldr	r3, [pc, #52]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0ef      	beq.n	8006a3c <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	041b      	lsls	r3, r3, #16
 8006a6a:	4907      	ldr	r1, [pc, #28]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	610b      	str	r3, [r1, #16]
 8006a70:	e01c      	b.n	8006aac <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006a72:	4b05      	ldr	r3, [pc, #20]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a04      	ldr	r2, [pc, #16]	@ (8006a88 <HAL_RCC_OscConfig+0x50c>)
 8006a78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a7c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a7e:	f7fd ff41 	bl	8004904 <HAL_GetTick>
 8006a82:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a84:	e00c      	b.n	8006aa0 <HAL_RCC_OscConfig+0x524>
 8006a86:	bf00      	nop
 8006a88:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a8c:	f7fd ff3a 	bl	8004904 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d902      	bls.n	8006aa0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	f000 bc3e 	b.w	800731c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006aa0:	4baf      	ldr	r3, [pc, #700]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1ef      	bne.n	8006a8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0308 	and.w	r3, r3, #8
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 80c7 	beq.w	8006c48 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006aba:	2300      	movs	r3, #0
 8006abc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ac0:	4ba7      	ldr	r3, [pc, #668]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d111      	bne.n	8006af2 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ace:	4ba4      	ldr	r3, [pc, #656]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ad4:	4aa2      	ldr	r2, [pc, #648]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006ad6:	f043 0304 	orr.w	r3, r3, #4
 8006ada:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006ade:	4ba0      	ldr	r3, [pc, #640]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006af2:	4b9c      	ldr	r3, [pc, #624]	@ (8006d64 <HAL_RCC_OscConfig+0x7e8>)
 8006af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d118      	bne.n	8006b30 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006afe:	4b99      	ldr	r3, [pc, #612]	@ (8006d64 <HAL_RCC_OscConfig+0x7e8>)
 8006b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b02:	4a98      	ldr	r2, [pc, #608]	@ (8006d64 <HAL_RCC_OscConfig+0x7e8>)
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b0a:	f7fd fefb 	bl	8004904 <HAL_GetTick>
 8006b0e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b10:	e008      	b.n	8006b24 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b12:	f7fd fef7 	bl	8004904 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d901      	bls.n	8006b24 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e3fb      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b24:	4b8f      	ldr	r3, [pc, #572]	@ (8006d64 <HAL_RCC_OscConfig+0x7e8>)
 8006b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d0f0      	beq.n	8006b12 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d05f      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006b38:	4b89      	ldr	r3, [pc, #548]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006b3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b3e:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699a      	ldr	r2, [r3, #24]
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d037      	beq.n	8006bbe <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d006      	beq.n	8006b66 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e3da      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d01b      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8006b70:	4b7b      	ldr	r3, [pc, #492]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006b72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b76:	4a7a      	ldr	r2, [pc, #488]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006b78:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006b7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8006b80:	f7fd fec0 	bl	8004904 <HAL_GetTick>
 8006b84:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006b86:	e008      	b.n	8006b9a <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b88:	f7fd febc 	bl	8004904 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e3c0      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006b9a:	4b71      	ldr	r3, [pc, #452]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1ef      	bne.n	8006b88 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006ba8:	4b6d      	ldr	r3, [pc, #436]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	496a      	ldr	r1, [pc, #424]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006bbe:	4b68      	ldr	r3, [pc, #416]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bc4:	4a66      	ldr	r2, [pc, #408]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006bc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006bca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006bce:	f7fd fe99 	bl	8004904 <HAL_GetTick>
 8006bd2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006bd4:	e008      	b.n	8006be8 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bd6:	f7fd fe95 	bl	8004904 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d901      	bls.n	8006be8 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e399      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006be8:	4b5d      	ldr	r3, [pc, #372]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006bea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0ef      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x65a>
 8006bf6:	e01b      	b.n	8006c30 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006bf8:	4b59      	ldr	r3, [pc, #356]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006bfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bfe:	4a58      	ldr	r2, [pc, #352]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006c00:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006c04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006c08:	f7fd fe7c 	bl	8004904 <HAL_GetTick>
 8006c0c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c10:	f7fd fe78 	bl	8004904 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e37c      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006c22:	4b4f      	ldr	r3, [pc, #316]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006c24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1ef      	bne.n	8006c10 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c30:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d107      	bne.n	8006c48 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c38:	4b49      	ldr	r3, [pc, #292]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c3e:	4a48      	ldr	r2, [pc, #288]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006c40:	f023 0304 	bic.w	r3, r3, #4
 8006c44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 8112 	beq.w	8006e7a <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8006c56:	2300      	movs	r3, #0
 8006c58:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c5c:	4b40      	ldr	r3, [pc, #256]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c62:	f003 0304 	and.w	r3, r3, #4
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d111      	bne.n	8006c8e <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c70:	4a3b      	ldr	r2, [pc, #236]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006c72:	f043 0304 	orr.w	r3, r3, #4
 8006c76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006c7a:	4b39      	ldr	r3, [pc, #228]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c80:	f003 0304 	and.w	r3, r3, #4
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c8e:	4b35      	ldr	r3, [pc, #212]	@ (8006d64 <HAL_RCC_OscConfig+0x7e8>)
 8006c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d118      	bne.n	8006ccc <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006c9a:	4b32      	ldr	r3, [pc, #200]	@ (8006d64 <HAL_RCC_OscConfig+0x7e8>)
 8006c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9e:	4a31      	ldr	r2, [pc, #196]	@ (8006d64 <HAL_RCC_OscConfig+0x7e8>)
 8006ca0:	f043 0301 	orr.w	r3, r3, #1
 8006ca4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ca6:	f7fd fe2d 	bl	8004904 <HAL_GetTick>
 8006caa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cae:	f7fd fe29 	bl	8004904 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e32d      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006cc0:	4b28      	ldr	r3, [pc, #160]	@ (8006d64 <HAL_RCC_OscConfig+0x7e8>)
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0f0      	beq.n	8006cae <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d01f      	beq.n	8006d18 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 0304 	and.w	r3, r3, #4
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d010      	beq.n	8006d06 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006ce6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cea:	4a1d      	ldr	r2, [pc, #116]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006cec:	f043 0304 	orr.w	r3, r3, #4
 8006cf0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006cf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cfa:	4a19      	ldr	r2, [pc, #100]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006cfc:	f043 0301 	orr.w	r3, r3, #1
 8006d00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006d04:	e018      	b.n	8006d38 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006d06:	4b16      	ldr	r3, [pc, #88]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d0c:	4a14      	ldr	r2, [pc, #80]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006d0e:	f043 0301 	orr.w	r3, r3, #1
 8006d12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006d16:	e00f      	b.n	8006d38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006d18:	4b11      	ldr	r3, [pc, #68]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006d1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d1e:	4a10      	ldr	r2, [pc, #64]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006d20:	f023 0301 	bic.w	r3, r3, #1
 8006d24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006d28:	4b0d      	ldr	r3, [pc, #52]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006d2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d60 <HAL_RCC_OscConfig+0x7e4>)
 8006d30:	f023 0304 	bic.w	r3, r3, #4
 8006d34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d058      	beq.n	8006df2 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8006d40:	f7fd fde0 	bl	8004904 <HAL_GetTick>
 8006d44:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d46:	e00f      	b.n	8006d68 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d48:	f7fd fddc 	bl	8004904 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d906      	bls.n	8006d68 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e2de      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
 8006d5e:	bf00      	nop
 8006d60:	46020c00 	.word	0x46020c00
 8006d64:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d68:	4b9c      	ldr	r3, [pc, #624]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0e8      	beq.n	8006d48 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d01b      	beq.n	8006dba <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006d82:	4b96      	ldr	r3, [pc, #600]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d88:	4a94      	ldr	r2, [pc, #592]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006d92:	e00a      	b.n	8006daa <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d94:	f7fd fdb6 	bl	8004904 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e2b8      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006daa:	4b8c      	ldr	r3, [pc, #560]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006db0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d0ed      	beq.n	8006d94 <HAL_RCC_OscConfig+0x818>
 8006db8:	e053      	b.n	8006e62 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006dba:	4b88      	ldr	r3, [pc, #544]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dc0:	4a86      	ldr	r2, [pc, #536]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006dc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006dca:	e00a      	b.n	8006de2 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dcc:	f7fd fd9a 	bl	8004904 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e29c      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006de2:	4b7e      	ldr	r3, [pc, #504]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006de8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1ed      	bne.n	8006dcc <HAL_RCC_OscConfig+0x850>
 8006df0:	e037      	b.n	8006e62 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006df2:	f7fd fd87 	bl	8004904 <HAL_GetTick>
 8006df6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006df8:	e00a      	b.n	8006e10 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dfa:	f7fd fd83 	bl	8004904 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d901      	bls.n	8006e10 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e285      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e10:	4b72      	ldr	r3, [pc, #456]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1ed      	bne.n	8006dfa <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006e1e:	4b6f      	ldr	r3, [pc, #444]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d01a      	beq.n	8006e62 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006e2c:	4b6b      	ldr	r3, [pc, #428]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e32:	4a6a      	ldr	r2, [pc, #424]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006e34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e3c:	e00a      	b.n	8006e54 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e3e:	f7fd fd61 	bl	8004904 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d901      	bls.n	8006e54 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e263      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e54:	4b61      	ldr	r3, [pc, #388]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1ed      	bne.n	8006e3e <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e62:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d107      	bne.n	8006e7a <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e6a:	4b5c      	ldr	r3, [pc, #368]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e70:	4a5a      	ldr	r2, [pc, #360]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006e72:	f023 0304 	bic.w	r3, r3, #4
 8006e76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d036      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d019      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006e8e:	4b53      	ldr	r3, [pc, #332]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a52      	ldr	r2, [pc, #328]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006e94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006e98:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006e9a:	f7fd fd33 	bl	8004904 <HAL_GetTick>
 8006e9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006ea0:	e008      	b.n	8006eb4 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ea2:	f7fd fd2f 	bl	8004904 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d901      	bls.n	8006eb4 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e233      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006eb4:	4b49      	ldr	r3, [pc, #292]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0f0      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x926>
 8006ec0:	e018      	b.n	8006ef4 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006ec2:	4b46      	ldr	r3, [pc, #280]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a45      	ldr	r2, [pc, #276]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006ec8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ecc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006ece:	f7fd fd19 	bl	8004904 <HAL_GetTick>
 8006ed2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006ed4:	e008      	b.n	8006ee8 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ed6:	f7fd fd15 	bl	8004904 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d901      	bls.n	8006ee8 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e219      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006ee8:	4b3c      	ldr	r3, [pc, #240]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1f0      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d036      	beq.n	8006f6e <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d019      	beq.n	8006f3c <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006f08:	4b34      	ldr	r3, [pc, #208]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a33      	ldr	r2, [pc, #204]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006f0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f12:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006f14:	f7fd fcf6 	bl	8004904 <HAL_GetTick>
 8006f18:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006f1c:	f7fd fcf2 	bl	8004904 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e1f6      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0f0      	beq.n	8006f1c <HAL_RCC_OscConfig+0x9a0>
 8006f3a:	e018      	b.n	8006f6e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006f3c:	4b27      	ldr	r3, [pc, #156]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a26      	ldr	r2, [pc, #152]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006f42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f46:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006f48:	f7fd fcdc 	bl	8004904 <HAL_GetTick>
 8006f4c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006f4e:	e008      	b.n	8006f62 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006f50:	f7fd fcd8 	bl	8004904 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e1dc      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006f62:	4b1e      	ldr	r3, [pc, #120]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1f0      	bne.n	8006f50 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d07f      	beq.n	800707a <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d062      	beq.n	8007048 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006f82:	4b16      	ldr	r3, [pc, #88]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	4a15      	ldr	r2, [pc, #84]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006f88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f8c:	6093      	str	r3, [r2, #8]
 8006f8e:	4b13      	ldr	r3, [pc, #76]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9a:	4910      	ldr	r1, [pc, #64]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006fa8:	d309      	bcc.n	8006fbe <HAL_RCC_OscConfig+0xa42>
 8006faa:	4b0c      	ldr	r3, [pc, #48]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	f023 021f 	bic.w	r2, r3, #31
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	4909      	ldr	r1, [pc, #36]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	60cb      	str	r3, [r1, #12]
 8006fbc:	e02a      	b.n	8007014 <HAL_RCC_OscConfig+0xa98>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	da0c      	bge.n	8006fe0 <HAL_RCC_OscConfig+0xa64>
 8006fc6:	4b05      	ldr	r3, [pc, #20]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	015b      	lsls	r3, r3, #5
 8006fd4:	4901      	ldr	r1, [pc, #4]	@ (8006fdc <HAL_RCC_OscConfig+0xa60>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60cb      	str	r3, [r1, #12]
 8006fda:	e01b      	b.n	8007014 <HAL_RCC_OscConfig+0xa98>
 8006fdc:	46020c00 	.word	0x46020c00
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fe8:	d30a      	bcc.n	8007000 <HAL_RCC_OscConfig+0xa84>
 8006fea:	4ba5      	ldr	r3, [pc, #660]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	029b      	lsls	r3, r3, #10
 8006ff8:	49a1      	ldr	r1, [pc, #644]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60cb      	str	r3, [r1, #12]
 8006ffe:	e009      	b.n	8007014 <HAL_RCC_OscConfig+0xa98>
 8007000:	4b9f      	ldr	r3, [pc, #636]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	03db      	lsls	r3, r3, #15
 800700e:	499c      	ldr	r1, [pc, #624]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 8007010:	4313      	orrs	r3, r2
 8007012:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8007014:	4b9a      	ldr	r3, [pc, #616]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a99      	ldr	r2, [pc, #612]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 800701a:	f043 0310 	orr.w	r3, r3, #16
 800701e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007020:	f7fd fc70 	bl	8004904 <HAL_GetTick>
 8007024:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007026:	e008      	b.n	800703a <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007028:	f7fd fc6c 	bl	8004904 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b02      	cmp	r3, #2
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e170      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800703a:	4b91      	ldr	r3, [pc, #580]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0320 	and.w	r3, r3, #32
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0f0      	beq.n	8007028 <HAL_RCC_OscConfig+0xaac>
 8007046:	e018      	b.n	800707a <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8007048:	4b8d      	ldr	r3, [pc, #564]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a8c      	ldr	r2, [pc, #560]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 800704e:	f023 0310 	bic.w	r3, r3, #16
 8007052:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007054:	f7fd fc56 	bl	8004904 <HAL_GetTick>
 8007058:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800705c:	f7fd fc52 	bl	8004904 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b02      	cmp	r3, #2
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e156      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800706e:	4b84      	ldr	r3, [pc, #528]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0320 	and.w	r3, r3, #32
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1f0      	bne.n	800705c <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 814b 	beq.w	800731a <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8007084:	2300      	movs	r3, #0
 8007086:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800708a:	4b7d      	ldr	r3, [pc, #500]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	f003 030c 	and.w	r3, r3, #12
 8007092:	2b0c      	cmp	r3, #12
 8007094:	f000 80fa 	beq.w	800728c <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709c:	2b02      	cmp	r3, #2
 800709e:	f040 80cc 	bne.w	800723a <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80070a2:	4b77      	ldr	r3, [pc, #476]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a76      	ldr	r2, [pc, #472]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 80070a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070ac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80070ae:	f7fd fc29 	bl	8004904 <HAL_GetTick>
 80070b2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80070b4:	e008      	b.n	80070c8 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070b6:	f7fd fc25 	bl	8004904 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d901      	bls.n	80070c8 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e129      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80070c8:	4b6d      	ldr	r3, [pc, #436]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1f0      	bne.n	80070b6 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070d4:	4b6a      	ldr	r3, [pc, #424]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 80070d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070da:	f003 0304 	and.w	r3, r3, #4
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d111      	bne.n	8007106 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80070e2:	4b67      	ldr	r3, [pc, #412]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 80070e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070e8:	4a65      	ldr	r2, [pc, #404]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 80070ea:	f043 0304 	orr.w	r3, r3, #4
 80070ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80070f2:	4b63      	ldr	r3, [pc, #396]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 80070f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8007100:	2301      	movs	r3, #1
 8007102:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8007106:	4b5f      	ldr	r3, [pc, #380]	@ (8007284 <HAL_RCC_OscConfig+0xd08>)
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800710e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007112:	d102      	bne.n	800711a <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8007114:	2301      	movs	r3, #1
 8007116:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800711a:	4b5a      	ldr	r3, [pc, #360]	@ (8007284 <HAL_RCC_OscConfig+0xd08>)
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	4a59      	ldr	r2, [pc, #356]	@ (8007284 <HAL_RCC_OscConfig+0xd08>)
 8007120:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007124:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8007126:	4b56      	ldr	r3, [pc, #344]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 8007128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800712e:	f023 0303 	bic.w	r3, r3, #3
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800713a:	3a01      	subs	r2, #1
 800713c:	0212      	lsls	r2, r2, #8
 800713e:	4311      	orrs	r1, r2
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007144:	430a      	orrs	r2, r1
 8007146:	494e      	ldr	r1, [pc, #312]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 8007148:	4313      	orrs	r3, r2
 800714a:	628b      	str	r3, [r1, #40]	@ 0x28
 800714c:	4b4c      	ldr	r3, [pc, #304]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 800714e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007150:	4b4d      	ldr	r3, [pc, #308]	@ (8007288 <HAL_RCC_OscConfig+0xd0c>)
 8007152:	4013      	ands	r3, r2
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007158:	3a01      	subs	r2, #1
 800715a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007162:	3a01      	subs	r2, #1
 8007164:	0252      	lsls	r2, r2, #9
 8007166:	b292      	uxth	r2, r2
 8007168:	4311      	orrs	r1, r2
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800716e:	3a01      	subs	r2, #1
 8007170:	0412      	lsls	r2, r2, #16
 8007172:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007176:	4311      	orrs	r1, r2
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800717c:	3a01      	subs	r2, #1
 800717e:	0612      	lsls	r2, r2, #24
 8007180:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007184:	430a      	orrs	r2, r1
 8007186:	493e      	ldr	r1, [pc, #248]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 8007188:	4313      	orrs	r3, r2
 800718a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800718c:	4b3c      	ldr	r3, [pc, #240]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 800718e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007190:	4a3b      	ldr	r2, [pc, #236]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 8007192:	f023 0310 	bic.w	r3, r3, #16
 8007196:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007198:	4b39      	ldr	r3, [pc, #228]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 800719a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071a0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80071a8:	00d2      	lsls	r2, r2, #3
 80071aa:	4935      	ldr	r1, [pc, #212]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	638b      	str	r3, [r1, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80071b0:	4b33      	ldr	r3, [pc, #204]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 80071b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b4:	4a32      	ldr	r2, [pc, #200]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 80071b6:	f043 0310 	orr.w	r3, r3, #16
 80071ba:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80071bc:	4b30      	ldr	r3, [pc, #192]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 80071be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c0:	f023 020c 	bic.w	r2, r3, #12
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c8:	492d      	ldr	r1, [pc, #180]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80071ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d105      	bne.n	80071e2 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80071d6:	4b2b      	ldr	r3, [pc, #172]	@ (8007284 <HAL_RCC_OscConfig+0xd08>)
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	4a2a      	ldr	r2, [pc, #168]	@ (8007284 <HAL_RCC_OscConfig+0xd08>)
 80071dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071e0:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80071e2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d107      	bne.n	80071fa <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80071ea:	4b25      	ldr	r3, [pc, #148]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 80071ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071f0:	4a23      	ldr	r2, [pc, #140]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 80071f2:	f023 0304 	bic.w	r3, r3, #4
 80071f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80071fa:	4b21      	ldr	r3, [pc, #132]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 80071fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fe:	4a20      	ldr	r2, [pc, #128]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 8007200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007204:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8007206:	4b1e      	ldr	r3, [pc, #120]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a1d      	ldr	r2, [pc, #116]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 800720c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007210:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007212:	f7fd fb77 	bl	8004904 <HAL_GetTick>
 8007216:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007218:	e008      	b.n	800722c <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800721a:	f7fd fb73 	bl	8004904 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e077      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800722c:	4b14      	ldr	r3, [pc, #80]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0f0      	beq.n	800721a <HAL_RCC_OscConfig+0xc9e>
 8007238:	e06f      	b.n	800731a <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800723a:	4b11      	ldr	r3, [pc, #68]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a10      	ldr	r2, [pc, #64]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 8007240:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007244:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007246:	f7fd fb5d 	bl	8004904 <HAL_GetTick>
 800724a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800724c:	e008      	b.n	8007260 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800724e:	f7fd fb59 	bl	8004904 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d901      	bls.n	8007260 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e05d      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007260:	4b07      	ldr	r3, [pc, #28]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1f0      	bne.n	800724e <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800726c:	4b04      	ldr	r3, [pc, #16]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 800726e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007270:	4a03      	ldr	r2, [pc, #12]	@ (8007280 <HAL_RCC_OscConfig+0xd04>)
 8007272:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8007276:	f023 0303 	bic.w	r3, r3, #3
 800727a:	6293      	str	r3, [r2, #40]	@ 0x28
 800727c:	e04d      	b.n	800731a <HAL_RCC_OscConfig+0xd9e>
 800727e:	bf00      	nop
 8007280:	46020c00 	.word	0x46020c00
 8007284:	46020800 	.word	0x46020800
 8007288:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800728c:	4b25      	ldr	r3, [pc, #148]	@ (8007324 <HAL_RCC_OscConfig+0xda8>)
 800728e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007290:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007292:	4b24      	ldr	r3, [pc, #144]	@ (8007324 <HAL_RCC_OscConfig+0xda8>)
 8007294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007296:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729c:	2b01      	cmp	r3, #1
 800729e:	d03a      	beq.n	8007316 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	f003 0203 	and.w	r2, r3, #3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d133      	bne.n	8007316 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	0a1b      	lsrs	r3, r3, #8
 80072b2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ba:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80072bc:	429a      	cmp	r2, r3
 80072be:	d12a      	bne.n	8007316 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	0b1b      	lsrs	r3, r3, #12
 80072c4:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d122      	bne.n	8007316 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072da:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80072dc:	429a      	cmp	r2, r3
 80072de:	d11a      	bne.n	8007316 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	0a5b      	lsrs	r3, r3, #9
 80072e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072ec:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d111      	bne.n	8007316 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	0c1b      	lsrs	r3, r3, #16
 80072f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072fe:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007300:	429a      	cmp	r2, r3
 8007302:	d108      	bne.n	8007316 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	0e1b      	lsrs	r3, r3, #24
 8007308:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007310:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007312:	429a      	cmp	r2, r3
 8007314:	d001      	beq.n	800731a <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e000      	b.n	800731c <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3738      	adds	r7, #56	@ 0x38
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	46020c00 	.word	0x46020c00

08007328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e1d9      	b.n	80076f0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800733c:	4b9b      	ldr	r3, [pc, #620]	@ (80075ac <HAL_RCC_ClockConfig+0x284>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 030f 	and.w	r3, r3, #15
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	429a      	cmp	r2, r3
 8007348:	d910      	bls.n	800736c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800734a:	4b98      	ldr	r3, [pc, #608]	@ (80075ac <HAL_RCC_ClockConfig+0x284>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f023 020f 	bic.w	r2, r3, #15
 8007352:	4996      	ldr	r1, [pc, #600]	@ (80075ac <HAL_RCC_ClockConfig+0x284>)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	4313      	orrs	r3, r2
 8007358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800735a:	4b94      	ldr	r3, [pc, #592]	@ (80075ac <HAL_RCC_ClockConfig+0x284>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 030f 	and.w	r3, r3, #15
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	429a      	cmp	r2, r3
 8007366:	d001      	beq.n	800736c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e1c1      	b.n	80076f0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0310 	and.w	r3, r3, #16
 8007374:	2b00      	cmp	r3, #0
 8007376:	d010      	beq.n	800739a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	695a      	ldr	r2, [r3, #20]
 800737c:	4b8c      	ldr	r3, [pc, #560]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 800737e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007380:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007384:	429a      	cmp	r2, r3
 8007386:	d908      	bls.n	800739a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007388:	4b89      	ldr	r3, [pc, #548]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 800738a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800738c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	4986      	ldr	r1, [pc, #536]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 8007396:	4313      	orrs	r3, r2
 8007398:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0308 	and.w	r3, r3, #8
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d012      	beq.n	80073cc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691a      	ldr	r2, [r3, #16]
 80073aa:	4b81      	ldr	r3, [pc, #516]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	091b      	lsrs	r3, r3, #4
 80073b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d909      	bls.n	80073cc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80073b8:	4b7d      	ldr	r3, [pc, #500]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 80073ba:	6a1b      	ldr	r3, [r3, #32]
 80073bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	011b      	lsls	r3, r3, #4
 80073c6:	497a      	ldr	r1, [pc, #488]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0304 	and.w	r3, r3, #4
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d010      	beq.n	80073fa <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	4b74      	ldr	r3, [pc, #464]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d908      	bls.n	80073fa <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80073e8:	4b71      	ldr	r3, [pc, #452]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	496e      	ldr	r1, [pc, #440]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d010      	beq.n	8007428 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	4b69      	ldr	r3, [pc, #420]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	f003 030f 	and.w	r3, r3, #15
 8007412:	429a      	cmp	r2, r3
 8007414:	d908      	bls.n	8007428 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007416:	4b66      	ldr	r3, [pc, #408]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	f023 020f 	bic.w	r2, r3, #15
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	4963      	ldr	r1, [pc, #396]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 8007424:	4313      	orrs	r3, r2
 8007426:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 80d2 	beq.w	80075da <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8007436:	2300      	movs	r3, #0
 8007438:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	2b03      	cmp	r3, #3
 8007440:	d143      	bne.n	80074ca <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007442:	4b5b      	ldr	r3, [pc, #364]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 8007444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b00      	cmp	r3, #0
 800744e:	d110      	bne.n	8007472 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007450:	4b57      	ldr	r3, [pc, #348]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 8007452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007456:	4a56      	ldr	r2, [pc, #344]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 8007458:	f043 0304 	orr.w	r3, r3, #4
 800745c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007460:	4b53      	ldr	r3, [pc, #332]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 8007462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007466:	f003 0304 	and.w	r3, r3, #4
 800746a:	60bb      	str	r3, [r7, #8]
 800746c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800746e:	2301      	movs	r3, #1
 8007470:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007472:	f7fd fa47 	bl	8004904 <HAL_GetTick>
 8007476:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007478:	4b4e      	ldr	r3, [pc, #312]	@ (80075b4 <HAL_RCC_ClockConfig+0x28c>)
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00f      	beq.n	80074a4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007484:	e008      	b.n	8007498 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007486:	f7fd fa3d 	bl	8004904 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	2b02      	cmp	r3, #2
 8007492:	d901      	bls.n	8007498 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e12b      	b.n	80076f0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007498:	4b46      	ldr	r3, [pc, #280]	@ (80075b4 <HAL_RCC_ClockConfig+0x28c>)
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d0f0      	beq.n	8007486 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d107      	bne.n	80074ba <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80074aa:	4b41      	ldr	r3, [pc, #260]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 80074ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074b0:	4a3f      	ldr	r2, [pc, #252]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 80074b2:	f023 0304 	bic.w	r3, r3, #4
 80074b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80074ba:	4b3d      	ldr	r3, [pc, #244]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d121      	bne.n	800750a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e112      	b.n	80076f0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d107      	bne.n	80074e2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074d2:	4b37      	ldr	r3, [pc, #220]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d115      	bne.n	800750a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e106      	b.n	80076f0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d107      	bne.n	80074fa <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80074ea:	4b31      	ldr	r3, [pc, #196]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0304 	and.w	r3, r3, #4
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d109      	bne.n	800750a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e0fa      	b.n	80076f0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074fa:	4b2d      	ldr	r3, [pc, #180]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e0f2      	b.n	80076f0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800750a:	4b29      	ldr	r3, [pc, #164]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	f023 0203 	bic.w	r2, r3, #3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	4926      	ldr	r1, [pc, #152]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 8007518:	4313      	orrs	r3, r2
 800751a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800751c:	f7fd f9f2 	bl	8004904 <HAL_GetTick>
 8007520:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	2b03      	cmp	r3, #3
 8007528:	d112      	bne.n	8007550 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800752a:	e00a      	b.n	8007542 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800752c:	f7fd f9ea 	bl	8004904 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800753a:	4293      	cmp	r3, r2
 800753c:	d901      	bls.n	8007542 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e0d6      	b.n	80076f0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007542:	4b1b      	ldr	r3, [pc, #108]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f003 030c 	and.w	r3, r3, #12
 800754a:	2b0c      	cmp	r3, #12
 800754c:	d1ee      	bne.n	800752c <HAL_RCC_ClockConfig+0x204>
 800754e:	e044      	b.n	80075da <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	2b02      	cmp	r3, #2
 8007556:	d112      	bne.n	800757e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007558:	e00a      	b.n	8007570 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800755a:	f7fd f9d3 	bl	8004904 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007568:	4293      	cmp	r3, r2
 800756a:	d901      	bls.n	8007570 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e0bf      	b.n	80076f0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007570:	4b0f      	ldr	r3, [pc, #60]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	f003 030c 	and.w	r3, r3, #12
 8007578:	2b08      	cmp	r3, #8
 800757a:	d1ee      	bne.n	800755a <HAL_RCC_ClockConfig+0x232>
 800757c:	e02d      	b.n	80075da <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d123      	bne.n	80075ce <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007586:	e00a      	b.n	800759e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007588:	f7fd f9bc 	bl	8004904 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007596:	4293      	cmp	r3, r2
 8007598:	d901      	bls.n	800759e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e0a8      	b.n	80076f0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800759e:	4b04      	ldr	r3, [pc, #16]	@ (80075b0 <HAL_RCC_ClockConfig+0x288>)
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	f003 030c 	and.w	r3, r3, #12
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1ee      	bne.n	8007588 <HAL_RCC_ClockConfig+0x260>
 80075aa:	e016      	b.n	80075da <HAL_RCC_ClockConfig+0x2b2>
 80075ac:	40022000 	.word	0x40022000
 80075b0:	46020c00 	.word	0x46020c00
 80075b4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075b8:	f7fd f9a4 	bl	8004904 <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d901      	bls.n	80075ce <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e090      	b.n	80076f0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80075ce:	4b4a      	ldr	r3, [pc, #296]	@ (80076f8 <HAL_RCC_ClockConfig+0x3d0>)
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	f003 030c 	and.w	r3, r3, #12
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d1ee      	bne.n	80075b8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d010      	beq.n	8007608 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	4b43      	ldr	r3, [pc, #268]	@ (80076f8 <HAL_RCC_ClockConfig+0x3d0>)
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	f003 030f 	and.w	r3, r3, #15
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d208      	bcs.n	8007608 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80075f6:	4b40      	ldr	r3, [pc, #256]	@ (80076f8 <HAL_RCC_ClockConfig+0x3d0>)
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	f023 020f 	bic.w	r2, r3, #15
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	493d      	ldr	r1, [pc, #244]	@ (80076f8 <HAL_RCC_ClockConfig+0x3d0>)
 8007604:	4313      	orrs	r3, r2
 8007606:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007608:	4b3c      	ldr	r3, [pc, #240]	@ (80076fc <HAL_RCC_ClockConfig+0x3d4>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 030f 	and.w	r3, r3, #15
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	429a      	cmp	r2, r3
 8007614:	d210      	bcs.n	8007638 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007616:	4b39      	ldr	r3, [pc, #228]	@ (80076fc <HAL_RCC_ClockConfig+0x3d4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f023 020f 	bic.w	r2, r3, #15
 800761e:	4937      	ldr	r1, [pc, #220]	@ (80076fc <HAL_RCC_ClockConfig+0x3d4>)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	4313      	orrs	r3, r2
 8007624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007626:	4b35      	ldr	r3, [pc, #212]	@ (80076fc <HAL_RCC_ClockConfig+0x3d4>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 030f 	and.w	r3, r3, #15
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	429a      	cmp	r2, r3
 8007632:	d001      	beq.n	8007638 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e05b      	b.n	80076f0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	2b00      	cmp	r3, #0
 8007642:	d010      	beq.n	8007666 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	4b2b      	ldr	r3, [pc, #172]	@ (80076f8 <HAL_RCC_ClockConfig+0x3d0>)
 800764a:	6a1b      	ldr	r3, [r3, #32]
 800764c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007650:	429a      	cmp	r2, r3
 8007652:	d208      	bcs.n	8007666 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007654:	4b28      	ldr	r3, [pc, #160]	@ (80076f8 <HAL_RCC_ClockConfig+0x3d0>)
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	4925      	ldr	r1, [pc, #148]	@ (80076f8 <HAL_RCC_ClockConfig+0x3d0>)
 8007662:	4313      	orrs	r3, r2
 8007664:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0308 	and.w	r3, r3, #8
 800766e:	2b00      	cmp	r3, #0
 8007670:	d012      	beq.n	8007698 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	4b20      	ldr	r3, [pc, #128]	@ (80076f8 <HAL_RCC_ClockConfig+0x3d0>)
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	091b      	lsrs	r3, r3, #4
 800767c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007680:	429a      	cmp	r2, r3
 8007682:	d209      	bcs.n	8007698 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007684:	4b1c      	ldr	r3, [pc, #112]	@ (80076f8 <HAL_RCC_ClockConfig+0x3d0>)
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	011b      	lsls	r3, r3, #4
 8007692:	4919      	ldr	r1, [pc, #100]	@ (80076f8 <HAL_RCC_ClockConfig+0x3d0>)
 8007694:	4313      	orrs	r3, r2
 8007696:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0310 	and.w	r3, r3, #16
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d010      	beq.n	80076c6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	695a      	ldr	r2, [r3, #20]
 80076a8:	4b13      	ldr	r3, [pc, #76]	@ (80076f8 <HAL_RCC_ClockConfig+0x3d0>)
 80076aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d208      	bcs.n	80076c6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80076b4:	4b10      	ldr	r3, [pc, #64]	@ (80076f8 <HAL_RCC_ClockConfig+0x3d0>)
 80076b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	490d      	ldr	r1, [pc, #52]	@ (80076f8 <HAL_RCC_ClockConfig+0x3d0>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80076c6:	f000 f821 	bl	800770c <HAL_RCC_GetSysClockFreq>
 80076ca:	4602      	mov	r2, r0
 80076cc:	4b0a      	ldr	r3, [pc, #40]	@ (80076f8 <HAL_RCC_ClockConfig+0x3d0>)
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	f003 030f 	and.w	r3, r3, #15
 80076d4:	490a      	ldr	r1, [pc, #40]	@ (8007700 <HAL_RCC_ClockConfig+0x3d8>)
 80076d6:	5ccb      	ldrb	r3, [r1, r3]
 80076d8:	fa22 f303 	lsr.w	r3, r2, r3
 80076dc:	4a09      	ldr	r2, [pc, #36]	@ (8007704 <HAL_RCC_ClockConfig+0x3dc>)
 80076de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80076e0:	4b09      	ldr	r3, [pc, #36]	@ (8007708 <HAL_RCC_ClockConfig+0x3e0>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fd f8c3 	bl	8004870 <HAL_InitTick>
 80076ea:	4603      	mov	r3, r0
 80076ec:	73fb      	strb	r3, [r7, #15]

  return status;
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	46020c00 	.word	0x46020c00
 80076fc:	40022000 	.word	0x40022000
 8007700:	0800f464 	.word	0x0800f464
 8007704:	200000a0 	.word	0x200000a0
 8007708:	200000a4 	.word	0x200000a4

0800770c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800770c:	b480      	push	{r7}
 800770e:	b08b      	sub	sp, #44	@ 0x2c
 8007710:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007712:	2300      	movs	r3, #0
 8007714:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800771a:	4b7b      	ldr	r3, [pc, #492]	@ (8007908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	f003 030c 	and.w	r3, r3, #12
 8007722:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007724:	4b78      	ldr	r3, [pc, #480]	@ (8007908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007728:	f003 0303 	and.w	r3, r3, #3
 800772c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d005      	beq.n	8007740 <HAL_RCC_GetSysClockFreq+0x34>
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	2b0c      	cmp	r3, #12
 8007738:	d121      	bne.n	800777e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d11e      	bne.n	800777e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007740:	4b71      	ldr	r3, [pc, #452]	@ (8007908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d107      	bne.n	800775c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800774c:	4b6e      	ldr	r3, [pc, #440]	@ (8007908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800774e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007752:	0b1b      	lsrs	r3, r3, #12
 8007754:	f003 030f 	and.w	r3, r3, #15
 8007758:	627b      	str	r3, [r7, #36]	@ 0x24
 800775a:	e005      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800775c:	4b6a      	ldr	r3, [pc, #424]	@ (8007908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	0f1b      	lsrs	r3, r3, #28
 8007762:	f003 030f 	and.w	r3, r3, #15
 8007766:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007768:	4a68      	ldr	r2, [pc, #416]	@ (800790c <HAL_RCC_GetSysClockFreq+0x200>)
 800776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007770:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d110      	bne.n	800779a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800777c:	e00d      	b.n	800779a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800777e:	4b62      	ldr	r3, [pc, #392]	@ (8007908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	f003 030c 	and.w	r3, r3, #12
 8007786:	2b04      	cmp	r3, #4
 8007788:	d102      	bne.n	8007790 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800778a:	4b61      	ldr	r3, [pc, #388]	@ (8007910 <HAL_RCC_GetSysClockFreq+0x204>)
 800778c:	623b      	str	r3, [r7, #32]
 800778e:	e004      	b.n	800779a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	2b08      	cmp	r3, #8
 8007794:	d101      	bne.n	800779a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007796:	4b5e      	ldr	r3, [pc, #376]	@ (8007910 <HAL_RCC_GetSysClockFreq+0x204>)
 8007798:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	2b0c      	cmp	r3, #12
 800779e:	f040 80ac 	bne.w	80078fa <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80077a2:	4b59      	ldr	r3, [pc, #356]	@ (8007908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80077a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a6:	f003 0303 	and.w	r3, r3, #3
 80077aa:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80077ac:	4b56      	ldr	r3, [pc, #344]	@ (8007908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80077ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b0:	0a1b      	lsrs	r3, r3, #8
 80077b2:	f003 030f 	and.w	r3, r3, #15
 80077b6:	3301      	adds	r3, #1
 80077b8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80077ba:	4b53      	ldr	r3, [pc, #332]	@ (8007908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80077bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077be:	091b      	lsrs	r3, r3, #4
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80077c6:	4b50      	ldr	r3, [pc, #320]	@ (8007908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80077c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ca:	08db      	lsrs	r3, r3, #3
 80077cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	fb02 f303 	mul.w	r3, r2, r3
 80077d6:	ee07 3a90 	vmov	s15, r3
 80077da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077de:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 8086 	beq.w	80078f6 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d003      	beq.n	80077f8 <HAL_RCC_GetSysClockFreq+0xec>
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	d022      	beq.n	800783c <HAL_RCC_GetSysClockFreq+0x130>
 80077f6:	e043      	b.n	8007880 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	ee07 3a90 	vmov	s15, r3
 80077fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007802:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8007914 <HAL_RCC_GetSysClockFreq+0x208>
 8007806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800780a:	4b3f      	ldr	r3, [pc, #252]	@ (8007908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800780c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800780e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800781a:	ed97 6a01 	vldr	s12, [r7, #4]
 800781e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007918 <HAL_RCC_GetSysClockFreq+0x20c>
 8007822:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007826:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800782a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800782e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007836:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800783a:	e046      	b.n	80078ca <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007846:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8007914 <HAL_RCC_GetSysClockFreq+0x208>
 800784a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784e:	4b2e      	ldr	r3, [pc, #184]	@ (8007908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800785e:	ed97 6a01 	vldr	s12, [r7, #4]
 8007862:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8007918 <HAL_RCC_GetSysClockFreq+0x20c>
 8007866:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800786a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800786e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007872:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800787e:	e024      	b.n	80078ca <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	ee07 3a90 	vmov	s15, r3
 8007890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007898:	4b1b      	ldr	r3, [pc, #108]	@ (8007908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800789a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800789c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a0:	ee07 3a90 	vmov	s15, r3
 80078a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80078a8:	ed97 6a01 	vldr	s12, [r7, #4]
 80078ac:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8007918 <HAL_RCC_GetSysClockFreq+0x20c>
 80078b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80078b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078c4:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80078c8:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80078ca:	4b0f      	ldr	r3, [pc, #60]	@ (8007908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80078cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ce:	0e1b      	lsrs	r3, r3, #24
 80078d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078d4:	3301      	adds	r3, #1
 80078d6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	ee07 3a90 	vmov	s15, r3
 80078de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80078e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ee:	ee17 3a90 	vmov	r3, s15
 80078f2:	623b      	str	r3, [r7, #32]
 80078f4:	e001      	b.n	80078fa <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80078f6:	2300      	movs	r3, #0
 80078f8:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80078fa:	6a3b      	ldr	r3, [r7, #32]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	372c      	adds	r7, #44	@ 0x2c
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	46020c00 	.word	0x46020c00
 800790c:	0800f47c 	.word	0x0800f47c
 8007910:	00f42400 	.word	0x00f42400
 8007914:	4b742400 	.word	0x4b742400
 8007918:	46000000 	.word	0x46000000

0800791c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007920:	f7ff fef4 	bl	800770c <HAL_RCC_GetSysClockFreq>
 8007924:	4602      	mov	r2, r0
 8007926:	4b07      	ldr	r3, [pc, #28]	@ (8007944 <HAL_RCC_GetHCLKFreq+0x28>)
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	f003 030f 	and.w	r3, r3, #15
 800792e:	4906      	ldr	r1, [pc, #24]	@ (8007948 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007930:	5ccb      	ldrb	r3, [r1, r3]
 8007932:	fa22 f303 	lsr.w	r3, r2, r3
 8007936:	4a05      	ldr	r2, [pc, #20]	@ (800794c <HAL_RCC_GetHCLKFreq+0x30>)
 8007938:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800793a:	4b04      	ldr	r3, [pc, #16]	@ (800794c <HAL_RCC_GetHCLKFreq+0x30>)
 800793c:	681b      	ldr	r3, [r3, #0]
}
 800793e:	4618      	mov	r0, r3
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	46020c00 	.word	0x46020c00
 8007948:	0800f464 	.word	0x0800f464
 800794c:	200000a0 	.word	0x200000a0

08007950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007954:	f7ff ffe2 	bl	800791c <HAL_RCC_GetHCLKFreq>
 8007958:	4602      	mov	r2, r0
 800795a:	4b05      	ldr	r3, [pc, #20]	@ (8007970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	091b      	lsrs	r3, r3, #4
 8007960:	f003 0307 	and.w	r3, r3, #7
 8007964:	4903      	ldr	r1, [pc, #12]	@ (8007974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007966:	5ccb      	ldrb	r3, [r1, r3]
 8007968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800796c:	4618      	mov	r0, r3
 800796e:	bd80      	pop	{r7, pc}
 8007970:	46020c00 	.word	0x46020c00
 8007974:	0800f474 	.word	0x0800f474

08007978 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007980:	4b3e      	ldr	r3, [pc, #248]	@ (8007a7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007986:	f003 0304 	and.w	r3, r3, #4
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800798e:	f7fe fd97 	bl	80064c0 <HAL_PWREx_GetVoltageRange>
 8007992:	6178      	str	r0, [r7, #20]
 8007994:	e019      	b.n	80079ca <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007996:	4b39      	ldr	r3, [pc, #228]	@ (8007a7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800799c:	4a37      	ldr	r2, [pc, #220]	@ (8007a7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800799e:	f043 0304 	orr.w	r3, r3, #4
 80079a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80079a6:	4b35      	ldr	r3, [pc, #212]	@ (8007a7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80079a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80079b4:	f7fe fd84 	bl	80064c0 <HAL_PWREx_GetVoltageRange>
 80079b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80079ba:	4b30      	ldr	r3, [pc, #192]	@ (8007a7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80079bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079c0:	4a2e      	ldr	r2, [pc, #184]	@ (8007a7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80079c2:	f023 0304 	bic.w	r3, r3, #4
 80079c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80079d0:	d003      	beq.n	80079da <RCC_SetFlashLatencyFromMSIRange+0x62>
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079d8:	d109      	bne.n	80079ee <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079e0:	d202      	bcs.n	80079e8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80079e2:	2301      	movs	r3, #1
 80079e4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80079e6:	e033      	b.n	8007a50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80079e8:	2300      	movs	r3, #0
 80079ea:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80079ec:	e030      	b.n	8007a50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079f4:	d208      	bcs.n	8007a08 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079fc:	d102      	bne.n	8007a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80079fe:	2303      	movs	r3, #3
 8007a00:	613b      	str	r3, [r7, #16]
 8007a02:	e025      	b.n	8007a50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e035      	b.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a0e:	d90f      	bls.n	8007a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d109      	bne.n	8007a2a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a1c:	d902      	bls.n	8007a24 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007a1e:	2300      	movs	r3, #0
 8007a20:	613b      	str	r3, [r7, #16]
 8007a22:	e015      	b.n	8007a50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007a24:	2301      	movs	r3, #1
 8007a26:	613b      	str	r3, [r7, #16]
 8007a28:	e012      	b.n	8007a50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	613b      	str	r3, [r7, #16]
 8007a2e:	e00f      	b.n	8007a50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a36:	d109      	bne.n	8007a4c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a3e:	d102      	bne.n	8007a46 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007a40:	2301      	movs	r3, #1
 8007a42:	613b      	str	r3, [r7, #16]
 8007a44:	e004      	b.n	8007a50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007a46:	2302      	movs	r3, #2
 8007a48:	613b      	str	r3, [r7, #16]
 8007a4a:	e001      	b.n	8007a50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a50:	4b0b      	ldr	r3, [pc, #44]	@ (8007a80 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f023 020f 	bic.w	r2, r3, #15
 8007a58:	4909      	ldr	r1, [pc, #36]	@ (8007a80 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007a60:	4b07      	ldr	r3, [pc, #28]	@ (8007a80 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 030f 	and.w	r3, r3, #15
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d001      	beq.n	8007a72 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e000      	b.n	8007a74 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	46020c00 	.word	0x46020c00
 8007a80:	40022000 	.word	0x40022000

08007a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8007a84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007abc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007a88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007a8a:	e003      	b.n	8007a94 <LoopCopyDataInit>

08007a8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007a8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007a90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007a92:	3104      	adds	r1, #4

08007a94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007a94:	480b      	ldr	r0, [pc, #44]	@ (8007ac4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007a96:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007a98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007a9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007a9c:	d3f6      	bcc.n	8007a8c <CopyDataInit>
	ldr	r2, =_sbss
 8007a9e:	4a0b      	ldr	r2, [pc, #44]	@ (8007acc <LoopForever+0x12>)
	b	LoopFillZerobss
 8007aa0:	e002      	b.n	8007aa8 <LoopFillZerobss>

08007aa2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007aa2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007aa4:	f842 3b04 	str.w	r3, [r2], #4

08007aa8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007aa8:	4b09      	ldr	r3, [pc, #36]	@ (8007ad0 <LoopForever+0x16>)
	cmp	r2, r3
 8007aaa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007aac:	d3f9      	bcc.n	8007aa2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007aae:	f7fc fe79 	bl	80047a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007ab2:	f003 ff7b 	bl	800b9ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007ab6:	f002 fc83 	bl	800a3c0 <main>

08007aba <LoopForever>:

LoopForever:
    b LoopForever
 8007aba:	e7fe      	b.n	8007aba <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8007abc:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8007ac0:	0800f968 	.word	0x0800f968
	ldr	r0, =_sdata
 8007ac4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007ac8:	20000290 	.word	0x20000290
	ldr	r2, =_sbss
 8007acc:	20000290 	.word	0x20000290
	ldr	r3, = _ebss
 8007ad0:	200010e0 	.word	0x200010e0

08007ad4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007ad4:	e7fe      	b.n	8007ad4 <ADC1_IRQHandler>
	...

08007ad8 <Feature_Extraction_State_Machine>:
*/

#include "main.h"

void Feature_Extraction_State_Machine(float * feature_1, float * feature_2, float * feature_3,
		float * sig_mag_scale) {
 8007ad8:	b5b0      	push	{r4, r5, r7, lr}
 8007ada:	b0a8      	sub	sp, #160	@ 0xa0
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	603b      	str	r3, [r7, #0]
	int32_t accel_x_avg, accel_y_avg, accel_z_avg;
	int32_t accel_x_diff_avg, accel_y_diff_avg, accel_z_diff_avg;
	int32_t accel_x_prev, accel_y_prev, accel_z_prev;
	int32_t accel_x_diff, accel_y_diff, accel_z_diff;
	int32_t motion_indicator;
	int32_t Motion_State = 0;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	67bb      	str	r3, [r7, #120]	@ 0x78
	int32_t Average_Period_Cycles;
	int32_t Sampling_Period_Ticks;
	int32_t avg_count;
	int32_t result;

	BSP_LED_Off(LED7);
 8007aea:	2001      	movs	r0, #1
 8007aec:	f7f9 f920 	bl	8000d30 <BSP_LED_Off>
	printf("\nMove to Start Position and Hold While Red LED On\n");
 8007af0:	4874      	ldr	r0, [pc, #464]	@ (8007cc4 <Feature_Extraction_State_Machine+0x1ec>)
 8007af2:	f003 ff41 	bl	800b978 <puts>
	LED_Notification_Blink_Red(5);
 8007af6:	2005      	movs	r0, #5
 8007af8:	f000 fb62 	bl	80081c0 <LED_Notification_Blink_Red>
	BSP_LED_On(LED6);
 8007afc:	2000      	movs	r0, #0
 8007afe:	f7f9 f8f9 	bl	8000cf4 <BSP_LED_On>
	 *                           	Green LED Off
	 *
	 ************************************************************************************
	 */

	Motion_Cycles = 0;
 8007b02:	2300      	movs	r3, #0
 8007b04:	66bb      	str	r3, [r7, #104]	@ 0x68
	Motion_Indicator_Threshold = 20;
 8007b06:	2314      	movs	r3, #20
 8007b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
	Motion_Level_Threshold = 200;
 8007b0a:	23c8      	movs	r3, #200	@ 0xc8
 8007b0c:	65bb      	str	r3, [r7, #88]	@ 0x58
	Average_Period_Cycles = 100;
 8007b0e:	2364      	movs	r3, #100	@ 0x64
 8007b10:	657b      	str	r3, [r7, #84]	@ 0x54
	Sampling_Period_Ticks = 2;
 8007b12:	2302      	movs	r3, #2
 8007b14:	653b      	str	r3, [r7, #80]	@ 0x50

	while (1){


		/* Initialize Motion and Gesture State Variables */
		if (Motion_Cycles == 0){
 8007b16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10a      	bne.n	8007b32 <Feature_Extraction_State_Machine+0x5a>
			Motion_State_Prev = Motion_State;
 8007b1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b1e:	677b      	str	r3, [r7, #116]	@ 0x74
			Motion_Pattern_State = -1;
 8007b20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b24:	66fb      	str	r3, [r7, #108]	@ 0x6c
			Motion_State_Change_Time = HAL_GetTick();
 8007b26:	f7fc feed 	bl	8004904 <HAL_GetTick>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	673b      	str	r3, [r7, #112]	@ 0x70
			Motion_State_Diff = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
		}

		avg_count = 0;
 8007b32:	2300      	movs	r3, #0
 8007b34:	667b      	str	r3, [r7, #100]	@ 0x64
		accel_x_diff_avg = 0;
 8007b36:	2300      	movs	r3, #0
 8007b38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		accel_y_diff_avg = 0;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		accel_z_diff_avg = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		accel_x_avg = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		accel_y_avg = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		accel_z_avg = 0;
 8007b54:	2300      	movs	r3, #0
 8007b56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		/*
		 * Compute mean value of acceleration for each axis, change in acceleration for each
		 * axis, and absolute value of change in acceleration for each axis.
		 */
		while (avg_count < Average_Period_Cycles){
 8007b5a:	e05f      	b.n	8007c1c <Feature_Extraction_State_Machine+0x144>
			HAL_Delay(Sampling_Period_Ticks);  /* Execution delay sets sampling period */
 8007b5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fc fedc 	bl	800491c <HAL_Delay>
			result = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	663b      	str	r3, [r7, #96]	@ 0x60
			if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_ACCELERO, &axes) != BSP_ERROR_NONE) result--;
 8007b68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	2102      	movs	r1, #2
 8007b70:	2000      	movs	r0, #0
 8007b72:	f7f9 ff61 	bl	8001a38 <BSP_MOTION_SENSOR_GetAxes>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <Feature_Extraction_State_Machine+0xaa>
 8007b7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	663b      	str	r3, [r7, #96]	@ 0x60
			if (result < 0){
 8007b82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	da03      	bge.n	8007b90 <Feature_Extraction_State_Machine+0xb8>
				printf("Sampling Error %i\n\r", result);
 8007b88:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007b8a:	484f      	ldr	r0, [pc, #316]	@ (8007cc8 <Feature_Extraction_State_Machine+0x1f0>)
 8007b8c:	f003 fe84 	bl	800b898 <iprintf>
			}
			accel_x_avg = accel_x_avg + axes.xval;
 8007b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b92:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8007b96:	4413      	add	r3, r2
 8007b98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			accel_y_avg = accel_y_avg + axes.yval;
 8007b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			accel_z_avg = accel_z_avg + axes.zval;
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007baa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007bae:	4413      	add	r3, r2
 8007bb0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			accel_x_diff = abs(axes.xval - accel_x_prev);
 8007bb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	bfb8      	it	lt
 8007bc0:	425b      	neglt	r3, r3
 8007bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			accel_y_diff = abs(axes.yval - accel_y_prev);
 8007bc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bfb8      	it	lt
 8007bd0:	425b      	neglt	r3, r3
 8007bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
			accel_z_diff = abs(axes.zval - accel_z_prev);
 8007bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	bfb8      	it	lt
 8007bde:	425b      	neglt	r3, r3
 8007be0:	637b      	str	r3, [r7, #52]	@ 0x34
			accel_x_diff_avg = accel_x_diff_avg + accel_x_diff;
 8007be2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007be8:	4413      	add	r3, r2
 8007bea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			accel_y_diff_avg = accel_y_diff_avg + accel_y_diff;
 8007bee:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			accel_z_diff_avg = accel_z_diff_avg + accel_z_diff;
 8007bfa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c00:	4413      	add	r3, r2
 8007c02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			accel_x_prev = axes.xval;
 8007c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			accel_y_prev = axes.yval;
 8007c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			accel_z_prev = axes.zval;
 8007c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c14:	67fb      	str	r3, [r7, #124]	@ 0x7c
			avg_count++;
 8007c16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c18:	3301      	adds	r3, #1
 8007c1a:	667b      	str	r3, [r7, #100]	@ 0x64
		while (avg_count < Average_Period_Cycles){
 8007c1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c20:	429a      	cmp	r2, r3
 8007c22:	db9b      	blt.n	8007b5c <Feature_Extraction_State_Machine+0x84>
		}
		accel_x_avg = accel_x_avg/avg_count;
 8007c24:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8007c28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8007c2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		accel_y_avg = accel_y_avg/avg_count;
 8007c32:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007c36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c38:	fb92 f3f3 	sdiv	r3, r2, r3
 8007c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		accel_z_avg = accel_z_avg/avg_count;
 8007c40:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c46:	fb92 f3f3 	sdiv	r3, r2, r3
 8007c4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		accel_x_diff_avg = accel_x_diff_avg/avg_count;
 8007c4e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007c52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c54:	fb92 f3f3 	sdiv	r3, r2, r3
 8007c58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		accel_y_diff_avg = accel_y_diff_avg/avg_count;
 8007c5c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8007c60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c62:	fb92 f3f3 	sdiv	r3, r2, r3
 8007c66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		accel_z_diff_avg = accel_z_diff_avg/avg_count;
 8007c6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007c6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c70:	fb92 f3f3 	sdiv	r3, r2, r3
 8007c74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		motion_indicator = accel_x_diff_avg + accel_y_diff_avg + accel_z_diff_avg;
 8007c78:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c80:	4413      	add	r3, r2
 8007c82:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007c86:	4413      	add	r3, r2
 8007c88:	64bb      	str	r3, [r7, #72]	@ 0x48

		/* Detect absence of motion and level state */

		if (motion_indicator < Motion_Indicator_Threshold){
 8007c8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	da1c      	bge.n	8007ccc <Feature_Extraction_State_Machine+0x1f4>
			Motion_State = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	67bb      	str	r3, [r7, #120]	@ 0x78
			/* Detect Level and Upright (Z accel positive) */
			if (abs(accel_x_avg) < Motion_Level_Threshold && abs(accel_y_avg) <
 8007c96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	bfb8      	it	lt
 8007c9e:	425b      	neglt	r3, r3
 8007ca0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	dd14      	ble.n	8007cd0 <Feature_Extraction_State_Machine+0x1f8>
 8007ca6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	bfb8      	it	lt
 8007cae:	425b      	neglt	r3, r3
 8007cb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	dd0c      	ble.n	8007cd0 <Feature_Extraction_State_Machine+0x1f8>
					Motion_Level_Threshold && accel_z_avg > 0){
 8007cb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	dd08      	ble.n	8007cd0 <Feature_Extraction_State_Machine+0x1f8>
				Motion_State = 2;
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cc2:	e005      	b.n	8007cd0 <Feature_Extraction_State_Machine+0x1f8>
 8007cc4:	0800edb8 	.word	0x0800edb8
 8007cc8:	0800edec 	.word	0x0800edec
			}
		/* Detect presence of motion */

		} else {
			Motion_State = 1;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	67bb      	str	r3, [r7, #120]	@ 0x78
		}


		/* Detect change in Motion State and record time of change in state */

		Motion_State_Diff = Motion_State - Motion_State_Prev;
 8007cd0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007cd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Motion_State_Prev = Motion_State;
 8007cd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cda:	677b      	str	r3, [r7, #116]	@ 0x74

		if (Motion_State_Diff != 0){
 8007cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <Feature_Extraction_State_Machine+0x212>
			Motion_State_Change_Time = HAL_GetTick();
 8007ce2:	f7fc fe0f 	bl	8004904 <HAL_GetTick>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	673b      	str	r3, [r7, #112]	@ 0x70
		}


		if (Motion_State_Diff == 0 && (Motion_State == 0 || Motion_State == 2)){
 8007cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d123      	bne.n	8007d38 <Feature_Extraction_State_Machine+0x260>
 8007cf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <Feature_Extraction_State_Machine+0x224>
 8007cf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d11d      	bne.n	8007d38 <Feature_Extraction_State_Machine+0x260>

			Motion_State_Dwell_Time = HAL_GetTick() - Motion_State_Change_Time;
 8007cfc:	f7fc fe02 	bl	8004904 <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	647b      	str	r3, [r7, #68]	@ 0x44
			 * This delay accomodates the average period
			 * The delay is a product of the average period and loop period
			 * in units of ticks.
			 */

			if (Motion_State_Dwell_Time > Average_Period_Cycles*Sampling_Period_Ticks){
 8007d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007d0c:	fb02 f303 	mul.w	r3, r2, r3
 8007d10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d12:	429a      	cmp	r2, r3
 8007d14:	dd10      	ble.n	8007d38 <Feature_Extraction_State_Machine+0x260>

				if (Motion_State == 2){
 8007d16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d10d      	bne.n	8007d38 <Feature_Extraction_State_Machine+0x260>
					printf("Node Stationary Level: Start Motion to First Waypoint\n");
 8007d1c:	4896      	ldr	r0, [pc, #600]	@ (8007f78 <Feature_Extraction_State_Machine+0x4a0>)
 8007d1e:	f003 fe2b 	bl	800b978 <puts>
					/* Indicate Gesture Motion Underway to First waypoint of motion pattern */
					BSP_LED_Off(LED6);
 8007d22:	2000      	movs	r0, #0
 8007d24:	f7f9 f804 	bl	8000d30 <BSP_LED_Off>
					LED_Notification_Blink_Green(5);
 8007d28:	2005      	movs	r0, #5
 8007d2a:	f000 fa2a 	bl	8008182 <LED_Notification_Blink_Green>
					BSP_LED_On(LED7);
 8007d2e:	2001      	movs	r0, #1
 8007d30:	f7f8 ffe0 	bl	8000cf4 <BSP_LED_On>
					Motion_Pattern_State = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
		}

		/* Detect departure from level state */

		if (Motion_Pattern_State == 0 && Motion_State != 2  ){
 8007d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d104      	bne.n	8007d48 <Feature_Extraction_State_Machine+0x270>
 8007d3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d001      	beq.n	8007d48 <Feature_Extraction_State_Machine+0x270>
			Motion_Pattern_State = 1; /* Gesture motion underway to next waypoint  */
 8007d44:	2301      	movs	r3, #1
 8007d46:	66fb      	str	r3, [r7, #108]	@ 0x6c
		}

		if (Motion_Pattern_State == 1 && Motion_State == 0 ){
 8007d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d12c      	bne.n	8007da8 <Feature_Extraction_State_Machine+0x2d0>
 8007d4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d129      	bne.n	8007da8 <Feature_Extraction_State_Machine+0x2d0>
			Motion_Pattern_State = 2; /* Gesture motion next state reached */
 8007d54:	2302      	movs	r3, #2
 8007d56:	66fb      	str	r3, [r7, #108]	@ 0x6c
			/* Record orientation at this first waypoint state */
			result = 0;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	663b      	str	r3, [r7, #96]	@ 0x60
			if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_ACCELERO, &ttt_first_waypoint)
 8007d5c:	f107 031c 	add.w	r3, r7, #28
 8007d60:	461a      	mov	r2, r3
 8007d62:	2102      	movs	r1, #2
 8007d64:	2000      	movs	r0, #0
 8007d66:	f7f9 fe67 	bl	8001a38 <BSP_MOTION_SENSOR_GetAxes>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <Feature_Extraction_State_Machine+0x29e>
					!= BSP_ERROR_NONE) result--;
 8007d70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d72:	3b01      	subs	r3, #1
 8007d74:	663b      	str	r3, [r7, #96]	@ 0x60
			if (result < 0){
 8007d76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	da03      	bge.n	8007d84 <Feature_Extraction_State_Machine+0x2ac>
				printf("Sampling Error %i\n\r", result);
 8007d7c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007d7e:	487f      	ldr	r0, [pc, #508]	@ (8007f7c <Feature_Extraction_State_Machine+0x4a4>)
 8007d80:	f003 fd8a 	bl	800b898 <iprintf>
			}
			printf("\nFirst Motion Waypoint Reached\n");
 8007d84:	487e      	ldr	r0, [pc, #504]	@ (8007f80 <Feature_Extraction_State_Machine+0x4a8>)
 8007d86:	f003 fdf7 	bl	800b978 <puts>
			BSP_LED_Off(LED7);
 8007d8a:	2001      	movs	r0, #1
 8007d8c:	f7f8 ffd0 	bl	8000d30 <BSP_LED_Off>
			LED_Notification_Blink_Red(5);
 8007d90:	2005      	movs	r0, #5
 8007d92:	f000 fa15 	bl	80081c0 <LED_Notification_Blink_Red>
			printf("\nBegin Motion to Final Waypoint\n");
 8007d96:	487b      	ldr	r0, [pc, #492]	@ (8007f84 <Feature_Extraction_State_Machine+0x4ac>)
 8007d98:	f003 fdee 	bl	800b978 <puts>
			LED_Notification_Blink_Green(5);
 8007d9c:	2005      	movs	r0, #5
 8007d9e:	f000 f9f0 	bl	8008182 <LED_Notification_Blink_Green>
			BSP_LED_On(LED7);
 8007da2:	2001      	movs	r0, #1
 8007da4:	f7f8 ffa6 	bl	8000cf4 <BSP_LED_On>
		}
		/* Detect departure from first waypoint state */
		if (Motion_Pattern_State == 2 && Motion_State == 1  ){
 8007da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d104      	bne.n	8007db8 <Feature_Extraction_State_Machine+0x2e0>
 8007dae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d101      	bne.n	8007db8 <Feature_Extraction_State_Machine+0x2e0>
			Motion_Pattern_State = 3; /* Gesture motion to final state waypoint underway */
 8007db4:	2303      	movs	r3, #3
 8007db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
		}
		if (Motion_Pattern_State == 3 &&  Motion_State == 0  ){
 8007db8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	f040 80a7 	bne.w	8007f0e <Feature_Extraction_State_Machine+0x436>
 8007dc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f040 80a3 	bne.w	8007f0e <Feature_Extraction_State_Machine+0x436>
			Motion_Pattern_State = 4; /* Gesture motion final state waypoint reached */
 8007dc8:	2304      	movs	r3, #4
 8007dca:	66fb      	str	r3, [r7, #108]	@ 0x6c
			/* Record final state */
			result = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	663b      	str	r3, [r7, #96]	@ 0x60
			if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_ACCELERO, &ttt_final_waypoint)
 8007dd0:	f107 0310 	add.w	r3, r7, #16
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	2102      	movs	r1, #2
 8007dd8:	2000      	movs	r0, #0
 8007dda:	f7f9 fe2d 	bl	8001a38 <BSP_MOTION_SENSOR_GetAxes>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d002      	beq.n	8007dea <Feature_Extraction_State_Machine+0x312>
					!= BSP_ERROR_NONE) result--;
 8007de4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007de6:	3b01      	subs	r3, #1
 8007de8:	663b      	str	r3, [r7, #96]	@ 0x60
			if (result < 0){
 8007dea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	da03      	bge.n	8007df8 <Feature_Extraction_State_Machine+0x320>
				printf("Sampling Error %i\n\r", result);
 8007df0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007df2:	4862      	ldr	r0, [pc, #392]	@ (8007f7c <Feature_Extraction_State_Machine+0x4a4>)
 8007df4:	f003 fd50 	bl	800b898 <iprintf>
			}
			printf("\nMotion Final Waypoint Reached\n");
 8007df8:	4863      	ldr	r0, [pc, #396]	@ (8007f88 <Feature_Extraction_State_Machine+0x4b0>)
 8007dfa:	f003 fdbd 	bl	800b978 <puts>
			BSP_LED_Off(LED7);
 8007dfe:	2001      	movs	r0, #1
 8007e00:	f7f8 ff96 	bl	8000d30 <BSP_LED_Off>
			break;
 8007e04:	bf00      	nop
		}

		Motion_Cycles++;
	}

	BSP_LED_Off(LED7);
 8007e06:	2001      	movs	r0, #1
 8007e08:	f7f8 ff92 	bl	8000d30 <BSP_LED_Off>


	accel_mag = pow((ttt_final_waypoint.xval - ttt_first_waypoint.xval), 2);
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7f8 fb8a 	bl	800052c <__aeabi_i2d>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	ed9f 1b54 	vldr	d1, [pc, #336]	@ 8007f70 <Feature_Extraction_State_Machine+0x498>
 8007e20:	ec43 2b10 	vmov	d0, r2, r3
 8007e24:	f006 f830 	bl	800de88 <pow>
 8007e28:	ec53 2b10 	vmov	r2, r3, d0
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4619      	mov	r1, r3
 8007e30:	f7f8 febe 	bl	8000bb0 <__aeabi_d2f>
 8007e34:	4603      	mov	r3, r0
 8007e36:	643b      	str	r3, [r7, #64]	@ 0x40
	accel_mag = accel_mag + pow((ttt_final_waypoint.yval - ttt_first_waypoint.yval), 2);
 8007e38:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8007e3a:	f7f8 fb89 	bl	8000550 <__aeabi_f2d>
 8007e3e:	4604      	mov	r4, r0
 8007e40:	460d      	mov	r5, r1
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7f8 fb6f 	bl	800052c <__aeabi_i2d>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	ed9f 1b47 	vldr	d1, [pc, #284]	@ 8007f70 <Feature_Extraction_State_Machine+0x498>
 8007e56:	ec43 2b10 	vmov	d0, r2, r3
 8007e5a:	f006 f815 	bl	800de88 <pow>
 8007e5e:	ec53 2b10 	vmov	r2, r3, d0
 8007e62:	4620      	mov	r0, r4
 8007e64:	4629      	mov	r1, r5
 8007e66:	f7f8 fa15 	bl	8000294 <__adddf3>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4610      	mov	r0, r2
 8007e70:	4619      	mov	r1, r3
 8007e72:	f7f8 fe9d 	bl	8000bb0 <__aeabi_d2f>
 8007e76:	4603      	mov	r3, r0
 8007e78:	643b      	str	r3, [r7, #64]	@ 0x40
	accel_mag = accel_mag + pow((ttt_final_waypoint.zval - ttt_first_waypoint.zval), 2);
 8007e7a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8007e7c:	f7f8 fb68 	bl	8000550 <__aeabi_f2d>
 8007e80:	4604      	mov	r4, r0
 8007e82:	460d      	mov	r5, r1
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7f8 fb4e 	bl	800052c <__aeabi_i2d>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 8007f70 <Feature_Extraction_State_Machine+0x498>
 8007e98:	ec43 2b10 	vmov	d0, r2, r3
 8007e9c:	f005 fff4 	bl	800de88 <pow>
 8007ea0:	ec53 2b10 	vmov	r2, r3, d0
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	f7f8 f9f4 	bl	8000294 <__adddf3>
 8007eac:	4602      	mov	r2, r0
 8007eae:	460b      	mov	r3, r1
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	f7f8 fe7c 	bl	8000bb0 <__aeabi_d2f>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	643b      	str	r3, [r7, #64]	@ 0x40


	accel_mag = sqrt(accel_mag);
 8007ebc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8007ebe:	f7f8 fb47 	bl	8000550 <__aeabi_f2d>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	ec43 2b10 	vmov	d0, r2, r3
 8007eca:	f006 f84d 	bl	800df68 <sqrt>
 8007ece:	ec53 2b10 	vmov	r2, r3, d0
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	f7f8 fe6b 	bl	8000bb0 <__aeabi_d2f>
 8007eda:	4603      	mov	r3, r0
 8007edc:	643b      	str	r3, [r7, #64]	@ 0x40

	*feature_1 = ttt_final_waypoint.xval - ttt_first_waypoint.xval;
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	ee07 3a90 	vmov	s15, r3
 8007ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	edc3 7a00 	vstr	s15, [r3]
	*feature_2 = ttt_final_waypoint.yval - ttt_first_waypoint.yval;
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	ee07 3a90 	vmov	s15, r3
 8007efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	edc3 7a00 	vstr	s15, [r3]
    if (ttt_final_waypoint.zval >= 0) {
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	db14      	blt.n	8007f36 <Feature_Extraction_State_Machine+0x45e>
 8007f0c:	e003      	b.n	8007f16 <Feature_Extraction_State_Machine+0x43e>
		Motion_Cycles++;
 8007f0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f10:	3301      	adds	r3, #1
 8007f12:	66bb      	str	r3, [r7, #104]	@ 0x68
		if (Motion_Cycles == 0){
 8007f14:	e5ff      	b.n	8007b16 <Feature_Extraction_State_Machine+0x3e>
        *feature_3 = (*feature_1 + *feature_2) / 2;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	ed93 7a00 	vldr	s14, [r3]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	edd3 7a00 	vldr	s15, [r3]
 8007f22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f26:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8007f2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	edc3 7a00 	vstr	s15, [r3]
 8007f34:	e013      	b.n	8007f5e <Feature_Extraction_State_Machine+0x486>
    } else if (ttt_final_waypoint.zval < 0) {
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	da10      	bge.n	8007f5e <Feature_Extraction_State_Machine+0x486>
        *feature_3 = -(*feature_1 + *feature_2) / 2;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	ed93 7a00 	vldr	s14, [r3]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	edd3 7a00 	vldr	s15, [r3]
 8007f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f4c:	eeb1 7a67 	vneg.f32	s14, s15
 8007f50:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8007f54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	edc3 7a00 	vstr	s15, [r3]
    }


	*sig_mag_scale = accel_mag;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f62:	601a      	str	r2, [r3, #0]

	return;
 8007f64:	bf00      	nop
}
 8007f66:	37a0      	adds	r7, #160	@ 0xa0
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8007f6c:	f3af 8000 	nop.w
 8007f70:	00000000 	.word	0x00000000
 8007f74:	40000000 	.word	0x40000000
 8007f78:	0800ee00 	.word	0x0800ee00
 8007f7c:	0800edec 	.word	0x0800edec
 8007f80:	0800ee38 	.word	0x0800ee38
 8007f84:	0800ee58 	.word	0x0800ee58
 8007f88:	0800ee78 	.word	0x0800ee78

08007f8c <motion_softmax>:



void motion_softmax(int n, float *x, float *y) {
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
	float norm;
	int32_t i;

	norm = 0;
 8007f98:	f04f 0300 	mov.w	r3, #0
 8007f9c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < n; i++){
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	613b      	str	r3, [r7, #16]
 8007fa2:	e016      	b.n	8007fd2 <motion_softmax+0x46>
		norm = norm + x[i] * x[i];
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	4413      	add	r3, r2
 8007fac:	ed93 7a00 	vldr	s14, [r3]
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	edd3 7a00 	vldr	s15, [r3]
 8007fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc0:	ed97 7a05 	vldr	s14, [r7, #20]
 8007fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fc8:	edc7 7a05 	vstr	s15, [r7, #20]
	for (i = 0; i < n; i++){
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	613b      	str	r3, [r7, #16]
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	dbe4      	blt.n	8007fa4 <motion_softmax+0x18>
	}
	norm = sqrt(norm);
 8007fda:	6978      	ldr	r0, [r7, #20]
 8007fdc:	f7f8 fab8 	bl	8000550 <__aeabi_f2d>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	ec43 2b10 	vmov	d0, r2, r3
 8007fe8:	f005 ffbe 	bl	800df68 <sqrt>
 8007fec:	ec53 2b10 	vmov	r2, r3, d0
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	f7f8 fddc 	bl	8000bb0 <__aeabi_d2f>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	617b      	str	r3, [r7, #20]
	for (i = 0; i < n; i++){
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	613b      	str	r3, [r7, #16]
 8008000:	e012      	b.n	8008028 <motion_softmax+0x9c>
		y[i] = x[i]/norm;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	4413      	add	r3, r2
 800800a:	edd3 6a00 	vldr	s13, [r3]
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	4413      	add	r3, r2
 8008016:	ed97 7a05 	vldr	s14, [r7, #20]
 800801a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800801e:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < n; i++){
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	3301      	adds	r3, #1
 8008026:	613b      	str	r3, [r7, #16]
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	429a      	cmp	r2, r3
 800802e:	dbe8      	blt.n	8008002 <motion_softmax+0x76>
	}
}
 8008030:	bf00      	nop
 8008032:	bf00      	nop
 8008034:	3718      	adds	r7, #24
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <LED_Code_Blink_Red>:

void LED_Code_Blink_Red(int count) {
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
	int i;

	/*
	 * Alert signal of rapid blinks indicating code to be shown
	 */
	for (i = 0; i < 7; i++) {
 8008042:	2300      	movs	r3, #0
 8008044:	60fb      	str	r3, [r7, #12]
 8008046:	e00e      	b.n	8008066 <LED_Code_Blink_Red+0x2c>
		BSP_LED_On(LED6);
 8008048:	2000      	movs	r0, #0
 800804a:	f7f8 fe53 	bl	8000cf4 <BSP_LED_On>

		HAL_Delay(20);
 800804e:	2014      	movs	r0, #20
 8008050:	f7fc fc64 	bl	800491c <HAL_Delay>
		BSP_LED_Off(LED6);
 8008054:	2000      	movs	r0, #0
 8008056:	f7f8 fe6b 	bl	8000d30 <BSP_LED_Off>

		HAL_Delay(50);
 800805a:	2032      	movs	r0, #50	@ 0x32
 800805c:	f7fc fc5e 	bl	800491c <HAL_Delay>
	for (i = 0; i < 7; i++) {
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	3301      	adds	r3, #1
 8008064:	60fb      	str	r3, [r7, #12]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2b06      	cmp	r3, #6
 800806a:	dded      	ble.n	8008048 <LED_Code_Blink_Red+0xe>

	/*
	 * Code indicated by number of slow blinks
	 */

	if (count != 0) {
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d01b      	beq.n	80080aa <LED_Code_Blink_Red+0x70>
		HAL_Delay(1000);
 8008072:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008076:	f7fc fc51 	bl	800491c <HAL_Delay>
		for (i = 0; i < count; i++) {
 800807a:	2300      	movs	r3, #0
 800807c:	60fb      	str	r3, [r7, #12]
 800807e:	e010      	b.n	80080a2 <LED_Code_Blink_Red+0x68>
			BSP_LED_On(LED6);
 8008080:	2000      	movs	r0, #0
 8008082:	f7f8 fe37 	bl	8000cf4 <BSP_LED_On>

			HAL_Delay(500);
 8008086:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800808a:	f7fc fc47 	bl	800491c <HAL_Delay>
			BSP_LED_Off(LED6);
 800808e:	2000      	movs	r0, #0
 8008090:	f7f8 fe4e 	bl	8000d30 <BSP_LED_Off>

			HAL_Delay(500);
 8008094:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008098:	f7fc fc40 	bl	800491c <HAL_Delay>
		for (i = 0; i < count; i++) {
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	3301      	adds	r3, #1
 80080a0:	60fb      	str	r3, [r7, #12]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	dbea      	blt.n	8008080 <LED_Code_Blink_Red+0x46>
	}

	/*
	 * Alert signal of rapid blinks indicating end of code
	 */
	for (i = 0; i < 7; i++) {
 80080aa:	2300      	movs	r3, #0
 80080ac:	60fb      	str	r3, [r7, #12]
 80080ae:	e00e      	b.n	80080ce <LED_Code_Blink_Red+0x94>
		BSP_LED_On(LED6);
 80080b0:	2000      	movs	r0, #0
 80080b2:	f7f8 fe1f 	bl	8000cf4 <BSP_LED_On>

		HAL_Delay(20);
 80080b6:	2014      	movs	r0, #20
 80080b8:	f7fc fc30 	bl	800491c <HAL_Delay>
		BSP_LED_Off(LED6);
 80080bc:	2000      	movs	r0, #0
 80080be:	f7f8 fe37 	bl	8000d30 <BSP_LED_Off>

		HAL_Delay(30);
 80080c2:	201e      	movs	r0, #30
 80080c4:	f7fc fc2a 	bl	800491c <HAL_Delay>
	for (i = 0; i < 7; i++) {
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	3301      	adds	r3, #1
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2b06      	cmp	r3, #6
 80080d2:	dded      	ble.n	80080b0 <LED_Code_Blink_Red+0x76>
	}

}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <LED_Code_Blink_Green>:

void LED_Code_Blink_Green(int count) {
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
	int i;

	/*
	 * Alert signal of rapid blinks indicating code to be shown
	 */
	for (i = 0; i < 7; i++) {
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	e00e      	b.n	800810a <LED_Code_Blink_Green+0x2c>

		BSP_LED_On(LED7);
 80080ec:	2001      	movs	r0, #1
 80080ee:	f7f8 fe01 	bl	8000cf4 <BSP_LED_On>
		HAL_Delay(20);
 80080f2:	2014      	movs	r0, #20
 80080f4:	f7fc fc12 	bl	800491c <HAL_Delay>

		BSP_LED_Off(LED7);
 80080f8:	2001      	movs	r0, #1
 80080fa:	f7f8 fe19 	bl	8000d30 <BSP_LED_Off>
		HAL_Delay(50);
 80080fe:	2032      	movs	r0, #50	@ 0x32
 8008100:	f7fc fc0c 	bl	800491c <HAL_Delay>
	for (i = 0; i < 7; i++) {
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3301      	adds	r3, #1
 8008108:	60fb      	str	r3, [r7, #12]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2b06      	cmp	r3, #6
 800810e:	dded      	ble.n	80080ec <LED_Code_Blink_Green+0xe>

	/*
	 * Code indicated by number of slow blinks
	 */

	if (count != 0) {
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d01b      	beq.n	800814e <LED_Code_Blink_Green+0x70>
		HAL_Delay(1000);
 8008116:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800811a:	f7fc fbff 	bl	800491c <HAL_Delay>
		for (i = 0; i < count; i++) {
 800811e:	2300      	movs	r3, #0
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	e010      	b.n	8008146 <LED_Code_Blink_Green+0x68>

			BSP_LED_On(LED7);
 8008124:	2001      	movs	r0, #1
 8008126:	f7f8 fde5 	bl	8000cf4 <BSP_LED_On>
			HAL_Delay(500);
 800812a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800812e:	f7fc fbf5 	bl	800491c <HAL_Delay>

			BSP_LED_Off(LED7);
 8008132:	2001      	movs	r0, #1
 8008134:	f7f8 fdfc 	bl	8000d30 <BSP_LED_Off>
			HAL_Delay(500);
 8008138:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800813c:	f7fc fbee 	bl	800491c <HAL_Delay>
		for (i = 0; i < count; i++) {
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	3301      	adds	r3, #1
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	429a      	cmp	r2, r3
 800814c:	dbea      	blt.n	8008124 <LED_Code_Blink_Green+0x46>
	}

	/*
	 * Alert signal of rapid blinks indicating end of code
	 */
	for (i = 0; i < 7; i++) {
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
 8008152:	e00e      	b.n	8008172 <LED_Code_Blink_Green+0x94>

		BSP_LED_On(LED7);
 8008154:	2001      	movs	r0, #1
 8008156:	f7f8 fdcd 	bl	8000cf4 <BSP_LED_On>
		HAL_Delay(20);
 800815a:	2014      	movs	r0, #20
 800815c:	f7fc fbde 	bl	800491c <HAL_Delay>

		BSP_LED_Off(LED7);
 8008160:	2001      	movs	r0, #1
 8008162:	f7f8 fde5 	bl	8000d30 <BSP_LED_Off>
		HAL_Delay(30);
 8008166:	201e      	movs	r0, #30
 8008168:	f7fc fbd8 	bl	800491c <HAL_Delay>
	for (i = 0; i < 7; i++) {
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	3301      	adds	r3, #1
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b06      	cmp	r3, #6
 8008176:	dded      	ble.n	8008154 <LED_Code_Blink_Green+0x76>
	}

}
 8008178:	bf00      	nop
 800817a:	bf00      	nop
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <LED_Notification_Blink_Green>:

void LED_Notification_Blink_Green(int count) {
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]

	/*
	 * Rapid blink notification
	 */

	for (i = 0; i < count; i++) {
 800818a:	2300      	movs	r3, #0
 800818c:	60fb      	str	r3, [r7, #12]
 800818e:	e00e      	b.n	80081ae <LED_Notification_Blink_Green+0x2c>

		BSP_LED_On(LED7);
 8008190:	2001      	movs	r0, #1
 8008192:	f7f8 fdaf 	bl	8000cf4 <BSP_LED_On>
		HAL_Delay(20);
 8008196:	2014      	movs	r0, #20
 8008198:	f7fc fbc0 	bl	800491c <HAL_Delay>

		BSP_LED_Off(LED7);
 800819c:	2001      	movs	r0, #1
 800819e:	f7f8 fdc7 	bl	8000d30 <BSP_LED_Off>
		HAL_Delay(50);
 80081a2:	2032      	movs	r0, #50	@ 0x32
 80081a4:	f7fc fbba 	bl	800491c <HAL_Delay>
	for (i = 0; i < count; i++) {
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3301      	adds	r3, #1
 80081ac:	60fb      	str	r3, [r7, #12]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	dbec      	blt.n	8008190 <LED_Notification_Blink_Green+0xe>
	}
}
 80081b6:	bf00      	nop
 80081b8:	bf00      	nop
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <LED_Notification_Blink_Red>:

void LED_Notification_Blink_Red(int count) {
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]

	/*
	 * Rapid blink notification
	 */

	for (i = 0; i < count; i++) {
 80081c8:	2300      	movs	r3, #0
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	e00e      	b.n	80081ec <LED_Notification_Blink_Red+0x2c>
		BSP_LED_On(LED6);
 80081ce:	2000      	movs	r0, #0
 80081d0:	f7f8 fd90 	bl	8000cf4 <BSP_LED_On>

		HAL_Delay(20);
 80081d4:	2014      	movs	r0, #20
 80081d6:	f7fc fba1 	bl	800491c <HAL_Delay>
		BSP_LED_Off(LED6);
 80081da:	2000      	movs	r0, #0
 80081dc:	f7f8 fda8 	bl	8000d30 <BSP_LED_Off>

		HAL_Delay(50);
 80081e0:	2032      	movs	r0, #50	@ 0x32
 80081e2:	f7fc fb9b 	bl	800491c <HAL_Delay>
	for (i = 0; i < count; i++) {
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3301      	adds	r3, #1
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	dbec      	blt.n	80081ce <LED_Notification_Blink_Red+0xe>
	}
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <print_Z_Score_ANN>:


void print_Z_Score_ANN(ANN *net, int input_state, int * error) {
 8008200:	b5b0      	push	{r4, r5, r7, lr}
 8008202:	b08e      	sub	sp, #56	@ 0x38
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]

	int i, loc, count;
	float point = 0.0;
 800820c:	f04f 0300 	mov.w	r3, #0
 8008210:	62bb      	str	r3, [r7, #40]	@ 0x28

	/*
	 * Initialize error state
	 */

	*error = 0;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	601a      	str	r2, [r3, #0]

	count = 0;
 8008218:	2300      	movs	r3, #0
 800821a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	mean_output = 0;
 800821c:	f04f 0300 	mov.w	r3, #0
 8008220:	623b      	str	r3, [r7, #32]
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 8008222:	2300      	movs	r3, #0
 8008224:	637b      	str	r3, [r7, #52]	@ 0x34
 8008226:	e03a      	b.n	800829e <print_Z_Score_ANN+0x9e>
		mean_output = mean_output + (net->output[i]);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	69da      	ldr	r2, [r3, #28]
 800822c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	edd3 7a00 	vldr	s15, [r3]
 8008236:	ed97 7a08 	vldr	s14, [r7, #32]
 800823a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800823e:	edc7 7a08 	vstr	s15, [r7, #32]
		if (net->output[i] > point && net->output[i] > 0.1) {
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	69da      	ldr	r2, [r3, #28]
 8008246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	edd3 7a00 	vldr	s15, [r3]
 8008250:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8008254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800825c:	d519      	bpl.n	8008292 <print_Z_Score_ANN+0x92>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	69da      	ldr	r2, [r3, #28]
 8008262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4618      	mov	r0, r3
 800826c:	f7f8 f970 	bl	8000550 <__aeabi_f2d>
 8008270:	a3bc      	add	r3, pc, #752	@ (adr r3, 8008564 <print_Z_Score_ANN+0x364>)
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	f7f8 fc53 	bl	8000b20 <__aeabi_dcmpgt>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d008      	beq.n	8008292 <print_Z_Score_ANN+0x92>
			point = net->output[i];
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	69da      	ldr	r2, [r3, #28]
 8008284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	62bb      	str	r3, [r7, #40]	@ 0x28
			loc = i;
 800828e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008290:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		count++;
 8008292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008294:	3301      	adds	r3, #1
 8008296:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 8008298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800829a:	3301      	adds	r3, #1
 800829c:	637b      	str	r3, [r7, #52]	@ 0x34
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	68da      	ldr	r2, [r3, #12]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80082aa:	3b01      	subs	r3, #1
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d8b7      	bhi.n	8008228 <print_Z_Score_ANN+0x28>
	}

	next_max = 0;
 80082b8:	f04f 0300 	mov.w	r3, #0
 80082bc:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 80082be:	2300      	movs	r3, #0
 80082c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80082c2:	e02e      	b.n	8008322 <print_Z_Score_ANN+0x122>
		if (i == loc) {
 80082c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d026      	beq.n	800831a <print_Z_Score_ANN+0x11a>
			continue;
		}
		if (net->output[i] > next_max && net->output[i] > 0.1) {
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	69da      	ldr	r2, [r3, #28]
 80082d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	edd3 7a00 	vldr	s15, [r3]
 80082da:	ed97 7a06 	vldr	s14, [r7, #24]
 80082de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e6:	d519      	bpl.n	800831c <print_Z_Score_ANN+0x11c>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	69da      	ldr	r2, [r3, #28]
 80082ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7f8 f92b 	bl	8000550 <__aeabi_f2d>
 80082fa:	a39a      	add	r3, pc, #616	@ (adr r3, 8008564 <print_Z_Score_ANN+0x364>)
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	f7f8 fc0e 	bl	8000b20 <__aeabi_dcmpgt>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d008      	beq.n	800831c <print_Z_Score_ANN+0x11c>
			next_max = net->output[i];
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	69da      	ldr	r2, [r3, #28]
 800830e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	61bb      	str	r3, [r7, #24]
 8008318:	e000      	b.n	800831c <print_Z_Score_ANN+0x11c>
			continue;
 800831a:	bf00      	nop
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800831c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800831e:	3301      	adds	r3, #1
 8008320:	637b      	str	r3, [r7, #52]	@ 0x34
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	68da      	ldr	r2, [r3, #12]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800832e:	3b01      	subs	r3, #1
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008338:	429a      	cmp	r2, r3
 800833a:	d8c3      	bhi.n	80082c4 <print_Z_Score_ANN+0xc4>
		}
	}

	mean_output = (mean_output) / (count);
 800833c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008346:	edd7 6a08 	vldr	s13, [r7, #32]
 800834a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800834e:	edc7 7a08 	vstr	s15, [r7, #32]

	count = 0;
 8008352:	2300      	movs	r3, #0
 8008354:	62fb      	str	r3, [r7, #44]	@ 0x2c
	mean_output_rem = 0;
 8008356:	f04f 0300 	mov.w	r3, #0
 800835a:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800835c:	2300      	movs	r3, #0
 800835e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008360:	e018      	b.n	8008394 <print_Z_Score_ANN+0x194>
		mean_output_rem = mean_output_rem + (net->output[i]);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	69da      	ldr	r2, [r3, #28]
 8008366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	edd3 7a00 	vldr	s15, [r3]
 8008370:	ed97 7a07 	vldr	s14, [r7, #28]
 8008374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008378:	edc7 7a07 	vstr	s15, [r7, #28]
		if (i == loc) {
 800837c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800837e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008380:	429a      	cmp	r2, r3
 8008382:	d003      	beq.n	800838c <print_Z_Score_ANN+0x18c>
			continue;
		}
		count++;
 8008384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008386:	3301      	adds	r3, #1
 8008388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800838a:	e000      	b.n	800838e <print_Z_Score_ANN+0x18e>
			continue;
 800838c:	bf00      	nop
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800838e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008390:	3301      	adds	r3, #1
 8008392:	637b      	str	r3, [r7, #52]	@ 0x34
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	68da      	ldr	r2, [r3, #12]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80083a0:	3b01      	subs	r3, #1
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4413      	add	r3, r2
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d8d9      	bhi.n	8008362 <print_Z_Score_ANN+0x162>
	}

	mean_output_rem = (mean_output_rem) / (count);
 80083ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b0:	ee07 3a90 	vmov	s15, r3
 80083b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80083bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083c0:	edc7 7a07 	vstr	s15, [r7, #28]

	rms_output = 0;
 80083c4:	f04f 0300 	mov.w	r3, #0
 80083c8:	627b      	str	r3, [r7, #36]	@ 0x24

	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 80083ca:	2300      	movs	r3, #0
 80083cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ce:	e02c      	b.n	800842a <print_Z_Score_ANN+0x22a>
		rms_output = rms_output + pow((net->output[i] - mean_output), 2);
 80083d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80083d2:	f7f8 f8bd 	bl	8000550 <__aeabi_f2d>
 80083d6:	4604      	mov	r4, r0
 80083d8:	460d      	mov	r5, r1
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	69da      	ldr	r2, [r3, #28]
 80083de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	ed93 7a00 	vldr	s14, [r3]
 80083e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80083ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083f0:	ee17 0a90 	vmov	r0, s15
 80083f4:	f7f8 f8ac 	bl	8000550 <__aeabi_f2d>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	ed9f 1b52 	vldr	d1, [pc, #328]	@ 8008548 <print_Z_Score_ANN+0x348>
 8008400:	ec43 2b10 	vmov	d0, r2, r3
 8008404:	f005 fd40 	bl	800de88 <pow>
 8008408:	ec53 2b10 	vmov	r2, r3, d0
 800840c:	4620      	mov	r0, r4
 800840e:	4629      	mov	r1, r5
 8008410:	f7f7 ff40 	bl	8000294 <__adddf3>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	4610      	mov	r0, r2
 800841a:	4619      	mov	r1, r3
 800841c:	f7f8 fbc8 	bl	8000bb0 <__aeabi_d2f>
 8008420:	4603      	mov	r3, r0
 8008422:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 8008424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008426:	3301      	adds	r3, #1
 8008428:	637b      	str	r3, [r7, #52]	@ 0x34
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	68da      	ldr	r2, [r3, #12]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008436:	3b01      	subs	r3, #1
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008440:	429a      	cmp	r2, r3
 8008442:	d8c5      	bhi.n	80083d0 <print_Z_Score_ANN+0x1d0>
	}

	rms_output = sqrt(rms_output / count);
 8008444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008446:	ee07 3a90 	vmov	s15, r3
 800844a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800844e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8008452:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008456:	ee16 0a90 	vmov	r0, s13
 800845a:	f7f8 f879 	bl	8000550 <__aeabi_f2d>
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	ec43 2b10 	vmov	d0, r2, r3
 8008466:	f005 fd7f 	bl	800df68 <sqrt>
 800846a:	ec53 2b10 	vmov	r2, r3, d0
 800846e:	4610      	mov	r0, r2
 8008470:	4619      	mov	r1, r3
 8008472:	f7f8 fb9d 	bl	8000bb0 <__aeabi_d2f>
 8008476:	4603      	mov	r3, r0
 8008478:	627b      	str	r3, [r7, #36]	@ 0x24
	if (rms_output != 0) {
 800847a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800847e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008486:	d00c      	beq.n	80084a2 <print_Z_Score_ANN+0x2a2>
		classification_metric = (point - mean_output) / rms_output;
 8008488:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800848c:	edd7 7a08 	vldr	s15, [r7, #32]
 8008490:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008494:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8008498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800849c:	edc7 7a05 	vstr	s15, [r7, #20]
 80084a0:	e002      	b.n	80084a8 <print_Z_Score_ANN+0x2a8>
	} else {
		classification_metric = 0;
 80084a2:	f04f 0300 	mov.w	r3, #0
 80084a6:	617b      	str	r3, [r7, #20]
	}

	if (loc != input_state) {
 80084a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d00e      	beq.n	80084ce <print_Z_Score_ANN+0x2ce>
		rms_output = 0;
 80084b0:	f04f 0300 	mov.w	r3, #0
 80084b4:	627b      	str	r3, [r7, #36]	@ 0x24
		classification_metric = 0;
 80084b6:	f04f 0300 	mov.w	r3, #0
 80084ba:	617b      	str	r3, [r7, #20]
		point = 0;
 80084bc:	f04f 0300 	mov.w	r3, #0
 80084c0:	62bb      	str	r3, [r7, #40]	@ 0x28
		mean_output = 0;
 80084c2:	f04f 0300 	mov.w	r3, #0
 80084c6:	623b      	str	r3, [r7, #32]
		mean_output_rem = 0;
 80084c8:	f04f 0300 	mov.w	r3, #0
 80084cc:	61fb      	str	r3, [r7, #28]
	}

	printf("\nZ-score %0.1f\n", classification_metric);
 80084ce:	6978      	ldr	r0, [r7, #20]
 80084d0:	f7f8 f83e 	bl	8000550 <__aeabi_f2d>
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	481f      	ldr	r0, [pc, #124]	@ (8008558 <print_Z_Score_ANN+0x358>)
 80084da:	f003 f9dd 	bl	800b898 <iprintf>

	if (loc != input_state) {
 80084de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d005      	beq.n	80084f2 <print_Z_Score_ANN+0x2f2>
		*error = 1;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	601a      	str	r2, [r3, #0]
		printf("\n\t Classification Error\n");
 80084ec:	481b      	ldr	r0, [pc, #108]	@ (800855c <print_Z_Score_ANN+0x35c>)
 80084ee:	f003 fa43 	bl	800b978 <puts>
	}

	if ((loc == input_state)
 80084f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d121      	bne.n	800853e <print_Z_Score_ANN+0x33e>
			&& ((classification_metric < CLASSIFICATION_ACC_THRESHOLD)
 80084fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80084fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800850a:	d412      	bmi.n	8008532 <print_Z_Score_ANN+0x332>
					|| ((point / next_max) < CLASSIFICATION_DISC_THRESHOLD))) {
 800850c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8008510:	edd7 7a06 	vldr	s15, [r7, #24]
 8008514:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008518:	ee16 0a90 	vmov	r0, s13
 800851c:	f7f8 f818 	bl	8000550 <__aeabi_f2d>
 8008520:	a30b      	add	r3, pc, #44	@ (adr r3, 8008550 <print_Z_Score_ANN+0x350>)
 8008522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008526:	f7f8 fadd 	bl	8000ae4 <__aeabi_dcmplt>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d100      	bne.n	8008532 <print_Z_Score_ANN+0x332>
		*error = 1;
		printf("\n\t Classification Accuracy Limit\n");
	}
}
 8008530:	e005      	b.n	800853e <print_Z_Score_ANN+0x33e>
		*error = 1;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	601a      	str	r2, [r3, #0]
		printf("\n\t Classification Accuracy Limit\n");
 8008538:	4809      	ldr	r0, [pc, #36]	@ (8008560 <print_Z_Score_ANN+0x360>)
 800853a:	f003 fa1d 	bl	800b978 <puts>
}
 800853e:	bf00      	nop
 8008540:	3738      	adds	r7, #56	@ 0x38
 8008542:	46bd      	mov	sp, r7
 8008544:	bdb0      	pop	{r4, r5, r7, pc}
 8008546:	bf00      	nop
 8008548:	00000000 	.word	0x00000000
 800854c:	40000000 	.word	0x40000000
 8008550:	cccccccd 	.word	0xcccccccd
 8008554:	3ff0cccc 	.word	0x3ff0cccc
 8008558:	0800ee98 	.word	0x0800ee98
 800855c:	0800eea8 	.word	0x0800eea8
 8008560:	0800eec0 	.word	0x0800eec0
 8008564:	9999999a 	.word	0x9999999a
 8008568:	3fb99999 	.word	0x3fb99999
 800856c:	00000000 	.word	0x00000000

08008570 <printOutput_ANN>:

void printOutput_ANN(ANN *net, int input_state, int * error) {
 8008570:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008574:	b090      	sub	sp, #64	@ 0x40
 8008576:	af04      	add	r7, sp, #16
 8008578:	60f8      	str	r0, [r7, #12]
 800857a:	60b9      	str	r1, [r7, #8]
 800857c:	607a      	str	r2, [r7, #4]

	int i, loc, count;
	float point = 0.0;
 800857e:	f04f 0300 	mov.w	r3, #0
 8008582:	623b      	str	r3, [r7, #32]

	/*
	 * Initialize error state
	 */

	*error = 0;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	601a      	str	r2, [r3, #0]
	loc = -1;
 800858a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800858e:	62bb      	str	r3, [r7, #40]	@ 0x28
	count = 0;
 8008590:	2300      	movs	r3, #0
 8008592:	627b      	str	r3, [r7, #36]	@ 0x24
	mean_output = 0;
 8008594:	f04f 0300 	mov.w	r3, #0
 8008598:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800859a:	2300      	movs	r3, #0
 800859c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800859e:	e03a      	b.n	8008616 <printOutput_ANN+0xa6>
		mean_output = mean_output + (net->output[i]);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	69da      	ldr	r2, [r3, #28]
 80085a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	edd3 7a00 	vldr	s15, [r3]
 80085ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80085b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085b6:	edc7 7a06 	vstr	s15, [r7, #24]
		if (net->output[i] > point && net->output[i] > 0.1) {
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	69da      	ldr	r2, [r3, #28]
 80085be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	edd3 7a00 	vldr	s15, [r3]
 80085c8:	ed97 7a08 	vldr	s14, [r7, #32]
 80085cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085d4:	d519      	bpl.n	800860a <printOutput_ANN+0x9a>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	69da      	ldr	r2, [r3, #28]
 80085da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7f7 ffb4 	bl	8000550 <__aeabi_f2d>
 80085e8:	a3ee      	add	r3, pc, #952	@ (adr r3, 80089a4 <printOutput_ANN+0x434>)
 80085ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ee:	f7f8 fa97 	bl	8000b20 <__aeabi_dcmpgt>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d008      	beq.n	800860a <printOutput_ANN+0x9a>
			point = net->output[i];
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	69da      	ldr	r2, [r3, #28]
 80085fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	623b      	str	r3, [r7, #32]
			loc = i;
 8008606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008608:	62bb      	str	r3, [r7, #40]	@ 0x28
		}
		count++;
 800860a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860c:	3301      	adds	r3, #1
 800860e:	627b      	str	r3, [r7, #36]	@ 0x24
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 8008610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008612:	3301      	adds	r3, #1
 8008614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	68da      	ldr	r2, [r3, #12]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008622:	3b01      	subs	r3, #1
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862c:	429a      	cmp	r2, r3
 800862e:	d8b7      	bhi.n	80085a0 <printOutput_ANN+0x30>
	}

	next_max = 0;
 8008630:	f04f 0300 	mov.w	r3, #0
 8008634:	617b      	str	r3, [r7, #20]
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 8008636:	2300      	movs	r3, #0
 8008638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800863a:	e02e      	b.n	800869a <printOutput_ANN+0x12a>
		if (i == loc) {
 800863c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800863e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008640:	429a      	cmp	r2, r3
 8008642:	d026      	beq.n	8008692 <printOutput_ANN+0x122>
			continue;
		}
		if (net->output[i] > next_max && net->output[i] > 0.1) {
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	69da      	ldr	r2, [r3, #28]
 8008648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	edd3 7a00 	vldr	s15, [r3]
 8008652:	ed97 7a05 	vldr	s14, [r7, #20]
 8008656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800865a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800865e:	d519      	bpl.n	8008694 <printOutput_ANN+0x124>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	69da      	ldr	r2, [r3, #28]
 8008664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4618      	mov	r0, r3
 800866e:	f7f7 ff6f 	bl	8000550 <__aeabi_f2d>
 8008672:	a3cc      	add	r3, pc, #816	@ (adr r3, 80089a4 <printOutput_ANN+0x434>)
 8008674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008678:	f7f8 fa52 	bl	8000b20 <__aeabi_dcmpgt>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d008      	beq.n	8008694 <printOutput_ANN+0x124>
			next_max = net->output[i];
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	69da      	ldr	r2, [r3, #28]
 8008686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	617b      	str	r3, [r7, #20]
 8008690:	e000      	b.n	8008694 <printOutput_ANN+0x124>
			continue;
 8008692:	bf00      	nop
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 8008694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008696:	3301      	adds	r3, #1
 8008698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	68da      	ldr	r2, [r3, #12]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80086a6:	3b01      	subs	r3, #1
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d8c3      	bhi.n	800863c <printOutput_ANN+0xcc>
		}
	}

	mean_output = (mean_output) / (count);
 80086b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b6:	ee07 3a90 	vmov	s15, r3
 80086ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80086be:	edd7 6a06 	vldr	s13, [r7, #24]
 80086c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086c6:	edc7 7a06 	vstr	s15, [r7, #24]

	rms_output = 0;
 80086ca:	f04f 0300 	mov.w	r3, #0
 80086ce:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 80086d0:	2300      	movs	r3, #0
 80086d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086d4:	e02c      	b.n	8008730 <printOutput_ANN+0x1c0>
		rms_output = rms_output + pow((net->output[i] - mean_output), 2);
 80086d6:	69f8      	ldr	r0, [r7, #28]
 80086d8:	f7f7 ff3a 	bl	8000550 <__aeabi_f2d>
 80086dc:	4604      	mov	r4, r0
 80086de:	460d      	mov	r5, r1
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	69da      	ldr	r2, [r3, #28]
 80086e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	ed93 7a00 	vldr	s14, [r3]
 80086ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80086f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086f6:	ee17 0a90 	vmov	r0, s15
 80086fa:	f7f7 ff29 	bl	8000550 <__aeabi_f2d>
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	ed9f 1b9b 	vldr	d1, [pc, #620]	@ 8008970 <printOutput_ANN+0x400>
 8008706:	ec43 2b10 	vmov	d0, r2, r3
 800870a:	f005 fbbd 	bl	800de88 <pow>
 800870e:	ec53 2b10 	vmov	r2, r3, d0
 8008712:	4620      	mov	r0, r4
 8008714:	4629      	mov	r1, r5
 8008716:	f7f7 fdbd 	bl	8000294 <__adddf3>
 800871a:	4602      	mov	r2, r0
 800871c:	460b      	mov	r3, r1
 800871e:	4610      	mov	r0, r2
 8008720:	4619      	mov	r1, r3
 8008722:	f7f8 fa45 	bl	8000bb0 <__aeabi_d2f>
 8008726:	4603      	mov	r3, r0
 8008728:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800872a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800872c:	3301      	adds	r3, #1
 800872e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	68da      	ldr	r2, [r3, #12]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800873c:	3b01      	subs	r3, #1
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008746:	429a      	cmp	r2, r3
 8008748:	d8c5      	bhi.n	80086d6 <printOutput_ANN+0x166>
	}

	rms_output = sqrt(rms_output / count);
 800874a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874c:	ee07 3a90 	vmov	s15, r3
 8008750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008754:	ed97 7a07 	vldr	s14, [r7, #28]
 8008758:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800875c:	ee16 0a90 	vmov	r0, s13
 8008760:	f7f7 fef6 	bl	8000550 <__aeabi_f2d>
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	ec43 2b10 	vmov	d0, r2, r3
 800876c:	f005 fbfc 	bl	800df68 <sqrt>
 8008770:	ec53 2b10 	vmov	r2, r3, d0
 8008774:	4610      	mov	r0, r2
 8008776:	4619      	mov	r1, r3
 8008778:	f7f8 fa1a 	bl	8000bb0 <__aeabi_d2f>
 800877c:	4603      	mov	r3, r0
 800877e:	61fb      	str	r3, [r7, #28]

	if (rms_output != 0) {
 8008780:	edd7 7a07 	vldr	s15, [r7, #28]
 8008784:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800878c:	d00c      	beq.n	80087a8 <printOutput_ANN+0x238>
		classification_metric = (point - mean_output) / rms_output;
 800878e:	ed97 7a08 	vldr	s14, [r7, #32]
 8008792:	edd7 7a06 	vldr	s15, [r7, #24]
 8008796:	ee77 6a67 	vsub.f32	s13, s14, s15
 800879a:	ed97 7a07 	vldr	s14, [r7, #28]
 800879e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087a2:	edc7 7a04 	vstr	s15, [r7, #16]
 80087a6:	e002      	b.n	80087ae <printOutput_ANN+0x23e>
	} else {
		classification_metric = 0;
 80087a8:	f04f 0300 	mov.w	r3, #0
 80087ac:	613b      	str	r3, [r7, #16]
	}

	if (loc != input_state) {
 80087ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d00b      	beq.n	80087ce <printOutput_ANN+0x25e>
		rms_output = 0;
 80087b6:	f04f 0300 	mov.w	r3, #0
 80087ba:	61fb      	str	r3, [r7, #28]
		classification_metric = 0;
 80087bc:	f04f 0300 	mov.w	r3, #0
 80087c0:	613b      	str	r3, [r7, #16]
		point = 0;
 80087c2:	f04f 0300 	mov.w	r3, #0
 80087c6:	623b      	str	r3, [r7, #32]
		mean_output = 0;
 80087c8:	f04f 0300 	mov.w	r3, #0
 80087cc:	61bb      	str	r3, [r7, #24]
	}
	if (loc > -1){
 80087ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	db03      	blt.n	80087dc <printOutput_ANN+0x26c>
		printf("State: %i",loc);
 80087d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087d6:	486a      	ldr	r0, [pc, #424]	@ (8008980 <printOutput_ANN+0x410>)
 80087d8:	f003 f85e 	bl	800b898 <iprintf>
	}
	if (loc == -1){
 80087dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087e2:	d102      	bne.n	80087ea <printOutput_ANN+0x27a>
		printf("State:  ");
 80087e4:	4867      	ldr	r0, [pc, #412]	@ (8008984 <printOutput_ANN+0x414>)
 80087e6:	f003 f857 	bl	800b898 <iprintf>
	}

	if (mean_output >= 0){
 80087ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80087ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80087f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f6:	db18      	blt.n	800882a <printOutput_ANN+0x2ba>
		printf(" Max: %0.1f Mean:  %0.1f Z: %0.1f ", loc, point, mean_output, classification_metric);
 80087f8:	6a38      	ldr	r0, [r7, #32]
 80087fa:	f7f7 fea9 	bl	8000550 <__aeabi_f2d>
 80087fe:	4680      	mov	r8, r0
 8008800:	4689      	mov	r9, r1
 8008802:	69b8      	ldr	r0, [r7, #24]
 8008804:	f7f7 fea4 	bl	8000550 <__aeabi_f2d>
 8008808:	4604      	mov	r4, r0
 800880a:	460d      	mov	r5, r1
 800880c:	6938      	ldr	r0, [r7, #16]
 800880e:	f7f7 fe9f 	bl	8000550 <__aeabi_f2d>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800881a:	e9cd 4500 	strd	r4, r5, [sp]
 800881e:	4642      	mov	r2, r8
 8008820:	464b      	mov	r3, r9
 8008822:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008824:	4858      	ldr	r0, [pc, #352]	@ (8008988 <printOutput_ANN+0x418>)
 8008826:	f003 f837 	bl	800b898 <iprintf>
	}
	if (mean_output < 0){
 800882a:	edd7 7a06 	vldr	s15, [r7, #24]
 800882e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008836:	d518      	bpl.n	800886a <printOutput_ANN+0x2fa>
		printf(" Max: %0.1f Mean: %0.1f Z: %0.1f ", loc, point, mean_output, classification_metric);
 8008838:	6a38      	ldr	r0, [r7, #32]
 800883a:	f7f7 fe89 	bl	8000550 <__aeabi_f2d>
 800883e:	4680      	mov	r8, r0
 8008840:	4689      	mov	r9, r1
 8008842:	69b8      	ldr	r0, [r7, #24]
 8008844:	f7f7 fe84 	bl	8000550 <__aeabi_f2d>
 8008848:	4604      	mov	r4, r0
 800884a:	460d      	mov	r5, r1
 800884c:	6938      	ldr	r0, [r7, #16]
 800884e:	f7f7 fe7f 	bl	8000550 <__aeabi_f2d>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800885a:	e9cd 4500 	strd	r4, r5, [sp]
 800885e:	4642      	mov	r2, r8
 8008860:	464b      	mov	r3, r9
 8008862:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008864:	4849      	ldr	r0, [pc, #292]	@ (800898c <printOutput_ANN+0x41c>)
 8008866:	f003 f817 	bl	800b898 <iprintf>
	}

	printf("Outputs: ");
 800886a:	4849      	ldr	r0, [pc, #292]	@ (8008990 <printOutput_ANN+0x420>)
 800886c:	f003 f814 	bl	800b898 <iprintf>
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 8008870:	2300      	movs	r3, #0
 8008872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008874:	e036      	b.n	80088e4 <printOutput_ANN+0x374>
		if (net->output[i] >= 0){
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	69da      	ldr	r2, [r3, #28]
 800887a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	edd3 7a00 	vldr	s15, [r3]
 8008884:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800888c:	db0d      	blt.n	80088aa <printOutput_ANN+0x33a>
			printf("  %0.1f", net->output[i]);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	69da      	ldr	r2, [r3, #28]
 8008892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4618      	mov	r0, r3
 800889c:	f7f7 fe58 	bl	8000550 <__aeabi_f2d>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	483b      	ldr	r0, [pc, #236]	@ (8008994 <printOutput_ANN+0x424>)
 80088a6:	f002 fff7 	bl	800b898 <iprintf>
		}
		if (net->output[i] < 0){
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	69da      	ldr	r2, [r3, #28]
 80088ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	edd3 7a00 	vldr	s15, [r3]
 80088b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088c0:	d50d      	bpl.n	80088de <printOutput_ANN+0x36e>
			printf(" %0.1f", net->output[i]);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	69da      	ldr	r2, [r3, #28]
 80088c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7f7 fe3e 	bl	8000550 <__aeabi_f2d>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	482f      	ldr	r0, [pc, #188]	@ (8008998 <printOutput_ANN+0x428>)
 80088da:	f002 ffdd 	bl	800b898 <iprintf>
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 80088de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e0:	3301      	adds	r3, #1
 80088e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	68da      	ldr	r2, [r3, #12]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80088f0:	3b01      	subs	r3, #1
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d8bb      	bhi.n	8008876 <printOutput_ANN+0x306>
		}
	}

	if (loc != input_state) {
 80088fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	429a      	cmp	r2, r3
 8008904:	d005      	beq.n	8008912 <printOutput_ANN+0x3a2>
		*error = 1;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	601a      	str	r2, [r3, #0]
		printf("\t Classification Error");
 800890c:	4823      	ldr	r0, [pc, #140]	@ (800899c <printOutput_ANN+0x42c>)
 800890e:	f002 ffc3 	bl	800b898 <iprintf>
	}

	if ((loc == input_state)
 8008912:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	429a      	cmp	r2, r3
 8008918:	d120      	bne.n	800895c <printOutput_ANN+0x3ec>
			&& ((classification_metric < CLASSIFICATION_ACC_THRESHOLD)
 800891a:	edd7 7a04 	vldr	s15, [r7, #16]
 800891e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008922:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800892a:	d411      	bmi.n	8008950 <printOutput_ANN+0x3e0>
					|| ((point / next_max) < CLASSIFICATION_DISC_THRESHOLD))) {
 800892c:	ed97 7a08 	vldr	s14, [r7, #32]
 8008930:	edd7 7a05 	vldr	s15, [r7, #20]
 8008934:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008938:	ee16 0a90 	vmov	r0, s13
 800893c:	f7f7 fe08 	bl	8000550 <__aeabi_f2d>
 8008940:	a30d      	add	r3, pc, #52	@ (adr r3, 8008978 <printOutput_ANN+0x408>)
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	f7f8 f8cd 	bl	8000ae4 <__aeabi_dcmplt>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d005      	beq.n	800895c <printOutput_ANN+0x3ec>
		*error = 1;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	601a      	str	r2, [r3, #0]
		printf("\t Classification Accuracy Limit");
 8008956:	4812      	ldr	r0, [pc, #72]	@ (80089a0 <printOutput_ANN+0x430>)
 8008958:	f002 ff9e 	bl	800b898 <iprintf>
	}
	printf("\n");
 800895c:	200a      	movs	r0, #10
 800895e:	f002 ffad 	bl	800b8bc <putchar>
}
 8008962:	bf00      	nop
 8008964:	3730      	adds	r7, #48	@ 0x30
 8008966:	46bd      	mov	sp, r7
 8008968:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800896c:	f3af 8000 	nop.w
 8008970:	00000000 	.word	0x00000000
 8008974:	40000000 	.word	0x40000000
 8008978:	cccccccd 	.word	0xcccccccd
 800897c:	3ff0cccc 	.word	0x3ff0cccc
 8008980:	0800eee4 	.word	0x0800eee4
 8008984:	0800eef0 	.word	0x0800eef0
 8008988:	0800eefc 	.word	0x0800eefc
 800898c:	0800ef20 	.word	0x0800ef20
 8008990:	0800ef44 	.word	0x0800ef44
 8008994:	0800ef50 	.word	0x0800ef50
 8008998:	0800ef58 	.word	0x0800ef58
 800899c:	0800ef60 	.word	0x0800ef60
 80089a0:	0800ef78 	.word	0x0800ef78
 80089a4:	9999999a 	.word	0x9999999a
 80089a8:	3fb99999 	.word	0x3fb99999
 80089ac:	00000000 	.word	0x00000000

080089b0 <Test_ANN_SM>:

int Test_ANN_SM(ANN *net, int prev_loc) {
 80089b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80089b4:	b096      	sub	sp, #88	@ 0x58
 80089b6:	af04      	add	r7, sp, #16
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	6039      	str	r1, [r7, #0]
	float sig_xyz[3];
	float feature_1, feature_2, feature_3, sig_mag_scale;
	int i, n, loc;
	int error;

	BSP_LED_Off(LED6);
 80089bc:	2000      	movs	r0, #0
 80089be:	f7f8 f9b7 	bl	8000d30 <BSP_LED_Off>
	BSP_LED_Off(LED7);
 80089c2:	2001      	movs	r0, #1
 80089c4:	f7f8 f9b4 	bl	8000d30 <BSP_LED_Off>

	printf("\nMove to Start Level Position While Red LED On - Wait for Green LED On");
 80089c8:	4889      	ldr	r0, [pc, #548]	@ (8008bf0 <Test_ANN_SM+0x240>)
 80089ca:	f002 ff65 	bl	800b898 <iprintf>

	Feature_Extraction_State_Machine(&feature_1, &feature_2, &feature_3,
 80089ce:	f107 0310 	add.w	r3, r7, #16
 80089d2:	f107 0214 	add.w	r2, r7, #20
 80089d6:	f107 0118 	add.w	r1, r7, #24
 80089da:	f107 001c 	add.w	r0, r7, #28
 80089de:	f7ff f87b 	bl	8007ad8 <Feature_Extraction_State_Machine>
			&sig_mag_scale);

	printf("Feature 1: %0.3f\t Feature 2: %0.3f\t Feature 3: %0.3f\n", feature_1, feature_2, feature_3);
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7f7 fdb3 	bl	8000550 <__aeabi_f2d>
 80089ea:	4680      	mov	r8, r0
 80089ec:	4689      	mov	r9, r1
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7f7 fdad 	bl	8000550 <__aeabi_f2d>
 80089f6:	4604      	mov	r4, r0
 80089f8:	460d      	mov	r5, r1
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7f7 fda7 	bl	8000550 <__aeabi_f2d>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a0a:	e9cd 4500 	strd	r4, r5, [sp]
 8008a0e:	4642      	mov	r2, r8
 8008a10:	464b      	mov	r3, r9
 8008a12:	4878      	ldr	r0, [pc, #480]	@ (8008bf4 <Test_ANN_SM+0x244>)
 8008a14:	f002 ff40 	bl	800b898 <iprintf>

	sig_xyz[0] = feature_1;
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	623b      	str	r3, [r7, #32]
	sig_xyz[1] = feature_2;
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	627b      	str	r3, [r7, #36]	@ 0x24
	sig_xyz[2] = feature_3;
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	62bb      	str	r3, [r7, #40]	@ 0x28

	motion_softmax(net->topology[0], sig_xyz, sig_xyz_norm);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008a30:	f107 0320 	add.w	r3, r7, #32
 8008a34:	4619      	mov	r1, r3
 8008a36:	f7ff faa9 	bl	8007f8c <motion_softmax>

	printf("\n Softmax Input \t");
 8008a3a:	486f      	ldr	r0, [pc, #444]	@ (8008bf8 <Test_ANN_SM+0x248>)
 8008a3c:	f002 ff2c 	bl	800b898 <iprintf>

	for (n = 0; n < 3; n++) {
 8008a40:	2300      	movs	r3, #0
 8008a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a44:	e010      	b.n	8008a68 <Test_ANN_SM+0xb8>
		printf("\t%0.1f", sig_xyz[n]);
 8008a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	3348      	adds	r3, #72	@ 0x48
 8008a4c:	443b      	add	r3, r7
 8008a4e:	3b28      	subs	r3, #40	@ 0x28
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7f7 fd7c 	bl	8000550 <__aeabi_f2d>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4867      	ldr	r0, [pc, #412]	@ (8008bfc <Test_ANN_SM+0x24c>)
 8008a5e:	f002 ff1b 	bl	800b898 <iprintf>
	for (n = 0; n < 3; n++) {
 8008a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a64:	3301      	adds	r3, #1
 8008a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	ddeb      	ble.n	8008a46 <Test_ANN_SM+0x96>
	}
	printf("\n Softmax Output\t");
 8008a6e:	4864      	ldr	r0, [pc, #400]	@ (8008c00 <Test_ANN_SM+0x250>)
 8008a70:	f002 ff12 	bl	800b898 <iprintf>

	for (n = 0; n < 3; n++) {
 8008a74:	2300      	movs	r3, #0
 8008a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a78:	e010      	b.n	8008a9c <Test_ANN_SM+0xec>
		printf("\t%0.3f", sig_xyz_norm[n]);
 8008a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	3348      	adds	r3, #72	@ 0x48
 8008a80:	443b      	add	r3, r7
 8008a82:	3b1c      	subs	r3, #28
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7f7 fd62 	bl	8000550 <__aeabi_f2d>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	485c      	ldr	r0, [pc, #368]	@ (8008c04 <Test_ANN_SM+0x254>)
 8008a92:	f002 ff01 	bl	800b898 <iprintf>
	for (n = 0; n < 3; n++) {
 8008a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a98:	3301      	adds	r3, #1
 8008a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	ddeb      	ble.n	8008a7a <Test_ANN_SM+0xca>

	}
	printf("\n\n");
 8008aa2:	4859      	ldr	r0, [pc, #356]	@ (8008c08 <Test_ANN_SM+0x258>)
 8008aa4:	f002 ff68 	bl	800b978 <puts>

	run_ann(net, sig_xyz_norm);
 8008aa8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008aac:	4619      	mov	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f001 faff 	bl	800a0b2 <run_ann>

	point = 0.0;
 8008ab4:	f04f 0300 	mov.w	r3, #0
 8008ab8:	647b      	str	r3, [r7, #68]	@ 0x44

	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 8008aba:	2300      	movs	r3, #0
 8008abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8008abe:	e02a      	b.n	8008b16 <Test_ANN_SM+0x166>
		if (net->output[i] > point && net->output[i] > 0.1) {
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	69da      	ldr	r2, [r3, #28]
 8008ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	edd3 7a00 	vldr	s15, [r3]
 8008ace:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8008ad2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ada:	d519      	bpl.n	8008b10 <Test_ANN_SM+0x160>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	69da      	ldr	r2, [r3, #28]
 8008ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7f7 fd31 	bl	8000550 <__aeabi_f2d>
 8008aee:	a33e      	add	r3, pc, #248	@ (adr r3, 8008be8 <Test_ANN_SM+0x238>)
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	f7f8 f814 	bl	8000b20 <__aeabi_dcmpgt>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d008      	beq.n	8008b10 <Test_ANN_SM+0x160>
			point = net->output[i];
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	69da      	ldr	r2, [r3, #28]
 8008b02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4413      	add	r3, r2
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	647b      	str	r3, [r7, #68]	@ 0x44
			loc = i;
 8008b0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 8008b10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b12:	3301      	adds	r3, #1
 8008b14:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68da      	ldr	r2, [r3, #12]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b22:	3b01      	subs	r3, #1
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4413      	add	r3, r2
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d8c7      	bhi.n	8008ac0 <Test_ANN_SM+0x110>
		}
	}

	if (error == 1){
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d102      	bne.n	8008b3c <Test_ANN_SM+0x18c>
		loc = -1;
 8008b36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	switch (loc) {
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3e:	3301      	adds	r3, #1
 8008b40:	2b06      	cmp	r3, #6
 8008b42:	d82d      	bhi.n	8008ba0 <Test_ANN_SM+0x1f0>
 8008b44:	a201      	add	r2, pc, #4	@ (adr r2, 8008b4c <Test_ANN_SM+0x19c>)
 8008b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4a:	bf00      	nop
 8008b4c:	08008b99 	.word	0x08008b99
 8008b50:	08008b69 	.word	0x08008b69
 8008b54:	08008b71 	.word	0x08008b71
 8008b58:	08008b79 	.word	0x08008b79
 8008b5c:	08008b81 	.word	0x08008b81
 8008b60:	08008b89 	.word	0x08008b89
 8008b64:	08008b91 	.word	0x08008b91
	case 0:
		printf("\n\rNeural Network Classification - Motion 1");
 8008b68:	4828      	ldr	r0, [pc, #160]	@ (8008c0c <Test_ANN_SM+0x25c>)
 8008b6a:	f002 fe95 	bl	800b898 <iprintf>
		break;
 8008b6e:	e01b      	b.n	8008ba8 <Test_ANN_SM+0x1f8>
	case 1:
		printf("\n\rNeural Network Classification - Motion 2");
 8008b70:	4827      	ldr	r0, [pc, #156]	@ (8008c10 <Test_ANN_SM+0x260>)
 8008b72:	f002 fe91 	bl	800b898 <iprintf>
		break;
 8008b76:	e017      	b.n	8008ba8 <Test_ANN_SM+0x1f8>
	case 2:
		printf("\n\rNeural Network Classification - Motion 3");
 8008b78:	4826      	ldr	r0, [pc, #152]	@ (8008c14 <Test_ANN_SM+0x264>)
 8008b7a:	f002 fe8d 	bl	800b898 <iprintf>
		break;
 8008b7e:	e013      	b.n	8008ba8 <Test_ANN_SM+0x1f8>
	case 3:
		printf("\n\rNeural Network Classification - Motion 4");
 8008b80:	4825      	ldr	r0, [pc, #148]	@ (8008c18 <Test_ANN_SM+0x268>)
 8008b82:	f002 fe89 	bl	800b898 <iprintf>
		break;
 8008b86:	e00f      	b.n	8008ba8 <Test_ANN_SM+0x1f8>
	case 4:
		printf("\n\rNeural Network Classification - Motion 5");
 8008b88:	4824      	ldr	r0, [pc, #144]	@ (8008c1c <Test_ANN_SM+0x26c>)
 8008b8a:	f002 fe85 	bl	800b898 <iprintf>
		break;
 8008b8e:	e00b      	b.n	8008ba8 <Test_ANN_SM+0x1f8>
	case 5:
		printf("\n\rNeural Network Classification - Motion 6");
 8008b90:	4823      	ldr	r0, [pc, #140]	@ (8008c20 <Test_ANN_SM+0x270>)
 8008b92:	f002 fe81 	bl	800b898 <iprintf>
		break;
 8008b96:	e007      	b.n	8008ba8 <Test_ANN_SM+0x1f8>
	case -1:
		printf("\n\rNeural Network Classification - ERROR");
 8008b98:	4822      	ldr	r0, [pc, #136]	@ (8008c24 <Test_ANN_SM+0x274>)
 8008b9a:	f002 fe7d 	bl	800b898 <iprintf>
		break;
 8008b9e:	e003      	b.n	8008ba8 <Test_ANN_SM+0x1f8>
	default:
		printf("\n\rNeural Network Classification - NULL");
 8008ba0:	4821      	ldr	r0, [pc, #132]	@ (8008c28 <Test_ANN_SM+0x278>)
 8008ba2:	f002 fe79 	bl	800b898 <iprintf>
		break;
 8008ba6:	bf00      	nop
	}

	printf("\n");
 8008ba8:	200a      	movs	r0, #10
 8008baa:	f002 fe87 	bl	800b8bc <putchar>

	print_Z_Score_ANN(net, loc, &error);
 8008bae:	f107 030c 	add.w	r3, r7, #12
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f7ff fb22 	bl	8008200 <print_Z_Score_ANN>

	if (loc == -1){
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bc2:	d103      	bne.n	8008bcc <Test_ANN_SM+0x21c>
		LED_Code_Blink_Red(0);
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	f7ff fa38 	bl	800803a <LED_Code_Blink_Red>
 8008bca:	e004      	b.n	8008bd6 <Test_ANN_SM+0x226>
	} else {
		LED_Code_Blink_Green(loc + 1);
 8008bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bce:	3301      	adds	r3, #1
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7ff fa84 	bl	80080de <LED_Code_Blink_Green>
	}

	return prev_loc;
 8008bd6:	683b      	ldr	r3, [r7, #0]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3748      	adds	r7, #72	@ 0x48
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008be2:	bf00      	nop
 8008be4:	f3af 8000 	nop.w
 8008be8:	9999999a 	.word	0x9999999a
 8008bec:	3fb99999 	.word	0x3fb99999
 8008bf0:	0800ef98 	.word	0x0800ef98
 8008bf4:	0800efe0 	.word	0x0800efe0
 8008bf8:	0800f018 	.word	0x0800f018
 8008bfc:	0800f02c 	.word	0x0800f02c
 8008c00:	0800f034 	.word	0x0800f034
 8008c04:	0800f048 	.word	0x0800f048
 8008c08:	0800f050 	.word	0x0800f050
 8008c0c:	0800f054 	.word	0x0800f054
 8008c10:	0800f080 	.word	0x0800f080
 8008c14:	0800f0ac 	.word	0x0800f0ac
 8008c18:	0800f0d8 	.word	0x0800f0d8
 8008c1c:	0800f104 	.word	0x0800f104
 8008c20:	0800f130 	.word	0x0800f130
 8008c24:	0800f15c 	.word	0x0800f15c
 8008c28:	0800f184 	.word	0x0800f184

08008c2c <TrainOrientation_SM>:


void TrainOrientation_SM(ANN *net) {
 8008c2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008c30:	f5ad 7d4e 	sub.w	sp, sp, #824	@ 0x338
 8008c34:	af04      	add	r7, sp, #16
 8008c36:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008c3a:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8008c3e:	6018      	str	r0, [r3, #0]
	int training_cycles;
	int i, j, k, m, n, error, net_error;
	float feature_1, feature_2, feature_3, sig_mag_scale;


	printf("\n\n\nTraining Start in 2 seconds ..");
 8008c40:	48a5      	ldr	r0, [pc, #660]	@ (8008ed8 <TrainOrientation_SM+0x2ac>)
 8008c42:	f002 fe29 	bl	800b898 <iprintf>
	BSP_LED_Off(LED6);
 8008c46:	2000      	movs	r0, #0
 8008c48:	f7f8 f872 	bl	8000d30 <BSP_LED_Off>
	BSP_LED_Off(LED7);
 8008c4c:	2001      	movs	r0, #1
 8008c4e:	f7f8 f86f 	bl	8000d30 <BSP_LED_Off>
	HAL_Delay(2000);
 8008c52:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8008c56:	f7fb fe61 	bl	800491c <HAL_Delay>

	/*
	 * Maximum of 8 cycles
	 */
	num_train_data_cycles = 1;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c

	for (k = 0; k < num_train_data_cycles; k++) {
 8008c60:	2300      	movs	r3, #0
 8008c62:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8008c66:	e179      	b.n	8008f5c <TrainOrientation_SM+0x330>
		for (i = 0; i < 6; i++) {
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 8008c6e:	e16b      	b.n	8008f48 <TrainOrientation_SM+0x31c>

			switch (i) {
 8008c70:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8008c74:	2b05      	cmp	r3, #5
 8008c76:	d866      	bhi.n	8008d46 <TrainOrientation_SM+0x11a>
 8008c78:	a201      	add	r2, pc, #4	@ (adr r2, 8008c80 <TrainOrientation_SM+0x54>)
 8008c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7e:	bf00      	nop
 8008c80:	08008c99 	.word	0x08008c99
 8008c84:	08008cbb 	.word	0x08008cbb
 8008c88:	08008cd7 	.word	0x08008cd7
 8008c8c:	08008cf3 	.word	0x08008cf3
 8008c90:	08008d0f 	.word	0x08008d0f
 8008c94:	08008d2b 	.word	0x08008d2b

			case 0:
				BSP_LED_On(LED6);
 8008c98:	2000      	movs	r0, #0
 8008c9a:	f7f8 f82b 	bl	8000cf4 <BSP_LED_On>
				printf("\n\nTrain Orientation 1");
 8008c9e:	488f      	ldr	r0, [pc, #572]	@ (8008edc <TrainOrientation_SM+0x2b0>)
 8008ca0:	f002 fdfa 	bl	800b898 <iprintf>
				Feature_Extraction_State_Machine(&feature_1, &feature_2, &feature_3,
 8008ca4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008ca8:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8008cac:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8008cb0:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8008cb4:	f7fe ff10 	bl	8007ad8 <Feature_Extraction_State_Machine>
						&sig_mag_scale);
				break;
 8008cb8:	e045      	b.n	8008d46 <TrainOrientation_SM+0x11a>

			case 1:

				printf("\n\nTrain Orientation 2");
 8008cba:	4889      	ldr	r0, [pc, #548]	@ (8008ee0 <TrainOrientation_SM+0x2b4>)
 8008cbc:	f002 fdec 	bl	800b898 <iprintf>
				Feature_Extraction_State_Machine(&feature_1, &feature_2, &feature_3,
 8008cc0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008cc4:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8008cc8:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8008ccc:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8008cd0:	f7fe ff02 	bl	8007ad8 <Feature_Extraction_State_Machine>
						&sig_mag_scale);
				break;
 8008cd4:	e037      	b.n	8008d46 <TrainOrientation_SM+0x11a>

			case 2:
				printf("\n\nTrain Orientation 3");
 8008cd6:	4883      	ldr	r0, [pc, #524]	@ (8008ee4 <TrainOrientation_SM+0x2b8>)
 8008cd8:	f002 fdde 	bl	800b898 <iprintf>
				Feature_Extraction_State_Machine(&feature_1, &feature_2, &feature_3,
 8008cdc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008ce0:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8008ce4:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8008ce8:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8008cec:	f7fe fef4 	bl	8007ad8 <Feature_Extraction_State_Machine>
						&sig_mag_scale);
				break;
 8008cf0:	e029      	b.n	8008d46 <TrainOrientation_SM+0x11a>

			case 3:
				printf("\n\nTrain Orientation 4");
 8008cf2:	487d      	ldr	r0, [pc, #500]	@ (8008ee8 <TrainOrientation_SM+0x2bc>)
 8008cf4:	f002 fdd0 	bl	800b898 <iprintf>
				Feature_Extraction_State_Machine(&feature_1, &feature_2, &feature_3,
 8008cf8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008cfc:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8008d00:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8008d04:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8008d08:	f7fe fee6 	bl	8007ad8 <Feature_Extraction_State_Machine>
						&sig_mag_scale);
				break;
 8008d0c:	e01b      	b.n	8008d46 <TrainOrientation_SM+0x11a>

			case 4:
				printf("\n\nTrain Orientation 5");
 8008d0e:	4877      	ldr	r0, [pc, #476]	@ (8008eec <TrainOrientation_SM+0x2c0>)
 8008d10:	f002 fdc2 	bl	800b898 <iprintf>
				Feature_Extraction_State_Machine(&feature_1, &feature_2, &feature_3,
 8008d14:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008d18:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8008d1c:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8008d20:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8008d24:	f7fe fed8 	bl	8007ad8 <Feature_Extraction_State_Machine>
						&sig_mag_scale);
				break;
 8008d28:	e00d      	b.n	8008d46 <TrainOrientation_SM+0x11a>

			case 5:
				printf("\n\nTrain Orientation 6");
 8008d2a:	4871      	ldr	r0, [pc, #452]	@ (8008ef0 <TrainOrientation_SM+0x2c4>)
 8008d2c:	f002 fdb4 	bl	800b898 <iprintf>
				Feature_Extraction_State_Machine(&feature_1, &feature_2, &feature_3,
 8008d30:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8008d34:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8008d38:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8008d3c:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8008d40:	f7fe feca 	bl	8007ad8 <Feature_Extraction_State_Machine>
						&sig_mag_scale);
				break;
 8008d44:	bf00      	nop
			}

			printf("Feature 1: %0.3f\t Feature 2: %0.3f\t Feature 3: %0.3f\n", feature_1, feature_2, feature_3);
 8008d46:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008d4a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7f7 fbfd 	bl	8000550 <__aeabi_f2d>
 8008d56:	4680      	mov	r8, r0
 8008d58:	4689      	mov	r9, r1
 8008d5a:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008d5e:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7f7 fbf3 	bl	8000550 <__aeabi_f2d>
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	460d      	mov	r5, r1
 8008d6e:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008d72:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7f7 fbe9 	bl	8000550 <__aeabi_f2d>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d86:	e9cd 4500 	strd	r4, r5, [sp]
 8008d8a:	4642      	mov	r2, r8
 8008d8c:	464b      	mov	r3, r9
 8008d8e:	4859      	ldr	r0, [pc, #356]	@ (8008ef4 <TrainOrientation_SM+0x2c8>)
 8008d90:	f002 fd82 	bl	800b898 <iprintf>


			sig_xyz[0] = feature_1;
 8008d94:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008d98:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008da2:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8008da6:	601a      	str	r2, [r3, #0]
			sig_xyz[1] = feature_2;
 8008da8:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008dac:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008db6:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8008dba:	605a      	str	r2, [r3, #4]
			sig_xyz[2] = feature_3;
 8008dbc:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008dc0:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008dca:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8008dce:	609a      	str	r2, [r3, #8]

			motion_softmax(net->topology[0], sig_xyz, sig_xyz_norm);
 8008dd0:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008dd4:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8008de4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8008de8:	4619      	mov	r1, r3
 8008dea:	f7ff f8cf 	bl	8007f8c <motion_softmax>

			training_dataset[i][k][0] = sig_xyz_norm[0];
 8008dee:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008df2:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8008df6:	6818      	ldr	r0, [r3, #0]
 8008df8:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008dfc:	f5a3 7418 	sub.w	r4, r3, #608	@ 0x260
 8008e00:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8008e04:	f8d7 1324 	ldr.w	r1, [r7, #804]	@ 0x324
 8008e08:	461a      	mov	r2, r3
 8008e0a:	0052      	lsls	r2, r2, #1
 8008e0c:	441a      	add	r2, r3
 8008e0e:	0093      	lsls	r3, r2, #2
 8008e10:	461a      	mov	r2, r3
 8008e12:	460b      	mov	r3, r1
 8008e14:	005b      	lsls	r3, r3, #1
 8008e16:	440b      	add	r3, r1
 8008e18:	015b      	lsls	r3, r3, #5
 8008e1a:	4413      	add	r3, r2
 8008e1c:	4423      	add	r3, r4
 8008e1e:	6018      	str	r0, [r3, #0]
			training_dataset[i][k][1] = sig_xyz_norm[1];
 8008e20:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008e24:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8008e28:	6858      	ldr	r0, [r3, #4]
 8008e2a:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008e2e:	f5a3 7418 	sub.w	r4, r3, #608	@ 0x260
 8008e32:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8008e36:	f8d7 1324 	ldr.w	r1, [r7, #804]	@ 0x324
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	0052      	lsls	r2, r2, #1
 8008e3e:	441a      	add	r2, r3
 8008e40:	0093      	lsls	r3, r2, #2
 8008e42:	461a      	mov	r2, r3
 8008e44:	460b      	mov	r3, r1
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	440b      	add	r3, r1
 8008e4a:	015b      	lsls	r3, r3, #5
 8008e4c:	4413      	add	r3, r2
 8008e4e:	4423      	add	r3, r4
 8008e50:	3304      	adds	r3, #4
 8008e52:	6018      	str	r0, [r3, #0]
			training_dataset[i][k][2] = sig_xyz_norm[2];
 8008e54:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008e58:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8008e5c:	6898      	ldr	r0, [r3, #8]
 8008e5e:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008e62:	f5a3 7418 	sub.w	r4, r3, #608	@ 0x260
 8008e66:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8008e6a:	f8d7 1324 	ldr.w	r1, [r7, #804]	@ 0x324
 8008e6e:	461a      	mov	r2, r3
 8008e70:	0052      	lsls	r2, r2, #1
 8008e72:	441a      	add	r2, r3
 8008e74:	0093      	lsls	r3, r2, #2
 8008e76:	461a      	mov	r2, r3
 8008e78:	460b      	mov	r3, r1
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	440b      	add	r3, r1
 8008e7e:	015b      	lsls	r3, r3, #5
 8008e80:	4413      	add	r3, r2
 8008e82:	4423      	add	r3, r4
 8008e84:	3308      	adds	r3, #8
 8008e86:	6018      	str	r0, [r3, #0]

			printf("\n Softmax Input \t");
 8008e88:	481b      	ldr	r0, [pc, #108]	@ (8008ef8 <TrainOrientation_SM+0x2cc>)
 8008e8a:	f002 fd05 	bl	800b898 <iprintf>

			for (n = 0; n < 3; n++) {
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 8008e94:	e015      	b.n	8008ec2 <TrainOrientation_SM+0x296>
				printf("\t%0.1f", sig_xyz[n]);
 8008e96:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008e9a:	f5a3 721b 	sub.w	r2, r3, #620	@ 0x26c
 8008e9e:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7f7 fb51 	bl	8000550 <__aeabi_f2d>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4812      	ldr	r0, [pc, #72]	@ (8008efc <TrainOrientation_SM+0x2d0>)
 8008eb4:	f002 fcf0 	bl	800b898 <iprintf>
			for (n = 0; n < 3; n++) {
 8008eb8:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 8008ec2:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	dde5      	ble.n	8008e96 <TrainOrientation_SM+0x26a>
			}
			printf("\n Softmax Output\t");
 8008eca:	480d      	ldr	r0, [pc, #52]	@ (8008f00 <TrainOrientation_SM+0x2d4>)
 8008ecc:	f002 fce4 	bl	800b898 <iprintf>

			for (n = 0; n < 3; n++) {
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 8008ed6:	e02b      	b.n	8008f30 <TrainOrientation_SM+0x304>
 8008ed8:	0800f1ac 	.word	0x0800f1ac
 8008edc:	0800f1d0 	.word	0x0800f1d0
 8008ee0:	0800f1e8 	.word	0x0800f1e8
 8008ee4:	0800f200 	.word	0x0800f200
 8008ee8:	0800f218 	.word	0x0800f218
 8008eec:	0800f230 	.word	0x0800f230
 8008ef0:	0800f248 	.word	0x0800f248
 8008ef4:	0800efe0 	.word	0x0800efe0
 8008ef8:	0800f018 	.word	0x0800f018
 8008efc:	0800f02c 	.word	0x0800f02c
 8008f00:	0800f034 	.word	0x0800f034
				printf("\t%0.3f", sig_xyz_norm[n]);
 8008f04:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008f08:	f5a3 721e 	sub.w	r2, r3, #632	@ 0x278
 8008f0c:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7f7 fb1a 	bl	8000550 <__aeabi_f2d>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	48b1      	ldr	r0, [pc, #708]	@ (80091e8 <TrainOrientation_SM+0x5bc>)
 8008f22:	f002 fcb9 	bl	800b898 <iprintf>
			for (n = 0; n < 3; n++) {
 8008f26:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 8008f30:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	dde5      	ble.n	8008f04 <TrainOrientation_SM+0x2d8>

			}
			printf("\n\n");
 8008f38:	48ac      	ldr	r0, [pc, #688]	@ (80091ec <TrainOrientation_SM+0x5c0>)
 8008f3a:	f002 fd1d 	bl	800b978 <puts>
		for (i = 0; i < 6; i++) {
 8008f3e:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8008f42:	3301      	adds	r3, #1
 8008f44:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 8008f48:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8008f4c:	2b05      	cmp	r3, #5
 8008f4e:	f77f ae8f 	ble.w	8008c70 <TrainOrientation_SM+0x44>
	for (k = 0; k < num_train_data_cycles; k++) {
 8008f52:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8008f56:	3301      	adds	r3, #1
 8008f58:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8008f5c:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 8008f60:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8008f64:	429a      	cmp	r2, r3
 8008f66:	f6ff ae7f 	blt.w	8008c68 <TrainOrientation_SM+0x3c>

	/*
	 * Enter NN training
	 */

	float Motion_1[6] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
 8008f6a:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008f6e:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8008f72:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008f76:	601a      	str	r2, [r3, #0]
 8008f78:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008f7c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8008f80:	f04f 0200 	mov.w	r2, #0
 8008f84:	605a      	str	r2, [r3, #4]
 8008f86:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008f8a:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8008f8e:	f04f 0200 	mov.w	r2, #0
 8008f92:	609a      	str	r2, [r3, #8]
 8008f94:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008f98:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8008f9c:	f04f 0200 	mov.w	r2, #0
 8008fa0:	60da      	str	r2, [r3, #12]
 8008fa2:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008fa6:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8008faa:	f04f 0200 	mov.w	r2, #0
 8008fae:	611a      	str	r2, [r3, #16]
 8008fb0:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008fb4:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8008fb8:	f04f 0200 	mov.w	r2, #0
 8008fbc:	615a      	str	r2, [r3, #20]
	float Motion_2[6] = { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 };
 8008fbe:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008fc2:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8008fc6:	f04f 0200 	mov.w	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]
 8008fcc:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008fd0:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8008fd4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008fd8:	605a      	str	r2, [r3, #4]
 8008fda:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008fde:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8008fe2:	f04f 0200 	mov.w	r2, #0
 8008fe6:	609a      	str	r2, [r3, #8]
 8008fe8:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008fec:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8008ff0:	f04f 0200 	mov.w	r2, #0
 8008ff4:	60da      	str	r2, [r3, #12]
 8008ff6:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8008ffa:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8008ffe:	f04f 0200 	mov.w	r2, #0
 8009002:	611a      	str	r2, [r3, #16]
 8009004:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8009008:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 800900c:	f04f 0200 	mov.w	r2, #0
 8009010:	615a      	str	r2, [r3, #20]
	float Motion_3[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 };
 8009012:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8009016:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 800901a:	f04f 0200 	mov.w	r2, #0
 800901e:	601a      	str	r2, [r3, #0]
 8009020:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8009024:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8009028:	f04f 0200 	mov.w	r2, #0
 800902c:	605a      	str	r2, [r3, #4]
 800902e:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8009032:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8009036:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800903a:	609a      	str	r2, [r3, #8]
 800903c:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8009040:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8009044:	f04f 0200 	mov.w	r2, #0
 8009048:	60da      	str	r2, [r3, #12]
 800904a:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800904e:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8009052:	f04f 0200 	mov.w	r2, #0
 8009056:	611a      	str	r2, [r3, #16]
 8009058:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800905c:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8009060:	f04f 0200 	mov.w	r2, #0
 8009064:	615a      	str	r2, [r3, #20]
	float Motion_4[6] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 };
 8009066:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800906a:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 800906e:	f04f 0200 	mov.w	r2, #0
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8009078:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 800907c:	f04f 0200 	mov.w	r2, #0
 8009080:	605a      	str	r2, [r3, #4]
 8009082:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8009086:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 800908a:	f04f 0200 	mov.w	r2, #0
 800908e:	609a      	str	r2, [r3, #8]
 8009090:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8009094:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8009098:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800909c:	60da      	str	r2, [r3, #12]
 800909e:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80090a2:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	611a      	str	r2, [r3, #16]
 80090ac:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80090b0:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80090b4:	f04f 0200 	mov.w	r2, #0
 80090b8:	615a      	str	r2, [r3, #20]
	float Motion_5[6] = { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 };
 80090ba:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80090be:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80090c2:	f04f 0200 	mov.w	r2, #0
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80090cc:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80090d0:	f04f 0200 	mov.w	r2, #0
 80090d4:	605a      	str	r2, [r3, #4]
 80090d6:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80090da:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80090de:	f04f 0200 	mov.w	r2, #0
 80090e2:	609a      	str	r2, [r3, #8]
 80090e4:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80090e8:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80090ec:	f04f 0200 	mov.w	r2, #0
 80090f0:	60da      	str	r2, [r3, #12]
 80090f2:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80090f6:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80090fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80090fe:	611a      	str	r2, [r3, #16]
 8009100:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8009104:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8009108:	f04f 0200 	mov.w	r2, #0
 800910c:	615a      	str	r2, [r3, #20]
	float Motion_6[6] = { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };
 800910e:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8009112:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8009116:	f04f 0200 	mov.w	r2, #0
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8009120:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8009124:	f04f 0200 	mov.w	r2, #0
 8009128:	605a      	str	r2, [r3, #4]
 800912a:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800912e:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8009132:	f04f 0200 	mov.w	r2, #0
 8009136:	609a      	str	r2, [r3, #8]
 8009138:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800913c:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8009140:	f04f 0200 	mov.w	r2, #0
 8009144:	60da      	str	r2, [r3, #12]
 8009146:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800914a:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 800914e:	f04f 0200 	mov.w	r2, #0
 8009152:	611a      	str	r2, [r3, #16]
 8009154:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8009158:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 800915c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009160:	615a      	str	r2, [r3, #20]

	printf("\n\nTraining Start\n");
 8009162:	4823      	ldr	r0, [pc, #140]	@ (80091f0 <TrainOrientation_SM+0x5c4>)
 8009164:	f002 fc08 	bl	800b978 <puts>

	training_cycles = TRAINING_CYCLES;
 8009168:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800916c:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

	for (k = 0; k < num_train_data_cycles; k++) {
 8009170:	2300      	movs	r3, #0
 8009172:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8009176:	e15a      	b.n	800942e <TrainOrientation_SM+0x802>

		i = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
		while (i < training_cycles) {
 800917e:	e14a      	b.n	8009416 <TrainOrientation_SM+0x7ea>
			for (j = 0; j < 6; j++) {
 8009180:	2300      	movs	r3, #0
 8009182:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 8009186:	e141      	b.n	800940c <TrainOrientation_SM+0x7e0>

				if ((i % 20 == 0 && i < 100) || i % 100 == 0) {
 8009188:	f8d7 1324 	ldr.w	r1, [r7, #804]	@ 0x324
 800918c:	4b19      	ldr	r3, [pc, #100]	@ (80091f4 <TrainOrientation_SM+0x5c8>)
 800918e:	fb83 2301 	smull	r2, r3, r3, r1
 8009192:	10da      	asrs	r2, r3, #3
 8009194:	17cb      	asrs	r3, r1, #31
 8009196:	1ad2      	subs	r2, r2, r3
 8009198:	4613      	mov	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	1aca      	subs	r2, r1, r3
 80091a2:	2a00      	cmp	r2, #0
 80091a4:	d103      	bne.n	80091ae <TrainOrientation_SM+0x582>
 80091a6:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 80091aa:	2b63      	cmp	r3, #99	@ 0x63
 80091ac:	dd0d      	ble.n	80091ca <TrainOrientation_SM+0x59e>
 80091ae:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 80091b2:	4b11      	ldr	r3, [pc, #68]	@ (80091f8 <TrainOrientation_SM+0x5cc>)
 80091b4:	fb83 1302 	smull	r1, r3, r3, r2
 80091b8:	1159      	asrs	r1, r3, #5
 80091ba:	17d3      	asrs	r3, r2, #31
 80091bc:	1acb      	subs	r3, r1, r3
 80091be:	2164      	movs	r1, #100	@ 0x64
 80091c0:	fb01 f303 	mul.w	r3, r1, r3
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d15b      	bne.n	8009282 <TrainOrientation_SM+0x656>
					printf("\n\nTraining Epochs: %i\n", i);
 80091ca:	f8d7 1324 	ldr.w	r1, [r7, #804]	@ 0x324
 80091ce:	480b      	ldr	r0, [pc, #44]	@ (80091fc <TrainOrientation_SM+0x5d0>)
 80091d0:	f002 fb62 	bl	800b898 <iprintf>

					LED_Code_Blink_Green(0);
 80091d4:	2000      	movs	r0, #0
 80091d6:	f7fe ff82 	bl	80080de <LED_Code_Blink_Green>

					net_error = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
					for (m = 0; m < 6; m++) {
 80091e0:	2300      	movs	r3, #0
 80091e2:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
 80091e6:	e03e      	b.n	8009266 <TrainOrientation_SM+0x63a>
 80091e8:	0800f048 	.word	0x0800f048
 80091ec:	0800f050 	.word	0x0800f050
 80091f0:	0800f260 	.word	0x0800f260
 80091f4:	66666667 	.word	0x66666667
 80091f8:	51eb851f 	.word	0x51eb851f
 80091fc:	0800f274 	.word	0x0800f274
						run_ann(net, training_dataset[m][k]);
 8009200:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 8009204:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8009208:	461a      	mov	r2, r3
 800920a:	0052      	lsls	r2, r2, #1
 800920c:	441a      	add	r2, r3
 800920e:	0093      	lsls	r3, r2, #2
 8009210:	461a      	mov	r2, r3
 8009212:	f8d7 1318 	ldr.w	r1, [r7, #792]	@ 0x318
 8009216:	460b      	mov	r3, r1
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	440b      	add	r3, r1
 800921c:	015b      	lsls	r3, r3, #5
 800921e:	4413      	add	r3, r2
 8009220:	18c2      	adds	r2, r0, r3
 8009222:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8009226:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 800922a:	4611      	mov	r1, r2
 800922c:	6818      	ldr	r0, [r3, #0]
 800922e:	f000 ff40 	bl	800a0b2 <run_ann>
						printOutput_ANN(net, m, &error);
 8009232:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8009236:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800923a:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 800923e:	f8d7 1318 	ldr.w	r1, [r7, #792]	@ 0x318
 8009242:	6818      	ldr	r0, [r3, #0]
 8009244:	f7ff f994 	bl	8008570 <printOutput_ANN>
						if (error == 1) {
 8009248:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800924c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d102      	bne.n	800925c <TrainOrientation_SM+0x630>
							net_error = 1;
 8009256:	2301      	movs	r3, #1
 8009258:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
					for (m = 0; m < 6; m++) {
 800925c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8009260:	3301      	adds	r3, #1
 8009262:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
 8009266:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800926a:	2b05      	cmp	r3, #5
 800926c:	ddc8      	ble.n	8009200 <TrainOrientation_SM+0x5d4>
						}
					}
					printf("\nError State: %i\n", net_error);
 800926e:	f8d7 1310 	ldr.w	r1, [r7, #784]	@ 0x310
 8009272:	4880      	ldr	r0, [pc, #512]	@ (8009474 <TrainOrientation_SM+0x848>)
 8009274:	f002 fb10 	bl	800b898 <iprintf>

					if (net_error == 0) {
 8009278:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 80f2 	beq.w	8009466 <TrainOrientation_SM+0x83a>
						return;
					}

				}

				switch (j) {
 8009282:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8009286:	2b05      	cmp	r3, #5
 8009288:	f200 80b2 	bhi.w	80093f0 <TrainOrientation_SM+0x7c4>
 800928c:	a201      	add	r2, pc, #4	@ (adr r2, 8009294 <TrainOrientation_SM+0x668>)
 800928e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009292:	bf00      	nop
 8009294:	080092ad 	.word	0x080092ad
 8009298:	080092e3 	.word	0x080092e3
 800929c:	08009319 	.word	0x08009319
 80092a0:	0800934f 	.word	0x0800934f
 80092a4:	08009385 	.word	0x08009385
 80092a8:	080093bb 	.word	0x080093bb

				case 0:
					train_ann(net, training_dataset[j][k], Motion_1);
 80092ac:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 80092b0:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 80092b4:	461a      	mov	r2, r3
 80092b6:	0052      	lsls	r2, r2, #1
 80092b8:	441a      	add	r2, r3
 80092ba:	0093      	lsls	r3, r2, #2
 80092bc:	461a      	mov	r2, r3
 80092be:	f8d7 1320 	ldr.w	r1, [r7, #800]	@ 0x320
 80092c2:	460b      	mov	r3, r1
 80092c4:	005b      	lsls	r3, r3, #1
 80092c6:	440b      	add	r3, r1
 80092c8:	015b      	lsls	r3, r3, #5
 80092ca:	4413      	add	r3, r2
 80092cc:	18c1      	adds	r1, r0, r3
 80092ce:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 80092d2:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80092d6:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80092da:	6818      	ldr	r0, [r3, #0]
 80092dc:	f000 fd87 	bl	8009dee <train_ann>
					break;
 80092e0:	e087      	b.n	80093f2 <TrainOrientation_SM+0x7c6>
				case 1:
					train_ann(net, training_dataset[j][k], Motion_2);
 80092e2:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 80092e6:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 80092ea:	461a      	mov	r2, r3
 80092ec:	0052      	lsls	r2, r2, #1
 80092ee:	441a      	add	r2, r3
 80092f0:	0093      	lsls	r3, r2, #2
 80092f2:	461a      	mov	r2, r3
 80092f4:	f8d7 1320 	ldr.w	r1, [r7, #800]	@ 0x320
 80092f8:	460b      	mov	r3, r1
 80092fa:	005b      	lsls	r3, r3, #1
 80092fc:	440b      	add	r3, r1
 80092fe:	015b      	lsls	r3, r3, #5
 8009300:	4413      	add	r3, r2
 8009302:	18c1      	adds	r1, r0, r3
 8009304:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8009308:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800930c:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8009310:	6818      	ldr	r0, [r3, #0]
 8009312:	f000 fd6c 	bl	8009dee <train_ann>
					break;
 8009316:	e06c      	b.n	80093f2 <TrainOrientation_SM+0x7c6>
				case 2:
					train_ann(net, training_dataset[j][k], Motion_3);
 8009318:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 800931c:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8009320:	461a      	mov	r2, r3
 8009322:	0052      	lsls	r2, r2, #1
 8009324:	441a      	add	r2, r3
 8009326:	0093      	lsls	r3, r2, #2
 8009328:	461a      	mov	r2, r3
 800932a:	f8d7 1320 	ldr.w	r1, [r7, #800]	@ 0x320
 800932e:	460b      	mov	r3, r1
 8009330:	005b      	lsls	r3, r3, #1
 8009332:	440b      	add	r3, r1
 8009334:	015b      	lsls	r3, r3, #5
 8009336:	4413      	add	r3, r2
 8009338:	18c1      	adds	r1, r0, r3
 800933a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800933e:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8009342:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8009346:	6818      	ldr	r0, [r3, #0]
 8009348:	f000 fd51 	bl	8009dee <train_ann>
					break;
 800934c:	e051      	b.n	80093f2 <TrainOrientation_SM+0x7c6>
				case 3:
					train_ann(net, training_dataset[j][k], Motion_4);
 800934e:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 8009352:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8009356:	461a      	mov	r2, r3
 8009358:	0052      	lsls	r2, r2, #1
 800935a:	441a      	add	r2, r3
 800935c:	0093      	lsls	r3, r2, #2
 800935e:	461a      	mov	r2, r3
 8009360:	f8d7 1320 	ldr.w	r1, [r7, #800]	@ 0x320
 8009364:	460b      	mov	r3, r1
 8009366:	005b      	lsls	r3, r3, #1
 8009368:	440b      	add	r3, r1
 800936a:	015b      	lsls	r3, r3, #5
 800936c:	4413      	add	r3, r2
 800936e:	18c1      	adds	r1, r0, r3
 8009370:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8009374:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8009378:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 800937c:	6818      	ldr	r0, [r3, #0]
 800937e:	f000 fd36 	bl	8009dee <train_ann>
					break;
 8009382:	e036      	b.n	80093f2 <TrainOrientation_SM+0x7c6>
				case 4:
					train_ann(net, training_dataset[j][k], Motion_5);
 8009384:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 8009388:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 800938c:	461a      	mov	r2, r3
 800938e:	0052      	lsls	r2, r2, #1
 8009390:	441a      	add	r2, r3
 8009392:	0093      	lsls	r3, r2, #2
 8009394:	461a      	mov	r2, r3
 8009396:	f8d7 1320 	ldr.w	r1, [r7, #800]	@ 0x320
 800939a:	460b      	mov	r3, r1
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	440b      	add	r3, r1
 80093a0:	015b      	lsls	r3, r3, #5
 80093a2:	4413      	add	r3, r2
 80093a4:	18c1      	adds	r1, r0, r3
 80093a6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80093aa:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80093ae:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80093b2:	6818      	ldr	r0, [r3, #0]
 80093b4:	f000 fd1b 	bl	8009dee <train_ann>
					break;
 80093b8:	e01b      	b.n	80093f2 <TrainOrientation_SM+0x7c6>
				case 5:
					train_ann(net, training_dataset[j][k], Motion_6);
 80093ba:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 80093be:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 80093c2:	461a      	mov	r2, r3
 80093c4:	0052      	lsls	r2, r2, #1
 80093c6:	441a      	add	r2, r3
 80093c8:	0093      	lsls	r3, r2, #2
 80093ca:	461a      	mov	r2, r3
 80093cc:	f8d7 1320 	ldr.w	r1, [r7, #800]	@ 0x320
 80093d0:	460b      	mov	r3, r1
 80093d2:	005b      	lsls	r3, r3, #1
 80093d4:	440b      	add	r3, r1
 80093d6:	015b      	lsls	r3, r3, #5
 80093d8:	4413      	add	r3, r2
 80093da:	18c1      	adds	r1, r0, r3
 80093dc:	f107 020c 	add.w	r2, r7, #12
 80093e0:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80093e4:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	f000 fd00 	bl	8009dee <train_ann>
					break;
 80093ee:	e000      	b.n	80093f2 <TrainOrientation_SM+0x7c6>
				default:
					break;
 80093f0:	bf00      	nop
				}
				i++;
 80093f2:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 80093f6:	3301      	adds	r3, #1
 80093f8:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
				HAL_Delay(5);
 80093fc:	2005      	movs	r0, #5
 80093fe:	f7fb fa8d 	bl	800491c <HAL_Delay>
			for (j = 0; j < 6; j++) {
 8009402:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8009406:	3301      	adds	r3, #1
 8009408:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 800940c:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8009410:	2b05      	cmp	r3, #5
 8009412:	f77f aeb9 	ble.w	8009188 <TrainOrientation_SM+0x55c>
		while (i < training_cycles) {
 8009416:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 800941a:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 800941e:	429a      	cmp	r2, r3
 8009420:	f6ff aeae 	blt.w	8009180 <TrainOrientation_SM+0x554>
	for (k = 0; k < num_train_data_cycles; k++) {
 8009424:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8009428:	3301      	adds	r3, #1
 800942a:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 800942e:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 8009432:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8009436:	429a      	cmp	r2, r3
 8009438:	f6ff ae9e 	blt.w	8009178 <TrainOrientation_SM+0x54c>

		}

	}

	if (net_error == 0){
 800943c:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8009440:	2b00      	cmp	r3, #0
 8009442:	d106      	bne.n	8009452 <TrainOrientation_SM+0x826>
		LED_Code_Blink_Green(0);
 8009444:	2000      	movs	r0, #0
 8009446:	f7fe fe4a 	bl	80080de <LED_Code_Blink_Green>
		LED_Code_Blink_Green(0);
 800944a:	2000      	movs	r0, #0
 800944c:	f7fe fe47 	bl	80080de <LED_Code_Blink_Green>
 8009450:	e005      	b.n	800945e <TrainOrientation_SM+0x832>
	} else {
		LED_Code_Blink_Red(1);
 8009452:	2001      	movs	r0, #1
 8009454:	f7fe fdf1 	bl	800803a <LED_Code_Blink_Red>
		LED_Code_Blink_Red(1);
 8009458:	2001      	movs	r0, #1
 800945a:	f7fe fdee 	bl	800803a <LED_Code_Blink_Red>
	}

	printf("\n\nTraining Complete, Now Start Test Motions\n");
 800945e:	4806      	ldr	r0, [pc, #24]	@ (8009478 <TrainOrientation_SM+0x84c>)
 8009460:	f002 fa8a 	bl	800b978 <puts>
	return;
 8009464:	e000      	b.n	8009468 <TrainOrientation_SM+0x83c>
						return;
 8009466:	bf00      	nop
}
 8009468:	f507 774a 	add.w	r7, r7, #808	@ 0x328
 800946c:	46bd      	mov	sp, r7
 800946e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009472:	bf00      	nop
 8009474:	0800f28c 	.word	0x0800f28c
 8009478:	0800f2a0 	.word	0x0800f2a0

0800947c <BP_ANN>:
	printf("%0.3f\t%0.3f\n", net->output[0], net->output[1]);
}



void BP_ANN(ANN *net, float *input, float *output, float *weights, float *velocity, float *bias, float *delta, int depth){
 800947c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009480:	ed2d 8b02 	vpush	{d8}
 8009484:	b0af      	sub	sp, #188	@ 0xbc
 8009486:	af04      	add	r7, sp, #16
 8009488:	6578      	str	r0, [r7, #84]	@ 0x54
 800948a:	6539      	str	r1, [r7, #80]	@ 0x50
 800948c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800948e:	64bb      	str	r3, [r7, #72]	@ 0x48
	unsigned int i,j;
	unsigned int DIM[2] = {net->topology[net->n_layers - depth], net->topology[net->n_layers - depth - 1]};
 8009490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009492:	68d9      	ldr	r1, [r3, #12]
 8009494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009496:	691a      	ldr	r2, [r3, #16]
 8009498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	440b      	add	r3, r1
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80094a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094a8:	68d9      	ldr	r1, [r3, #12]
 80094aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094ac:	691a      	ldr	r2, [r3, #16]
 80094ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80094b8:	3b01      	subs	r3, #1
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	440b      	add	r3, r1
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	663b      	str	r3, [r7, #96]	@ 0x60

	if(depth == 1){
 80094c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	f040 8185 	bne.w	80097d6 <BP_ANN+0x35a>
 80094cc:	466b      	mov	r3, sp
 80094ce:	461d      	mov	r5, r3
		for(i = 0; i < DIM[0]; i++){
 80094d0:	2300      	movs	r3, #0
 80094d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80094d6:	e0c4      	b.n	8009662 <BP_ANN+0x1e6>
			net->output[i] = 0.0;
 80094d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094da:	69da      	ldr	r2, [r3, #28]
 80094dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	f04f 0200 	mov.w	r2, #0
 80094e8:	601a      	str	r2, [r3, #0]
			for(j = 0; j < DIM[1]; j++){
 80094ea:	2300      	movs	r3, #0
 80094ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80094f0:	e02c      	b.n	800954c <BP_ANN+0xd0>
				net->output[i] += weights[(DIM[1]*i)+j]*input[j];
 80094f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094f4:	69da      	ldr	r2, [r3, #28]
 80094f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	ed93 7a00 	vldr	s14, [r3]
 8009502:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009504:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8009508:	fb03 f202 	mul.w	r2, r3, r2
 800950c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009510:	4413      	add	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009516:	4413      	add	r3, r2
 8009518:	edd3 6a00 	vldr	s13, [r3]
 800951c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009524:	4413      	add	r3, r2
 8009526:	edd3 7a00 	vldr	s15, [r3]
 800952a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800952e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009530:	69da      	ldr	r2, [r3, #28]
 8009532:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800953e:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM[1]; j++){
 8009542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009546:	3301      	adds	r3, #1
 8009548:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800954c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800954e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8009552:	429a      	cmp	r2, r3
 8009554:	d3cd      	bcc.n	80094f2 <BP_ANN+0x76>
			}
			net->output[i] = net->output[i] + bias[i];
 8009556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009558:	69da      	ldr	r2, [r3, #28]
 800955a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	ed93 7a00 	vldr	s14, [r3]
 8009566:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009570:	4413      	add	r3, r2
 8009572:	edd3 7a00 	vldr	s15, [r3]
 8009576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009578:	69da      	ldr	r2, [r3, #28]
 800957a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4413      	add	r3, r2
 8009582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009586:	edc3 7a00 	vstr	s15, [r3]
			delta[i] = (output[i]-net->output_activation_function(net->output[i])) * net->output_activation_derivative(net->output[i]);
 800958a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009592:	4413      	add	r3, r2
 8009594:	ed93 8a00 	vldr	s16, [r3]
 8009598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800959a:	6a1b      	ldr	r3, [r3, #32]
 800959c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800959e:	69d1      	ldr	r1, [r2, #28]
 80095a0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80095a4:	0092      	lsls	r2, r2, #2
 80095a6:	440a      	add	r2, r1
 80095a8:	edd2 7a00 	vldr	s15, [r2]
 80095ac:	eeb0 0a67 	vmov.f32	s0, s15
 80095b0:	4798      	blx	r3
 80095b2:	eef0 7a40 	vmov.f32	s15, s0
 80095b6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80095ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80095c0:	69d1      	ldr	r1, [r2, #28]
 80095c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80095c6:	0092      	lsls	r2, r2, #2
 80095c8:	440a      	add	r2, r1
 80095ca:	edd2 7a00 	vldr	s15, [r2]
 80095ce:	eeb0 0a67 	vmov.f32	s0, s15
 80095d2:	4798      	blx	r3
 80095d4:	eef0 7a40 	vmov.f32	s15, s0
 80095d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80095e2:	4413      	add	r3, r2
 80095e4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80095e8:	edc3 7a00 	vstr	s15, [r3]
			net->output[i] = net->output_activation_function(net->output[i]);
 80095ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095ee:	6a1b      	ldr	r3, [r3, #32]
 80095f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80095f2:	69d1      	ldr	r1, [r2, #28]
 80095f4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80095f8:	0092      	lsls	r2, r2, #2
 80095fa:	440a      	add	r2, r1
 80095fc:	edd2 7a00 	vldr	s15, [r2]
 8009600:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009602:	69d1      	ldr	r1, [r2, #28]
 8009604:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8009608:	0092      	lsls	r2, r2, #2
 800960a:	188c      	adds	r4, r1, r2
 800960c:	eeb0 0a67 	vmov.f32	s0, s15
 8009610:	4798      	blx	r3
 8009612:	eef0 7a40 	vmov.f32	s15, s0
 8009616:	edc4 7a00 	vstr	s15, [r4]
			bias[i] = bias[i] + delta[i]*net->beta;
 800961a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009624:	4413      	add	r3, r2
 8009626:	ed93 7a00 	vldr	s14, [r3]
 800962a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009634:	4413      	add	r3, r2
 8009636:	edd3 6a00 	vldr	s13, [r3]
 800963a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800963c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8009640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009644:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800964e:	4413      	add	r3, r2
 8009650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009654:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]; i++){
 8009658:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800965c:	3301      	adds	r3, #1
 800965e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009662:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009664:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8009668:	429a      	cmp	r2, r3
 800966a:	f4ff af35 	bcc.w	80094d8 <BP_ANN+0x5c>
		}

		float dEdW[DIM[0]*DIM[1]];
 800966e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009670:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009672:	fb02 f103 	mul.w	r1, r2, r3
 8009676:	460b      	mov	r3, r1
 8009678:	3b01      	subs	r3, #1
 800967a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800967c:	2300      	movs	r3, #0
 800967e:	468a      	mov	sl, r1
 8009680:	469b      	mov	fp, r3
 8009682:	f04f 0200 	mov.w	r2, #0
 8009686:	f04f 0300 	mov.w	r3, #0
 800968a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800968e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8009692:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8009696:	2300      	movs	r3, #0
 8009698:	4688      	mov	r8, r1
 800969a:	4699      	mov	r9, r3
 800969c:	f04f 0200 	mov.w	r2, #0
 80096a0:	f04f 0300 	mov.w	r3, #0
 80096a4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80096a8:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80096ac:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80096b0:	008b      	lsls	r3, r1, #2
 80096b2:	3307      	adds	r3, #7
 80096b4:	08db      	lsrs	r3, r3, #3
 80096b6:	00db      	lsls	r3, r3, #3
 80096b8:	ebad 0d03 	sub.w	sp, sp, r3
 80096bc:	ab04      	add	r3, sp, #16
 80096be:	3303      	adds	r3, #3
 80096c0:	089b      	lsrs	r3, r3, #2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	667b      	str	r3, [r7, #100]	@ 0x64
		for(i = 0; i < DIM[0]; i++){
 80096c6:	2300      	movs	r3, #0
 80096c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80096cc:	e030      	b.n	8009730 <BP_ANN+0x2b4>
			for(j = 0; j < DIM[1]; j++){
 80096ce:	2300      	movs	r3, #0
 80096d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80096d4:	e022      	b.n	800971c <BP_ANN+0x2a0>
				dEdW[(DIM[1]*i)+j] = delta[i]*input[j];
 80096d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80096e0:	4413      	add	r3, r2
 80096e2:	ed93 7a00 	vldr	s14, [r3]
 80096e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80096ee:	4413      	add	r3, r2
 80096f0:	edd3 7a00 	vldr	s15, [r3]
 80096f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096f6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80096fa:	fb03 f202 	mul.w	r2, r3, r2
 80096fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009702:	4413      	add	r3, r2
 8009704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009708:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4413      	add	r3, r2
 800970e:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM[1]; j++){
 8009712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009716:	3301      	adds	r3, #1
 8009718:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800971c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800971e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8009722:	429a      	cmp	r2, r3
 8009724:	d3d7      	bcc.n	80096d6 <BP_ANN+0x25a>
		for(i = 0; i < DIM[0]; i++){
 8009726:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800972a:	3301      	adds	r3, #1
 800972c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009730:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009732:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8009736:	429a      	cmp	r2, r3
 8009738:	d3c9      	bcc.n	80096ce <BP_ANN+0x252>
			}
		}
		for(i = 0; i < DIM[0]*DIM[1]; i++){
 800973a:	2300      	movs	r3, #0
 800973c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009740:	e03f      	b.n	80097c2 <BP_ANN+0x346>
			velocity[i] = dEdW[i]*net->eta - velocity[i]*net->alpha;
 8009742:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009744:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	ed93 7a00 	vldr	s14, [r3]
 8009750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009752:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8009756:	ee27 7a27 	vmul.f32	s14, s14, s15
 800975a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8009764:	4413      	add	r3, r2
 8009766:	edd3 6a00 	vldr	s13, [r3]
 800976a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800976c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8009770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009774:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800977e:	4413      	add	r3, r2
 8009780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009784:	edc3 7a00 	vstr	s15, [r3]
			weights[i] = weights[i] + velocity[i];
 8009788:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009790:	4413      	add	r3, r2
 8009792:	ed93 7a00 	vldr	s14, [r3]
 8009796:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80097a0:	4413      	add	r3, r2
 80097a2:	edd3 7a00 	vldr	s15, [r3]
 80097a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097ae:	4413      	add	r3, r2
 80097b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097b4:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]*DIM[1]; i++){
 80097b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80097bc:	3301      	adds	r3, #1
 80097be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80097c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80097c6:	fb02 f303 	mul.w	r3, r2, r3
 80097ca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d3b7      	bcc.n	8009742 <BP_ANN+0x2c6>
 80097d2:	46ad      	mov	sp, r5
 80097d4:	e305      	b.n	8009de2 <BP_ANN+0x966>
		}
		return;
	}
	else{
 80097d6:	466b      	mov	r3, sp
 80097d8:	461e      	mov	r6, r3
		float a[DIM[0]];
 80097da:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80097dc:	460b      	mov	r3, r1
 80097de:	3b01      	subs	r3, #1
 80097e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80097e4:	2300      	movs	r3, #0
 80097e6:	460c      	mov	r4, r1
 80097e8:	461d      	mov	r5, r3
 80097ea:	f04f 0200 	mov.w	r2, #0
 80097ee:	f04f 0300 	mov.w	r3, #0
 80097f2:	016b      	lsls	r3, r5, #5
 80097f4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80097f8:	0162      	lsls	r2, r4, #5
 80097fa:	2300      	movs	r3, #0
 80097fc:	6439      	str	r1, [r7, #64]	@ 0x40
 80097fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8009800:	f04f 0200 	mov.w	r2, #0
 8009804:	f04f 0300 	mov.w	r3, #0
 8009808:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800980c:	4628      	mov	r0, r5
 800980e:	0143      	lsls	r3, r0, #5
 8009810:	4620      	mov	r0, r4
 8009812:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009816:	4620      	mov	r0, r4
 8009818:	0142      	lsls	r2, r0, #5
 800981a:	008b      	lsls	r3, r1, #2
 800981c:	3307      	adds	r3, #7
 800981e:	08db      	lsrs	r3, r3, #3
 8009820:	00db      	lsls	r3, r3, #3
 8009822:	ebad 0d03 	sub.w	sp, sp, r3
 8009826:	ab04      	add	r3, sp, #16
 8009828:	3303      	adds	r3, #3
 800982a:	089b      	lsrs	r3, r3, #2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		float d[DIM[0]];
 8009832:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8009834:	460b      	mov	r3, r1
 8009836:	3b01      	subs	r3, #1
 8009838:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800983c:	2300      	movs	r3, #0
 800983e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009842:	f04f 0200 	mov.w	r2, #0
 8009846:	f04f 0300 	mov.w	r3, #0
 800984a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800984e:	4628      	mov	r0, r5
 8009850:	0143      	lsls	r3, r0, #5
 8009852:	4620      	mov	r0, r4
 8009854:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009858:	4620      	mov	r0, r4
 800985a:	0142      	lsls	r2, r0, #5
 800985c:	2300      	movs	r3, #0
 800985e:	6339      	str	r1, [r7, #48]	@ 0x30
 8009860:	637b      	str	r3, [r7, #52]	@ 0x34
 8009862:	f04f 0200 	mov.w	r2, #0
 8009866:	f04f 0300 	mov.w	r3, #0
 800986a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800986e:	4628      	mov	r0, r5
 8009870:	0143      	lsls	r3, r0, #5
 8009872:	4620      	mov	r0, r4
 8009874:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009878:	4620      	mov	r0, r4
 800987a:	0142      	lsls	r2, r0, #5
 800987c:	008b      	lsls	r3, r1, #2
 800987e:	3307      	adds	r3, #7
 8009880:	08db      	lsrs	r3, r3, #3
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	ebad 0d03 	sub.w	sp, sp, r3
 8009888:	ab04      	add	r3, sp, #16
 800988a:	3303      	adds	r3, #3
 800988c:	089b      	lsrs	r3, r3, #2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

		for(i = 0; i < DIM[0]; i++){
 8009894:	2300      	movs	r3, #0
 8009896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800989a:	e08b      	b.n	80099b4 <BP_ANN+0x538>
			a[i] = 0.0;
 800989c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80098a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	441a      	add	r2, r3
 80098a8:	f04f 0300 	mov.w	r3, #0
 80098ac:	6013      	str	r3, [r2, #0]
			for(j = 0; j < DIM[1]; j++){
 80098ae:	2300      	movs	r3, #0
 80098b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80098b4:	e02c      	b.n	8009910 <BP_ANN+0x494>
				a[i] += weights[(DIM[1]*i)+j]*input[j];
 80098b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80098ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4413      	add	r3, r2
 80098c2:	ed93 7a00 	vldr	s14, [r3]
 80098c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80098c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80098cc:	fb03 f202 	mul.w	r2, r3, r2
 80098d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098d4:	4413      	add	r3, r2
 80098d6:	009a      	lsls	r2, r3, #2
 80098d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098da:	4413      	add	r3, r2
 80098dc:	edd3 6a00 	vldr	s13, [r3]
 80098e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098e4:	009a      	lsls	r2, r3, #2
 80098e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098e8:	4413      	add	r3, r2
 80098ea:	edd3 7a00 	vldr	s15, [r3]
 80098ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80098f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80098fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM[1]; j++){
 8009906:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800990a:	3301      	adds	r3, #1
 800990c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009910:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009916:	4293      	cmp	r3, r2
 8009918:	d3cd      	bcc.n	80098b6 <BP_ANN+0x43a>
			}
			a[i] += bias[i];
 800991a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800991e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	ed93 7a00 	vldr	s14, [r3]
 800992a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800992e:	009a      	lsls	r2, r3, #2
 8009930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009934:	4413      	add	r3, r2
 8009936:	edd3 7a00 	vldr	s15, [r3]
 800993a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800993e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009942:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	edc3 7a00 	vstr	s15, [r3]
			d[i] = net->hidden_activation_derivative(a[i]);
 800994e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009950:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009952:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009956:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	edd3 7a00 	vldr	s15, [r3]
 8009962:	eeb0 0a67 	vmov.f32	s0, s15
 8009966:	4788      	blx	r1
 8009968:	eef0 7a40 	vmov.f32	s15, s0
 800996c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8009970:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	edc3 7a00 	vstr	s15, [r3]
			a[i] = net->hidden_activation_function(a[i]);
 800997c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800997e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009980:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009984:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	edd3 7a00 	vldr	s15, [r3]
 8009990:	eeb0 0a67 	vmov.f32	s0, s15
 8009994:	4788      	blx	r1
 8009996:	eef0 7a40 	vmov.f32	s15, s0
 800999a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800999e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	4413      	add	r3, r2
 80099a6:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]; i++){
 80099aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80099ae:	3301      	adds	r3, #1
 80099b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80099b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80099b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80099ba:	4293      	cmp	r3, r2
 80099bc:	f4ff af6e 	bcc.w	800989c <BP_ANN+0x420>
		}

		unsigned int DIM1 = net->topology[net->n_layers - depth + 1];
 80099c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099c2:	68d9      	ldr	r1, [r3, #12]
 80099c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099c6:	691a      	ldr	r2, [r3, #16]
 80099c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	3301      	adds	r3, #1
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	440b      	add	r3, r1
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

		float prev_delta[DIM1];
 80099da:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80099de:	460b      	mov	r3, r1
 80099e0:	3b01      	subs	r3, #1
 80099e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80099e6:	2300      	movs	r3, #0
 80099e8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80099ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099ec:	f04f 0200 	mov.w	r2, #0
 80099f0:	f04f 0300 	mov.w	r3, #0
 80099f4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80099f8:	4628      	mov	r0, r5
 80099fa:	0143      	lsls	r3, r0, #5
 80099fc:	4620      	mov	r0, r4
 80099fe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009a02:	4620      	mov	r0, r4
 8009a04:	0142      	lsls	r2, r0, #5
 8009a06:	2300      	movs	r3, #0
 8009a08:	6239      	str	r1, [r7, #32]
 8009a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a0c:	f04f 0200 	mov.w	r2, #0
 8009a10:	f04f 0300 	mov.w	r3, #0
 8009a14:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009a18:	4628      	mov	r0, r5
 8009a1a:	0143      	lsls	r3, r0, #5
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009a22:	4620      	mov	r0, r4
 8009a24:	0142      	lsls	r2, r0, #5
 8009a26:	008b      	lsls	r3, r1, #2
 8009a28:	3307      	adds	r3, #7
 8009a2a:	08db      	lsrs	r3, r3, #3
 8009a2c:	00db      	lsls	r3, r3, #3
 8009a2e:	ebad 0d03 	sub.w	sp, sp, r3
 8009a32:	ab04      	add	r3, sp, #16
 8009a34:	3303      	adds	r3, #3
 8009a36:	089b      	lsrs	r3, r3, #2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		unsigned int weight_iter = DIM[0] * DIM[1];
 8009a3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009a42:	fb02 f303 	mul.w	r3, r2, r3
 8009a46:	67fb      	str	r3, [r7, #124]	@ 0x7c

		float next_weights_T[DIM[0]*DIM1];
 8009a48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a4a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009a4e:	fb02 f103 	mul.w	r1, r2, r3
 8009a52:	460b      	mov	r3, r1
 8009a54:	3b01      	subs	r3, #1
 8009a56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a58:	2300      	movs	r3, #0
 8009a5a:	61b9      	str	r1, [r7, #24]
 8009a5c:	61fb      	str	r3, [r7, #28]
 8009a5e:	f04f 0200 	mov.w	r2, #0
 8009a62:	f04f 0300 	mov.w	r3, #0
 8009a66:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	0143      	lsls	r3, r0, #5
 8009a6e:	4620      	mov	r0, r4
 8009a70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009a74:	4620      	mov	r0, r4
 8009a76:	0142      	lsls	r2, r0, #5
 8009a78:	2300      	movs	r3, #0
 8009a7a:	6139      	str	r1, [r7, #16]
 8009a7c:	617b      	str	r3, [r7, #20]
 8009a7e:	f04f 0200 	mov.w	r2, #0
 8009a82:	f04f 0300 	mov.w	r3, #0
 8009a86:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	0143      	lsls	r3, r0, #5
 8009a8e:	4620      	mov	r0, r4
 8009a90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009a94:	4620      	mov	r0, r4
 8009a96:	0142      	lsls	r2, r0, #5
 8009a98:	008b      	lsls	r3, r1, #2
 8009a9a:	3307      	adds	r3, #7
 8009a9c:	08db      	lsrs	r3, r3, #3
 8009a9e:	00db      	lsls	r3, r3, #3
 8009aa0:	ebad 0d03 	sub.w	sp, sp, r3
 8009aa4:	ab04      	add	r3, sp, #16
 8009aa6:	3303      	adds	r3, #3
 8009aa8:	089b      	lsrs	r3, r3, #2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	677b      	str	r3, [r7, #116]	@ 0x74
		unsigned int iter = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for(i = 0; i < DIM[0]; i++){
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009aba:	e02c      	b.n	8009b16 <BP_ANN+0x69a>
			for(j = 0; j < DIM1; j++){
 8009abc:	2300      	movs	r3, #0
 8009abe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009ac2:	e01d      	b.n	8009b00 <BP_ANN+0x684>
				next_weights_T[iter] = weights[(DIM[0]*j)+i+weight_iter];
 8009ac4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ac6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8009aca:	fb03 f202 	mul.w	r2, r3, r2
 8009ace:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009ad2:	441a      	add	r2, r3
 8009ad4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009adc:	4413      	add	r3, r2
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8009ae2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	440b      	add	r3, r1
 8009aea:	601a      	str	r2, [r3, #0]
				iter++;
 8009aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009af0:	3301      	adds	r3, #1
 8009af2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			for(j = 0; j < DIM1; j++){
 8009af6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009afa:	3301      	adds	r3, #1
 8009afc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b00:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8009b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d3db      	bcc.n	8009ac4 <BP_ANN+0x648>
		for(i = 0; i < DIM[0]; i++){
 8009b0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009b10:	3301      	adds	r3, #1
 8009b12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009b16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b18:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d3cd      	bcc.n	8009abc <BP_ANN+0x640>
			}
		}

		BP_ANN(net, a, output, &weights[weight_iter], &velocity[weight_iter], &bias[DIM[0]], prev_delta, depth-1);
 8009b20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b26:	18d0      	adds	r0, r2, r3
 8009b28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8009b30:	4413      	add	r3, r2
 8009b32:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009b34:	0092      	lsls	r2, r2, #2
 8009b36:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8009b3a:	440a      	add	r2, r1
 8009b3c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8009b40:	3901      	subs	r1, #1
 8009b42:	9103      	str	r1, [sp, #12]
 8009b44:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8009b48:	9102      	str	r1, [sp, #8]
 8009b4a:	9201      	str	r2, [sp, #4]
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	4603      	mov	r3, r0
 8009b50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b52:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8009b56:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8009b58:	f7ff fc90 	bl	800947c <BP_ANN>

		for(i = 0; i < DIM[0]; i++){
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009b62:	e07f      	b.n	8009c64 <BP_ANN+0x7e8>
			delta[i] = 0;
 8009b64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009b6e:	4413      	add	r3, r2
 8009b70:	f04f 0200 	mov.w	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]
			for(j = 0; j < DIM1; j++){
 8009b76:	2300      	movs	r3, #0
 8009b78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b7c:	e02e      	b.n	8009bdc <BP_ANN+0x760>
				delta[i] += next_weights_T[(DIM1*i)+j]*prev_delta[j];
 8009b7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009b88:	4413      	add	r3, r2
 8009b8a:	ed93 7a00 	vldr	s14, [r3]
 8009b8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b92:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8009b96:	fb03 f202 	mul.w	r2, r3, r2
 8009b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b9e:	4413      	add	r3, r2
 8009ba0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	edd3 6a00 	vldr	s13, [r3]
 8009baa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	edd3 7a00 	vldr	s15, [r3]
 8009bba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009bc8:	4413      	add	r3, r2
 8009bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009bce:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM1; j++){
 8009bd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009bdc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8009be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d3ca      	bcc.n	8009b7e <BP_ANN+0x702>
			}
			delta[i] = delta[i]*d[i];
 8009be8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009bf2:	4413      	add	r3, r2
 8009bf4:	ed93 7a00 	vldr	s14, [r3]
 8009bf8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8009bfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	edd3 7a00 	vldr	s15, [r3]
 8009c08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009c12:	4413      	add	r3, r2
 8009c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c18:	edc3 7a00 	vstr	s15, [r3]
			bias[i] = bias[i] + delta[i]*net->beta;
 8009c1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009c26:	4413      	add	r3, r2
 8009c28:	ed93 7a00 	vldr	s14, [r3]
 8009c2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009c36:	4413      	add	r3, r2
 8009c38:	edd3 6a00 	vldr	s13, [r3]
 8009c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c3e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8009c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009c50:	4413      	add	r3, r2
 8009c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c56:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]; i++){
 8009c5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009c5e:	3301      	adds	r3, #1
 8009c60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009c64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c66:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	f4ff af7a 	bcc.w	8009b64 <BP_ANN+0x6e8>
		}
		float dEdW[DIM[0]*DIM[1]];
 8009c70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c72:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009c74:	fb02 f103 	mul.w	r1, r2, r3
 8009c78:	460b      	mov	r3, r1
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c7e:	2300      	movs	r3, #0
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	60fb      	str	r3, [r7, #12]
 8009c84:	f04f 0200 	mov.w	r2, #0
 8009c88:	f04f 0300 	mov.w	r3, #0
 8009c8c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009c90:	4628      	mov	r0, r5
 8009c92:	0143      	lsls	r3, r0, #5
 8009c94:	4620      	mov	r0, r4
 8009c96:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	0142      	lsls	r2, r0, #5
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	6039      	str	r1, [r7, #0]
 8009ca2:	607b      	str	r3, [r7, #4]
 8009ca4:	f04f 0200 	mov.w	r2, #0
 8009ca8:	f04f 0300 	mov.w	r3, #0
 8009cac:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	0143      	lsls	r3, r0, #5
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009cba:	4620      	mov	r0, r4
 8009cbc:	0142      	lsls	r2, r0, #5
 8009cbe:	008b      	lsls	r3, r1, #2
 8009cc0:	3307      	adds	r3, #7
 8009cc2:	08db      	lsrs	r3, r3, #3
 8009cc4:	00db      	lsls	r3, r3, #3
 8009cc6:	ebad 0d03 	sub.w	sp, sp, r3
 8009cca:	ab04      	add	r3, sp, #16
 8009ccc:	3303      	adds	r3, #3
 8009cce:	089b      	lsrs	r3, r3, #2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
		for(i = 0; i < DIM[0]; i++){
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009cda:	e030      	b.n	8009d3e <BP_ANN+0x8c2>
			for(j = 0; j < DIM[1]; j++){
 8009cdc:	2300      	movs	r3, #0
 8009cde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009ce2:	e022      	b.n	8009d2a <BP_ANN+0x8ae>
				dEdW[(DIM[1]*i)+j] = delta[i]*input[j];
 8009ce4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009cee:	4413      	add	r3, r2
 8009cf0:	ed93 7a00 	vldr	s14, [r3]
 8009cf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009cfc:	4413      	add	r3, r2
 8009cfe:	edd3 7a00 	vldr	s15, [r3]
 8009d02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d04:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8009d08:	fb03 f202 	mul.w	r2, r3, r2
 8009d0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d10:	4413      	add	r3, r2
 8009d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d16:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	4413      	add	r3, r2
 8009d1c:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM[1]; j++){
 8009d20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d24:	3301      	adds	r3, #1
 8009d26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009d2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d2c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d3d7      	bcc.n	8009ce4 <BP_ANN+0x868>
		for(i = 0; i < DIM[0]; i++){
 8009d34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009d38:	3301      	adds	r3, #1
 8009d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009d3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d40:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d3c9      	bcc.n	8009cdc <BP_ANN+0x860>
			}
		}
		for(i = 0; i < DIM[0]*DIM[1]; i++){
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009d4e:	e03f      	b.n	8009dd0 <BP_ANN+0x954>
			velocity[i] = dEdW[i]*net->eta - velocity[i]*net->alpha;
 8009d50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4413      	add	r3, r2
 8009d5a:	ed93 7a00 	vldr	s14, [r3]
 8009d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d60:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8009d64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8009d72:	4413      	add	r3, r2
 8009d74:	edd3 6a00 	vldr	s13, [r3]
 8009d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d7a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8009d7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8009d8c:	4413      	add	r3, r2
 8009d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d92:	edc3 7a00 	vstr	s15, [r3]
			weights[i] = weights[i] + velocity[i];
 8009d96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d9e:	4413      	add	r3, r2
 8009da0:	ed93 7a00 	vldr	s14, [r3]
 8009da4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8009dae:	4413      	add	r3, r2
 8009db0:	edd3 7a00 	vldr	s15, [r3]
 8009db4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dbc:	4413      	add	r3, r2
 8009dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dc2:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]*DIM[1]; i++){
 8009dc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009dca:	3301      	adds	r3, #1
 8009dcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009dd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dd2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009dd4:	fb02 f303 	mul.w	r3, r2, r3
 8009dd8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d3b7      	bcc.n	8009d50 <BP_ANN+0x8d4>
 8009de0:	46b5      	mov	sp, r6
		}
		return;
	}
}
 8009de2:	37ac      	adds	r7, #172	@ 0xac
 8009de4:	46bd      	mov	sp, r7
 8009de6:	ecbd 8b02 	vpop	{d8}
 8009dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009dee <train_ann>:

//-----ANN-----


void train_ann(ANN *net, float *input, float *output){
 8009dee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009df2:	b08b      	sub	sp, #44	@ 0x2c
 8009df4:	af04      	add	r7, sp, #16
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
 8009dfc:	466b      	mov	r3, sp
 8009dfe:	461e      	mov	r6, r3
	float delta[net->topology[1]];
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	3304      	adds	r3, #4
 8009e06:	6819      	ldr	r1, [r3, #0]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	617b      	str	r3, [r7, #20]
 8009e0e:	2300      	movs	r3, #0
 8009e10:	4688      	mov	r8, r1
 8009e12:	4699      	mov	r9, r3
 8009e14:	f04f 0200 	mov.w	r2, #0
 8009e18:	f04f 0300 	mov.w	r3, #0
 8009e1c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8009e20:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8009e24:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8009e28:	2300      	movs	r3, #0
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	461d      	mov	r5, r3
 8009e2e:	f04f 0200 	mov.w	r2, #0
 8009e32:	f04f 0300 	mov.w	r3, #0
 8009e36:	016b      	lsls	r3, r5, #5
 8009e38:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8009e3c:	0162      	lsls	r2, r4, #5
 8009e3e:	008b      	lsls	r3, r1, #2
 8009e40:	3307      	adds	r3, #7
 8009e42:	08db      	lsrs	r3, r3, #3
 8009e44:	00db      	lsls	r3, r3, #3
 8009e46:	ebad 0d03 	sub.w	sp, sp, r3
 8009e4a:	ab04      	add	r3, sp, #16
 8009e4c:	3303      	adds	r3, #3
 8009e4e:	089b      	lsrs	r3, r3, #2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	613b      	str	r3, [r7, #16]
	BP_ANN(net, input, output, net->weights, net->dedw, net->bias, delta, net->n_layers-1);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6818      	ldr	r0, [r3, #0]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	6892      	ldr	r2, [r2, #8]
 8009e60:	68f9      	ldr	r1, [r7, #12]
 8009e62:	6909      	ldr	r1, [r1, #16]
 8009e64:	3901      	subs	r1, #1
 8009e66:	9103      	str	r1, [sp, #12]
 8009e68:	6939      	ldr	r1, [r7, #16]
 8009e6a:	9102      	str	r1, [sp, #8]
 8009e6c:	9201      	str	r2, [sp, #4]
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	4603      	mov	r3, r0
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	68b9      	ldr	r1, [r7, #8]
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f7ff fb00 	bl	800947c <BP_ANN>
 8009e7c:	46b5      	mov	sp, r6
}
 8009e7e:	bf00      	nop
 8009e80:	371c      	adds	r7, #28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009e88 <FP_ANN>:

void FP_ANN(ANN *net, float *input, unsigned int depth, float *weights){
 8009e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e8c:	b08b      	sub	sp, #44	@ 0x2c
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	60f8      	str	r0, [r7, #12]
 8009e92:	60b9      	str	r1, [r7, #8]
 8009e94:	607a      	str	r2, [r7, #4]
 8009e96:	603b      	str	r3, [r7, #0]
	unsigned int DIM[2] = {net->topology[net->n_layers - depth], net->topology[net->n_layers - depth - 1]};
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	68da      	ldr	r2, [r3, #12]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6919      	ldr	r1, [r3, #16]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	1acb      	subs	r3, r1, r3
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	4413      	add	r3, r2
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	613b      	str	r3, [r7, #16]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	68da      	ldr	r2, [r3, #12]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6919      	ldr	r1, [r3, #16]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	1acb      	subs	r3, r1, r3
 8009eb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	617b      	str	r3, [r7, #20]
	unsigned int i,k;

	if(depth == 1){
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d15d      	bne.n	8009f88 <FP_ANN+0x100>
		for(i = 0; i < DIM[0]; i++){
 8009ecc:	2300      	movs	r3, #0
 8009ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ed0:	e055      	b.n	8009f7e <FP_ANN+0xf6>
			net->output[i] = 0.0;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	69da      	ldr	r2, [r3, #28]
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	4413      	add	r3, r2
 8009edc:	f04f 0200 	mov.w	r2, #0
 8009ee0:	601a      	str	r2, [r3, #0]
			for(k = 0; k < DIM[1]; k++){
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	623b      	str	r3, [r7, #32]
 8009ee6:	e025      	b.n	8009f34 <FP_ANN+0xac>
				net->output[i] += weights[(DIM[1]*i)+k]*input[k];
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	69da      	ldr	r2, [r3, #28]
 8009eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4413      	add	r3, r2
 8009ef2:	ed93 7a00 	vldr	s14, [r3]
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009efa:	fb03 f202 	mul.w	r2, r3, r2
 8009efe:	6a3b      	ldr	r3, [r7, #32]
 8009f00:	4413      	add	r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	4413      	add	r3, r2
 8009f08:	edd3 6a00 	vldr	s13, [r3]
 8009f0c:	6a3b      	ldr	r3, [r7, #32]
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	4413      	add	r3, r2
 8009f14:	edd3 7a00 	vldr	s15, [r3]
 8009f18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	69da      	ldr	r2, [r3, #28]
 8009f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4413      	add	r3, r2
 8009f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f2a:	edc3 7a00 	vstr	s15, [r3]
			for(k = 0; k < DIM[1]; k++){
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	3301      	adds	r3, #1
 8009f32:	623b      	str	r3, [r7, #32]
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	6a3a      	ldr	r2, [r7, #32]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d3d5      	bcc.n	8009ee8 <FP_ANN+0x60>
			}
			net->output[i] = net->output_activation_function(net->output[i] + net->bias[i]);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6a1b      	ldr	r3, [r3, #32]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	69d1      	ldr	r1, [r2, #28]
 8009f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f46:	0092      	lsls	r2, r2, #2
 8009f48:	440a      	add	r2, r1
 8009f4a:	ed92 7a00 	vldr	s14, [r2]
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	6891      	ldr	r1, [r2, #8]
 8009f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f54:	0092      	lsls	r2, r2, #2
 8009f56:	440a      	add	r2, r1
 8009f58:	edd2 7a00 	vldr	s15, [r2]
 8009f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	69d1      	ldr	r1, [r2, #28]
 8009f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f66:	0092      	lsls	r2, r2, #2
 8009f68:	188c      	adds	r4, r1, r2
 8009f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8009f6e:	4798      	blx	r3
 8009f70:	eef0 7a40 	vmov.f32	s15, s0
 8009f74:	edc4 7a00 	vstr	s15, [r4]
		for(i = 0; i < DIM[0]; i++){
 8009f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d3a5      	bcc.n	8009ed2 <FP_ANN+0x4a>
		}
		return;
 8009f86:	e090      	b.n	800a0aa <FP_ANN+0x222>
	}
	else{
 8009f88:	466b      	mov	r3, sp
 8009f8a:	461e      	mov	r6, r3
		float a[DIM[0]];
 8009f8c:	6939      	ldr	r1, [r7, #16]
 8009f8e:	460b      	mov	r3, r1
 8009f90:	3b01      	subs	r3, #1
 8009f92:	61fb      	str	r3, [r7, #28]
 8009f94:	2300      	movs	r3, #0
 8009f96:	4688      	mov	r8, r1
 8009f98:	4699      	mov	r9, r3
 8009f9a:	f04f 0200 	mov.w	r2, #0
 8009f9e:	f04f 0300 	mov.w	r3, #0
 8009fa2:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8009fa6:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8009faa:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8009fae:	2300      	movs	r3, #0
 8009fb0:	460c      	mov	r4, r1
 8009fb2:	461d      	mov	r5, r3
 8009fb4:	f04f 0200 	mov.w	r2, #0
 8009fb8:	f04f 0300 	mov.w	r3, #0
 8009fbc:	016b      	lsls	r3, r5, #5
 8009fbe:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8009fc2:	0162      	lsls	r2, r4, #5
 8009fc4:	008b      	lsls	r3, r1, #2
 8009fc6:	3307      	adds	r3, #7
 8009fc8:	08db      	lsrs	r3, r3, #3
 8009fca:	00db      	lsls	r3, r3, #3
 8009fcc:	ebad 0d03 	sub.w	sp, sp, r3
 8009fd0:	466b      	mov	r3, sp
 8009fd2:	3303      	adds	r3, #3
 8009fd4:	089b      	lsrs	r3, r3, #2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	61bb      	str	r3, [r7, #24]
		for(i = 0; i < DIM[0]; i++){
 8009fda:	2300      	movs	r3, #0
 8009fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fde:	e050      	b.n	800a082 <FP_ANN+0x1fa>
			a[i] = 0.0;
 8009fe0:	69ba      	ldr	r2, [r7, #24]
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f04f 0200 	mov.w	r2, #0
 8009fec:	601a      	str	r2, [r3, #0]
			for(k = 0; k < DIM[1]; k++){
 8009fee:	2300      	movs	r3, #0
 8009ff0:	623b      	str	r3, [r7, #32]
 8009ff2:	e023      	b.n	800a03c <FP_ANN+0x1b4>
				a[i] += weights[(DIM[1]*i)+k]*input[k];
 8009ff4:	69ba      	ldr	r2, [r7, #24]
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	ed93 7a00 	vldr	s14, [r3]
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a004:	fb03 f202 	mul.w	r2, r3, r2
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	4413      	add	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	4413      	add	r3, r2
 800a012:	edd3 6a00 	vldr	s13, [r3]
 800a016:	6a3b      	ldr	r3, [r7, #32]
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	4413      	add	r3, r2
 800a01e:	edd3 7a00 	vldr	s15, [r3]
 800a022:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a02a:	69ba      	ldr	r2, [r7, #24]
 800a02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	edc3 7a00 	vstr	s15, [r3]
			for(k = 0; k < DIM[1]; k++){
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	3301      	adds	r3, #1
 800a03a:	623b      	str	r3, [r7, #32]
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	6a3a      	ldr	r2, [r7, #32]
 800a040:	429a      	cmp	r2, r3
 800a042:	d3d7      	bcc.n	8009ff4 <FP_ANN+0x16c>
			}
			a[i] = net->hidden_activation_function(a[i] + net->bias[i]);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a048:	69b9      	ldr	r1, [r7, #24]
 800a04a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a04c:	0092      	lsls	r2, r2, #2
 800a04e:	440a      	add	r2, r1
 800a050:	ed92 7a00 	vldr	s14, [r2]
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	6891      	ldr	r1, [r2, #8]
 800a058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a05a:	0092      	lsls	r2, r2, #2
 800a05c:	440a      	add	r2, r1
 800a05e:	edd2 7a00 	vldr	s15, [r2]
 800a062:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a066:	eeb0 0a67 	vmov.f32	s0, s15
 800a06a:	4798      	blx	r3
 800a06c:	eef0 7a40 	vmov.f32	s15, s0
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4413      	add	r3, r2
 800a078:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]; i++){
 800a07c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07e:	3301      	adds	r3, #1
 800a080:	627b      	str	r3, [r7, #36]	@ 0x24
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a086:	429a      	cmp	r2, r3
 800a088:	d3aa      	bcc.n	8009fe0 <FP_ANN+0x158>
			//if(depth == 2) printf("%f,", a[i]);
		}
		//if(depth == 2) printf("0\n");
		FP_ANN(net, a, depth-1, &weights[DIM[0]*DIM[1]]);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	1e59      	subs	r1, r3, #1
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	697a      	ldr	r2, [r7, #20]
 800a092:	fb02 f303 	mul.w	r3, r2, r3
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	4413      	add	r3, r2
 800a09c:	460a      	mov	r2, r1
 800a09e:	69b9      	ldr	r1, [r7, #24]
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f7ff fef1 	bl	8009e88 <FP_ANN>
 800a0a6:	46b5      	mov	sp, r6
	}
	return;
 800a0a8:	bf00      	nop
}
 800a0aa:	372c      	adds	r7, #44	@ 0x2c
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a0b2 <run_ann>:

void run_ann(ANN *net, float *input){
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b082      	sub	sp, #8
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	6039      	str	r1, [r7, #0]
	FP_ANN(net, input, net->n_layers-1, net->weights);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	1e5a      	subs	r2, r3, #1
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	6839      	ldr	r1, [r7, #0]
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7ff fedd 	bl	8009e88 <FP_ANN>
}
 800a0ce:	bf00      	nop
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
	...

0800a0d8 <init_ann>:

void init_ann(ANN *net){
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
	fill_number(net->bias, net->n_bias, 0.1);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	689a      	ldr	r2, [r3, #8]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800a150 <init_ann+0x78>
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	f000 f855 	bl	800a19e <fill_number>
	fill_zeros(net->dedw, net->n_weights);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685a      	ldr	r2, [r3, #4]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	4610      	mov	r0, r2
 800a100:	f000 f830 	bl	800a164 <fill_zeros>

	if(net->output_activation_function == &relu) net->output_activation_derivative = &relu_derivative;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a1b      	ldr	r3, [r3, #32]
 800a108:	4a12      	ldr	r2, [pc, #72]	@ (800a154 <init_ann+0x7c>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d103      	bne.n	800a116 <init_ann+0x3e>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a11      	ldr	r2, [pc, #68]	@ (800a158 <init_ann+0x80>)
 800a112:	625a      	str	r2, [r3, #36]	@ 0x24
 800a114:	e007      	b.n	800a126 <init_ann+0x4e>
	else if(net->output_activation_function == &relu2) net->output_activation_derivative = &relu2_derivative;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	4a10      	ldr	r2, [pc, #64]	@ (800a15c <init_ann+0x84>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d102      	bne.n	800a126 <init_ann+0x4e>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a0f      	ldr	r2, [pc, #60]	@ (800a160 <init_ann+0x88>)
 800a124:	625a      	str	r2, [r3, #36]	@ 0x24

	if(net->hidden_activation_function == &relu) net->hidden_activation_derivative = &relu_derivative;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a12a:	4a0a      	ldr	r2, [pc, #40]	@ (800a154 <init_ann+0x7c>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d103      	bne.n	800a138 <init_ann+0x60>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a09      	ldr	r2, [pc, #36]	@ (800a158 <init_ann+0x80>)
 800a134:	62da      	str	r2, [r3, #44]	@ 0x2c
	else if(net->hidden_activation_function == &relu2) net->hidden_activation_derivative = &relu2_derivative;
}
 800a136:	e007      	b.n	800a148 <init_ann+0x70>
	else if(net->hidden_activation_function == &relu2) net->hidden_activation_derivative = &relu2_derivative;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a13c:	4a07      	ldr	r2, [pc, #28]	@ (800a15c <init_ann+0x84>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d102      	bne.n	800a148 <init_ann+0x70>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a06      	ldr	r2, [pc, #24]	@ (800a160 <init_ann+0x88>)
 800a146:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800a148:	bf00      	nop
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	3dcccccd 	.word	0x3dcccccd
 800a154:	0800a1e1 	.word	0x0800a1e1
 800a158:	0800a321 	.word	0x0800a321
 800a15c:	0800a269 	.word	0x0800a269
 800a160:	0800a371 	.word	0x0800a371

0800a164 <fill_zeros>:
	if(net->hidden_activation_function == &relu) net->hidden_activation_derivative = &relu_derivative;
	else if(net->hidden_activation_function == &relu2) net->hidden_activation_derivative = &relu2_derivative;
}

//-----Utility-----
void fill_zeros(float *v, unsigned int size){
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0; i < size; i++){ v[i] = 0.0; }
 800a16e:	2300      	movs	r3, #0
 800a170:	60fb      	str	r3, [r7, #12]
 800a172:	e009      	b.n	800a188 <fill_zeros+0x24>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	4413      	add	r3, r2
 800a17c:	f04f 0200 	mov.w	r2, #0
 800a180:	601a      	str	r2, [r3, #0]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	3301      	adds	r3, #1
 800a186:	60fb      	str	r3, [r7, #12]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d8f1      	bhi.n	800a174 <fill_zeros+0x10>
}
 800a190:	bf00      	nop
 800a192:	bf00      	nop
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <fill_number>:
void fill_number(float *v, unsigned int size, float number){
 800a19e:	b480      	push	{r7}
 800a1a0:	b087      	sub	sp, #28
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	60f8      	str	r0, [r7, #12]
 800a1a6:	60b9      	str	r1, [r7, #8]
 800a1a8:	ed87 0a01 	vstr	s0, [r7, #4]
	int i;
	for(i = 0; i < size; i++){ v[i] = number; }
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	617b      	str	r3, [r7, #20]
 800a1b0:	e008      	b.n	800a1c4 <fill_number+0x26>
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	617b      	str	r3, [r7, #20]
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d8f2      	bhi.n	800a1b2 <fill_number+0x14>
}
 800a1cc:	bf00      	nop
 800a1ce:	bf00      	nop
 800a1d0:	371c      	adds	r7, #28
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr
 800a1da:	0000      	movs	r0, r0
 800a1dc:	0000      	movs	r0, r0
	...

0800a1e0 <relu>:

//-----Activation Functions-----
float relu(float x){
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < 0.0) return 0.0;
 800a1ea:	edd7 7a01 	vldr	s15, [r7, #4]
 800a1ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1f6:	d502      	bpl.n	800a1fe <relu+0x1e>
 800a1f8:	f04f 0300 	mov.w	r3, #0
 800a1fc:	e022      	b.n	800a244 <relu+0x64>
	else if(x > 1.0) return 0.1*x+0.93;
 800a1fe:	edd7 7a01 	vldr	s15, [r7, #4]
 800a202:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a20e:	dd18      	ble.n	800a242 <relu+0x62>
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7f6 f99d 	bl	8000550 <__aeabi_f2d>
 800a216:	a310      	add	r3, pc, #64	@ (adr r3, 800a258 <relu+0x78>)
 800a218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21c:	f7f6 f9f0 	bl	8000600 <__aeabi_dmul>
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	4610      	mov	r0, r2
 800a226:	4619      	mov	r1, r3
 800a228:	a30d      	add	r3, pc, #52	@ (adr r3, 800a260 <relu+0x80>)
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	f7f6 f831 	bl	8000294 <__adddf3>
 800a232:	4602      	mov	r2, r0
 800a234:	460b      	mov	r3, r1
 800a236:	4610      	mov	r0, r2
 800a238:	4619      	mov	r1, r3
 800a23a:	f7f6 fcb9 	bl	8000bb0 <__aeabi_d2f>
 800a23e:	4603      	mov	r3, r0
 800a240:	e000      	b.n	800a244 <relu+0x64>
	return x;
 800a242:	687b      	ldr	r3, [r7, #4]
}
 800a244:	ee07 3a90 	vmov	s15, r3
 800a248:	eeb0 0a67 	vmov.f32	s0, s15
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	f3af 8000 	nop.w
 800a258:	9999999a 	.word	0x9999999a
 800a25c:	3fb99999 	.word	0x3fb99999
 800a260:	5c28f5c3 	.word	0x5c28f5c3
 800a264:	3fedc28f 	.word	0x3fedc28f

0800a268 <relu2>:

//Similar to Tanh
float relu2(float x){
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < -1.0)     return 0.1*x-0.93;
 800a272:	edd7 7a01 	vldr	s15, [r7, #4]
 800a276:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a27a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a282:	d518      	bpl.n	800a2b6 <relu2+0x4e>
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f7f6 f963 	bl	8000550 <__aeabi_f2d>
 800a28a:	a321      	add	r3, pc, #132	@ (adr r3, 800a310 <relu2+0xa8>)
 800a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a290:	f7f6 f9b6 	bl	8000600 <__aeabi_dmul>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	4610      	mov	r0, r2
 800a29a:	4619      	mov	r1, r3
 800a29c:	a31e      	add	r3, pc, #120	@ (adr r3, 800a318 <relu2+0xb0>)
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	f7f5 fff5 	bl	8000290 <__aeabi_dsub>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	4610      	mov	r0, r2
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	f7f6 fc7f 	bl	8000bb0 <__aeabi_d2f>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	e022      	b.n	800a2fc <relu2+0x94>
	else if(x > 1.0) return 0.1*x+0.93;
 800a2b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800a2ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2be:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c6:	dd18      	ble.n	800a2fa <relu2+0x92>
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f7f6 f941 	bl	8000550 <__aeabi_f2d>
 800a2ce:	a310      	add	r3, pc, #64	@ (adr r3, 800a310 <relu2+0xa8>)
 800a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d4:	f7f6 f994 	bl	8000600 <__aeabi_dmul>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4610      	mov	r0, r2
 800a2de:	4619      	mov	r1, r3
 800a2e0:	a30d      	add	r3, pc, #52	@ (adr r3, 800a318 <relu2+0xb0>)
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	f7f5 ffd5 	bl	8000294 <__adddf3>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	f7f6 fc5d 	bl	8000bb0 <__aeabi_d2f>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	e000      	b.n	800a2fc <relu2+0x94>
	return x;
 800a2fa:	687b      	ldr	r3, [r7, #4]
}
 800a2fc:	ee07 3a90 	vmov	s15, r3
 800a300:	eeb0 0a67 	vmov.f32	s0, s15
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	f3af 8000 	nop.w
 800a310:	9999999a 	.word	0x9999999a
 800a314:	3fb99999 	.word	0x3fb99999
 800a318:	5c28f5c3 	.word	0x5c28f5c3
 800a31c:	3fedc28f 	.word	0x3fedc28f

0800a320 <relu_derivative>:

//-----Derivative Functions-----
float relu_derivative(float x){
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < 0.0) return 0.0;
 800a32a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a32e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a336:	d502      	bpl.n	800a33e <relu_derivative+0x1e>
 800a338:	f04f 0300 	mov.w	r3, #0
 800a33c:	e00c      	b.n	800a358 <relu_derivative+0x38>
	else if(x > 1.0) return 0.1;
 800a33e:	edd7 7a01 	vldr	s15, [r7, #4]
 800a342:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a34e:	dd01      	ble.n	800a354 <relu_derivative+0x34>
 800a350:	4b06      	ldr	r3, [pc, #24]	@ (800a36c <relu_derivative+0x4c>)
 800a352:	e001      	b.n	800a358 <relu_derivative+0x38>
	return 1.0;
 800a354:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 800a358:	ee07 3a90 	vmov	s15, r3
 800a35c:	eeb0 0a67 	vmov.f32	s0, s15
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	3dcccccd 	.word	0x3dcccccd

0800a370 <relu2_derivative>:
float relu2_derivative(float x){
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < -1.0) return 0.1;
 800a37a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a37e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a382:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a38a:	d501      	bpl.n	800a390 <relu2_derivative+0x20>
 800a38c:	4b0b      	ldr	r3, [pc, #44]	@ (800a3bc <relu2_derivative+0x4c>)
 800a38e:	e00c      	b.n	800a3aa <relu2_derivative+0x3a>
	else if(x > 1.0) return 0.1;
 800a390:	edd7 7a01 	vldr	s15, [r7, #4]
 800a394:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3a0:	dd01      	ble.n	800a3a6 <relu2_derivative+0x36>
 800a3a2:	4b06      	ldr	r3, [pc, #24]	@ (800a3bc <relu2_derivative+0x4c>)
 800a3a4:	e001      	b.n	800a3aa <relu2_derivative+0x3a>
	return 1.0;
 800a3a6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 800a3aa:	ee07 3a90 	vmov	s15, r3
 800a3ae:	eeb0 0a67 	vmov.f32	s0, s15
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	3dcccccd 	.word	0x3dcccccd

0800a3c0 <main>:
 * @param  None
 * @retval None
 */

int main(void)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	f5ad 7d54 	sub.w	sp, sp, #848	@ 0x350
 800a3c6:	af00      	add	r7, sp, #0

	int32_t  result = 0;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c

	float weights_initial_ss[81];
	int32_t number_weights_ss;
	float dedw_ss[81];
	float bias_ss[15];
	unsigned int network_topology_ss[3] = { 3, 9, 6 };
 800a3ce:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a3d2:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 800a3d6:	4aa7      	ldr	r2, [pc, #668]	@ (800a674 <main+0x2b4>)
 800a3d8:	ca07      	ldmia	r2, {r0, r1, r2}
 800a3da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float output_ss[6];

	int32_t hasTrained;

	initialise_monitor_handles();	/*rtt*/
 800a3de:	f003 fcd5 	bl	800dd8c <initialise_monitor_handles>
       - Configure the Flash prefetch
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 3
       - Low Level Initialization
	 */
	HAL_Init();
 800a3e2:	f7fa fa17 	bl	8004814 <HAL_Init>
	/* Enable the Instruction Cache */
	CACHE_Enable();
 800a3e6:	f000 fa73 	bl	800a8d0 <CACHE_Enable>
	/* Configure the System clock to have a frequency of 160 MHz */
	SystemClock_Config();
 800a3ea:	f000 f9ff 	bl	800a7ec <SystemClock_Config>
	       - Configure the Flash prefetch
	       - Configure the Systick to generate an interrupt each 1 msec
	       - Set NVIC Group Priority to 3
	       - Low Level Initialization
	 */
	initialise_monitor_handles();	/*rtt*/
 800a3ee:	f003 fccd 	bl	800dd8c <initialise_monitor_handles>

	HAL_Init();
 800a3f2:	f7fa fa0f 	bl	8004814 <HAL_Init>

	/* Enable the Instruction Cache */
	CACHE_Enable();
 800a3f6:	f000 fa6b 	bl	800a8d0 <CACHE_Enable>

	/* Configure the System clock to have a frequency of 160 MHz */
	SystemClock_Config();
 800a3fa:	f000 f9f7 	bl	800a7ec <SystemClock_Config>

	/*
	 * Initialize User Button
	 */

	result = Ms_Button_Init();
 800a3fe:	f000 fa85 	bl	800a90c <Ms_Button_Init>
 800a402:	f8c7 034c 	str.w	r0, [r7, #844]	@ 0x34c
	if (result < 0){
 800a406:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	da04      	bge.n	800a418 <main+0x58>
		printf("Initialization Error %i\n", result);
 800a40e:	f8d7 134c 	ldr.w	r1, [r7, #844]	@ 0x34c
 800a412:	4899      	ldr	r0, [pc, #612]	@ (800a678 <main+0x2b8>)
 800a414:	f001 fa40 	bl	800b898 <iprintf>
	}

	printf("\n");
 800a418:	200a      	movs	r0, #10
 800a41a:	f001 fa4f 	bl	800b8bc <putchar>
	printf("\n\nEmbeddedML State Machine Motion Pattern Classification - Press User Button to Start\n\n");
 800a41e:	4897      	ldr	r0, [pc, #604]	@ (800a67c <main+0x2bc>)
 800a420:	f001 faaa 	bl	800b978 <puts>
	User_Button_Wait();
 800a424:	f000 fa86 	bl	800a934 <User_Button_Wait>



	Ms_Init();
 800a428:	f000 faa0 	bl	800a96c <Ms_Init>

	result = 0;
 800a42c:	2300      	movs	r3, #0
 800a42e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 2) != BSP_ERROR_NONE) result--;
 800a432:	2202      	movs	r2, #2
 800a434:	2102      	movs	r1, #2
 800a436:	2000      	movs	r0, #0
 800a438:	f7f7 fcf2 	bl	8001e20 <BSP_MOTION_SENSOR_SetFullScale>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d004      	beq.n	800a44c <main+0x8c>
 800a442:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a446:	3b01      	subs	r3, #1
 800a448:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 800a44c:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800a450:	461a      	mov	r2, r3
 800a452:	2102      	movs	r1, #2
 800a454:	2000      	movs	r0, #0
 800a456:	f7f7 fc7f 	bl	8001d58 <BSP_MOTION_SENSOR_GetFullScale>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d004      	beq.n	800a46a <main+0xaa>
 800a460:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a464:	3b01      	subs	r3, #1
 800a466:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
	if (fullScale != 2) result--;
 800a46a:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d004      	beq.n	800a47c <main+0xbc>
 800a472:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a476:	3b01      	subs	r3, #1
 800a478:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c

	/* GetOutputDataRate and SetOutputDataRate functions */
	result = 0;
 800a47c:	2300      	movs	r3, #0
 800a47e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 3333.0f) != BSP_ERROR_NONE) result--;
 800a482:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 800a680 <main+0x2c0>
 800a486:	2102      	movs	r1, #2
 800a488:	2000      	movs	r0, #0
 800a48a:	f7f7 fc01 	bl	8001c90 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d004      	beq.n	800a49e <main+0xde>
 800a494:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a498:	3b01      	subs	r3, #1
 800a49a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800a49e:	f507 734b 	add.w	r3, r7, #812	@ 0x32c
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	2102      	movs	r1, #2
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	f7f7 fb8e 	bl	8001bc8 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d004      	beq.n	800a4bc <main+0xfc>
 800a4b2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
	if (outputDataRate != 3333.0f) result--;
 800a4bc:	edd7 7acb 	vldr	s15, [r7, #812]	@ 0x32c
 800a4c0:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 800a680 <main+0x2c0>
 800a4c4:	eef4 7a47 	vcmp.f32	s15, s14
 800a4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4cc:	d004      	beq.n	800a4d8 <main+0x118>
 800a4ce:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c

	result = 0;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 833.0f) != BSP_ERROR_NONE) result--;
 800a4de:	ed9f 0a69 	vldr	s0, [pc, #420]	@ 800a684 <main+0x2c4>
 800a4e2:	2102      	movs	r1, #2
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	f7f7 fbd3 	bl	8001c90 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d004      	beq.n	800a4fa <main+0x13a>
 800a4f0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800a4fa:	f507 734b 	add.w	r3, r7, #812	@ 0x32c
 800a4fe:	461a      	mov	r2, r3
 800a500:	2102      	movs	r1, #2
 800a502:	2000      	movs	r0, #0
 800a504:	f7f7 fb60 	bl	8001bc8 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d004      	beq.n	800a518 <main+0x158>
 800a50e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a512:	3b01      	subs	r3, #1
 800a514:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
	if (outputDataRate != 833.0f) result--;
 800a518:	edd7 7acb 	vldr	s15, [r7, #812]	@ 0x32c
 800a51c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800a684 <main+0x2c4>
 800a520:	eef4 7a47 	vcmp.f32	s15, s14
 800a524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a528:	d004      	beq.n	800a534 <main+0x174>
 800a52a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a52e:	3b01      	subs	r3, #1
 800a530:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c

	result = 0;
 800a534:	2300      	movs	r3, #0
 800a536:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
	if (BSP_MOTION_SENSOR_GetSensitivity(0, MOTION_ACCELERO, &sensitivity) != BSP_ERROR_NONE) result--;
 800a53a:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800a53e:	461a      	mov	r2, r3
 800a540:	2102      	movs	r1, #2
 800a542:	2000      	movs	r0, #0
 800a544:	f7f7 fadc 	bl	8001b00 <BSP_MOTION_SENSOR_GetSensitivity>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d004      	beq.n	800a558 <main+0x198>
 800a54e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a552:	3b01      	subs	r3, #1
 800a554:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
	if (result < 0){
 800a558:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	da04      	bge.n	800a56a <main+0x1aa>
		printf("Sensitivity Error %i\n", result);
 800a560:	f8d7 134c 	ldr.w	r1, [r7, #844]	@ 0x34c
 800a564:	4848      	ldr	r0, [pc, #288]	@ (800a688 <main+0x2c8>)
 800a566:	f001 f997 	bl	800b898 <iprintf>
	}

	/* Initialize the Red LED */
	if (BSP_LED_Init(LED6) != BSP_ERROR_NONE) result--;
 800a56a:	2000      	movs	r0, #0
 800a56c:	f7f6 fb70 	bl	8000c50 <BSP_LED_Init>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d004      	beq.n	800a580 <main+0x1c0>
 800a576:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a57a:	3b01      	subs	r3, #1
 800a57c:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
	/* Initialize the Green LED */
	if (BSP_LED_Init(LED7) != BSP_ERROR_NONE) result--;
 800a580:	2001      	movs	r0, #1
 800a582:	f7f6 fb65 	bl	8000c50 <BSP_LED_Init>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d004      	beq.n	800a596 <main+0x1d6>
 800a58c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a590:	3b01      	subs	r3, #1
 800a592:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c


	/* Initialize random values for weights */

	number_weights_ss = network_topology_ss[0]*network_topology_ss[1] +
 800a596:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a59a:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 800a59e:	681a      	ldr	r2, [r3, #0]
			network_topology_ss[1]*network_topology_ss[2];
 800a5a0:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a5a4:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 800a5a8:	689b      	ldr	r3, [r3, #8]
	number_weights_ss = network_topology_ss[0]*network_topology_ss[1] +
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f507 7254 	add.w	r2, r7, #848	@ 0x350
 800a5b0:	f5a2 723e 	sub.w	r2, r2, #760	@ 0x2f8
 800a5b4:	6852      	ldr	r2, [r2, #4]
 800a5b6:	fb02 f303 	mul.w	r3, r2, r3
 800a5ba:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338


	srand(1);
 800a5be:	2001      	movs	r0, #1
 800a5c0:	f001 f83c 	bl	800b63c <srand>

	for (i = 0; i < number_weights_ss; i++){
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 800a5ca:	e018      	b.n	800a5fe <main+0x23e>
		weights_initial_ss[i] = (float)rand()/RAND_MAX;
 800a5cc:	f001 f864 	bl	800b698 <rand>
 800a5d0:	ee07 0a90 	vmov	s15, r0
 800a5d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5d8:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800a68c <main+0x2cc>
 800a5dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a5e0:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a5e4:	f5a3 72b6 	sub.w	r2, r3, #364	@ 0x16c
 800a5e8:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < number_weights_ss; i++){
 800a5f4:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 800a5fe:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 800a602:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 800a606:	429a      	cmp	r2, r3
 800a608:	dbe0      	blt.n	800a5cc <main+0x20c>
	}


	for (i = 0; i < 15; i++){
 800a60a:	2300      	movs	r3, #0
 800a60c:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 800a610:	e00f      	b.n	800a632 <main+0x272>
		bias_ss[i] = 0.5;
 800a612:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a616:	f5a3 723b 	sub.w	r2, r3, #748	@ 0x2ec
 800a61a:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800a626:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 15; i++){
 800a628:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 800a62c:	3301      	adds	r3, #1
 800a62e:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 800a632:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 800a636:	2b0e      	cmp	r3, #14
 800a638:	ddeb      	ble.n	800a612 <main+0x252>
	}
	for (i = 0; i < 6; i++){
 800a63a:	2300      	movs	r3, #0
 800a63c:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 800a640:	e00f      	b.n	800a662 <main+0x2a2>
		output_ss[i] = 0.0;
 800a642:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a646:	f5a3 7244 	sub.w	r2, r3, #784	@ 0x310
 800a64a:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4413      	add	r3, r2
 800a652:	f04f 0200 	mov.w	r2, #0
 800a656:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 6; i++){
 800a658:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 800a65c:	3301      	adds	r3, #1
 800a65e:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 800a662:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 800a666:	2b05      	cmp	r3, #5
 800a668:	ddeb      	ble.n	800a642 <main+0x282>
	}
	for (i = 0; i < 81; i++){
 800a66a:	2300      	movs	r3, #0
 800a66c:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 800a670:	e01e      	b.n	800a6b0 <main+0x2f0>
 800a672:	bf00      	nop
 800a674:	0800f39c 	.word	0x0800f39c
 800a678:	0800f2ec 	.word	0x0800f2ec
 800a67c:	0800f308 	.word	0x0800f308
 800a680:	45505000 	.word	0x45505000
 800a684:	44504000 	.word	0x44504000
 800a688:	0800f360 	.word	0x0800f360
 800a68c:	4f000000 	.word	0x4f000000
		dedw_ss[i] = 0.0;
 800a690:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a694:	f5a3 722c 	sub.w	r2, r3, #688	@ 0x2b0
 800a698:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	4413      	add	r3, r2
 800a6a0:	f04f 0200 	mov.w	r2, #0
 800a6a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 81; i++){
 800a6a6:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 800a6b0:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 800a6b4:	2b50      	cmp	r3, #80	@ 0x50
 800a6b6:	ddeb      	ble.n	800a690 <main+0x2d0>
	}

	ANN net_ss;
	net_ss.weights = weights_initial_ss;
 800a6b8:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a6bc:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a6c0:	f507 72f2 	add.w	r2, r7, #484	@ 0x1e4
 800a6c4:	601a      	str	r2, [r3, #0]

	net_ss.dedw = dedw_ss;
 800a6c6:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a6ca:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a6ce:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800a6d2:	605a      	str	r2, [r3, #4]
	net_ss.bias = bias_ss;
 800a6d4:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a6d8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a6dc:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800a6e0:	609a      	str	r2, [r3, #8]
	net_ss.topology = network_topology_ss;
 800a6e2:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a6e6:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a6ea:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800a6ee:	60da      	str	r2, [r3, #12]
	net_ss.n_layers = 3;
 800a6f0:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a6f4:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a6f8:	2203      	movs	r2, #3
 800a6fa:	611a      	str	r2, [r3, #16]
	net_ss.n_weights = 81;
 800a6fc:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a700:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a704:	2251      	movs	r2, #81	@ 0x51
 800a706:	615a      	str	r2, [r3, #20]
	net_ss.n_bias = 15;
 800a708:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a70c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a710:	220f      	movs	r2, #15
 800a712:	619a      	str	r2, [r3, #24]
	net_ss.output = output_ss;
 800a714:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a718:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a71c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800a720:	61da      	str	r2, [r3, #28]

	net_ss.eta = 0.13;     //Learning Rate
 800a722:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a726:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a72a:	4a2c      	ldr	r2, [pc, #176]	@ (800a7dc <main+0x41c>)
 800a72c:	631a      	str	r2, [r3, #48]	@ 0x30
	net_ss.beta = 0.01;    //Bias Learning Rate
 800a72e:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a732:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a736:	4a2a      	ldr	r2, [pc, #168]	@ (800a7e0 <main+0x420>)
 800a738:	635a      	str	r2, [r3, #52]	@ 0x34
	net_ss.alpha = 0.25;   //Momentum Coefficient
 800a73a:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a73e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a742:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 800a746:	639a      	str	r2, [r3, #56]	@ 0x38
	net_ss.output_activation_function = &relu2;
 800a748:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a74c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a750:	4a24      	ldr	r2, [pc, #144]	@ (800a7e4 <main+0x424>)
 800a752:	621a      	str	r2, [r3, #32]
	net_ss.hidden_activation_function = &relu2;
 800a754:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 800a758:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a75c:	4a21      	ldr	r2, [pc, #132]	@ (800a7e4 <main+0x424>)
 800a75e:	629a      	str	r2, [r3, #40]	@ 0x28


	init_ann(&net_ss);
 800a760:	1d3b      	adds	r3, r7, #4
 800a762:	4618      	mov	r0, r3
 800a764:	f7ff fcb8 	bl	800a0d8 <init_ann>


	hasTrained = 0;
 800a768:	2300      	movs	r3, #0
 800a76a:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340

	int loc = -1;
 800a76e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a772:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
	while (1) {
		/* Get sysTick value and check if it's time to execute the task */
		msTick = HAL_GetTick();
 800a776:	f7fa f8c5 	bl	8004904 <HAL_GetTick>
 800a77a:	4603      	mov	r3, r0
 800a77c:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
		if (msTick % DATA_PERIOD_MS == 0 && msTickPrev != msTick) {
 800a780:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800a784:	f003 0301 	and.w	r3, r3, #1
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d115      	bne.n	800a7b8 <main+0x3f8>
 800a78c:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 800a790:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800a794:	429a      	cmp	r2, r3
 800a796:	d00f      	beq.n	800a7b8 <main+0x3f8>
			msTickPrev = msTick;
 800a798:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800a79c:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
			if (hasTrained){
 800a7a0:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d007      	beq.n	800a7b8 <main+0x3f8>
				loc = Test_ANN_SM(&net_ss, loc);
 800a7a8:	1d3b      	adds	r3, r7, #4
 800a7aa:	f8d7 133c 	ldr.w	r1, [r7, #828]	@ 0x33c
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fe f8fe 	bl	80089b0 <Test_ANN_SM>
 800a7b4:	f8c7 033c 	str.w	r0, [r7, #828]	@ 0x33c
			}
		}

		if (!hasTrained) {
 800a7b8:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1da      	bne.n	800a776 <main+0x3b6>
			printf("Press User Button to Start Training\n");
 800a7c0:	4809      	ldr	r0, [pc, #36]	@ (800a7e8 <main+0x428>)
 800a7c2:	f001 f8d9 	bl	800b978 <puts>
			User_Button_Wait();
 800a7c6:	f000 f8b5 	bl	800a934 <User_Button_Wait>
			TrainOrientation_SM(&net_ss);
 800a7ca:	1d3b      	adds	r3, r7, #4
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7fe fa2d 	bl	8008c2c <TrainOrientation_SM>
			hasTrained = 1;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
		msTick = HAL_GetTick();
 800a7d8:	e7cd      	b.n	800a776 <main+0x3b6>
 800a7da:	bf00      	nop
 800a7dc:	3e051eb8 	.word	0x3e051eb8
 800a7e0:	3c23d70a 	.word	0x3c23d70a
 800a7e4:	0800a269 	.word	0x0800a269
 800a7e8:	0800f378 	.word	0x0800f378

0800a7ec <SystemClock_Config>:
 * @retval None
 */


void SystemClock_Config(void)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b0a0      	sub	sp, #128	@ 0x80
 800a7f0:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a7f2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	601a      	str	r2, [r3, #0]
 800a7fa:	605a      	str	r2, [r3, #4]
 800a7fc:	609a      	str	r2, [r3, #8]
 800a7fe:	60da      	str	r2, [r3, #12]
 800a800:	611a      	str	r2, [r3, #16]
 800a802:	615a      	str	r2, [r3, #20]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a804:	f107 0308 	add.w	r3, r7, #8
 800a808:	2260      	movs	r2, #96	@ 0x60
 800a80a:	2100      	movs	r1, #0
 800a80c:	4618      	mov	r0, r3
 800a80e:	f001 f8bb 	bl	800b988 <memset>

	/* Enable voltage range 1 for frequency above 100 Mhz */
	__HAL_RCC_PWR_CLK_ENABLE();
 800a812:	4b2e      	ldr	r3, [pc, #184]	@ (800a8cc <SystemClock_Config+0xe0>)
 800a814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a818:	4a2c      	ldr	r2, [pc, #176]	@ (800a8cc <SystemClock_Config+0xe0>)
 800a81a:	f043 0304 	orr.w	r3, r3, #4
 800a81e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a822:	4b2a      	ldr	r3, [pc, #168]	@ (800a8cc <SystemClock_Config+0xe0>)
 800a824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a828:	f003 0304 	and.w	r3, r3, #4
 800a82c:	607b      	str	r3, [r7, #4]
 800a82e:	687b      	ldr	r3, [r7, #4]
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a830:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800a834:	f7fb fdd0 	bl	80063d8 <HAL_PWREx_ControlVoltageScaling>

	/* Switch to SMPS regulator instead of LDO */
	HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY);
 800a838:	2002      	movs	r0, #2
 800a83a:	f7fb fe4f 	bl	80064dc <HAL_PWREx_ConfigSupply>

	__HAL_RCC_PWR_CLK_DISABLE();
 800a83e:	4b23      	ldr	r3, [pc, #140]	@ (800a8cc <SystemClock_Config+0xe0>)
 800a840:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a844:	4a21      	ldr	r2, [pc, #132]	@ (800a8cc <SystemClock_Config+0xe0>)
 800a846:	f023 0304 	bic.w	r3, r3, #4
 800a84a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

	/* MSI Oscillator enabled at reset (4Mhz), activate PLL with MSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800a84e:	2310      	movs	r3, #16
 800a850:	60bb      	str	r3, [r7, #8]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800a852:	2301      	movs	r3, #1
 800a854:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800a856:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a85a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800a85c:	2310      	movs	r3, #16
 800a85e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a860:	2302      	movs	r3, #2
 800a862:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800a864:	2301      	movs	r3, #1
 800a866:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800a868:	2300      	movs	r3, #0
 800a86a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 800a86c:	2301      	movs	r3, #1
 800a86e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLN = 80;
 800a870:	2350      	movs	r3, #80	@ 0x50
 800a872:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = 2;
 800a874:	2302      	movs	r3, #2
 800a876:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLP = 2;
 800a878:	2302      	movs	r3, #2
 800a87a:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800a87c:	2302      	movs	r3, #2
 800a87e:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLFRACN= 0;
 800a880:	2300      	movs	r3, #0
 800a882:	667b      	str	r3, [r7, #100]	@ 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a884:	f107 0308 	add.w	r3, r7, #8
 800a888:	4618      	mov	r0, r3
 800a88a:	f7fb fe77 	bl	800657c <HAL_RCC_OscConfig>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d000      	beq.n	800a896 <SystemClock_Config+0xaa>
	{
		/* Initialization Error */
		while(1);
 800a894:	e7fe      	b.n	800a894 <SystemClock_Config+0xa8>
	}

	/* Select PLL as system clock source and configure bus clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800a896:	231f      	movs	r3, #31
 800a898:	66bb      	str	r3, [r7, #104]	@ 0x68
			RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_PCLK3);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a89a:	2303      	movs	r3, #3
 800a89c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	677b      	str	r3, [r7, #116]	@ 0x74
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a8ae:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800a8b2:	2104      	movs	r1, #4
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fc fd37 	bl	8007328 <HAL_RCC_ClockConfig>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d000      	beq.n	800a8c2 <SystemClock_Config+0xd6>
	{
		/* Initialization Error */
		while(1);
 800a8c0:	e7fe      	b.n	800a8c0 <SystemClock_Config+0xd4>
	}
}
 800a8c2:	bf00      	nop
 800a8c4:	3780      	adds	r7, #128	@ 0x80
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	46020c00 	.word	0x46020c00

0800a8d0 <CACHE_Enable>:
 * @brief  Enable ICACHE with 1-way set-associative configuration.
 * @param  None
 * @retval None
 */
static void CACHE_Enable(void)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	af00      	add	r7, sp, #0
	/* Configure ICACHE associativity mode */
	HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY);
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	f7fb fd4f 	bl	8006378 <HAL_ICACHE_ConfigAssociativityMode>

	/* Enable ICACHE */
	HAL_ICACHE_Enable();
 800a8da:	f7fb fd6d 	bl	80063b8 <HAL_ICACHE_Enable>
}
 800a8de:	bf00      	nop
 800a8e0:	bd80      	pop	{r7, pc}
	...

0800a8e4 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	71fb      	strb	r3, [r7, #7]
	if (Button == BUTTON_USER)
 800a8ee:	79fb      	ldrb	r3, [r7, #7]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d102      	bne.n	800a8fa <BSP_PB_Callback+0x16>
	{
		UserButtonPressed = SET;
 800a8f4:	4b04      	ldr	r3, [pc, #16]	@ (800a908 <BSP_PB_Callback+0x24>)
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	701a      	strb	r2, [r3, #0]
	}
}
 800a8fa:	bf00      	nop
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	20000edc 	.word	0x20000edc

0800a90c <Ms_Button_Init>:
	return result;

}

int32_t Ms_Button_Init(void)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
	int32_t  result  = 0;
 800a912:	2300      	movs	r3, #0
 800a914:	607b      	str	r3, [r7, #4]
	/* Initialize user button */
	if (BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI) != BSP_ERROR_NONE) result--;
 800a916:	2101      	movs	r1, #1
 800a918:	2000      	movs	r0, #0
 800a91a:	f7f6 fa27 	bl	8000d6c <BSP_PB_Init>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d002      	beq.n	800a92a <Ms_Button_Init+0x1e>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	3b01      	subs	r3, #1
 800a928:	607b      	str	r3, [r7, #4]
	return result;
 800a92a:	687b      	ldr	r3, [r7, #4]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <User_Button_Wait>:
	UserButtonPressed = RESET;
	printf("\n");
}

void User_Button_Wait()
{
 800a934:	b580      	push	{r7, lr}
 800a936:	af00      	add	r7, sp, #0
	printf("\n");
 800a938:	200a      	movs	r0, #10
 800a93a:	f000 ffbf 	bl	800b8bc <putchar>
	UserButtonPressed = RESET;
 800a93e:	4b0a      	ldr	r3, [pc, #40]	@ (800a968 <User_Button_Wait+0x34>)
 800a940:	2200      	movs	r2, #0
 800a942:	701a      	strb	r2, [r3, #0]
	while (UserButtonPressed == 0)
 800a944:	e002      	b.n	800a94c <User_Button_Wait+0x18>
	{
		HAL_Delay(10);
 800a946:	200a      	movs	r0, #10
 800a948:	f7f9 ffe8 	bl	800491c <HAL_Delay>
	while (UserButtonPressed == 0)
 800a94c:	4b06      	ldr	r3, [pc, #24]	@ (800a968 <User_Button_Wait+0x34>)
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d0f7      	beq.n	800a946 <User_Button_Wait+0x12>
	}
	UserButtonPressed = RESET;
 800a956:	4b04      	ldr	r3, [pc, #16]	@ (800a968 <User_Button_Wait+0x34>)
 800a958:	2200      	movs	r2, #0
 800a95a:	701a      	strb	r2, [r3, #0]
	printf("\n");
 800a95c:	200a      	movs	r0, #10
 800a95e:	f000 ffad 	bl	800b8bc <putchar>
}
 800a962:	bf00      	nop
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	20000edc 	.word	0x20000edc

0800a96c <Ms_Init>:
		if (BSP_MOTION_SENSOR_GetSensitivity(1, MOTION_MAGNETO, &sensitivity) != BSP_ERROR_NONE) result--;
		return result;
}

int32_t Ms_Init(void)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b08c      	sub	sp, #48	@ 0x30
 800a970:	af00      	add	r7, sp, #0
	int32_t  result  = 0;
 800a972:	2300      	movs	r3, #0
 800a974:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t fullScale;

	/* Initialize function for Microaccelerometer */

	/* Initialize user button */
	if (BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI) != BSP_ERROR_NONE) result--;
 800a976:	2101      	movs	r1, #1
 800a978:	2000      	movs	r0, #0
 800a97a:	f7f6 f9f7 	bl	8000d6c <BSP_PB_Init>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d002      	beq.n	800a98a <Ms_Init+0x1e>
 800a984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a986:	3b01      	subs	r3, #1
 800a988:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Initialize function */
	if (BSP_MOTION_SENSOR_Init(0, MOTION_ACCELERO) != BSP_ERROR_NONE) result--;
 800a98a:	2102      	movs	r1, #2
 800a98c:	2000      	movs	r0, #0
 800a98e:	f7f6 ff33 	bl	80017f8 <BSP_MOTION_SENSOR_Init>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d002      	beq.n	800a99e <Ms_Init+0x32>
 800a998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a99a:	3b01      	subs	r3, #1
 800a99c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_GetCapabilities(0, &Capabilities) != BSP_ERROR_NONE) result--;
 800a99e:	f107 0310 	add.w	r3, r7, #16
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	2000      	movs	r0, #0
 800a9a6:	f7f6 ff77 	bl	8001898 <BSP_MOTION_SENSOR_GetCapabilities>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d002      	beq.n	800a9b6 <Ms_Init+0x4a>
 800a9b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Read id function */
	if (BSP_MOTION_SENSOR_ReadID(0, &chipId) != BSP_ERROR_NONE) result--;
 800a9b6:	f107 030f 	add.w	r3, r7, #15
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	2000      	movs	r0, #0
 800a9be:	f7f6 ffa3 	bl	8001908 <BSP_MOTION_SENSOR_ReadID>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d002      	beq.n	800a9ce <Ms_Init+0x62>
 800a9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Enable function */
	if (BSP_MOTION_SENSOR_Enable(0, MOTION_ACCELERO) != BSP_ERROR_NONE) result--;
 800a9ce:	2102      	movs	r1, #2
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	f7f6 ffd1 	bl	8001978 <BSP_MOTION_SENSOR_Enable>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d002      	beq.n	800a9e2 <Ms_Init+0x76>
 800a9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetFullScale and SetFullScale functions */
	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 16) != BSP_ERROR_NONE) result--;
 800a9e2:	2210      	movs	r2, #16
 800a9e4:	2102      	movs	r1, #2
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	f7f7 fa1a 	bl	8001e20 <BSP_MOTION_SENSOR_SetFullScale>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d002      	beq.n	800a9f8 <Ms_Init+0x8c>
 800a9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 800a9f8:	463b      	mov	r3, r7
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	2102      	movs	r1, #2
 800a9fe:	2000      	movs	r0, #0
 800aa00:	f7f7 f9aa 	bl	8001d58 <BSP_MOTION_SENSOR_GetFullScale>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d002      	beq.n	800aa10 <Ms_Init+0xa4>
 800aa0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (fullScale != 16) result--;
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	2b10      	cmp	r3, #16
 800aa14:	d002      	beq.n	800aa1c <Ms_Init+0xb0>
 800aa16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 2) != BSP_ERROR_NONE) result--;
 800aa1c:	2202      	movs	r2, #2
 800aa1e:	2102      	movs	r1, #2
 800aa20:	2000      	movs	r0, #0
 800aa22:	f7f7 f9fd 	bl	8001e20 <BSP_MOTION_SENSOR_SetFullScale>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d002      	beq.n	800aa32 <Ms_Init+0xc6>
 800aa2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 800aa32:	463b      	mov	r3, r7
 800aa34:	461a      	mov	r2, r3
 800aa36:	2102      	movs	r1, #2
 800aa38:	2000      	movs	r0, #0
 800aa3a:	f7f7 f98d 	bl	8001d58 <BSP_MOTION_SENSOR_GetFullScale>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <Ms_Init+0xde>
 800aa44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa46:	3b01      	subs	r3, #1
 800aa48:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (fullScale != 2) result--;
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d002      	beq.n	800aa56 <Ms_Init+0xea>
 800aa50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa52:	3b01      	subs	r3, #1
 800aa54:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetOutputDataRate and SetOutputDataRate functions */
	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 3333.0f) != BSP_ERROR_NONE) result--;
 800aa56:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 800ac58 <Ms_Init+0x2ec>
 800aa5a:	2102      	movs	r1, #2
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	f7f7 f917 	bl	8001c90 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d002      	beq.n	800aa6e <Ms_Init+0x102>
 800aa68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800aa6e:	1d3b      	adds	r3, r7, #4
 800aa70:	461a      	mov	r2, r3
 800aa72:	2102      	movs	r1, #2
 800aa74:	2000      	movs	r0, #0
 800aa76:	f7f7 f8a7 	bl	8001bc8 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d002      	beq.n	800aa86 <Ms_Init+0x11a>
 800aa80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa82:	3b01      	subs	r3, #1
 800aa84:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (outputDataRate != 3333.0f) result--;
 800aa86:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa8a:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 800ac58 <Ms_Init+0x2ec>
 800aa8e:	eef4 7a47 	vcmp.f32	s15, s14
 800aa92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa96:	d002      	beq.n	800aa9e <Ms_Init+0x132>
 800aa98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 208.0f) != BSP_ERROR_NONE) result--;
 800aa9e:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 800ac5c <Ms_Init+0x2f0>
 800aaa2:	2102      	movs	r1, #2
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	f7f7 f8f3 	bl	8001c90 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <Ms_Init+0x14a>
 800aab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab2:	3b01      	subs	r3, #1
 800aab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800aab6:	1d3b      	adds	r3, r7, #4
 800aab8:	461a      	mov	r2, r3
 800aaba:	2102      	movs	r1, #2
 800aabc:	2000      	movs	r0, #0
 800aabe:	f7f7 f883 	bl	8001bc8 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d002      	beq.n	800aace <Ms_Init+0x162>
 800aac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaca:	3b01      	subs	r3, #1
 800aacc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (outputDataRate != 208.0f) result--;
 800aace:	edd7 7a01 	vldr	s15, [r7, #4]
 800aad2:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800ac5c <Ms_Init+0x2f0>
 800aad6:	eef4 7a47 	vcmp.f32	s15, s14
 800aada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aade:	d002      	beq.n	800aae6 <Ms_Init+0x17a>
 800aae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae2:	3b01      	subs	r3, #1
 800aae4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetSensitivity function */
	if (BSP_MOTION_SENSOR_GetSensitivity(0, MOTION_ACCELERO, &sensitivity) != BSP_ERROR_NONE) result--;
 800aae6:	f107 0308 	add.w	r3, r7, #8
 800aaea:	461a      	mov	r2, r3
 800aaec:	2102      	movs	r1, #2
 800aaee:	2000      	movs	r0, #0
 800aaf0:	f7f7 f806 	bl	8001b00 <BSP_MOTION_SENSOR_GetSensitivity>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d002      	beq.n	800ab00 <Ms_Init+0x194>
 800aafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aafc:	3b01      	subs	r3, #1
 800aafe:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Initialize function for Microgyro */

	/* Initialize function */
	if (BSP_MOTION_SENSOR_Init(0, MOTION_GYRO) != BSP_ERROR_NONE) result--;
 800ab00:	2101      	movs	r1, #1
 800ab02:	2000      	movs	r0, #0
 800ab04:	f7f6 fe78 	bl	80017f8 <BSP_MOTION_SENSOR_Init>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d002      	beq.n	800ab14 <Ms_Init+0x1a8>
 800ab0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab10:	3b01      	subs	r3, #1
 800ab12:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Enable function */
	if (BSP_MOTION_SENSOR_Enable(0, MOTION_GYRO) != BSP_ERROR_NONE) result--;
 800ab14:	2101      	movs	r1, #1
 800ab16:	2000      	movs	r0, #0
 800ab18:	f7f6 ff2e 	bl	8001978 <BSP_MOTION_SENSOR_Enable>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d002      	beq.n	800ab28 <Ms_Init+0x1bc>
 800ab22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab24:	3b01      	subs	r3, #1
 800ab26:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetFullScale and SetFullScale functions */
	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_GYRO, 2000) != BSP_ERROR_NONE) result--;
 800ab28:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800ab2c:	2101      	movs	r1, #1
 800ab2e:	2000      	movs	r0, #0
 800ab30:	f7f7 f976 	bl	8001e20 <BSP_MOTION_SENSOR_SetFullScale>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d002      	beq.n	800ab40 <Ms_Init+0x1d4>
 800ab3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_GYRO, &fullScale) != BSP_ERROR_NONE) result--;
 800ab40:	463b      	mov	r3, r7
 800ab42:	461a      	mov	r2, r3
 800ab44:	2101      	movs	r1, #1
 800ab46:	2000      	movs	r0, #0
 800ab48:	f7f7 f906 	bl	8001d58 <BSP_MOTION_SENSOR_GetFullScale>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d002      	beq.n	800ab58 <Ms_Init+0x1ec>
 800ab52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab54:	3b01      	subs	r3, #1
 800ab56:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (fullScale != 2000) result--;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800ab5e:	d002      	beq.n	800ab66 <Ms_Init+0x1fa>
 800ab60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab62:	3b01      	subs	r3, #1
 800ab64:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_GYRO, 500) != BSP_ERROR_NONE) result--;
 800ab66:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800ab6a:	2101      	movs	r1, #1
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	f7f7 f957 	bl	8001e20 <BSP_MOTION_SENSOR_SetFullScale>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d002      	beq.n	800ab7e <Ms_Init+0x212>
 800ab78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_GYRO, &fullScale) != BSP_ERROR_NONE) result--;
 800ab7e:	463b      	mov	r3, r7
 800ab80:	461a      	mov	r2, r3
 800ab82:	2101      	movs	r1, #1
 800ab84:	2000      	movs	r0, #0
 800ab86:	f7f7 f8e7 	bl	8001d58 <BSP_MOTION_SENSOR_GetFullScale>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d002      	beq.n	800ab96 <Ms_Init+0x22a>
 800ab90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab92:	3b01      	subs	r3, #1
 800ab94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (fullScale != 500) result--;
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800ab9c:	d002      	beq.n	800aba4 <Ms_Init+0x238>
 800ab9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aba0:	3b01      	subs	r3, #1
 800aba2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetOutputDataRate and SetOutputDataRate functions */
	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_GYRO, 3333.0f) != BSP_ERROR_NONE) result--;
 800aba4:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800ac58 <Ms_Init+0x2ec>
 800aba8:	2101      	movs	r1, #1
 800abaa:	2000      	movs	r0, #0
 800abac:	f7f7 f870 	bl	8001c90 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d002      	beq.n	800abbc <Ms_Init+0x250>
 800abb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb8:	3b01      	subs	r3, #1
 800abba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_GYRO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800abbc:	1d3b      	adds	r3, r7, #4
 800abbe:	461a      	mov	r2, r3
 800abc0:	2101      	movs	r1, #1
 800abc2:	2000      	movs	r0, #0
 800abc4:	f7f7 f800 	bl	8001bc8 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d002      	beq.n	800abd4 <Ms_Init+0x268>
 800abce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abd0:	3b01      	subs	r3, #1
 800abd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (outputDataRate != 3333.0f) result--;
 800abd4:	edd7 7a01 	vldr	s15, [r7, #4]
 800abd8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800ac58 <Ms_Init+0x2ec>
 800abdc:	eef4 7a47 	vcmp.f32	s15, s14
 800abe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe4:	d002      	beq.n	800abec <Ms_Init+0x280>
 800abe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abe8:	3b01      	subs	r3, #1
 800abea:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_GYRO, 208.0f) != BSP_ERROR_NONE) result--;
 800abec:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800ac5c <Ms_Init+0x2f0>
 800abf0:	2101      	movs	r1, #1
 800abf2:	2000      	movs	r0, #0
 800abf4:	f7f7 f84c 	bl	8001c90 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d002      	beq.n	800ac04 <Ms_Init+0x298>
 800abfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac00:	3b01      	subs	r3, #1
 800ac02:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_GYRO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800ac04:	1d3b      	adds	r3, r7, #4
 800ac06:	461a      	mov	r2, r3
 800ac08:	2101      	movs	r1, #1
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	f7f6 ffdc 	bl	8001bc8 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d002      	beq.n	800ac1c <Ms_Init+0x2b0>
 800ac16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (outputDataRate != 208.0f) result--;
 800ac1c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ac20:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ac5c <Ms_Init+0x2f0>
 800ac24:	eef4 7a47 	vcmp.f32	s15, s14
 800ac28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac2c:	d002      	beq.n	800ac34 <Ms_Init+0x2c8>
 800ac2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac30:	3b01      	subs	r3, #1
 800ac32:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetSensitivity function */
	if (BSP_MOTION_SENSOR_GetSensitivity(0, MOTION_GYRO, &sensitivity) != BSP_ERROR_NONE) result--;
 800ac34:	f107 0308 	add.w	r3, r7, #8
 800ac38:	461a      	mov	r2, r3
 800ac3a:	2101      	movs	r1, #1
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	f7f6 ff5f 	bl	8001b00 <BSP_MOTION_SENSOR_GetSensitivity>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d002      	beq.n	800ac4e <Ms_Init+0x2e2>
 800ac48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return result;
 800ac4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3730      	adds	r7, #48	@ 0x30
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	45505000 	.word	0x45505000
 800ac5c:	43500000 	.word	0x43500000

0800ac60 <HAL_MspInit>:
/**
  * @brief  Initialize the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 800ac60:	b480      	push	{r7}
 800ac62:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
}
 800ac64:	bf00      	nop
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800ac6e:	b480      	push	{r7}
 800ac70:	af00      	add	r7, sp, #0
}
 800ac72:	bf00      	nop
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800ac80:	e7fe      	b.n	800ac80 <HardFault_Handler+0x4>

0800ac82 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800ac82:	b480      	push	{r7}
 800ac84:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800ac86:	e7fe      	b.n	800ac86 <MemManage_Handler+0x4>

0800ac88 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800ac8c:	e7fe      	b.n	800ac8c <BusFault_Handler+0x4>

0800ac8e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800ac8e:	b480      	push	{r7}
 800ac90:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800ac92:	e7fe      	b.n	800ac92 <UsageFault_Handler+0x4>

0800ac94 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800ac94:	b480      	push	{r7}
 800ac96:	af00      	add	r7, sp, #0
}
 800ac98:	bf00      	nop
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr

0800aca2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800aca2:	b480      	push	{r7}
 800aca4:	af00      	add	r7, sp, #0
  while (1)
 800aca6:	e7fe      	b.n	800aca6 <DebugMon_Handler+0x4>

0800aca8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800aca8:	b480      	push	{r7}
 800acaa:	af00      	add	r7, sp, #0
  while (1)
 800acac:	e7fe      	b.n	800acac <PendSV_Handler+0x4>

0800acae <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800acb2:	f7f9 fe13 	bl	80048dc <HAL_IncTick>
}
 800acb6:	bf00      	nop
 800acb8:	bd80      	pop	{r7, pc}

0800acba <GPDMA1_Channel0_IRQHandler>:
  * @brief  This function handles GPDMA_Channel0 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0, AUDIO_IN_DEVICE_DIGITAL_MIC2);
 800acbe:	2102      	movs	r1, #2
 800acc0:	2000      	movs	r0, #0
 800acc2:	f7f6 f8dd 	bl	8000e80 <BSP_AUDIO_IN_IRQHandler>
}
 800acc6:	bf00      	nop
 800acc8:	bd80      	pop	{r7, pc}

0800acca <GPDMA1_Channel6_IRQHandler>:
  * @brief  This function handles GPDMA_Channel6 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel6_IRQHandler(void)
{
 800acca:	b580      	push	{r7, lr}
 800accc:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0, AUDIO_IN_DEVICE_DIGITAL_MIC1);
 800acce:	2101      	movs	r1, #1
 800acd0:	2000      	movs	r0, #0
 800acd2:	f7f6 f8d5 	bl	8000e80 <BSP_AUDIO_IN_IRQHandler>
} 
 800acd6:	bf00      	nop
 800acd8:	bd80      	pop	{r7, pc}
	...

0800acdc <EXTI13_IRQHandler>:
  * @brief  This function handles EXTI13 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI13_IRQHandler(void)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&hpb_exti[0]);
 800ace0:	4802      	ldr	r0, [pc, #8]	@ (800acec <EXTI13_IRQHandler+0x10>)
 800ace2:	f7fa f9db 	bl	800509c <HAL_EXTI_IRQHandler>
}
 800ace6:	bf00      	nop
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	200002ac 	.word	0x200002ac

0800acf0 <DCMI_PSSI_IRQHandler>:
  * @brief  This function handles DCMI_PSSI interrupt request.
  * @param  None
  * @retval None
  */
void DCMI_PSSI_IRQHandler(void)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	af00      	add	r7, sp, #0
  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 800acf4:	4802      	ldr	r0, [pc, #8]	@ (800ad00 <DCMI_PSSI_IRQHandler+0x10>)
 800acf6:	f7f9 ff45 	bl	8004b84 <HAL_DCMI_IRQHandler>
}
 800acfa:	bf00      	nop
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	20000dfc 	.word	0x20000dfc

0800ad04 <GPDMA1_Channel12_IRQHandler>:
  * @brief  This function handles GPDMA_Channel12 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 800ad08:	4b03      	ldr	r3, [pc, #12]	@ (800ad18 <GPDMA1_Channel12_IRQHandler+0x14>)
 800ad0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7fa f811 	bl	8004d34 <HAL_DMA_IRQHandler>
}
 800ad12:	bf00      	nop
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	20000dfc 	.word	0x20000dfc

0800ad1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ad24:	4a14      	ldr	r2, [pc, #80]	@ (800ad78 <_sbrk+0x5c>)
 800ad26:	4b15      	ldr	r3, [pc, #84]	@ (800ad7c <_sbrk+0x60>)
 800ad28:	1ad3      	subs	r3, r2, r3
 800ad2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ad30:	4b13      	ldr	r3, [pc, #76]	@ (800ad80 <_sbrk+0x64>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d102      	bne.n	800ad3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ad38:	4b11      	ldr	r3, [pc, #68]	@ (800ad80 <_sbrk+0x64>)
 800ad3a:	4a12      	ldr	r2, [pc, #72]	@ (800ad84 <_sbrk+0x68>)
 800ad3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ad3e:	4b10      	ldr	r3, [pc, #64]	@ (800ad80 <_sbrk+0x64>)
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4413      	add	r3, r2
 800ad46:	693a      	ldr	r2, [r7, #16]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d207      	bcs.n	800ad5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ad4c:	f000 fe28 	bl	800b9a0 <__errno>
 800ad50:	4603      	mov	r3, r0
 800ad52:	220c      	movs	r2, #12
 800ad54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ad56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad5a:	e009      	b.n	800ad70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ad5c:	4b08      	ldr	r3, [pc, #32]	@ (800ad80 <_sbrk+0x64>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ad62:	4b07      	ldr	r3, [pc, #28]	@ (800ad80 <_sbrk+0x64>)
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4413      	add	r3, r2
 800ad6a:	4a05      	ldr	r2, [pc, #20]	@ (800ad80 <_sbrk+0x64>)
 800ad6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3718      	adds	r7, #24
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	200c0000 	.word	0x200c0000
 800ad7c:	00001000 	.word	0x00001000
 800ad80:	20000ee0 	.word	0x20000ee0
 800ad84:	200010e0 	.word	0x200010e0

0800ad88 <__cvt>:
 800ad88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad8c:	ec57 6b10 	vmov	r6, r7, d0
 800ad90:	2f00      	cmp	r7, #0
 800ad92:	460c      	mov	r4, r1
 800ad94:	4619      	mov	r1, r3
 800ad96:	463b      	mov	r3, r7
 800ad98:	bfb4      	ite	lt
 800ad9a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ad9e:	2300      	movge	r3, #0
 800ada0:	4691      	mov	r9, r2
 800ada2:	bfbf      	itttt	lt
 800ada4:	4632      	movlt	r2, r6
 800ada6:	461f      	movlt	r7, r3
 800ada8:	232d      	movlt	r3, #45	@ 0x2d
 800adaa:	4616      	movlt	r6, r2
 800adac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800adb0:	700b      	strb	r3, [r1, #0]
 800adb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800adb4:	f023 0820 	bic.w	r8, r3, #32
 800adb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800adbc:	d005      	beq.n	800adca <__cvt+0x42>
 800adbe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800adc2:	d100      	bne.n	800adc6 <__cvt+0x3e>
 800adc4:	3401      	adds	r4, #1
 800adc6:	2102      	movs	r1, #2
 800adc8:	e000      	b.n	800adcc <__cvt+0x44>
 800adca:	2103      	movs	r1, #3
 800adcc:	ab03      	add	r3, sp, #12
 800adce:	4622      	mov	r2, r4
 800add0:	9301      	str	r3, [sp, #4]
 800add2:	ab02      	add	r3, sp, #8
 800add4:	ec47 6b10 	vmov	d0, r6, r7
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	4653      	mov	r3, sl
 800addc:	f000 fed4 	bl	800bb88 <_dtoa_r>
 800ade0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ade4:	4605      	mov	r5, r0
 800ade6:	d119      	bne.n	800ae1c <__cvt+0x94>
 800ade8:	f019 0f01 	tst.w	r9, #1
 800adec:	d00e      	beq.n	800ae0c <__cvt+0x84>
 800adee:	eb00 0904 	add.w	r9, r0, r4
 800adf2:	2200      	movs	r2, #0
 800adf4:	2300      	movs	r3, #0
 800adf6:	4630      	mov	r0, r6
 800adf8:	4639      	mov	r1, r7
 800adfa:	f7f5 fe69 	bl	8000ad0 <__aeabi_dcmpeq>
 800adfe:	b108      	cbz	r0, 800ae04 <__cvt+0x7c>
 800ae00:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae04:	2230      	movs	r2, #48	@ 0x30
 800ae06:	9b03      	ldr	r3, [sp, #12]
 800ae08:	454b      	cmp	r3, r9
 800ae0a:	d31e      	bcc.n	800ae4a <__cvt+0xc2>
 800ae0c:	9b03      	ldr	r3, [sp, #12]
 800ae0e:	4628      	mov	r0, r5
 800ae10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae12:	1b5b      	subs	r3, r3, r5
 800ae14:	6013      	str	r3, [r2, #0]
 800ae16:	b004      	add	sp, #16
 800ae18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ae20:	eb00 0904 	add.w	r9, r0, r4
 800ae24:	d1e5      	bne.n	800adf2 <__cvt+0x6a>
 800ae26:	7803      	ldrb	r3, [r0, #0]
 800ae28:	2b30      	cmp	r3, #48	@ 0x30
 800ae2a:	d10a      	bne.n	800ae42 <__cvt+0xba>
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	2300      	movs	r3, #0
 800ae30:	4630      	mov	r0, r6
 800ae32:	4639      	mov	r1, r7
 800ae34:	f7f5 fe4c 	bl	8000ad0 <__aeabi_dcmpeq>
 800ae38:	b918      	cbnz	r0, 800ae42 <__cvt+0xba>
 800ae3a:	f1c4 0401 	rsb	r4, r4, #1
 800ae3e:	f8ca 4000 	str.w	r4, [sl]
 800ae42:	f8da 3000 	ldr.w	r3, [sl]
 800ae46:	4499      	add	r9, r3
 800ae48:	e7d3      	b.n	800adf2 <__cvt+0x6a>
 800ae4a:	1c59      	adds	r1, r3, #1
 800ae4c:	9103      	str	r1, [sp, #12]
 800ae4e:	701a      	strb	r2, [r3, #0]
 800ae50:	e7d9      	b.n	800ae06 <__cvt+0x7e>

0800ae52 <__exponent>:
 800ae52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae54:	2900      	cmp	r1, #0
 800ae56:	7002      	strb	r2, [r0, #0]
 800ae58:	bfba      	itte	lt
 800ae5a:	4249      	neglt	r1, r1
 800ae5c:	232d      	movlt	r3, #45	@ 0x2d
 800ae5e:	232b      	movge	r3, #43	@ 0x2b
 800ae60:	2909      	cmp	r1, #9
 800ae62:	7043      	strb	r3, [r0, #1]
 800ae64:	dd28      	ble.n	800aeb8 <__exponent+0x66>
 800ae66:	f10d 0307 	add.w	r3, sp, #7
 800ae6a:	270a      	movs	r7, #10
 800ae6c:	461d      	mov	r5, r3
 800ae6e:	461a      	mov	r2, r3
 800ae70:	3b01      	subs	r3, #1
 800ae72:	fbb1 f6f7 	udiv	r6, r1, r7
 800ae76:	fb07 1416 	mls	r4, r7, r6, r1
 800ae7a:	3430      	adds	r4, #48	@ 0x30
 800ae7c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ae80:	460c      	mov	r4, r1
 800ae82:	4631      	mov	r1, r6
 800ae84:	2c63      	cmp	r4, #99	@ 0x63
 800ae86:	dcf2      	bgt.n	800ae6e <__exponent+0x1c>
 800ae88:	3130      	adds	r1, #48	@ 0x30
 800ae8a:	1e94      	subs	r4, r2, #2
 800ae8c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ae90:	1c41      	adds	r1, r0, #1
 800ae92:	4623      	mov	r3, r4
 800ae94:	42ab      	cmp	r3, r5
 800ae96:	d30a      	bcc.n	800aeae <__exponent+0x5c>
 800ae98:	f10d 0309 	add.w	r3, sp, #9
 800ae9c:	1a9b      	subs	r3, r3, r2
 800ae9e:	42ac      	cmp	r4, r5
 800aea0:	bf88      	it	hi
 800aea2:	2300      	movhi	r3, #0
 800aea4:	3302      	adds	r3, #2
 800aea6:	4403      	add	r3, r0
 800aea8:	1a18      	subs	r0, r3, r0
 800aeaa:	b003      	add	sp, #12
 800aeac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeae:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aeb2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aeb6:	e7ed      	b.n	800ae94 <__exponent+0x42>
 800aeb8:	2330      	movs	r3, #48	@ 0x30
 800aeba:	3130      	adds	r1, #48	@ 0x30
 800aebc:	7083      	strb	r3, [r0, #2]
 800aebe:	1d03      	adds	r3, r0, #4
 800aec0:	70c1      	strb	r1, [r0, #3]
 800aec2:	e7f1      	b.n	800aea8 <__exponent+0x56>

0800aec4 <_printf_float>:
 800aec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec8:	b08d      	sub	sp, #52	@ 0x34
 800aeca:	460c      	mov	r4, r1
 800aecc:	4616      	mov	r6, r2
 800aece:	461f      	mov	r7, r3
 800aed0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aed4:	4605      	mov	r5, r0
 800aed6:	f000 fd5f 	bl	800b998 <_localeconv_r>
 800aeda:	6803      	ldr	r3, [r0, #0]
 800aedc:	4618      	mov	r0, r3
 800aede:	9304      	str	r3, [sp, #16]
 800aee0:	f7f5 f9ca 	bl	8000278 <strlen>
 800aee4:	2300      	movs	r3, #0
 800aee6:	9005      	str	r0, [sp, #20]
 800aee8:	930a      	str	r3, [sp, #40]	@ 0x28
 800aeea:	f8d8 3000 	ldr.w	r3, [r8]
 800aeee:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aef2:	3307      	adds	r3, #7
 800aef4:	f8d4 b000 	ldr.w	fp, [r4]
 800aef8:	f023 0307 	bic.w	r3, r3, #7
 800aefc:	f103 0208 	add.w	r2, r3, #8
 800af00:	f8c8 2000 	str.w	r2, [r8]
 800af04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af08:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800af10:	f8cd 8018 	str.w	r8, [sp, #24]
 800af14:	9307      	str	r3, [sp, #28]
 800af16:	4b9d      	ldr	r3, [pc, #628]	@ (800b18c <_printf_float+0x2c8>)
 800af18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af1c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800af20:	f7f5 fe08 	bl	8000b34 <__aeabi_dcmpun>
 800af24:	bb70      	cbnz	r0, 800af84 <_printf_float+0xc0>
 800af26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af2a:	4b98      	ldr	r3, [pc, #608]	@ (800b18c <_printf_float+0x2c8>)
 800af2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af30:	f7f5 fde2 	bl	8000af8 <__aeabi_dcmple>
 800af34:	bb30      	cbnz	r0, 800af84 <_printf_float+0xc0>
 800af36:	2200      	movs	r2, #0
 800af38:	2300      	movs	r3, #0
 800af3a:	4640      	mov	r0, r8
 800af3c:	4649      	mov	r1, r9
 800af3e:	f7f5 fdd1 	bl	8000ae4 <__aeabi_dcmplt>
 800af42:	b110      	cbz	r0, 800af4a <_printf_float+0x86>
 800af44:	232d      	movs	r3, #45	@ 0x2d
 800af46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af4a:	4a91      	ldr	r2, [pc, #580]	@ (800b190 <_printf_float+0x2cc>)
 800af4c:	4b91      	ldr	r3, [pc, #580]	@ (800b194 <_printf_float+0x2d0>)
 800af4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800af52:	bf94      	ite	ls
 800af54:	4690      	movls	r8, r2
 800af56:	4698      	movhi	r8, r3
 800af58:	2303      	movs	r3, #3
 800af5a:	f04f 0900 	mov.w	r9, #0
 800af5e:	6123      	str	r3, [r4, #16]
 800af60:	f02b 0304 	bic.w	r3, fp, #4
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	4633      	mov	r3, r6
 800af68:	aa0b      	add	r2, sp, #44	@ 0x2c
 800af6a:	4621      	mov	r1, r4
 800af6c:	4628      	mov	r0, r5
 800af6e:	9700      	str	r7, [sp, #0]
 800af70:	f000 f9d2 	bl	800b318 <_printf_common>
 800af74:	3001      	adds	r0, #1
 800af76:	f040 808d 	bne.w	800b094 <_printf_float+0x1d0>
 800af7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af7e:	b00d      	add	sp, #52	@ 0x34
 800af80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af84:	4642      	mov	r2, r8
 800af86:	464b      	mov	r3, r9
 800af88:	4640      	mov	r0, r8
 800af8a:	4649      	mov	r1, r9
 800af8c:	f7f5 fdd2 	bl	8000b34 <__aeabi_dcmpun>
 800af90:	b140      	cbz	r0, 800afa4 <_printf_float+0xe0>
 800af92:	464b      	mov	r3, r9
 800af94:	4a80      	ldr	r2, [pc, #512]	@ (800b198 <_printf_float+0x2d4>)
 800af96:	2b00      	cmp	r3, #0
 800af98:	bfbc      	itt	lt
 800af9a:	232d      	movlt	r3, #45	@ 0x2d
 800af9c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800afa0:	4b7e      	ldr	r3, [pc, #504]	@ (800b19c <_printf_float+0x2d8>)
 800afa2:	e7d4      	b.n	800af4e <_printf_float+0x8a>
 800afa4:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800afa8:	6863      	ldr	r3, [r4, #4]
 800afaa:	9206      	str	r2, [sp, #24]
 800afac:	1c5a      	adds	r2, r3, #1
 800afae:	d13b      	bne.n	800b028 <_printf_float+0x164>
 800afb0:	2306      	movs	r3, #6
 800afb2:	6063      	str	r3, [r4, #4]
 800afb4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800afb8:	2300      	movs	r3, #0
 800afba:	4628      	mov	r0, r5
 800afbc:	6022      	str	r2, [r4, #0]
 800afbe:	9303      	str	r3, [sp, #12]
 800afc0:	ab0a      	add	r3, sp, #40	@ 0x28
 800afc2:	e9cd a301 	strd	sl, r3, [sp, #4]
 800afc6:	ab09      	add	r3, sp, #36	@ 0x24
 800afc8:	ec49 8b10 	vmov	d0, r8, r9
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800afd2:	6861      	ldr	r1, [r4, #4]
 800afd4:	f7ff fed8 	bl	800ad88 <__cvt>
 800afd8:	9b06      	ldr	r3, [sp, #24]
 800afda:	4680      	mov	r8, r0
 800afdc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afde:	2b47      	cmp	r3, #71	@ 0x47
 800afe0:	d129      	bne.n	800b036 <_printf_float+0x172>
 800afe2:	1cc8      	adds	r0, r1, #3
 800afe4:	db02      	blt.n	800afec <_printf_float+0x128>
 800afe6:	6863      	ldr	r3, [r4, #4]
 800afe8:	4299      	cmp	r1, r3
 800afea:	dd41      	ble.n	800b070 <_printf_float+0x1ac>
 800afec:	f1aa 0a02 	sub.w	sl, sl, #2
 800aff0:	fa5f fa8a 	uxtb.w	sl, sl
 800aff4:	3901      	subs	r1, #1
 800aff6:	4652      	mov	r2, sl
 800aff8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800affc:	9109      	str	r1, [sp, #36]	@ 0x24
 800affe:	f7ff ff28 	bl	800ae52 <__exponent>
 800b002:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b004:	4681      	mov	r9, r0
 800b006:	1813      	adds	r3, r2, r0
 800b008:	2a01      	cmp	r2, #1
 800b00a:	6123      	str	r3, [r4, #16]
 800b00c:	dc02      	bgt.n	800b014 <_printf_float+0x150>
 800b00e:	6822      	ldr	r2, [r4, #0]
 800b010:	07d2      	lsls	r2, r2, #31
 800b012:	d501      	bpl.n	800b018 <_printf_float+0x154>
 800b014:	3301      	adds	r3, #1
 800b016:	6123      	str	r3, [r4, #16]
 800b018:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d0a2      	beq.n	800af66 <_printf_float+0xa2>
 800b020:	232d      	movs	r3, #45	@ 0x2d
 800b022:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b026:	e79e      	b.n	800af66 <_printf_float+0xa2>
 800b028:	9a06      	ldr	r2, [sp, #24]
 800b02a:	2a47      	cmp	r2, #71	@ 0x47
 800b02c:	d1c2      	bne.n	800afb4 <_printf_float+0xf0>
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1c0      	bne.n	800afb4 <_printf_float+0xf0>
 800b032:	2301      	movs	r3, #1
 800b034:	e7bd      	b.n	800afb2 <_printf_float+0xee>
 800b036:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b03a:	d9db      	bls.n	800aff4 <_printf_float+0x130>
 800b03c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b040:	d118      	bne.n	800b074 <_printf_float+0x1b0>
 800b042:	2900      	cmp	r1, #0
 800b044:	6863      	ldr	r3, [r4, #4]
 800b046:	dd0b      	ble.n	800b060 <_printf_float+0x19c>
 800b048:	6121      	str	r1, [r4, #16]
 800b04a:	b913      	cbnz	r3, 800b052 <_printf_float+0x18e>
 800b04c:	6822      	ldr	r2, [r4, #0]
 800b04e:	07d0      	lsls	r0, r2, #31
 800b050:	d502      	bpl.n	800b058 <_printf_float+0x194>
 800b052:	3301      	adds	r3, #1
 800b054:	440b      	add	r3, r1
 800b056:	6123      	str	r3, [r4, #16]
 800b058:	f04f 0900 	mov.w	r9, #0
 800b05c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b05e:	e7db      	b.n	800b018 <_printf_float+0x154>
 800b060:	b913      	cbnz	r3, 800b068 <_printf_float+0x1a4>
 800b062:	6822      	ldr	r2, [r4, #0]
 800b064:	07d2      	lsls	r2, r2, #31
 800b066:	d501      	bpl.n	800b06c <_printf_float+0x1a8>
 800b068:	3302      	adds	r3, #2
 800b06a:	e7f4      	b.n	800b056 <_printf_float+0x192>
 800b06c:	2301      	movs	r3, #1
 800b06e:	e7f2      	b.n	800b056 <_printf_float+0x192>
 800b070:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b076:	4299      	cmp	r1, r3
 800b078:	db05      	blt.n	800b086 <_printf_float+0x1c2>
 800b07a:	6823      	ldr	r3, [r4, #0]
 800b07c:	6121      	str	r1, [r4, #16]
 800b07e:	07d8      	lsls	r0, r3, #31
 800b080:	d5ea      	bpl.n	800b058 <_printf_float+0x194>
 800b082:	1c4b      	adds	r3, r1, #1
 800b084:	e7e7      	b.n	800b056 <_printf_float+0x192>
 800b086:	2900      	cmp	r1, #0
 800b088:	bfd4      	ite	le
 800b08a:	f1c1 0202 	rsble	r2, r1, #2
 800b08e:	2201      	movgt	r2, #1
 800b090:	4413      	add	r3, r2
 800b092:	e7e0      	b.n	800b056 <_printf_float+0x192>
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	055a      	lsls	r2, r3, #21
 800b098:	d407      	bmi.n	800b0aa <_printf_float+0x1e6>
 800b09a:	6923      	ldr	r3, [r4, #16]
 800b09c:	4642      	mov	r2, r8
 800b09e:	4631      	mov	r1, r6
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	47b8      	blx	r7
 800b0a4:	3001      	adds	r0, #1
 800b0a6:	d12b      	bne.n	800b100 <_printf_float+0x23c>
 800b0a8:	e767      	b.n	800af7a <_printf_float+0xb6>
 800b0aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b0ae:	f240 80dd 	bls.w	800b26c <_printf_float+0x3a8>
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b0ba:	f7f5 fd09 	bl	8000ad0 <__aeabi_dcmpeq>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d033      	beq.n	800b12a <_printf_float+0x266>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	4a36      	ldr	r2, [pc, #216]	@ (800b1a0 <_printf_float+0x2dc>)
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b8      	blx	r7
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	f43f af54 	beq.w	800af7a <_printf_float+0xb6>
 800b0d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b0d6:	4543      	cmp	r3, r8
 800b0d8:	db02      	blt.n	800b0e0 <_printf_float+0x21c>
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	07d8      	lsls	r0, r3, #31
 800b0de:	d50f      	bpl.n	800b100 <_printf_float+0x23c>
 800b0e0:	4631      	mov	r1, r6
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0e8:	47b8      	blx	r7
 800b0ea:	3001      	adds	r0, #1
 800b0ec:	f43f af45 	beq.w	800af7a <_printf_float+0xb6>
 800b0f0:	f04f 0900 	mov.w	r9, #0
 800b0f4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b0f8:	f104 0a1a 	add.w	sl, r4, #26
 800b0fc:	45c8      	cmp	r8, r9
 800b0fe:	dc09      	bgt.n	800b114 <_printf_float+0x250>
 800b100:	6823      	ldr	r3, [r4, #0]
 800b102:	079b      	lsls	r3, r3, #30
 800b104:	f100 8103 	bmi.w	800b30e <_printf_float+0x44a>
 800b108:	68e0      	ldr	r0, [r4, #12]
 800b10a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b10c:	4298      	cmp	r0, r3
 800b10e:	bfb8      	it	lt
 800b110:	4618      	movlt	r0, r3
 800b112:	e734      	b.n	800af7e <_printf_float+0xba>
 800b114:	2301      	movs	r3, #1
 800b116:	4652      	mov	r2, sl
 800b118:	4631      	mov	r1, r6
 800b11a:	4628      	mov	r0, r5
 800b11c:	47b8      	blx	r7
 800b11e:	3001      	adds	r0, #1
 800b120:	f43f af2b 	beq.w	800af7a <_printf_float+0xb6>
 800b124:	f109 0901 	add.w	r9, r9, #1
 800b128:	e7e8      	b.n	800b0fc <_printf_float+0x238>
 800b12a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	dc39      	bgt.n	800b1a4 <_printf_float+0x2e0>
 800b130:	2301      	movs	r3, #1
 800b132:	4a1b      	ldr	r2, [pc, #108]	@ (800b1a0 <_printf_float+0x2dc>)
 800b134:	4631      	mov	r1, r6
 800b136:	4628      	mov	r0, r5
 800b138:	47b8      	blx	r7
 800b13a:	3001      	adds	r0, #1
 800b13c:	f43f af1d 	beq.w	800af7a <_printf_float+0xb6>
 800b140:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b144:	ea59 0303 	orrs.w	r3, r9, r3
 800b148:	d102      	bne.n	800b150 <_printf_float+0x28c>
 800b14a:	6823      	ldr	r3, [r4, #0]
 800b14c:	07d9      	lsls	r1, r3, #31
 800b14e:	d5d7      	bpl.n	800b100 <_printf_float+0x23c>
 800b150:	4631      	mov	r1, r6
 800b152:	4628      	mov	r0, r5
 800b154:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b158:	47b8      	blx	r7
 800b15a:	3001      	adds	r0, #1
 800b15c:	f43f af0d 	beq.w	800af7a <_printf_float+0xb6>
 800b160:	f04f 0a00 	mov.w	sl, #0
 800b164:	f104 0b1a 	add.w	fp, r4, #26
 800b168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b16a:	425b      	negs	r3, r3
 800b16c:	4553      	cmp	r3, sl
 800b16e:	dc01      	bgt.n	800b174 <_printf_float+0x2b0>
 800b170:	464b      	mov	r3, r9
 800b172:	e793      	b.n	800b09c <_printf_float+0x1d8>
 800b174:	2301      	movs	r3, #1
 800b176:	465a      	mov	r2, fp
 800b178:	4631      	mov	r1, r6
 800b17a:	4628      	mov	r0, r5
 800b17c:	47b8      	blx	r7
 800b17e:	3001      	adds	r0, #1
 800b180:	f43f aefb 	beq.w	800af7a <_printf_float+0xb6>
 800b184:	f10a 0a01 	add.w	sl, sl, #1
 800b188:	e7ee      	b.n	800b168 <_printf_float+0x2a4>
 800b18a:	bf00      	nop
 800b18c:	7fefffff 	.word	0x7fefffff
 800b190:	0800f53c 	.word	0x0800f53c
 800b194:	0800f540 	.word	0x0800f540
 800b198:	0800f544 	.word	0x0800f544
 800b19c:	0800f548 	.word	0x0800f548
 800b1a0:	0800f54c 	.word	0x0800f54c
 800b1a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b1a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b1aa:	4553      	cmp	r3, sl
 800b1ac:	bfa8      	it	ge
 800b1ae:	4653      	movge	r3, sl
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	4699      	mov	r9, r3
 800b1b4:	dc36      	bgt.n	800b224 <_printf_float+0x360>
 800b1b6:	f04f 0b00 	mov.w	fp, #0
 800b1ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1be:	f104 021a 	add.w	r2, r4, #26
 800b1c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b1c4:	9306      	str	r3, [sp, #24]
 800b1c6:	eba3 0309 	sub.w	r3, r3, r9
 800b1ca:	455b      	cmp	r3, fp
 800b1cc:	dc31      	bgt.n	800b232 <_printf_float+0x36e>
 800b1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1d0:	459a      	cmp	sl, r3
 800b1d2:	dc3a      	bgt.n	800b24a <_printf_float+0x386>
 800b1d4:	6823      	ldr	r3, [r4, #0]
 800b1d6:	07da      	lsls	r2, r3, #31
 800b1d8:	d437      	bmi.n	800b24a <_printf_float+0x386>
 800b1da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1dc:	ebaa 0903 	sub.w	r9, sl, r3
 800b1e0:	9b06      	ldr	r3, [sp, #24]
 800b1e2:	ebaa 0303 	sub.w	r3, sl, r3
 800b1e6:	4599      	cmp	r9, r3
 800b1e8:	bfa8      	it	ge
 800b1ea:	4699      	movge	r9, r3
 800b1ec:	f1b9 0f00 	cmp.w	r9, #0
 800b1f0:	dc33      	bgt.n	800b25a <_printf_float+0x396>
 800b1f2:	f04f 0800 	mov.w	r8, #0
 800b1f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1fa:	f104 0b1a 	add.w	fp, r4, #26
 800b1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b200:	ebaa 0303 	sub.w	r3, sl, r3
 800b204:	eba3 0309 	sub.w	r3, r3, r9
 800b208:	4543      	cmp	r3, r8
 800b20a:	f77f af79 	ble.w	800b100 <_printf_float+0x23c>
 800b20e:	2301      	movs	r3, #1
 800b210:	465a      	mov	r2, fp
 800b212:	4631      	mov	r1, r6
 800b214:	4628      	mov	r0, r5
 800b216:	47b8      	blx	r7
 800b218:	3001      	adds	r0, #1
 800b21a:	f43f aeae 	beq.w	800af7a <_printf_float+0xb6>
 800b21e:	f108 0801 	add.w	r8, r8, #1
 800b222:	e7ec      	b.n	800b1fe <_printf_float+0x33a>
 800b224:	4642      	mov	r2, r8
 800b226:	4631      	mov	r1, r6
 800b228:	4628      	mov	r0, r5
 800b22a:	47b8      	blx	r7
 800b22c:	3001      	adds	r0, #1
 800b22e:	d1c2      	bne.n	800b1b6 <_printf_float+0x2f2>
 800b230:	e6a3      	b.n	800af7a <_printf_float+0xb6>
 800b232:	2301      	movs	r3, #1
 800b234:	4631      	mov	r1, r6
 800b236:	4628      	mov	r0, r5
 800b238:	9206      	str	r2, [sp, #24]
 800b23a:	47b8      	blx	r7
 800b23c:	3001      	adds	r0, #1
 800b23e:	f43f ae9c 	beq.w	800af7a <_printf_float+0xb6>
 800b242:	f10b 0b01 	add.w	fp, fp, #1
 800b246:	9a06      	ldr	r2, [sp, #24]
 800b248:	e7bb      	b.n	800b1c2 <_printf_float+0x2fe>
 800b24a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b24e:	4631      	mov	r1, r6
 800b250:	4628      	mov	r0, r5
 800b252:	47b8      	blx	r7
 800b254:	3001      	adds	r0, #1
 800b256:	d1c0      	bne.n	800b1da <_printf_float+0x316>
 800b258:	e68f      	b.n	800af7a <_printf_float+0xb6>
 800b25a:	9a06      	ldr	r2, [sp, #24]
 800b25c:	464b      	mov	r3, r9
 800b25e:	4631      	mov	r1, r6
 800b260:	4628      	mov	r0, r5
 800b262:	4442      	add	r2, r8
 800b264:	47b8      	blx	r7
 800b266:	3001      	adds	r0, #1
 800b268:	d1c3      	bne.n	800b1f2 <_printf_float+0x32e>
 800b26a:	e686      	b.n	800af7a <_printf_float+0xb6>
 800b26c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b270:	f1ba 0f01 	cmp.w	sl, #1
 800b274:	dc01      	bgt.n	800b27a <_printf_float+0x3b6>
 800b276:	07db      	lsls	r3, r3, #31
 800b278:	d536      	bpl.n	800b2e8 <_printf_float+0x424>
 800b27a:	2301      	movs	r3, #1
 800b27c:	4642      	mov	r2, r8
 800b27e:	4631      	mov	r1, r6
 800b280:	4628      	mov	r0, r5
 800b282:	47b8      	blx	r7
 800b284:	3001      	adds	r0, #1
 800b286:	f43f ae78 	beq.w	800af7a <_printf_float+0xb6>
 800b28a:	4631      	mov	r1, r6
 800b28c:	4628      	mov	r0, r5
 800b28e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b292:	47b8      	blx	r7
 800b294:	3001      	adds	r0, #1
 800b296:	f43f ae70 	beq.w	800af7a <_printf_float+0xb6>
 800b29a:	2200      	movs	r2, #0
 800b29c:	2300      	movs	r3, #0
 800b29e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b2a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b2a6:	f7f5 fc13 	bl	8000ad0 <__aeabi_dcmpeq>
 800b2aa:	b9c0      	cbnz	r0, 800b2de <_printf_float+0x41a>
 800b2ac:	4653      	mov	r3, sl
 800b2ae:	f108 0201 	add.w	r2, r8, #1
 800b2b2:	4631      	mov	r1, r6
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	47b8      	blx	r7
 800b2b8:	3001      	adds	r0, #1
 800b2ba:	d10c      	bne.n	800b2d6 <_printf_float+0x412>
 800b2bc:	e65d      	b.n	800af7a <_printf_float+0xb6>
 800b2be:	2301      	movs	r3, #1
 800b2c0:	465a      	mov	r2, fp
 800b2c2:	4631      	mov	r1, r6
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	47b8      	blx	r7
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	f43f ae56 	beq.w	800af7a <_printf_float+0xb6>
 800b2ce:	f108 0801 	add.w	r8, r8, #1
 800b2d2:	45d0      	cmp	r8, sl
 800b2d4:	dbf3      	blt.n	800b2be <_printf_float+0x3fa>
 800b2d6:	464b      	mov	r3, r9
 800b2d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b2dc:	e6df      	b.n	800b09e <_printf_float+0x1da>
 800b2de:	f04f 0800 	mov.w	r8, #0
 800b2e2:	f104 0b1a 	add.w	fp, r4, #26
 800b2e6:	e7f4      	b.n	800b2d2 <_printf_float+0x40e>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	4642      	mov	r2, r8
 800b2ec:	e7e1      	b.n	800b2b2 <_printf_float+0x3ee>
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	464a      	mov	r2, r9
 800b2f2:	4631      	mov	r1, r6
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	47b8      	blx	r7
 800b2f8:	3001      	adds	r0, #1
 800b2fa:	f43f ae3e 	beq.w	800af7a <_printf_float+0xb6>
 800b2fe:	f108 0801 	add.w	r8, r8, #1
 800b302:	68e3      	ldr	r3, [r4, #12]
 800b304:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b306:	1a5b      	subs	r3, r3, r1
 800b308:	4543      	cmp	r3, r8
 800b30a:	dcf0      	bgt.n	800b2ee <_printf_float+0x42a>
 800b30c:	e6fc      	b.n	800b108 <_printf_float+0x244>
 800b30e:	f04f 0800 	mov.w	r8, #0
 800b312:	f104 0919 	add.w	r9, r4, #25
 800b316:	e7f4      	b.n	800b302 <_printf_float+0x43e>

0800b318 <_printf_common>:
 800b318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b31c:	4616      	mov	r6, r2
 800b31e:	4698      	mov	r8, r3
 800b320:	688a      	ldr	r2, [r1, #8]
 800b322:	4607      	mov	r7, r0
 800b324:	690b      	ldr	r3, [r1, #16]
 800b326:	460c      	mov	r4, r1
 800b328:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b32c:	4293      	cmp	r3, r2
 800b32e:	bfb8      	it	lt
 800b330:	4613      	movlt	r3, r2
 800b332:	6033      	str	r3, [r6, #0]
 800b334:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b338:	b10a      	cbz	r2, 800b33e <_printf_common+0x26>
 800b33a:	3301      	adds	r3, #1
 800b33c:	6033      	str	r3, [r6, #0]
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	0699      	lsls	r1, r3, #26
 800b342:	bf42      	ittt	mi
 800b344:	6833      	ldrmi	r3, [r6, #0]
 800b346:	3302      	addmi	r3, #2
 800b348:	6033      	strmi	r3, [r6, #0]
 800b34a:	6825      	ldr	r5, [r4, #0]
 800b34c:	f015 0506 	ands.w	r5, r5, #6
 800b350:	d106      	bne.n	800b360 <_printf_common+0x48>
 800b352:	f104 0a19 	add.w	sl, r4, #25
 800b356:	68e3      	ldr	r3, [r4, #12]
 800b358:	6832      	ldr	r2, [r6, #0]
 800b35a:	1a9b      	subs	r3, r3, r2
 800b35c:	42ab      	cmp	r3, r5
 800b35e:	dc2b      	bgt.n	800b3b8 <_printf_common+0xa0>
 800b360:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b364:	6822      	ldr	r2, [r4, #0]
 800b366:	3b00      	subs	r3, #0
 800b368:	bf18      	it	ne
 800b36a:	2301      	movne	r3, #1
 800b36c:	0692      	lsls	r2, r2, #26
 800b36e:	d430      	bmi.n	800b3d2 <_printf_common+0xba>
 800b370:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b374:	4641      	mov	r1, r8
 800b376:	4638      	mov	r0, r7
 800b378:	47c8      	blx	r9
 800b37a:	3001      	adds	r0, #1
 800b37c:	d023      	beq.n	800b3c6 <_printf_common+0xae>
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	341a      	adds	r4, #26
 800b382:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b386:	f003 0306 	and.w	r3, r3, #6
 800b38a:	2b04      	cmp	r3, #4
 800b38c:	bf0a      	itet	eq
 800b38e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b392:	2500      	movne	r5, #0
 800b394:	6833      	ldreq	r3, [r6, #0]
 800b396:	f04f 0600 	mov.w	r6, #0
 800b39a:	bf08      	it	eq
 800b39c:	1aed      	subeq	r5, r5, r3
 800b39e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b3a2:	bf08      	it	eq
 800b3a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	bfc4      	itt	gt
 800b3ac:	1a9b      	subgt	r3, r3, r2
 800b3ae:	18ed      	addgt	r5, r5, r3
 800b3b0:	42b5      	cmp	r5, r6
 800b3b2:	d11a      	bne.n	800b3ea <_printf_common+0xd2>
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	e008      	b.n	800b3ca <_printf_common+0xb2>
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	4652      	mov	r2, sl
 800b3bc:	4641      	mov	r1, r8
 800b3be:	4638      	mov	r0, r7
 800b3c0:	47c8      	blx	r9
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	d103      	bne.n	800b3ce <_printf_common+0xb6>
 800b3c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ce:	3501      	adds	r5, #1
 800b3d0:	e7c1      	b.n	800b356 <_printf_common+0x3e>
 800b3d2:	18e1      	adds	r1, r4, r3
 800b3d4:	1c5a      	adds	r2, r3, #1
 800b3d6:	2030      	movs	r0, #48	@ 0x30
 800b3d8:	3302      	adds	r3, #2
 800b3da:	4422      	add	r2, r4
 800b3dc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b3e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b3e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b3e8:	e7c2      	b.n	800b370 <_printf_common+0x58>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	4622      	mov	r2, r4
 800b3ee:	4641      	mov	r1, r8
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	47c8      	blx	r9
 800b3f4:	3001      	adds	r0, #1
 800b3f6:	d0e6      	beq.n	800b3c6 <_printf_common+0xae>
 800b3f8:	3601      	adds	r6, #1
 800b3fa:	e7d9      	b.n	800b3b0 <_printf_common+0x98>

0800b3fc <_printf_i>:
 800b3fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b400:	7e0f      	ldrb	r7, [r1, #24]
 800b402:	4691      	mov	r9, r2
 800b404:	4680      	mov	r8, r0
 800b406:	460c      	mov	r4, r1
 800b408:	2f78      	cmp	r7, #120	@ 0x78
 800b40a:	469a      	mov	sl, r3
 800b40c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b40e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b412:	d807      	bhi.n	800b424 <_printf_i+0x28>
 800b414:	2f62      	cmp	r7, #98	@ 0x62
 800b416:	d80a      	bhi.n	800b42e <_printf_i+0x32>
 800b418:	2f00      	cmp	r7, #0
 800b41a:	f000 80d2 	beq.w	800b5c2 <_printf_i+0x1c6>
 800b41e:	2f58      	cmp	r7, #88	@ 0x58
 800b420:	f000 80b9 	beq.w	800b596 <_printf_i+0x19a>
 800b424:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b428:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b42c:	e03a      	b.n	800b4a4 <_printf_i+0xa8>
 800b42e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b432:	2b15      	cmp	r3, #21
 800b434:	d8f6      	bhi.n	800b424 <_printf_i+0x28>
 800b436:	a101      	add	r1, pc, #4	@ (adr r1, 800b43c <_printf_i+0x40>)
 800b438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b43c:	0800b495 	.word	0x0800b495
 800b440:	0800b4a9 	.word	0x0800b4a9
 800b444:	0800b425 	.word	0x0800b425
 800b448:	0800b425 	.word	0x0800b425
 800b44c:	0800b425 	.word	0x0800b425
 800b450:	0800b425 	.word	0x0800b425
 800b454:	0800b4a9 	.word	0x0800b4a9
 800b458:	0800b425 	.word	0x0800b425
 800b45c:	0800b425 	.word	0x0800b425
 800b460:	0800b425 	.word	0x0800b425
 800b464:	0800b425 	.word	0x0800b425
 800b468:	0800b5a9 	.word	0x0800b5a9
 800b46c:	0800b4d3 	.word	0x0800b4d3
 800b470:	0800b563 	.word	0x0800b563
 800b474:	0800b425 	.word	0x0800b425
 800b478:	0800b425 	.word	0x0800b425
 800b47c:	0800b5cb 	.word	0x0800b5cb
 800b480:	0800b425 	.word	0x0800b425
 800b484:	0800b4d3 	.word	0x0800b4d3
 800b488:	0800b425 	.word	0x0800b425
 800b48c:	0800b425 	.word	0x0800b425
 800b490:	0800b56b 	.word	0x0800b56b
 800b494:	6833      	ldr	r3, [r6, #0]
 800b496:	1d1a      	adds	r2, r3, #4
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	6032      	str	r2, [r6, #0]
 800b49c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	e09d      	b.n	800b5e4 <_printf_i+0x1e8>
 800b4a8:	6833      	ldr	r3, [r6, #0]
 800b4aa:	6820      	ldr	r0, [r4, #0]
 800b4ac:	1d19      	adds	r1, r3, #4
 800b4ae:	6031      	str	r1, [r6, #0]
 800b4b0:	0606      	lsls	r6, r0, #24
 800b4b2:	d501      	bpl.n	800b4b8 <_printf_i+0xbc>
 800b4b4:	681d      	ldr	r5, [r3, #0]
 800b4b6:	e003      	b.n	800b4c0 <_printf_i+0xc4>
 800b4b8:	0645      	lsls	r5, r0, #25
 800b4ba:	d5fb      	bpl.n	800b4b4 <_printf_i+0xb8>
 800b4bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b4c0:	2d00      	cmp	r5, #0
 800b4c2:	da03      	bge.n	800b4cc <_printf_i+0xd0>
 800b4c4:	232d      	movs	r3, #45	@ 0x2d
 800b4c6:	426d      	negs	r5, r5
 800b4c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4cc:	4859      	ldr	r0, [pc, #356]	@ (800b634 <_printf_i+0x238>)
 800b4ce:	230a      	movs	r3, #10
 800b4d0:	e011      	b.n	800b4f6 <_printf_i+0xfa>
 800b4d2:	6821      	ldr	r1, [r4, #0]
 800b4d4:	6833      	ldr	r3, [r6, #0]
 800b4d6:	0608      	lsls	r0, r1, #24
 800b4d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b4dc:	d402      	bmi.n	800b4e4 <_printf_i+0xe8>
 800b4de:	0649      	lsls	r1, r1, #25
 800b4e0:	bf48      	it	mi
 800b4e2:	b2ad      	uxthmi	r5, r5
 800b4e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b4e6:	6033      	str	r3, [r6, #0]
 800b4e8:	4852      	ldr	r0, [pc, #328]	@ (800b634 <_printf_i+0x238>)
 800b4ea:	bf14      	ite	ne
 800b4ec:	230a      	movne	r3, #10
 800b4ee:	2308      	moveq	r3, #8
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b4f6:	6866      	ldr	r6, [r4, #4]
 800b4f8:	2e00      	cmp	r6, #0
 800b4fa:	60a6      	str	r6, [r4, #8]
 800b4fc:	bfa2      	ittt	ge
 800b4fe:	6821      	ldrge	r1, [r4, #0]
 800b500:	f021 0104 	bicge.w	r1, r1, #4
 800b504:	6021      	strge	r1, [r4, #0]
 800b506:	b90d      	cbnz	r5, 800b50c <_printf_i+0x110>
 800b508:	2e00      	cmp	r6, #0
 800b50a:	d04b      	beq.n	800b5a4 <_printf_i+0x1a8>
 800b50c:	4616      	mov	r6, r2
 800b50e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b512:	fb03 5711 	mls	r7, r3, r1, r5
 800b516:	5dc7      	ldrb	r7, [r0, r7]
 800b518:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b51c:	462f      	mov	r7, r5
 800b51e:	460d      	mov	r5, r1
 800b520:	42bb      	cmp	r3, r7
 800b522:	d9f4      	bls.n	800b50e <_printf_i+0x112>
 800b524:	2b08      	cmp	r3, #8
 800b526:	d10b      	bne.n	800b540 <_printf_i+0x144>
 800b528:	6823      	ldr	r3, [r4, #0]
 800b52a:	07df      	lsls	r7, r3, #31
 800b52c:	d508      	bpl.n	800b540 <_printf_i+0x144>
 800b52e:	6923      	ldr	r3, [r4, #16]
 800b530:	6861      	ldr	r1, [r4, #4]
 800b532:	4299      	cmp	r1, r3
 800b534:	bfde      	ittt	le
 800b536:	2330      	movle	r3, #48	@ 0x30
 800b538:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b53c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b540:	1b92      	subs	r2, r2, r6
 800b542:	6122      	str	r2, [r4, #16]
 800b544:	464b      	mov	r3, r9
 800b546:	aa03      	add	r2, sp, #12
 800b548:	4621      	mov	r1, r4
 800b54a:	4640      	mov	r0, r8
 800b54c:	f8cd a000 	str.w	sl, [sp]
 800b550:	f7ff fee2 	bl	800b318 <_printf_common>
 800b554:	3001      	adds	r0, #1
 800b556:	d14a      	bne.n	800b5ee <_printf_i+0x1f2>
 800b558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b55c:	b004      	add	sp, #16
 800b55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b562:	6823      	ldr	r3, [r4, #0]
 800b564:	f043 0320 	orr.w	r3, r3, #32
 800b568:	6023      	str	r3, [r4, #0]
 800b56a:	2778      	movs	r7, #120	@ 0x78
 800b56c:	4832      	ldr	r0, [pc, #200]	@ (800b638 <_printf_i+0x23c>)
 800b56e:	6823      	ldr	r3, [r4, #0]
 800b570:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b574:	061f      	lsls	r7, r3, #24
 800b576:	6831      	ldr	r1, [r6, #0]
 800b578:	f851 5b04 	ldr.w	r5, [r1], #4
 800b57c:	d402      	bmi.n	800b584 <_printf_i+0x188>
 800b57e:	065f      	lsls	r7, r3, #25
 800b580:	bf48      	it	mi
 800b582:	b2ad      	uxthmi	r5, r5
 800b584:	6031      	str	r1, [r6, #0]
 800b586:	07d9      	lsls	r1, r3, #31
 800b588:	bf44      	itt	mi
 800b58a:	f043 0320 	orrmi.w	r3, r3, #32
 800b58e:	6023      	strmi	r3, [r4, #0]
 800b590:	b11d      	cbz	r5, 800b59a <_printf_i+0x19e>
 800b592:	2310      	movs	r3, #16
 800b594:	e7ac      	b.n	800b4f0 <_printf_i+0xf4>
 800b596:	4827      	ldr	r0, [pc, #156]	@ (800b634 <_printf_i+0x238>)
 800b598:	e7e9      	b.n	800b56e <_printf_i+0x172>
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	f023 0320 	bic.w	r3, r3, #32
 800b5a0:	6023      	str	r3, [r4, #0]
 800b5a2:	e7f6      	b.n	800b592 <_printf_i+0x196>
 800b5a4:	4616      	mov	r6, r2
 800b5a6:	e7bd      	b.n	800b524 <_printf_i+0x128>
 800b5a8:	6833      	ldr	r3, [r6, #0]
 800b5aa:	6825      	ldr	r5, [r4, #0]
 800b5ac:	1d18      	adds	r0, r3, #4
 800b5ae:	6961      	ldr	r1, [r4, #20]
 800b5b0:	6030      	str	r0, [r6, #0]
 800b5b2:	062e      	lsls	r6, r5, #24
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	d501      	bpl.n	800b5bc <_printf_i+0x1c0>
 800b5b8:	6019      	str	r1, [r3, #0]
 800b5ba:	e002      	b.n	800b5c2 <_printf_i+0x1c6>
 800b5bc:	0668      	lsls	r0, r5, #25
 800b5be:	d5fb      	bpl.n	800b5b8 <_printf_i+0x1bc>
 800b5c0:	8019      	strh	r1, [r3, #0]
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	4616      	mov	r6, r2
 800b5c6:	6123      	str	r3, [r4, #16]
 800b5c8:	e7bc      	b.n	800b544 <_printf_i+0x148>
 800b5ca:	6833      	ldr	r3, [r6, #0]
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	1d1a      	adds	r2, r3, #4
 800b5d0:	6032      	str	r2, [r6, #0]
 800b5d2:	681e      	ldr	r6, [r3, #0]
 800b5d4:	6862      	ldr	r2, [r4, #4]
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	f000 fa0f 	bl	800b9fa <memchr>
 800b5dc:	b108      	cbz	r0, 800b5e2 <_printf_i+0x1e6>
 800b5de:	1b80      	subs	r0, r0, r6
 800b5e0:	6060      	str	r0, [r4, #4]
 800b5e2:	6863      	ldr	r3, [r4, #4]
 800b5e4:	6123      	str	r3, [r4, #16]
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5ec:	e7aa      	b.n	800b544 <_printf_i+0x148>
 800b5ee:	6923      	ldr	r3, [r4, #16]
 800b5f0:	4632      	mov	r2, r6
 800b5f2:	4649      	mov	r1, r9
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	47d0      	blx	sl
 800b5f8:	3001      	adds	r0, #1
 800b5fa:	d0ad      	beq.n	800b558 <_printf_i+0x15c>
 800b5fc:	6823      	ldr	r3, [r4, #0]
 800b5fe:	079b      	lsls	r3, r3, #30
 800b600:	d413      	bmi.n	800b62a <_printf_i+0x22e>
 800b602:	68e0      	ldr	r0, [r4, #12]
 800b604:	9b03      	ldr	r3, [sp, #12]
 800b606:	4298      	cmp	r0, r3
 800b608:	bfb8      	it	lt
 800b60a:	4618      	movlt	r0, r3
 800b60c:	e7a6      	b.n	800b55c <_printf_i+0x160>
 800b60e:	2301      	movs	r3, #1
 800b610:	4632      	mov	r2, r6
 800b612:	4649      	mov	r1, r9
 800b614:	4640      	mov	r0, r8
 800b616:	47d0      	blx	sl
 800b618:	3001      	adds	r0, #1
 800b61a:	d09d      	beq.n	800b558 <_printf_i+0x15c>
 800b61c:	3501      	adds	r5, #1
 800b61e:	68e3      	ldr	r3, [r4, #12]
 800b620:	9903      	ldr	r1, [sp, #12]
 800b622:	1a5b      	subs	r3, r3, r1
 800b624:	42ab      	cmp	r3, r5
 800b626:	dcf2      	bgt.n	800b60e <_printf_i+0x212>
 800b628:	e7eb      	b.n	800b602 <_printf_i+0x206>
 800b62a:	2500      	movs	r5, #0
 800b62c:	f104 0619 	add.w	r6, r4, #25
 800b630:	e7f5      	b.n	800b61e <_printf_i+0x222>
 800b632:	bf00      	nop
 800b634:	0800f54e 	.word	0x0800f54e
 800b638:	0800f55f 	.word	0x0800f55f

0800b63c <srand>:
 800b63c:	b538      	push	{r3, r4, r5, lr}
 800b63e:	4b10      	ldr	r3, [pc, #64]	@ (800b680 <srand+0x44>)
 800b640:	4604      	mov	r4, r0
 800b642:	681d      	ldr	r5, [r3, #0]
 800b644:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800b646:	b9b3      	cbnz	r3, 800b676 <srand+0x3a>
 800b648:	2018      	movs	r0, #24
 800b64a:	f001 f9a3 	bl	800c994 <malloc>
 800b64e:	4602      	mov	r2, r0
 800b650:	6328      	str	r0, [r5, #48]	@ 0x30
 800b652:	b920      	cbnz	r0, 800b65e <srand+0x22>
 800b654:	4b0b      	ldr	r3, [pc, #44]	@ (800b684 <srand+0x48>)
 800b656:	2146      	movs	r1, #70	@ 0x46
 800b658:	480b      	ldr	r0, [pc, #44]	@ (800b688 <srand+0x4c>)
 800b65a:	f000 f9e9 	bl	800ba30 <__assert_func>
 800b65e:	490b      	ldr	r1, [pc, #44]	@ (800b68c <srand+0x50>)
 800b660:	4b0b      	ldr	r3, [pc, #44]	@ (800b690 <srand+0x54>)
 800b662:	e9c0 1300 	strd	r1, r3, [r0]
 800b666:	4b0b      	ldr	r3, [pc, #44]	@ (800b694 <srand+0x58>)
 800b668:	2100      	movs	r1, #0
 800b66a:	6083      	str	r3, [r0, #8]
 800b66c:	230b      	movs	r3, #11
 800b66e:	8183      	strh	r3, [r0, #12]
 800b670:	2001      	movs	r0, #1
 800b672:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b676:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800b678:	2200      	movs	r2, #0
 800b67a:	611c      	str	r4, [r3, #16]
 800b67c:	615a      	str	r2, [r3, #20]
 800b67e:	bd38      	pop	{r3, r4, r5, pc}
 800b680:	200000b8 	.word	0x200000b8
 800b684:	0800f570 	.word	0x0800f570
 800b688:	0800f587 	.word	0x0800f587
 800b68c:	abcd330e 	.word	0xabcd330e
 800b690:	e66d1234 	.word	0xe66d1234
 800b694:	0005deec 	.word	0x0005deec

0800b698 <rand>:
 800b698:	4b16      	ldr	r3, [pc, #88]	@ (800b6f4 <rand+0x5c>)
 800b69a:	b510      	push	{r4, lr}
 800b69c:	681c      	ldr	r4, [r3, #0]
 800b69e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b6a0:	b9b3      	cbnz	r3, 800b6d0 <rand+0x38>
 800b6a2:	2018      	movs	r0, #24
 800b6a4:	f001 f976 	bl	800c994 <malloc>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	6320      	str	r0, [r4, #48]	@ 0x30
 800b6ac:	b920      	cbnz	r0, 800b6b8 <rand+0x20>
 800b6ae:	4b12      	ldr	r3, [pc, #72]	@ (800b6f8 <rand+0x60>)
 800b6b0:	2152      	movs	r1, #82	@ 0x52
 800b6b2:	4812      	ldr	r0, [pc, #72]	@ (800b6fc <rand+0x64>)
 800b6b4:	f000 f9bc 	bl	800ba30 <__assert_func>
 800b6b8:	4911      	ldr	r1, [pc, #68]	@ (800b700 <rand+0x68>)
 800b6ba:	4b12      	ldr	r3, [pc, #72]	@ (800b704 <rand+0x6c>)
 800b6bc:	e9c0 1300 	strd	r1, r3, [r0]
 800b6c0:	4b11      	ldr	r3, [pc, #68]	@ (800b708 <rand+0x70>)
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	6083      	str	r3, [r0, #8]
 800b6c6:	230b      	movs	r3, #11
 800b6c8:	8183      	strh	r3, [r0, #12]
 800b6ca:	2001      	movs	r0, #1
 800b6cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b6d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b6d2:	480e      	ldr	r0, [pc, #56]	@ (800b70c <rand+0x74>)
 800b6d4:	690b      	ldr	r3, [r1, #16]
 800b6d6:	694c      	ldr	r4, [r1, #20]
 800b6d8:	4a0d      	ldr	r2, [pc, #52]	@ (800b710 <rand+0x78>)
 800b6da:	4358      	muls	r0, r3
 800b6dc:	fb02 0004 	mla	r0, r2, r4, r0
 800b6e0:	fba3 3202 	umull	r3, r2, r3, r2
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	eb40 0002 	adc.w	r0, r0, r2
 800b6ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b6ee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b6f2:	bd10      	pop	{r4, pc}
 800b6f4:	200000b8 	.word	0x200000b8
 800b6f8:	0800f570 	.word	0x0800f570
 800b6fc:	0800f587 	.word	0x0800f587
 800b700:	abcd330e 	.word	0xabcd330e
 800b704:	e66d1234 	.word	0xe66d1234
 800b708:	0005deec 	.word	0x0005deec
 800b70c:	5851f42d 	.word	0x5851f42d
 800b710:	4c957f2d 	.word	0x4c957f2d

0800b714 <std>:
 800b714:	2300      	movs	r3, #0
 800b716:	b510      	push	{r4, lr}
 800b718:	4604      	mov	r4, r0
 800b71a:	6083      	str	r3, [r0, #8]
 800b71c:	8181      	strh	r1, [r0, #12]
 800b71e:	4619      	mov	r1, r3
 800b720:	6643      	str	r3, [r0, #100]	@ 0x64
 800b722:	81c2      	strh	r2, [r0, #14]
 800b724:	2208      	movs	r2, #8
 800b726:	6183      	str	r3, [r0, #24]
 800b728:	e9c0 3300 	strd	r3, r3, [r0]
 800b72c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b730:	305c      	adds	r0, #92	@ 0x5c
 800b732:	f000 f929 	bl	800b988 <memset>
 800b736:	4b0d      	ldr	r3, [pc, #52]	@ (800b76c <std+0x58>)
 800b738:	6224      	str	r4, [r4, #32]
 800b73a:	6263      	str	r3, [r4, #36]	@ 0x24
 800b73c:	4b0c      	ldr	r3, [pc, #48]	@ (800b770 <std+0x5c>)
 800b73e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b740:	4b0c      	ldr	r3, [pc, #48]	@ (800b774 <std+0x60>)
 800b742:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b744:	4b0c      	ldr	r3, [pc, #48]	@ (800b778 <std+0x64>)
 800b746:	6323      	str	r3, [r4, #48]	@ 0x30
 800b748:	4b0c      	ldr	r3, [pc, #48]	@ (800b77c <std+0x68>)
 800b74a:	429c      	cmp	r4, r3
 800b74c:	d006      	beq.n	800b75c <std+0x48>
 800b74e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b752:	4294      	cmp	r4, r2
 800b754:	d002      	beq.n	800b75c <std+0x48>
 800b756:	33d0      	adds	r3, #208	@ 0xd0
 800b758:	429c      	cmp	r4, r3
 800b75a:	d105      	bne.n	800b768 <std+0x54>
 800b75c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b764:	f000 b946 	b.w	800b9f4 <__retarget_lock_init_recursive>
 800b768:	bd10      	pop	{r4, pc}
 800b76a:	bf00      	nop
 800b76c:	0800d369 	.word	0x0800d369
 800b770:	0800d38b 	.word	0x0800d38b
 800b774:	0800d3c3 	.word	0x0800d3c3
 800b778:	0800d3e7 	.word	0x0800d3e7
 800b77c:	20000ee4 	.word	0x20000ee4

0800b780 <stdio_exit_handler>:
 800b780:	4a02      	ldr	r2, [pc, #8]	@ (800b78c <stdio_exit_handler+0xc>)
 800b782:	4903      	ldr	r1, [pc, #12]	@ (800b790 <stdio_exit_handler+0x10>)
 800b784:	4803      	ldr	r0, [pc, #12]	@ (800b794 <stdio_exit_handler+0x14>)
 800b786:	f000 b869 	b.w	800b85c <_fwalk_sglue>
 800b78a:	bf00      	nop
 800b78c:	200000ac 	.word	0x200000ac
 800b790:	0800cbf1 	.word	0x0800cbf1
 800b794:	200000bc 	.word	0x200000bc

0800b798 <cleanup_stdio>:
 800b798:	6841      	ldr	r1, [r0, #4]
 800b79a:	4b0c      	ldr	r3, [pc, #48]	@ (800b7cc <cleanup_stdio+0x34>)
 800b79c:	4299      	cmp	r1, r3
 800b79e:	b510      	push	{r4, lr}
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	d001      	beq.n	800b7a8 <cleanup_stdio+0x10>
 800b7a4:	f001 fa24 	bl	800cbf0 <_fflush_r>
 800b7a8:	68a1      	ldr	r1, [r4, #8]
 800b7aa:	4b09      	ldr	r3, [pc, #36]	@ (800b7d0 <cleanup_stdio+0x38>)
 800b7ac:	4299      	cmp	r1, r3
 800b7ae:	d002      	beq.n	800b7b6 <cleanup_stdio+0x1e>
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f001 fa1d 	bl	800cbf0 <_fflush_r>
 800b7b6:	68e1      	ldr	r1, [r4, #12]
 800b7b8:	4b06      	ldr	r3, [pc, #24]	@ (800b7d4 <cleanup_stdio+0x3c>)
 800b7ba:	4299      	cmp	r1, r3
 800b7bc:	d004      	beq.n	800b7c8 <cleanup_stdio+0x30>
 800b7be:	4620      	mov	r0, r4
 800b7c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7c4:	f001 ba14 	b.w	800cbf0 <_fflush_r>
 800b7c8:	bd10      	pop	{r4, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20000ee4 	.word	0x20000ee4
 800b7d0:	20000f4c 	.word	0x20000f4c
 800b7d4:	20000fb4 	.word	0x20000fb4

0800b7d8 <global_stdio_init.part.0>:
 800b7d8:	b510      	push	{r4, lr}
 800b7da:	4b0b      	ldr	r3, [pc, #44]	@ (800b808 <global_stdio_init.part.0+0x30>)
 800b7dc:	2104      	movs	r1, #4
 800b7de:	4c0b      	ldr	r4, [pc, #44]	@ (800b80c <global_stdio_init.part.0+0x34>)
 800b7e0:	4a0b      	ldr	r2, [pc, #44]	@ (800b810 <global_stdio_init.part.0+0x38>)
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	601a      	str	r2, [r3, #0]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f7ff ff94 	bl	800b714 <std>
 800b7ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	2109      	movs	r1, #9
 800b7f4:	f7ff ff8e 	bl	800b714 <std>
 800b7f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b7fc:	2202      	movs	r2, #2
 800b7fe:	2112      	movs	r1, #18
 800b800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b804:	f7ff bf86 	b.w	800b714 <std>
 800b808:	2000101c 	.word	0x2000101c
 800b80c:	20000ee4 	.word	0x20000ee4
 800b810:	0800b781 	.word	0x0800b781

0800b814 <__sfp_lock_acquire>:
 800b814:	4801      	ldr	r0, [pc, #4]	@ (800b81c <__sfp_lock_acquire+0x8>)
 800b816:	f000 b8ee 	b.w	800b9f6 <__retarget_lock_acquire_recursive>
 800b81a:	bf00      	nop
 800b81c:	20001021 	.word	0x20001021

0800b820 <__sfp_lock_release>:
 800b820:	4801      	ldr	r0, [pc, #4]	@ (800b828 <__sfp_lock_release+0x8>)
 800b822:	f000 b8e9 	b.w	800b9f8 <__retarget_lock_release_recursive>
 800b826:	bf00      	nop
 800b828:	20001021 	.word	0x20001021

0800b82c <__sinit>:
 800b82c:	b510      	push	{r4, lr}
 800b82e:	4604      	mov	r4, r0
 800b830:	f7ff fff0 	bl	800b814 <__sfp_lock_acquire>
 800b834:	6a23      	ldr	r3, [r4, #32]
 800b836:	b11b      	cbz	r3, 800b840 <__sinit+0x14>
 800b838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b83c:	f7ff bff0 	b.w	800b820 <__sfp_lock_release>
 800b840:	4b04      	ldr	r3, [pc, #16]	@ (800b854 <__sinit+0x28>)
 800b842:	6223      	str	r3, [r4, #32]
 800b844:	4b04      	ldr	r3, [pc, #16]	@ (800b858 <__sinit+0x2c>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1f5      	bne.n	800b838 <__sinit+0xc>
 800b84c:	f7ff ffc4 	bl	800b7d8 <global_stdio_init.part.0>
 800b850:	e7f2      	b.n	800b838 <__sinit+0xc>
 800b852:	bf00      	nop
 800b854:	0800b799 	.word	0x0800b799
 800b858:	2000101c 	.word	0x2000101c

0800b85c <_fwalk_sglue>:
 800b85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b860:	4607      	mov	r7, r0
 800b862:	4688      	mov	r8, r1
 800b864:	4614      	mov	r4, r2
 800b866:	2600      	movs	r6, #0
 800b868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b86c:	f1b9 0901 	subs.w	r9, r9, #1
 800b870:	d505      	bpl.n	800b87e <_fwalk_sglue+0x22>
 800b872:	6824      	ldr	r4, [r4, #0]
 800b874:	2c00      	cmp	r4, #0
 800b876:	d1f7      	bne.n	800b868 <_fwalk_sglue+0xc>
 800b878:	4630      	mov	r0, r6
 800b87a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b87e:	89ab      	ldrh	r3, [r5, #12]
 800b880:	2b01      	cmp	r3, #1
 800b882:	d907      	bls.n	800b894 <_fwalk_sglue+0x38>
 800b884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b888:	3301      	adds	r3, #1
 800b88a:	d003      	beq.n	800b894 <_fwalk_sglue+0x38>
 800b88c:	4629      	mov	r1, r5
 800b88e:	4638      	mov	r0, r7
 800b890:	47c0      	blx	r8
 800b892:	4306      	orrs	r6, r0
 800b894:	3568      	adds	r5, #104	@ 0x68
 800b896:	e7e9      	b.n	800b86c <_fwalk_sglue+0x10>

0800b898 <iprintf>:
 800b898:	b40f      	push	{r0, r1, r2, r3}
 800b89a:	b507      	push	{r0, r1, r2, lr}
 800b89c:	4906      	ldr	r1, [pc, #24]	@ (800b8b8 <iprintf+0x20>)
 800b89e:	ab04      	add	r3, sp, #16
 800b8a0:	6808      	ldr	r0, [r1, #0]
 800b8a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8a6:	6881      	ldr	r1, [r0, #8]
 800b8a8:	9301      	str	r3, [sp, #4]
 800b8aa:	f000 ff5b 	bl	800c764 <_vfiprintf_r>
 800b8ae:	b003      	add	sp, #12
 800b8b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8b4:	b004      	add	sp, #16
 800b8b6:	4770      	bx	lr
 800b8b8:	200000b8 	.word	0x200000b8

0800b8bc <putchar>:
 800b8bc:	4b02      	ldr	r3, [pc, #8]	@ (800b8c8 <putchar+0xc>)
 800b8be:	4601      	mov	r1, r0
 800b8c0:	6818      	ldr	r0, [r3, #0]
 800b8c2:	6882      	ldr	r2, [r0, #8]
 800b8c4:	f001 be9b 	b.w	800d5fe <_putc_r>
 800b8c8:	200000b8 	.word	0x200000b8

0800b8cc <_puts_r>:
 800b8cc:	6a03      	ldr	r3, [r0, #32]
 800b8ce:	b570      	push	{r4, r5, r6, lr}
 800b8d0:	4605      	mov	r5, r0
 800b8d2:	460e      	mov	r6, r1
 800b8d4:	6884      	ldr	r4, [r0, #8]
 800b8d6:	b90b      	cbnz	r3, 800b8dc <_puts_r+0x10>
 800b8d8:	f7ff ffa8 	bl	800b82c <__sinit>
 800b8dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b8de:	07db      	lsls	r3, r3, #31
 800b8e0:	d405      	bmi.n	800b8ee <_puts_r+0x22>
 800b8e2:	89a3      	ldrh	r3, [r4, #12]
 800b8e4:	0598      	lsls	r0, r3, #22
 800b8e6:	d402      	bmi.n	800b8ee <_puts_r+0x22>
 800b8e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8ea:	f000 f884 	bl	800b9f6 <__retarget_lock_acquire_recursive>
 800b8ee:	89a3      	ldrh	r3, [r4, #12]
 800b8f0:	0719      	lsls	r1, r3, #28
 800b8f2:	d502      	bpl.n	800b8fa <_puts_r+0x2e>
 800b8f4:	6923      	ldr	r3, [r4, #16]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d135      	bne.n	800b966 <_puts_r+0x9a>
 800b8fa:	4621      	mov	r1, r4
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	f001 fdc7 	bl	800d490 <__swsetup_r>
 800b902:	b380      	cbz	r0, 800b966 <_puts_r+0x9a>
 800b904:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b908:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b90a:	07da      	lsls	r2, r3, #31
 800b90c:	d405      	bmi.n	800b91a <_puts_r+0x4e>
 800b90e:	89a3      	ldrh	r3, [r4, #12]
 800b910:	059b      	lsls	r3, r3, #22
 800b912:	d402      	bmi.n	800b91a <_puts_r+0x4e>
 800b914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b916:	f000 f86f 	bl	800b9f8 <__retarget_lock_release_recursive>
 800b91a:	4628      	mov	r0, r5
 800b91c:	bd70      	pop	{r4, r5, r6, pc}
 800b91e:	2b00      	cmp	r3, #0
 800b920:	da04      	bge.n	800b92c <_puts_r+0x60>
 800b922:	69a2      	ldr	r2, [r4, #24]
 800b924:	429a      	cmp	r2, r3
 800b926:	dc17      	bgt.n	800b958 <_puts_r+0x8c>
 800b928:	290a      	cmp	r1, #10
 800b92a:	d015      	beq.n	800b958 <_puts_r+0x8c>
 800b92c:	6823      	ldr	r3, [r4, #0]
 800b92e:	1c5a      	adds	r2, r3, #1
 800b930:	6022      	str	r2, [r4, #0]
 800b932:	7019      	strb	r1, [r3, #0]
 800b934:	68a3      	ldr	r3, [r4, #8]
 800b936:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b93a:	3b01      	subs	r3, #1
 800b93c:	60a3      	str	r3, [r4, #8]
 800b93e:	2900      	cmp	r1, #0
 800b940:	d1ed      	bne.n	800b91e <_puts_r+0x52>
 800b942:	2b00      	cmp	r3, #0
 800b944:	da11      	bge.n	800b96a <_puts_r+0x9e>
 800b946:	4622      	mov	r2, r4
 800b948:	210a      	movs	r1, #10
 800b94a:	4628      	mov	r0, r5
 800b94c:	f001 fd62 	bl	800d414 <__swbuf_r>
 800b950:	3001      	adds	r0, #1
 800b952:	d0d7      	beq.n	800b904 <_puts_r+0x38>
 800b954:	250a      	movs	r5, #10
 800b956:	e7d7      	b.n	800b908 <_puts_r+0x3c>
 800b958:	4622      	mov	r2, r4
 800b95a:	4628      	mov	r0, r5
 800b95c:	f001 fd5a 	bl	800d414 <__swbuf_r>
 800b960:	3001      	adds	r0, #1
 800b962:	d1e7      	bne.n	800b934 <_puts_r+0x68>
 800b964:	e7ce      	b.n	800b904 <_puts_r+0x38>
 800b966:	3e01      	subs	r6, #1
 800b968:	e7e4      	b.n	800b934 <_puts_r+0x68>
 800b96a:	6823      	ldr	r3, [r4, #0]
 800b96c:	1c5a      	adds	r2, r3, #1
 800b96e:	6022      	str	r2, [r4, #0]
 800b970:	220a      	movs	r2, #10
 800b972:	701a      	strb	r2, [r3, #0]
 800b974:	e7ee      	b.n	800b954 <_puts_r+0x88>
	...

0800b978 <puts>:
 800b978:	4b02      	ldr	r3, [pc, #8]	@ (800b984 <puts+0xc>)
 800b97a:	4601      	mov	r1, r0
 800b97c:	6818      	ldr	r0, [r3, #0]
 800b97e:	f7ff bfa5 	b.w	800b8cc <_puts_r>
 800b982:	bf00      	nop
 800b984:	200000b8 	.word	0x200000b8

0800b988 <memset>:
 800b988:	4402      	add	r2, r0
 800b98a:	4603      	mov	r3, r0
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d100      	bne.n	800b992 <memset+0xa>
 800b990:	4770      	bx	lr
 800b992:	f803 1b01 	strb.w	r1, [r3], #1
 800b996:	e7f9      	b.n	800b98c <memset+0x4>

0800b998 <_localeconv_r>:
 800b998:	4800      	ldr	r0, [pc, #0]	@ (800b99c <_localeconv_r+0x4>)
 800b99a:	4770      	bx	lr
 800b99c:	200001f8 	.word	0x200001f8

0800b9a0 <__errno>:
 800b9a0:	4b01      	ldr	r3, [pc, #4]	@ (800b9a8 <__errno+0x8>)
 800b9a2:	6818      	ldr	r0, [r3, #0]
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop
 800b9a8:	200000b8 	.word	0x200000b8

0800b9ac <__libc_init_array>:
 800b9ac:	b570      	push	{r4, r5, r6, lr}
 800b9ae:	4d0d      	ldr	r5, [pc, #52]	@ (800b9e4 <__libc_init_array+0x38>)
 800b9b0:	2600      	movs	r6, #0
 800b9b2:	4c0d      	ldr	r4, [pc, #52]	@ (800b9e8 <__libc_init_array+0x3c>)
 800b9b4:	1b64      	subs	r4, r4, r5
 800b9b6:	10a4      	asrs	r4, r4, #2
 800b9b8:	42a6      	cmp	r6, r4
 800b9ba:	d109      	bne.n	800b9d0 <__libc_init_array+0x24>
 800b9bc:	4d0b      	ldr	r5, [pc, #44]	@ (800b9ec <__libc_init_array+0x40>)
 800b9be:	2600      	movs	r6, #0
 800b9c0:	4c0b      	ldr	r4, [pc, #44]	@ (800b9f0 <__libc_init_array+0x44>)
 800b9c2:	f003 f9eb 	bl	800ed9c <_init>
 800b9c6:	1b64      	subs	r4, r4, r5
 800b9c8:	10a4      	asrs	r4, r4, #2
 800b9ca:	42a6      	cmp	r6, r4
 800b9cc:	d105      	bne.n	800b9da <__libc_init_array+0x2e>
 800b9ce:	bd70      	pop	{r4, r5, r6, pc}
 800b9d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9d4:	3601      	adds	r6, #1
 800b9d6:	4798      	blx	r3
 800b9d8:	e7ee      	b.n	800b9b8 <__libc_init_array+0xc>
 800b9da:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9de:	3601      	adds	r6, #1
 800b9e0:	4798      	blx	r3
 800b9e2:	e7f2      	b.n	800b9ca <__libc_init_array+0x1e>
 800b9e4:	0800f958 	.word	0x0800f958
 800b9e8:	0800f958 	.word	0x0800f958
 800b9ec:	0800f958 	.word	0x0800f958
 800b9f0:	0800f95c 	.word	0x0800f95c

0800b9f4 <__retarget_lock_init_recursive>:
 800b9f4:	4770      	bx	lr

0800b9f6 <__retarget_lock_acquire_recursive>:
 800b9f6:	4770      	bx	lr

0800b9f8 <__retarget_lock_release_recursive>:
 800b9f8:	4770      	bx	lr

0800b9fa <memchr>:
 800b9fa:	b2c9      	uxtb	r1, r1
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	4402      	add	r2, r0
 800ba00:	b510      	push	{r4, lr}
 800ba02:	4293      	cmp	r3, r2
 800ba04:	4618      	mov	r0, r3
 800ba06:	d101      	bne.n	800ba0c <memchr+0x12>
 800ba08:	2000      	movs	r0, #0
 800ba0a:	e003      	b.n	800ba14 <memchr+0x1a>
 800ba0c:	7804      	ldrb	r4, [r0, #0]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	428c      	cmp	r4, r1
 800ba12:	d1f6      	bne.n	800ba02 <memchr+0x8>
 800ba14:	bd10      	pop	{r4, pc}

0800ba16 <memcpy>:
 800ba16:	440a      	add	r2, r1
 800ba18:	1e43      	subs	r3, r0, #1
 800ba1a:	4291      	cmp	r1, r2
 800ba1c:	d100      	bne.n	800ba20 <memcpy+0xa>
 800ba1e:	4770      	bx	lr
 800ba20:	b510      	push	{r4, lr}
 800ba22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba26:	4291      	cmp	r1, r2
 800ba28:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba2c:	d1f9      	bne.n	800ba22 <memcpy+0xc>
 800ba2e:	bd10      	pop	{r4, pc}

0800ba30 <__assert_func>:
 800ba30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba32:	4614      	mov	r4, r2
 800ba34:	461a      	mov	r2, r3
 800ba36:	4b09      	ldr	r3, [pc, #36]	@ (800ba5c <__assert_func+0x2c>)
 800ba38:	4605      	mov	r5, r0
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68d8      	ldr	r0, [r3, #12]
 800ba3e:	b954      	cbnz	r4, 800ba56 <__assert_func+0x26>
 800ba40:	4b07      	ldr	r3, [pc, #28]	@ (800ba60 <__assert_func+0x30>)
 800ba42:	461c      	mov	r4, r3
 800ba44:	9100      	str	r1, [sp, #0]
 800ba46:	4907      	ldr	r1, [pc, #28]	@ (800ba64 <__assert_func+0x34>)
 800ba48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba4c:	462b      	mov	r3, r5
 800ba4e:	f001 fccf 	bl	800d3f0 <fiprintf>
 800ba52:	f001 fe81 	bl	800d758 <abort>
 800ba56:	4b04      	ldr	r3, [pc, #16]	@ (800ba68 <__assert_func+0x38>)
 800ba58:	e7f4      	b.n	800ba44 <__assert_func+0x14>
 800ba5a:	bf00      	nop
 800ba5c:	200000b8 	.word	0x200000b8
 800ba60:	0800f61a 	.word	0x0800f61a
 800ba64:	0800f5ec 	.word	0x0800f5ec
 800ba68:	0800f5df 	.word	0x0800f5df

0800ba6c <quorem>:
 800ba6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba70:	6903      	ldr	r3, [r0, #16]
 800ba72:	4607      	mov	r7, r0
 800ba74:	690c      	ldr	r4, [r1, #16]
 800ba76:	42a3      	cmp	r3, r4
 800ba78:	f2c0 8083 	blt.w	800bb82 <quorem+0x116>
 800ba7c:	3c01      	subs	r4, #1
 800ba7e:	f100 0514 	add.w	r5, r0, #20
 800ba82:	f101 0814 	add.w	r8, r1, #20
 800ba86:	00a3      	lsls	r3, r4, #2
 800ba88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba96:	9301      	str	r3, [sp, #4]
 800ba98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	fbb2 f6f3 	udiv	r6, r2, r3
 800baa4:	d331      	bcc.n	800bb0a <quorem+0x9e>
 800baa6:	f04f 0a00 	mov.w	sl, #0
 800baaa:	46c4      	mov	ip, r8
 800baac:	46ae      	mov	lr, r5
 800baae:	46d3      	mov	fp, sl
 800bab0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bab4:	b298      	uxth	r0, r3
 800bab6:	45e1      	cmp	r9, ip
 800bab8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800babc:	fb06 a000 	mla	r0, r6, r0, sl
 800bac0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800bac4:	b280      	uxth	r0, r0
 800bac6:	fb06 2303 	mla	r3, r6, r3, r2
 800baca:	f8de 2000 	ldr.w	r2, [lr]
 800bace:	b292      	uxth	r2, r2
 800bad0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bad4:	eba2 0200 	sub.w	r2, r2, r0
 800bad8:	b29b      	uxth	r3, r3
 800bada:	f8de 0000 	ldr.w	r0, [lr]
 800bade:	445a      	add	r2, fp
 800bae0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bae4:	b292      	uxth	r2, r2
 800bae6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800baea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800baee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800baf2:	f84e 2b04 	str.w	r2, [lr], #4
 800baf6:	d2db      	bcs.n	800bab0 <quorem+0x44>
 800baf8:	9b00      	ldr	r3, [sp, #0]
 800bafa:	58eb      	ldr	r3, [r5, r3]
 800bafc:	b92b      	cbnz	r3, 800bb0a <quorem+0x9e>
 800bafe:	9b01      	ldr	r3, [sp, #4]
 800bb00:	3b04      	subs	r3, #4
 800bb02:	429d      	cmp	r5, r3
 800bb04:	461a      	mov	r2, r3
 800bb06:	d330      	bcc.n	800bb6a <quorem+0xfe>
 800bb08:	613c      	str	r4, [r7, #16]
 800bb0a:	4638      	mov	r0, r7
 800bb0c:	f001 fb20 	bl	800d150 <__mcmp>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	db26      	blt.n	800bb62 <quorem+0xf6>
 800bb14:	4629      	mov	r1, r5
 800bb16:	2000      	movs	r0, #0
 800bb18:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb1c:	f8d1 c000 	ldr.w	ip, [r1]
 800bb20:	fa1f fe82 	uxth.w	lr, r2
 800bb24:	45c1      	cmp	r9, r8
 800bb26:	fa1f f38c 	uxth.w	r3, ip
 800bb2a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800bb2e:	eba3 030e 	sub.w	r3, r3, lr
 800bb32:	4403      	add	r3, r0
 800bb34:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bb3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb42:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bb46:	f841 3b04 	str.w	r3, [r1], #4
 800bb4a:	d2e5      	bcs.n	800bb18 <quorem+0xac>
 800bb4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb54:	b922      	cbnz	r2, 800bb60 <quorem+0xf4>
 800bb56:	3b04      	subs	r3, #4
 800bb58:	429d      	cmp	r5, r3
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	d30b      	bcc.n	800bb76 <quorem+0x10a>
 800bb5e:	613c      	str	r4, [r7, #16]
 800bb60:	3601      	adds	r6, #1
 800bb62:	4630      	mov	r0, r6
 800bb64:	b003      	add	sp, #12
 800bb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb6a:	6812      	ldr	r2, [r2, #0]
 800bb6c:	3b04      	subs	r3, #4
 800bb6e:	2a00      	cmp	r2, #0
 800bb70:	d1ca      	bne.n	800bb08 <quorem+0x9c>
 800bb72:	3c01      	subs	r4, #1
 800bb74:	e7c5      	b.n	800bb02 <quorem+0x96>
 800bb76:	6812      	ldr	r2, [r2, #0]
 800bb78:	3b04      	subs	r3, #4
 800bb7a:	2a00      	cmp	r2, #0
 800bb7c:	d1ef      	bne.n	800bb5e <quorem+0xf2>
 800bb7e:	3c01      	subs	r4, #1
 800bb80:	e7ea      	b.n	800bb58 <quorem+0xec>
 800bb82:	2000      	movs	r0, #0
 800bb84:	e7ee      	b.n	800bb64 <quorem+0xf8>
	...

0800bb88 <_dtoa_r>:
 800bb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb8c:	69c7      	ldr	r7, [r0, #28]
 800bb8e:	b099      	sub	sp, #100	@ 0x64
 800bb90:	4683      	mov	fp, r0
 800bb92:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bb94:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb96:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb9a:	ec55 4b10 	vmov	r4, r5, d0
 800bb9e:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bba2:	b97f      	cbnz	r7, 800bbc4 <_dtoa_r+0x3c>
 800bba4:	2010      	movs	r0, #16
 800bba6:	f000 fef5 	bl	800c994 <malloc>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	f8cb 001c 	str.w	r0, [fp, #28]
 800bbb0:	b920      	cbnz	r0, 800bbbc <_dtoa_r+0x34>
 800bbb2:	4ba7      	ldr	r3, [pc, #668]	@ (800be50 <_dtoa_r+0x2c8>)
 800bbb4:	21ef      	movs	r1, #239	@ 0xef
 800bbb6:	48a7      	ldr	r0, [pc, #668]	@ (800be54 <_dtoa_r+0x2cc>)
 800bbb8:	f7ff ff3a 	bl	800ba30 <__assert_func>
 800bbbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bbc0:	6007      	str	r7, [r0, #0]
 800bbc2:	60c7      	str	r7, [r0, #12]
 800bbc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bbc8:	6819      	ldr	r1, [r3, #0]
 800bbca:	b159      	cbz	r1, 800bbe4 <_dtoa_r+0x5c>
 800bbcc:	685a      	ldr	r2, [r3, #4]
 800bbce:	2301      	movs	r3, #1
 800bbd0:	4658      	mov	r0, fp
 800bbd2:	4093      	lsls	r3, r2
 800bbd4:	604a      	str	r2, [r1, #4]
 800bbd6:	608b      	str	r3, [r1, #8]
 800bbd8:	f001 f87e 	bl	800ccd8 <_Bfree>
 800bbdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	1e2b      	subs	r3, r5, #0
 800bbe6:	bfb7      	itett	lt
 800bbe8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bbec:	2300      	movge	r3, #0
 800bbee:	2201      	movlt	r2, #1
 800bbf0:	9303      	strlt	r3, [sp, #12]
 800bbf2:	bfa8      	it	ge
 800bbf4:	6033      	strge	r3, [r6, #0]
 800bbf6:	9f03      	ldr	r7, [sp, #12]
 800bbf8:	4b97      	ldr	r3, [pc, #604]	@ (800be58 <_dtoa_r+0x2d0>)
 800bbfa:	bfb8      	it	lt
 800bbfc:	6032      	strlt	r2, [r6, #0]
 800bbfe:	43bb      	bics	r3, r7
 800bc00:	d112      	bne.n	800bc28 <_dtoa_r+0xa0>
 800bc02:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bc06:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bc08:	6013      	str	r3, [r2, #0]
 800bc0a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc0e:	4323      	orrs	r3, r4
 800bc10:	f000 854c 	beq.w	800c6ac <_dtoa_r+0xb24>
 800bc14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc16:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800be6c <_dtoa_r+0x2e4>
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f000 854e 	beq.w	800c6bc <_dtoa_r+0xb34>
 800bc20:	f10a 0303 	add.w	r3, sl, #3
 800bc24:	f000 bd48 	b.w	800c6b8 <_dtoa_r+0xb30>
 800bc28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	2300      	movs	r3, #0
 800bc30:	ec51 0b17 	vmov	r0, r1, d7
 800bc34:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bc38:	f7f4 ff4a 	bl	8000ad0 <__aeabi_dcmpeq>
 800bc3c:	4680      	mov	r8, r0
 800bc3e:	b158      	cbz	r0, 800bc58 <_dtoa_r+0xd0>
 800bc40:	2301      	movs	r3, #1
 800bc42:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bc44:	6013      	str	r3, [r2, #0]
 800bc46:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc48:	b113      	cbz	r3, 800bc50 <_dtoa_r+0xc8>
 800bc4a:	4b84      	ldr	r3, [pc, #528]	@ (800be5c <_dtoa_r+0x2d4>)
 800bc4c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bc4e:	6013      	str	r3, [r2, #0]
 800bc50:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800be70 <_dtoa_r+0x2e8>
 800bc54:	f000 bd32 	b.w	800c6bc <_dtoa_r+0xb34>
 800bc58:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bc5c:	aa16      	add	r2, sp, #88	@ 0x58
 800bc5e:	a917      	add	r1, sp, #92	@ 0x5c
 800bc60:	4658      	mov	r0, fp
 800bc62:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bc66:	f001 fb27 	bl	800d2b8 <__d2b>
 800bc6a:	4681      	mov	r9, r0
 800bc6c:	2e00      	cmp	r6, #0
 800bc6e:	d075      	beq.n	800bd5c <_dtoa_r+0x1d4>
 800bc70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc72:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bc76:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bc7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc7e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bc82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc86:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	4b74      	ldr	r3, [pc, #464]	@ (800be60 <_dtoa_r+0x2d8>)
 800bc90:	f7f4 fafe 	bl	8000290 <__aeabi_dsub>
 800bc94:	a368      	add	r3, pc, #416	@ (adr r3, 800be38 <_dtoa_r+0x2b0>)
 800bc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9a:	f7f4 fcb1 	bl	8000600 <__aeabi_dmul>
 800bc9e:	a368      	add	r3, pc, #416	@ (adr r3, 800be40 <_dtoa_r+0x2b8>)
 800bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca4:	f7f4 faf6 	bl	8000294 <__adddf3>
 800bca8:	4604      	mov	r4, r0
 800bcaa:	460d      	mov	r5, r1
 800bcac:	4630      	mov	r0, r6
 800bcae:	f7f4 fc3d 	bl	800052c <__aeabi_i2d>
 800bcb2:	a365      	add	r3, pc, #404	@ (adr r3, 800be48 <_dtoa_r+0x2c0>)
 800bcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb8:	f7f4 fca2 	bl	8000600 <__aeabi_dmul>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	4629      	mov	r1, r5
 800bcc4:	f7f4 fae6 	bl	8000294 <__adddf3>
 800bcc8:	4604      	mov	r4, r0
 800bcca:	460d      	mov	r5, r1
 800bccc:	f7f4 ff48 	bl	8000b60 <__aeabi_d2iz>
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	4607      	mov	r7, r0
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	4629      	mov	r1, r5
 800bcda:	f7f4 ff03 	bl	8000ae4 <__aeabi_dcmplt>
 800bcde:	b140      	cbz	r0, 800bcf2 <_dtoa_r+0x16a>
 800bce0:	4638      	mov	r0, r7
 800bce2:	f7f4 fc23 	bl	800052c <__aeabi_i2d>
 800bce6:	4622      	mov	r2, r4
 800bce8:	462b      	mov	r3, r5
 800bcea:	f7f4 fef1 	bl	8000ad0 <__aeabi_dcmpeq>
 800bcee:	b900      	cbnz	r0, 800bcf2 <_dtoa_r+0x16a>
 800bcf0:	3f01      	subs	r7, #1
 800bcf2:	2f16      	cmp	r7, #22
 800bcf4:	d851      	bhi.n	800bd9a <_dtoa_r+0x212>
 800bcf6:	4b5b      	ldr	r3, [pc, #364]	@ (800be64 <_dtoa_r+0x2dc>)
 800bcf8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bcfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd04:	f7f4 feee 	bl	8000ae4 <__aeabi_dcmplt>
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	d048      	beq.n	800bd9e <_dtoa_r+0x216>
 800bd0c:	3f01      	subs	r7, #1
 800bd0e:	2300      	movs	r3, #0
 800bd10:	9312      	str	r3, [sp, #72]	@ 0x48
 800bd12:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bd14:	1b9b      	subs	r3, r3, r6
 800bd16:	1e5a      	subs	r2, r3, #1
 800bd18:	bf46      	itte	mi
 800bd1a:	f1c3 0801 	rsbmi	r8, r3, #1
 800bd1e:	2300      	movmi	r3, #0
 800bd20:	f04f 0800 	movpl.w	r8, #0
 800bd24:	9208      	str	r2, [sp, #32]
 800bd26:	bf48      	it	mi
 800bd28:	9308      	strmi	r3, [sp, #32]
 800bd2a:	2f00      	cmp	r7, #0
 800bd2c:	db39      	blt.n	800bda2 <_dtoa_r+0x21a>
 800bd2e:	9b08      	ldr	r3, [sp, #32]
 800bd30:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bd32:	443b      	add	r3, r7
 800bd34:	9308      	str	r3, [sp, #32]
 800bd36:	2300      	movs	r3, #0
 800bd38:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd3c:	2b09      	cmp	r3, #9
 800bd3e:	d864      	bhi.n	800be0a <_dtoa_r+0x282>
 800bd40:	2b05      	cmp	r3, #5
 800bd42:	bfc5      	ittet	gt
 800bd44:	3b04      	subgt	r3, #4
 800bd46:	2400      	movgt	r4, #0
 800bd48:	2401      	movle	r4, #1
 800bd4a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bd4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd4e:	3b02      	subs	r3, #2
 800bd50:	2b03      	cmp	r3, #3
 800bd52:	d865      	bhi.n	800be20 <_dtoa_r+0x298>
 800bd54:	e8df f003 	tbb	[pc, r3]
 800bd58:	5737392c 	.word	0x5737392c
 800bd5c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bd60:	441e      	add	r6, r3
 800bd62:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bd66:	2b20      	cmp	r3, #32
 800bd68:	bfc9      	itett	gt
 800bd6a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bd6e:	f1c3 0320 	rsble	r3, r3, #32
 800bd72:	409f      	lslgt	r7, r3
 800bd74:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bd78:	bfd8      	it	le
 800bd7a:	fa04 f003 	lslle.w	r0, r4, r3
 800bd7e:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800bd82:	bfc4      	itt	gt
 800bd84:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bd88:	ea47 0003 	orrgt.w	r0, r7, r3
 800bd8c:	f7f4 fbbe 	bl	800050c <__aeabi_ui2d>
 800bd90:	2201      	movs	r2, #1
 800bd92:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bd96:	9214      	str	r2, [sp, #80]	@ 0x50
 800bd98:	e777      	b.n	800bc8a <_dtoa_r+0x102>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e7b8      	b.n	800bd10 <_dtoa_r+0x188>
 800bd9e:	9012      	str	r0, [sp, #72]	@ 0x48
 800bda0:	e7b7      	b.n	800bd12 <_dtoa_r+0x18a>
 800bda2:	427b      	negs	r3, r7
 800bda4:	eba8 0807 	sub.w	r8, r8, r7
 800bda8:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdaa:	2300      	movs	r3, #0
 800bdac:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bdae:	e7c4      	b.n	800bd3a <_dtoa_r+0x1b2>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	dc35      	bgt.n	800be26 <_dtoa_r+0x29e>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	9307      	str	r3, [sp, #28]
 800bdc2:	920e      	str	r2, [sp, #56]	@ 0x38
 800bdc4:	e00b      	b.n	800bdde <_dtoa_r+0x256>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e7f3      	b.n	800bdb2 <_dtoa_r+0x22a>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdd0:	18fb      	adds	r3, r7, r3
 800bdd2:	9300      	str	r3, [sp, #0]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	9307      	str	r3, [sp, #28]
 800bdda:	bfb8      	it	lt
 800bddc:	2301      	movlt	r3, #1
 800bdde:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bde2:	2100      	movs	r1, #0
 800bde4:	2204      	movs	r2, #4
 800bde6:	f102 0514 	add.w	r5, r2, #20
 800bdea:	429d      	cmp	r5, r3
 800bdec:	d91f      	bls.n	800be2e <_dtoa_r+0x2a6>
 800bdee:	6041      	str	r1, [r0, #4]
 800bdf0:	4658      	mov	r0, fp
 800bdf2:	f000 ff31 	bl	800cc58 <_Balloc>
 800bdf6:	4682      	mov	sl, r0
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	d13b      	bne.n	800be74 <_dtoa_r+0x2ec>
 800bdfc:	4b1a      	ldr	r3, [pc, #104]	@ (800be68 <_dtoa_r+0x2e0>)
 800bdfe:	4602      	mov	r2, r0
 800be00:	f240 11af 	movw	r1, #431	@ 0x1af
 800be04:	e6d7      	b.n	800bbb6 <_dtoa_r+0x2e>
 800be06:	2301      	movs	r3, #1
 800be08:	e7e0      	b.n	800bdcc <_dtoa_r+0x244>
 800be0a:	2401      	movs	r4, #1
 800be0c:	2300      	movs	r3, #0
 800be0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800be10:	9309      	str	r3, [sp, #36]	@ 0x24
 800be12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be16:	2200      	movs	r2, #0
 800be18:	9300      	str	r3, [sp, #0]
 800be1a:	9307      	str	r3, [sp, #28]
 800be1c:	2312      	movs	r3, #18
 800be1e:	e7d0      	b.n	800bdc2 <_dtoa_r+0x23a>
 800be20:	2301      	movs	r3, #1
 800be22:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be24:	e7f5      	b.n	800be12 <_dtoa_r+0x28a>
 800be26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be28:	9300      	str	r3, [sp, #0]
 800be2a:	9307      	str	r3, [sp, #28]
 800be2c:	e7d7      	b.n	800bdde <_dtoa_r+0x256>
 800be2e:	3101      	adds	r1, #1
 800be30:	0052      	lsls	r2, r2, #1
 800be32:	e7d8      	b.n	800bde6 <_dtoa_r+0x25e>
 800be34:	f3af 8000 	nop.w
 800be38:	636f4361 	.word	0x636f4361
 800be3c:	3fd287a7 	.word	0x3fd287a7
 800be40:	8b60c8b3 	.word	0x8b60c8b3
 800be44:	3fc68a28 	.word	0x3fc68a28
 800be48:	509f79fb 	.word	0x509f79fb
 800be4c:	3fd34413 	.word	0x3fd34413
 800be50:	0800f570 	.word	0x0800f570
 800be54:	0800f628 	.word	0x0800f628
 800be58:	7ff00000 	.word	0x7ff00000
 800be5c:	0800f54d 	.word	0x0800f54d
 800be60:	3ff80000 	.word	0x3ff80000
 800be64:	0800f730 	.word	0x0800f730
 800be68:	0800f680 	.word	0x0800f680
 800be6c:	0800f624 	.word	0x0800f624
 800be70:	0800f54c 	.word	0x0800f54c
 800be74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be78:	6018      	str	r0, [r3, #0]
 800be7a:	9b07      	ldr	r3, [sp, #28]
 800be7c:	2b0e      	cmp	r3, #14
 800be7e:	f200 80a4 	bhi.w	800bfca <_dtoa_r+0x442>
 800be82:	2c00      	cmp	r4, #0
 800be84:	f000 80a1 	beq.w	800bfca <_dtoa_r+0x442>
 800be88:	2f00      	cmp	r7, #0
 800be8a:	dd33      	ble.n	800bef4 <_dtoa_r+0x36c>
 800be8c:	f007 020f 	and.w	r2, r7, #15
 800be90:	4bac      	ldr	r3, [pc, #688]	@ (800c144 <_dtoa_r+0x5bc>)
 800be92:	05f8      	lsls	r0, r7, #23
 800be94:	ea4f 1427 	mov.w	r4, r7, asr #4
 800be98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be9c:	ed93 7b00 	vldr	d7, [r3]
 800bea0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bea4:	d516      	bpl.n	800bed4 <_dtoa_r+0x34c>
 800bea6:	4ba8      	ldr	r3, [pc, #672]	@ (800c148 <_dtoa_r+0x5c0>)
 800bea8:	f004 040f 	and.w	r4, r4, #15
 800beac:	2603      	movs	r6, #3
 800beae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800beb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800beb6:	f7f4 fccd 	bl	8000854 <__aeabi_ddiv>
 800beba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bebe:	4da2      	ldr	r5, [pc, #648]	@ (800c148 <_dtoa_r+0x5c0>)
 800bec0:	b954      	cbnz	r4, 800bed8 <_dtoa_r+0x350>
 800bec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beca:	f7f4 fcc3 	bl	8000854 <__aeabi_ddiv>
 800bece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bed2:	e028      	b.n	800bf26 <_dtoa_r+0x39e>
 800bed4:	2602      	movs	r6, #2
 800bed6:	e7f2      	b.n	800bebe <_dtoa_r+0x336>
 800bed8:	07e1      	lsls	r1, r4, #31
 800beda:	d508      	bpl.n	800beee <_dtoa_r+0x366>
 800bedc:	3601      	adds	r6, #1
 800bede:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bee2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bee6:	f7f4 fb8b 	bl	8000600 <__aeabi_dmul>
 800beea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800beee:	1064      	asrs	r4, r4, #1
 800bef0:	3508      	adds	r5, #8
 800bef2:	e7e5      	b.n	800bec0 <_dtoa_r+0x338>
 800bef4:	f000 80d2 	beq.w	800c09c <_dtoa_r+0x514>
 800bef8:	427c      	negs	r4, r7
 800befa:	4b92      	ldr	r3, [pc, #584]	@ (800c144 <_dtoa_r+0x5bc>)
 800befc:	4d92      	ldr	r5, [pc, #584]	@ (800c148 <_dtoa_r+0x5c0>)
 800befe:	2602      	movs	r6, #2
 800bf00:	f004 020f 	and.w	r2, r4, #15
 800bf04:	1124      	asrs	r4, r4, #4
 800bf06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	f7f4 fb75 	bl	8000600 <__aeabi_dmul>
 800bf16:	2300      	movs	r3, #0
 800bf18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf1c:	2c00      	cmp	r4, #0
 800bf1e:	f040 80b2 	bne.w	800c086 <_dtoa_r+0x4fe>
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d1d3      	bne.n	800bece <_dtoa_r+0x346>
 800bf26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f000 80b7 	beq.w	800c0a0 <_dtoa_r+0x518>
 800bf32:	2200      	movs	r2, #0
 800bf34:	4b85      	ldr	r3, [pc, #532]	@ (800c14c <_dtoa_r+0x5c4>)
 800bf36:	4620      	mov	r0, r4
 800bf38:	4629      	mov	r1, r5
 800bf3a:	f7f4 fdd3 	bl	8000ae4 <__aeabi_dcmplt>
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	f000 80ae 	beq.w	800c0a0 <_dtoa_r+0x518>
 800bf44:	9b07      	ldr	r3, [sp, #28]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	f000 80aa 	beq.w	800c0a0 <_dtoa_r+0x518>
 800bf4c:	9b00      	ldr	r3, [sp, #0]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	dd37      	ble.n	800bfc2 <_dtoa_r+0x43a>
 800bf52:	1e7b      	subs	r3, r7, #1
 800bf54:	4620      	mov	r0, r4
 800bf56:	2200      	movs	r2, #0
 800bf58:	4629      	mov	r1, r5
 800bf5a:	9304      	str	r3, [sp, #16]
 800bf5c:	3601      	adds	r6, #1
 800bf5e:	4b7c      	ldr	r3, [pc, #496]	@ (800c150 <_dtoa_r+0x5c8>)
 800bf60:	f7f4 fb4e 	bl	8000600 <__aeabi_dmul>
 800bf64:	9c00      	ldr	r4, [sp, #0]
 800bf66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	f7f4 fade 	bl	800052c <__aeabi_i2d>
 800bf70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf74:	f7f4 fb44 	bl	8000600 <__aeabi_dmul>
 800bf78:	2200      	movs	r2, #0
 800bf7a:	4b76      	ldr	r3, [pc, #472]	@ (800c154 <_dtoa_r+0x5cc>)
 800bf7c:	f7f4 f98a 	bl	8000294 <__adddf3>
 800bf80:	4605      	mov	r5, r0
 800bf82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bf86:	2c00      	cmp	r4, #0
 800bf88:	f040 808d 	bne.w	800c0a6 <_dtoa_r+0x51e>
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	4b72      	ldr	r3, [pc, #456]	@ (800c158 <_dtoa_r+0x5d0>)
 800bf90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf94:	f7f4 f97c 	bl	8000290 <__aeabi_dsub>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfa0:	462a      	mov	r2, r5
 800bfa2:	4633      	mov	r3, r6
 800bfa4:	f7f4 fdbc 	bl	8000b20 <__aeabi_dcmpgt>
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	f040 828b 	bne.w	800c4c4 <_dtoa_r+0x93c>
 800bfae:	462a      	mov	r2, r5
 800bfb0:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bfb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfb8:	f7f4 fd94 	bl	8000ae4 <__aeabi_dcmplt>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	f040 8128 	bne.w	800c212 <_dtoa_r+0x68a>
 800bfc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bfc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bfca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f2c0 815a 	blt.w	800c286 <_dtoa_r+0x6fe>
 800bfd2:	2f0e      	cmp	r7, #14
 800bfd4:	f300 8157 	bgt.w	800c286 <_dtoa_r+0x6fe>
 800bfd8:	4b5a      	ldr	r3, [pc, #360]	@ (800c144 <_dtoa_r+0x5bc>)
 800bfda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bfde:	ed93 7b00 	vldr	d7, [r3]
 800bfe2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	ed8d 7b00 	vstr	d7, [sp]
 800bfea:	da03      	bge.n	800bff4 <_dtoa_r+0x46c>
 800bfec:	9b07      	ldr	r3, [sp, #28]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	f340 8101 	ble.w	800c1f6 <_dtoa_r+0x66e>
 800bff4:	4656      	mov	r6, sl
 800bff6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bffa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bffe:	4620      	mov	r0, r4
 800c000:	4629      	mov	r1, r5
 800c002:	f7f4 fc27 	bl	8000854 <__aeabi_ddiv>
 800c006:	f7f4 fdab 	bl	8000b60 <__aeabi_d2iz>
 800c00a:	4680      	mov	r8, r0
 800c00c:	f7f4 fa8e 	bl	800052c <__aeabi_i2d>
 800c010:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c014:	f7f4 faf4 	bl	8000600 <__aeabi_dmul>
 800c018:	4602      	mov	r2, r0
 800c01a:	4620      	mov	r0, r4
 800c01c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c020:	460b      	mov	r3, r1
 800c022:	4629      	mov	r1, r5
 800c024:	f7f4 f934 	bl	8000290 <__aeabi_dsub>
 800c028:	9d07      	ldr	r5, [sp, #28]
 800c02a:	f806 4b01 	strb.w	r4, [r6], #1
 800c02e:	eba6 040a 	sub.w	r4, r6, sl
 800c032:	4602      	mov	r2, r0
 800c034:	460b      	mov	r3, r1
 800c036:	42a5      	cmp	r5, r4
 800c038:	f040 8117 	bne.w	800c26a <_dtoa_r+0x6e2>
 800c03c:	f7f4 f92a 	bl	8000294 <__adddf3>
 800c040:	4604      	mov	r4, r0
 800c042:	460d      	mov	r5, r1
 800c044:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c048:	f7f4 fd6a 	bl	8000b20 <__aeabi_dcmpgt>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	f040 80f9 	bne.w	800c244 <_dtoa_r+0x6bc>
 800c052:	4620      	mov	r0, r4
 800c054:	4629      	mov	r1, r5
 800c056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c05a:	f7f4 fd39 	bl	8000ad0 <__aeabi_dcmpeq>
 800c05e:	b118      	cbz	r0, 800c068 <_dtoa_r+0x4e0>
 800c060:	f018 0f01 	tst.w	r8, #1
 800c064:	f040 80ee 	bne.w	800c244 <_dtoa_r+0x6bc>
 800c068:	4649      	mov	r1, r9
 800c06a:	4658      	mov	r0, fp
 800c06c:	f000 fe34 	bl	800ccd8 <_Bfree>
 800c070:	2300      	movs	r3, #0
 800c072:	3701      	adds	r7, #1
 800c074:	7033      	strb	r3, [r6, #0]
 800c076:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c078:	601f      	str	r7, [r3, #0]
 800c07a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f000 831d 	beq.w	800c6bc <_dtoa_r+0xb34>
 800c082:	601e      	str	r6, [r3, #0]
 800c084:	e31a      	b.n	800c6bc <_dtoa_r+0xb34>
 800c086:	07e2      	lsls	r2, r4, #31
 800c088:	d505      	bpl.n	800c096 <_dtoa_r+0x50e>
 800c08a:	3601      	adds	r6, #1
 800c08c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c090:	f7f4 fab6 	bl	8000600 <__aeabi_dmul>
 800c094:	2301      	movs	r3, #1
 800c096:	1064      	asrs	r4, r4, #1
 800c098:	3508      	adds	r5, #8
 800c09a:	e73f      	b.n	800bf1c <_dtoa_r+0x394>
 800c09c:	2602      	movs	r6, #2
 800c09e:	e742      	b.n	800bf26 <_dtoa_r+0x39e>
 800c0a0:	9c07      	ldr	r4, [sp, #28]
 800c0a2:	9704      	str	r7, [sp, #16]
 800c0a4:	e761      	b.n	800bf6a <_dtoa_r+0x3e2>
 800c0a6:	4b27      	ldr	r3, [pc, #156]	@ (800c144 <_dtoa_r+0x5bc>)
 800c0a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c0aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c0ae:	4454      	add	r4, sl
 800c0b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c0b4:	2900      	cmp	r1, #0
 800c0b6:	d053      	beq.n	800c160 <_dtoa_r+0x5d8>
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	4928      	ldr	r1, [pc, #160]	@ (800c15c <_dtoa_r+0x5d4>)
 800c0bc:	f7f4 fbca 	bl	8000854 <__aeabi_ddiv>
 800c0c0:	4633      	mov	r3, r6
 800c0c2:	4656      	mov	r6, sl
 800c0c4:	462a      	mov	r2, r5
 800c0c6:	f7f4 f8e3 	bl	8000290 <__aeabi_dsub>
 800c0ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c0ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0d2:	f7f4 fd45 	bl	8000b60 <__aeabi_d2iz>
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	f7f4 fa28 	bl	800052c <__aeabi_i2d>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	460b      	mov	r3, r1
 800c0e0:	3530      	adds	r5, #48	@ 0x30
 800c0e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0e6:	f7f4 f8d3 	bl	8000290 <__aeabi_dsub>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	f806 5b01 	strb.w	r5, [r6], #1
 800c0f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c0fa:	f7f4 fcf3 	bl	8000ae4 <__aeabi_dcmplt>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	d171      	bne.n	800c1e6 <_dtoa_r+0x65e>
 800c102:	2000      	movs	r0, #0
 800c104:	4911      	ldr	r1, [pc, #68]	@ (800c14c <_dtoa_r+0x5c4>)
 800c106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c10a:	f7f4 f8c1 	bl	8000290 <__aeabi_dsub>
 800c10e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c112:	f7f4 fce7 	bl	8000ae4 <__aeabi_dcmplt>
 800c116:	2800      	cmp	r0, #0
 800c118:	f040 8095 	bne.w	800c246 <_dtoa_r+0x6be>
 800c11c:	42a6      	cmp	r6, r4
 800c11e:	f43f af50 	beq.w	800bfc2 <_dtoa_r+0x43a>
 800c122:	2200      	movs	r2, #0
 800c124:	4b0a      	ldr	r3, [pc, #40]	@ (800c150 <_dtoa_r+0x5c8>)
 800c126:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c12a:	f7f4 fa69 	bl	8000600 <__aeabi_dmul>
 800c12e:	2200      	movs	r2, #0
 800c130:	4b07      	ldr	r3, [pc, #28]	@ (800c150 <_dtoa_r+0x5c8>)
 800c132:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c13a:	f7f4 fa61 	bl	8000600 <__aeabi_dmul>
 800c13e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c142:	e7c4      	b.n	800c0ce <_dtoa_r+0x546>
 800c144:	0800f730 	.word	0x0800f730
 800c148:	0800f708 	.word	0x0800f708
 800c14c:	3ff00000 	.word	0x3ff00000
 800c150:	40240000 	.word	0x40240000
 800c154:	401c0000 	.word	0x401c0000
 800c158:	40140000 	.word	0x40140000
 800c15c:	3fe00000 	.word	0x3fe00000
 800c160:	4631      	mov	r1, r6
 800c162:	4656      	mov	r6, sl
 800c164:	4628      	mov	r0, r5
 800c166:	f7f4 fa4b 	bl	8000600 <__aeabi_dmul>
 800c16a:	9415      	str	r4, [sp, #84]	@ 0x54
 800c16c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c174:	f7f4 fcf4 	bl	8000b60 <__aeabi_d2iz>
 800c178:	4605      	mov	r5, r0
 800c17a:	f7f4 f9d7 	bl	800052c <__aeabi_i2d>
 800c17e:	4602      	mov	r2, r0
 800c180:	3530      	adds	r5, #48	@ 0x30
 800c182:	460b      	mov	r3, r1
 800c184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c188:	f7f4 f882 	bl	8000290 <__aeabi_dsub>
 800c18c:	f806 5b01 	strb.w	r5, [r6], #1
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	42a6      	cmp	r6, r4
 800c196:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c19a:	f04f 0200 	mov.w	r2, #0
 800c19e:	d124      	bne.n	800c1ea <_dtoa_r+0x662>
 800c1a0:	4bac      	ldr	r3, [pc, #688]	@ (800c454 <_dtoa_r+0x8cc>)
 800c1a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c1a6:	f7f4 f875 	bl	8000294 <__adddf3>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1b2:	f7f4 fcb5 	bl	8000b20 <__aeabi_dcmpgt>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d145      	bne.n	800c246 <_dtoa_r+0x6be>
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	49a5      	ldr	r1, [pc, #660]	@ (800c454 <_dtoa_r+0x8cc>)
 800c1be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c1c2:	f7f4 f865 	bl	8000290 <__aeabi_dsub>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1ce:	f7f4 fc89 	bl	8000ae4 <__aeabi_dcmplt>
 800c1d2:	2800      	cmp	r0, #0
 800c1d4:	f43f aef5 	beq.w	800bfc2 <_dtoa_r+0x43a>
 800c1d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c1da:	1e73      	subs	r3, r6, #1
 800c1dc:	9315      	str	r3, [sp, #84]	@ 0x54
 800c1de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c1e2:	2b30      	cmp	r3, #48	@ 0x30
 800c1e4:	d0f8      	beq.n	800c1d8 <_dtoa_r+0x650>
 800c1e6:	9f04      	ldr	r7, [sp, #16]
 800c1e8:	e73e      	b.n	800c068 <_dtoa_r+0x4e0>
 800c1ea:	4b9b      	ldr	r3, [pc, #620]	@ (800c458 <_dtoa_r+0x8d0>)
 800c1ec:	f7f4 fa08 	bl	8000600 <__aeabi_dmul>
 800c1f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1f4:	e7bc      	b.n	800c170 <_dtoa_r+0x5e8>
 800c1f6:	d10c      	bne.n	800c212 <_dtoa_r+0x68a>
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	4b98      	ldr	r3, [pc, #608]	@ (800c45c <_dtoa_r+0x8d4>)
 800c1fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c200:	f7f4 f9fe 	bl	8000600 <__aeabi_dmul>
 800c204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c208:	f7f4 fc80 	bl	8000b0c <__aeabi_dcmpge>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	f000 8157 	beq.w	800c4c0 <_dtoa_r+0x938>
 800c212:	2400      	movs	r4, #0
 800c214:	4625      	mov	r5, r4
 800c216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c218:	4656      	mov	r6, sl
 800c21a:	43db      	mvns	r3, r3
 800c21c:	9304      	str	r3, [sp, #16]
 800c21e:	2700      	movs	r7, #0
 800c220:	4621      	mov	r1, r4
 800c222:	4658      	mov	r0, fp
 800c224:	f000 fd58 	bl	800ccd8 <_Bfree>
 800c228:	2d00      	cmp	r5, #0
 800c22a:	d0dc      	beq.n	800c1e6 <_dtoa_r+0x65e>
 800c22c:	b12f      	cbz	r7, 800c23a <_dtoa_r+0x6b2>
 800c22e:	42af      	cmp	r7, r5
 800c230:	d003      	beq.n	800c23a <_dtoa_r+0x6b2>
 800c232:	4639      	mov	r1, r7
 800c234:	4658      	mov	r0, fp
 800c236:	f000 fd4f 	bl	800ccd8 <_Bfree>
 800c23a:	4629      	mov	r1, r5
 800c23c:	4658      	mov	r0, fp
 800c23e:	f000 fd4b 	bl	800ccd8 <_Bfree>
 800c242:	e7d0      	b.n	800c1e6 <_dtoa_r+0x65e>
 800c244:	9704      	str	r7, [sp, #16]
 800c246:	4633      	mov	r3, r6
 800c248:	461e      	mov	r6, r3
 800c24a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c24e:	2a39      	cmp	r2, #57	@ 0x39
 800c250:	d107      	bne.n	800c262 <_dtoa_r+0x6da>
 800c252:	459a      	cmp	sl, r3
 800c254:	d1f8      	bne.n	800c248 <_dtoa_r+0x6c0>
 800c256:	9a04      	ldr	r2, [sp, #16]
 800c258:	3201      	adds	r2, #1
 800c25a:	9204      	str	r2, [sp, #16]
 800c25c:	2230      	movs	r2, #48	@ 0x30
 800c25e:	f88a 2000 	strb.w	r2, [sl]
 800c262:	781a      	ldrb	r2, [r3, #0]
 800c264:	3201      	adds	r2, #1
 800c266:	701a      	strb	r2, [r3, #0]
 800c268:	e7bd      	b.n	800c1e6 <_dtoa_r+0x65e>
 800c26a:	2200      	movs	r2, #0
 800c26c:	4b7a      	ldr	r3, [pc, #488]	@ (800c458 <_dtoa_r+0x8d0>)
 800c26e:	f7f4 f9c7 	bl	8000600 <__aeabi_dmul>
 800c272:	2200      	movs	r2, #0
 800c274:	2300      	movs	r3, #0
 800c276:	4604      	mov	r4, r0
 800c278:	460d      	mov	r5, r1
 800c27a:	f7f4 fc29 	bl	8000ad0 <__aeabi_dcmpeq>
 800c27e:	2800      	cmp	r0, #0
 800c280:	f43f aebb 	beq.w	800bffa <_dtoa_r+0x472>
 800c284:	e6f0      	b.n	800c068 <_dtoa_r+0x4e0>
 800c286:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c288:	2a00      	cmp	r2, #0
 800c28a:	f000 80db 	beq.w	800c444 <_dtoa_r+0x8bc>
 800c28e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c290:	2a01      	cmp	r2, #1
 800c292:	f300 80bf 	bgt.w	800c414 <_dtoa_r+0x88c>
 800c296:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c298:	2a00      	cmp	r2, #0
 800c29a:	f000 80b7 	beq.w	800c40c <_dtoa_r+0x884>
 800c29e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c2a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c2a4:	4646      	mov	r6, r8
 800c2a6:	9a08      	ldr	r2, [sp, #32]
 800c2a8:	2101      	movs	r1, #1
 800c2aa:	4658      	mov	r0, fp
 800c2ac:	4498      	add	r8, r3
 800c2ae:	441a      	add	r2, r3
 800c2b0:	9208      	str	r2, [sp, #32]
 800c2b2:	f000 fdc7 	bl	800ce44 <__i2b>
 800c2b6:	4605      	mov	r5, r0
 800c2b8:	b15e      	cbz	r6, 800c2d2 <_dtoa_r+0x74a>
 800c2ba:	9b08      	ldr	r3, [sp, #32]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	dd08      	ble.n	800c2d2 <_dtoa_r+0x74a>
 800c2c0:	42b3      	cmp	r3, r6
 800c2c2:	9a08      	ldr	r2, [sp, #32]
 800c2c4:	bfa8      	it	ge
 800c2c6:	4633      	movge	r3, r6
 800c2c8:	eba8 0803 	sub.w	r8, r8, r3
 800c2cc:	1af6      	subs	r6, r6, r3
 800c2ce:	1ad3      	subs	r3, r2, r3
 800c2d0:	9308      	str	r3, [sp, #32]
 800c2d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2d4:	b1f3      	cbz	r3, 800c314 <_dtoa_r+0x78c>
 800c2d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	f000 80b7 	beq.w	800c44c <_dtoa_r+0x8c4>
 800c2de:	b18c      	cbz	r4, 800c304 <_dtoa_r+0x77c>
 800c2e0:	4629      	mov	r1, r5
 800c2e2:	4622      	mov	r2, r4
 800c2e4:	4658      	mov	r0, fp
 800c2e6:	f000 fe6d 	bl	800cfc4 <__pow5mult>
 800c2ea:	464a      	mov	r2, r9
 800c2ec:	4601      	mov	r1, r0
 800c2ee:	4605      	mov	r5, r0
 800c2f0:	4658      	mov	r0, fp
 800c2f2:	f000 fdbd 	bl	800ce70 <__multiply>
 800c2f6:	4649      	mov	r1, r9
 800c2f8:	9004      	str	r0, [sp, #16]
 800c2fa:	4658      	mov	r0, fp
 800c2fc:	f000 fcec 	bl	800ccd8 <_Bfree>
 800c300:	9b04      	ldr	r3, [sp, #16]
 800c302:	4699      	mov	r9, r3
 800c304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c306:	1b1a      	subs	r2, r3, r4
 800c308:	d004      	beq.n	800c314 <_dtoa_r+0x78c>
 800c30a:	4649      	mov	r1, r9
 800c30c:	4658      	mov	r0, fp
 800c30e:	f000 fe59 	bl	800cfc4 <__pow5mult>
 800c312:	4681      	mov	r9, r0
 800c314:	2101      	movs	r1, #1
 800c316:	4658      	mov	r0, fp
 800c318:	f000 fd94 	bl	800ce44 <__i2b>
 800c31c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c31e:	4604      	mov	r4, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	f000 81cf 	beq.w	800c6c4 <_dtoa_r+0xb3c>
 800c326:	461a      	mov	r2, r3
 800c328:	4601      	mov	r1, r0
 800c32a:	4658      	mov	r0, fp
 800c32c:	f000 fe4a 	bl	800cfc4 <__pow5mult>
 800c330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c332:	4604      	mov	r4, r0
 800c334:	2b01      	cmp	r3, #1
 800c336:	f300 8095 	bgt.w	800c464 <_dtoa_r+0x8dc>
 800c33a:	9b02      	ldr	r3, [sp, #8]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f040 8087 	bne.w	800c450 <_dtoa_r+0x8c8>
 800c342:	9b03      	ldr	r3, [sp, #12]
 800c344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c348:	2b00      	cmp	r3, #0
 800c34a:	f040 8089 	bne.w	800c460 <_dtoa_r+0x8d8>
 800c34e:	9b03      	ldr	r3, [sp, #12]
 800c350:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c354:	0d1b      	lsrs	r3, r3, #20
 800c356:	051b      	lsls	r3, r3, #20
 800c358:	b12b      	cbz	r3, 800c366 <_dtoa_r+0x7de>
 800c35a:	9b08      	ldr	r3, [sp, #32]
 800c35c:	f108 0801 	add.w	r8, r8, #1
 800c360:	3301      	adds	r3, #1
 800c362:	9308      	str	r3, [sp, #32]
 800c364:	2301      	movs	r3, #1
 800c366:	930a      	str	r3, [sp, #40]	@ 0x28
 800c368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f000 81b0 	beq.w	800c6d0 <_dtoa_r+0xb48>
 800c370:	6923      	ldr	r3, [r4, #16]
 800c372:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c376:	6918      	ldr	r0, [r3, #16]
 800c378:	f000 fd18 	bl	800cdac <__hi0bits>
 800c37c:	f1c0 0020 	rsb	r0, r0, #32
 800c380:	9b08      	ldr	r3, [sp, #32]
 800c382:	4418      	add	r0, r3
 800c384:	f010 001f 	ands.w	r0, r0, #31
 800c388:	d077      	beq.n	800c47a <_dtoa_r+0x8f2>
 800c38a:	f1c0 0320 	rsb	r3, r0, #32
 800c38e:	2b04      	cmp	r3, #4
 800c390:	dd6b      	ble.n	800c46a <_dtoa_r+0x8e2>
 800c392:	f1c0 001c 	rsb	r0, r0, #28
 800c396:	9b08      	ldr	r3, [sp, #32]
 800c398:	4480      	add	r8, r0
 800c39a:	4403      	add	r3, r0
 800c39c:	4406      	add	r6, r0
 800c39e:	9308      	str	r3, [sp, #32]
 800c3a0:	f1b8 0f00 	cmp.w	r8, #0
 800c3a4:	dd05      	ble.n	800c3b2 <_dtoa_r+0x82a>
 800c3a6:	4649      	mov	r1, r9
 800c3a8:	4642      	mov	r2, r8
 800c3aa:	4658      	mov	r0, fp
 800c3ac:	f000 fe64 	bl	800d078 <__lshift>
 800c3b0:	4681      	mov	r9, r0
 800c3b2:	9b08      	ldr	r3, [sp, #32]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	dd05      	ble.n	800c3c4 <_dtoa_r+0x83c>
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	4658      	mov	r0, fp
 800c3be:	f000 fe5b 	bl	800d078 <__lshift>
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d059      	beq.n	800c47e <_dtoa_r+0x8f6>
 800c3ca:	4621      	mov	r1, r4
 800c3cc:	4648      	mov	r0, r9
 800c3ce:	f000 febf 	bl	800d150 <__mcmp>
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	da53      	bge.n	800c47e <_dtoa_r+0x8f6>
 800c3d6:	1e7b      	subs	r3, r7, #1
 800c3d8:	4649      	mov	r1, r9
 800c3da:	220a      	movs	r2, #10
 800c3dc:	4658      	mov	r0, fp
 800c3de:	9304      	str	r3, [sp, #16]
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	f000 fc9b 	bl	800cd1c <__multadd>
 800c3e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3e8:	4681      	mov	r9, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f000 8172 	beq.w	800c6d4 <_dtoa_r+0xb4c>
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	220a      	movs	r2, #10
 800c3f6:	4658      	mov	r0, fp
 800c3f8:	f000 fc90 	bl	800cd1c <__multadd>
 800c3fc:	9b00      	ldr	r3, [sp, #0]
 800c3fe:	4605      	mov	r5, r0
 800c400:	2b00      	cmp	r3, #0
 800c402:	dc67      	bgt.n	800c4d4 <_dtoa_r+0x94c>
 800c404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c406:	2b02      	cmp	r3, #2
 800c408:	dc41      	bgt.n	800c48e <_dtoa_r+0x906>
 800c40a:	e063      	b.n	800c4d4 <_dtoa_r+0x94c>
 800c40c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c40e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c412:	e746      	b.n	800c2a2 <_dtoa_r+0x71a>
 800c414:	9b07      	ldr	r3, [sp, #28]
 800c416:	1e5c      	subs	r4, r3, #1
 800c418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c41a:	42a3      	cmp	r3, r4
 800c41c:	bfb7      	itett	lt
 800c41e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c420:	1b1c      	subge	r4, r3, r4
 800c422:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c424:	1ae3      	sublt	r3, r4, r3
 800c426:	bfbe      	ittt	lt
 800c428:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c42a:	2400      	movlt	r4, #0
 800c42c:	18d2      	addlt	r2, r2, r3
 800c42e:	9b07      	ldr	r3, [sp, #28]
 800c430:	bfb8      	it	lt
 800c432:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c434:	2b00      	cmp	r3, #0
 800c436:	bfb5      	itete	lt
 800c438:	eba8 0603 	sublt.w	r6, r8, r3
 800c43c:	4646      	movge	r6, r8
 800c43e:	2300      	movlt	r3, #0
 800c440:	9b07      	ldrge	r3, [sp, #28]
 800c442:	e730      	b.n	800c2a6 <_dtoa_r+0x71e>
 800c444:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c446:	4646      	mov	r6, r8
 800c448:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c44a:	e735      	b.n	800c2b8 <_dtoa_r+0x730>
 800c44c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c44e:	e75c      	b.n	800c30a <_dtoa_r+0x782>
 800c450:	2300      	movs	r3, #0
 800c452:	e788      	b.n	800c366 <_dtoa_r+0x7de>
 800c454:	3fe00000 	.word	0x3fe00000
 800c458:	40240000 	.word	0x40240000
 800c45c:	40140000 	.word	0x40140000
 800c460:	9b02      	ldr	r3, [sp, #8]
 800c462:	e780      	b.n	800c366 <_dtoa_r+0x7de>
 800c464:	2300      	movs	r3, #0
 800c466:	930a      	str	r3, [sp, #40]	@ 0x28
 800c468:	e782      	b.n	800c370 <_dtoa_r+0x7e8>
 800c46a:	d099      	beq.n	800c3a0 <_dtoa_r+0x818>
 800c46c:	331c      	adds	r3, #28
 800c46e:	9a08      	ldr	r2, [sp, #32]
 800c470:	441a      	add	r2, r3
 800c472:	4498      	add	r8, r3
 800c474:	441e      	add	r6, r3
 800c476:	9208      	str	r2, [sp, #32]
 800c478:	e792      	b.n	800c3a0 <_dtoa_r+0x818>
 800c47a:	4603      	mov	r3, r0
 800c47c:	e7f6      	b.n	800c46c <_dtoa_r+0x8e4>
 800c47e:	9b07      	ldr	r3, [sp, #28]
 800c480:	9704      	str	r7, [sp, #16]
 800c482:	2b00      	cmp	r3, #0
 800c484:	dc20      	bgt.n	800c4c8 <_dtoa_r+0x940>
 800c486:	9300      	str	r3, [sp, #0]
 800c488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c48a:	2b02      	cmp	r3, #2
 800c48c:	dd1e      	ble.n	800c4cc <_dtoa_r+0x944>
 800c48e:	9b00      	ldr	r3, [sp, #0]
 800c490:	2b00      	cmp	r3, #0
 800c492:	f47f aec0 	bne.w	800c216 <_dtoa_r+0x68e>
 800c496:	4621      	mov	r1, r4
 800c498:	2205      	movs	r2, #5
 800c49a:	4658      	mov	r0, fp
 800c49c:	f000 fc3e 	bl	800cd1c <__multadd>
 800c4a0:	4601      	mov	r1, r0
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	4648      	mov	r0, r9
 800c4a6:	f000 fe53 	bl	800d150 <__mcmp>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	f77f aeb3 	ble.w	800c216 <_dtoa_r+0x68e>
 800c4b0:	2331      	movs	r3, #49	@ 0x31
 800c4b2:	4656      	mov	r6, sl
 800c4b4:	f806 3b01 	strb.w	r3, [r6], #1
 800c4b8:	9b04      	ldr	r3, [sp, #16]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	9304      	str	r3, [sp, #16]
 800c4be:	e6ae      	b.n	800c21e <_dtoa_r+0x696>
 800c4c0:	9c07      	ldr	r4, [sp, #28]
 800c4c2:	9704      	str	r7, [sp, #16]
 800c4c4:	4625      	mov	r5, r4
 800c4c6:	e7f3      	b.n	800c4b0 <_dtoa_r+0x928>
 800c4c8:	9b07      	ldr	r3, [sp, #28]
 800c4ca:	9300      	str	r3, [sp, #0]
 800c4cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	f000 8104 	beq.w	800c6dc <_dtoa_r+0xb54>
 800c4d4:	2e00      	cmp	r6, #0
 800c4d6:	dd05      	ble.n	800c4e4 <_dtoa_r+0x95c>
 800c4d8:	4629      	mov	r1, r5
 800c4da:	4632      	mov	r2, r6
 800c4dc:	4658      	mov	r0, fp
 800c4de:	f000 fdcb 	bl	800d078 <__lshift>
 800c4e2:	4605      	mov	r5, r0
 800c4e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d05a      	beq.n	800c5a0 <_dtoa_r+0xa18>
 800c4ea:	6869      	ldr	r1, [r5, #4]
 800c4ec:	4658      	mov	r0, fp
 800c4ee:	f000 fbb3 	bl	800cc58 <_Balloc>
 800c4f2:	4606      	mov	r6, r0
 800c4f4:	b928      	cbnz	r0, 800c502 <_dtoa_r+0x97a>
 800c4f6:	4b84      	ldr	r3, [pc, #528]	@ (800c708 <_dtoa_r+0xb80>)
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c4fe:	f7ff bb5a 	b.w	800bbb6 <_dtoa_r+0x2e>
 800c502:	692a      	ldr	r2, [r5, #16]
 800c504:	f105 010c 	add.w	r1, r5, #12
 800c508:	300c      	adds	r0, #12
 800c50a:	3202      	adds	r2, #2
 800c50c:	0092      	lsls	r2, r2, #2
 800c50e:	f7ff fa82 	bl	800ba16 <memcpy>
 800c512:	2201      	movs	r2, #1
 800c514:	4631      	mov	r1, r6
 800c516:	4658      	mov	r0, fp
 800c518:	f000 fdae 	bl	800d078 <__lshift>
 800c51c:	f10a 0301 	add.w	r3, sl, #1
 800c520:	462f      	mov	r7, r5
 800c522:	4605      	mov	r5, r0
 800c524:	9307      	str	r3, [sp, #28]
 800c526:	9b00      	ldr	r3, [sp, #0]
 800c528:	4453      	add	r3, sl
 800c52a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c52c:	9b02      	ldr	r3, [sp, #8]
 800c52e:	f003 0301 	and.w	r3, r3, #1
 800c532:	930a      	str	r3, [sp, #40]	@ 0x28
 800c534:	9b07      	ldr	r3, [sp, #28]
 800c536:	4621      	mov	r1, r4
 800c538:	4648      	mov	r0, r9
 800c53a:	3b01      	subs	r3, #1
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	f7ff fa95 	bl	800ba6c <quorem>
 800c542:	4639      	mov	r1, r7
 800c544:	9002      	str	r0, [sp, #8]
 800c546:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c54a:	4648      	mov	r0, r9
 800c54c:	f000 fe00 	bl	800d150 <__mcmp>
 800c550:	462a      	mov	r2, r5
 800c552:	9008      	str	r0, [sp, #32]
 800c554:	4621      	mov	r1, r4
 800c556:	4658      	mov	r0, fp
 800c558:	f000 fe16 	bl	800d188 <__mdiff>
 800c55c:	68c2      	ldr	r2, [r0, #12]
 800c55e:	4606      	mov	r6, r0
 800c560:	bb02      	cbnz	r2, 800c5a4 <_dtoa_r+0xa1c>
 800c562:	4601      	mov	r1, r0
 800c564:	4648      	mov	r0, r9
 800c566:	f000 fdf3 	bl	800d150 <__mcmp>
 800c56a:	4602      	mov	r2, r0
 800c56c:	4631      	mov	r1, r6
 800c56e:	4658      	mov	r0, fp
 800c570:	920e      	str	r2, [sp, #56]	@ 0x38
 800c572:	f000 fbb1 	bl	800ccd8 <_Bfree>
 800c576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c578:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c57a:	9e07      	ldr	r6, [sp, #28]
 800c57c:	ea43 0102 	orr.w	r1, r3, r2
 800c580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c582:	4319      	orrs	r1, r3
 800c584:	d110      	bne.n	800c5a8 <_dtoa_r+0xa20>
 800c586:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c58a:	d029      	beq.n	800c5e0 <_dtoa_r+0xa58>
 800c58c:	9b08      	ldr	r3, [sp, #32]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	dd02      	ble.n	800c598 <_dtoa_r+0xa10>
 800c592:	9b02      	ldr	r3, [sp, #8]
 800c594:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c598:	9b00      	ldr	r3, [sp, #0]
 800c59a:	f883 8000 	strb.w	r8, [r3]
 800c59e:	e63f      	b.n	800c220 <_dtoa_r+0x698>
 800c5a0:	4628      	mov	r0, r5
 800c5a2:	e7bb      	b.n	800c51c <_dtoa_r+0x994>
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	e7e1      	b.n	800c56c <_dtoa_r+0x9e4>
 800c5a8:	9b08      	ldr	r3, [sp, #32]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	db04      	blt.n	800c5b8 <_dtoa_r+0xa30>
 800c5ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c5b0:	430b      	orrs	r3, r1
 800c5b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c5b4:	430b      	orrs	r3, r1
 800c5b6:	d120      	bne.n	800c5fa <_dtoa_r+0xa72>
 800c5b8:	2a00      	cmp	r2, #0
 800c5ba:	dded      	ble.n	800c598 <_dtoa_r+0xa10>
 800c5bc:	4649      	mov	r1, r9
 800c5be:	2201      	movs	r2, #1
 800c5c0:	4658      	mov	r0, fp
 800c5c2:	f000 fd59 	bl	800d078 <__lshift>
 800c5c6:	4621      	mov	r1, r4
 800c5c8:	4681      	mov	r9, r0
 800c5ca:	f000 fdc1 	bl	800d150 <__mcmp>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	dc03      	bgt.n	800c5da <_dtoa_r+0xa52>
 800c5d2:	d1e1      	bne.n	800c598 <_dtoa_r+0xa10>
 800c5d4:	f018 0f01 	tst.w	r8, #1
 800c5d8:	d0de      	beq.n	800c598 <_dtoa_r+0xa10>
 800c5da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c5de:	d1d8      	bne.n	800c592 <_dtoa_r+0xa0a>
 800c5e0:	2339      	movs	r3, #57	@ 0x39
 800c5e2:	9a00      	ldr	r2, [sp, #0]
 800c5e4:	7013      	strb	r3, [r2, #0]
 800c5e6:	4633      	mov	r3, r6
 800c5e8:	461e      	mov	r6, r3
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c5f0:	2a39      	cmp	r2, #57	@ 0x39
 800c5f2:	d052      	beq.n	800c69a <_dtoa_r+0xb12>
 800c5f4:	3201      	adds	r2, #1
 800c5f6:	701a      	strb	r2, [r3, #0]
 800c5f8:	e612      	b.n	800c220 <_dtoa_r+0x698>
 800c5fa:	2a00      	cmp	r2, #0
 800c5fc:	dd07      	ble.n	800c60e <_dtoa_r+0xa86>
 800c5fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c602:	d0ed      	beq.n	800c5e0 <_dtoa_r+0xa58>
 800c604:	f108 0301 	add.w	r3, r8, #1
 800c608:	9a00      	ldr	r2, [sp, #0]
 800c60a:	7013      	strb	r3, [r2, #0]
 800c60c:	e608      	b.n	800c220 <_dtoa_r+0x698>
 800c60e:	9b07      	ldr	r3, [sp, #28]
 800c610:	9a07      	ldr	r2, [sp, #28]
 800c612:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c618:	4293      	cmp	r3, r2
 800c61a:	d028      	beq.n	800c66e <_dtoa_r+0xae6>
 800c61c:	4649      	mov	r1, r9
 800c61e:	2300      	movs	r3, #0
 800c620:	220a      	movs	r2, #10
 800c622:	4658      	mov	r0, fp
 800c624:	f000 fb7a 	bl	800cd1c <__multadd>
 800c628:	42af      	cmp	r7, r5
 800c62a:	4681      	mov	r9, r0
 800c62c:	f04f 0300 	mov.w	r3, #0
 800c630:	f04f 020a 	mov.w	r2, #10
 800c634:	4639      	mov	r1, r7
 800c636:	4658      	mov	r0, fp
 800c638:	d107      	bne.n	800c64a <_dtoa_r+0xac2>
 800c63a:	f000 fb6f 	bl	800cd1c <__multadd>
 800c63e:	4607      	mov	r7, r0
 800c640:	4605      	mov	r5, r0
 800c642:	9b07      	ldr	r3, [sp, #28]
 800c644:	3301      	adds	r3, #1
 800c646:	9307      	str	r3, [sp, #28]
 800c648:	e774      	b.n	800c534 <_dtoa_r+0x9ac>
 800c64a:	f000 fb67 	bl	800cd1c <__multadd>
 800c64e:	4629      	mov	r1, r5
 800c650:	4607      	mov	r7, r0
 800c652:	2300      	movs	r3, #0
 800c654:	220a      	movs	r2, #10
 800c656:	4658      	mov	r0, fp
 800c658:	f000 fb60 	bl	800cd1c <__multadd>
 800c65c:	4605      	mov	r5, r0
 800c65e:	e7f0      	b.n	800c642 <_dtoa_r+0xaba>
 800c660:	9b00      	ldr	r3, [sp, #0]
 800c662:	2700      	movs	r7, #0
 800c664:	2b00      	cmp	r3, #0
 800c666:	bfcc      	ite	gt
 800c668:	461e      	movgt	r6, r3
 800c66a:	2601      	movle	r6, #1
 800c66c:	4456      	add	r6, sl
 800c66e:	4649      	mov	r1, r9
 800c670:	2201      	movs	r2, #1
 800c672:	4658      	mov	r0, fp
 800c674:	f000 fd00 	bl	800d078 <__lshift>
 800c678:	4621      	mov	r1, r4
 800c67a:	4681      	mov	r9, r0
 800c67c:	f000 fd68 	bl	800d150 <__mcmp>
 800c680:	2800      	cmp	r0, #0
 800c682:	dcb0      	bgt.n	800c5e6 <_dtoa_r+0xa5e>
 800c684:	d102      	bne.n	800c68c <_dtoa_r+0xb04>
 800c686:	f018 0f01 	tst.w	r8, #1
 800c68a:	d1ac      	bne.n	800c5e6 <_dtoa_r+0xa5e>
 800c68c:	4633      	mov	r3, r6
 800c68e:	461e      	mov	r6, r3
 800c690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c694:	2a30      	cmp	r2, #48	@ 0x30
 800c696:	d0fa      	beq.n	800c68e <_dtoa_r+0xb06>
 800c698:	e5c2      	b.n	800c220 <_dtoa_r+0x698>
 800c69a:	459a      	cmp	sl, r3
 800c69c:	d1a4      	bne.n	800c5e8 <_dtoa_r+0xa60>
 800c69e:	9b04      	ldr	r3, [sp, #16]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	9304      	str	r3, [sp, #16]
 800c6a4:	2331      	movs	r3, #49	@ 0x31
 800c6a6:	f88a 3000 	strb.w	r3, [sl]
 800c6aa:	e5b9      	b.n	800c220 <_dtoa_r+0x698>
 800c6ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c6ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c70c <_dtoa_r+0xb84>
 800c6b2:	b11b      	cbz	r3, 800c6bc <_dtoa_r+0xb34>
 800c6b4:	f10a 0308 	add.w	r3, sl, #8
 800c6b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c6ba:	6013      	str	r3, [r2, #0]
 800c6bc:	4650      	mov	r0, sl
 800c6be:	b019      	add	sp, #100	@ 0x64
 800c6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	f77f ae37 	ble.w	800c33a <_dtoa_r+0x7b2>
 800c6cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6d0:	2001      	movs	r0, #1
 800c6d2:	e655      	b.n	800c380 <_dtoa_r+0x7f8>
 800c6d4:	9b00      	ldr	r3, [sp, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	f77f aed6 	ble.w	800c488 <_dtoa_r+0x900>
 800c6dc:	4656      	mov	r6, sl
 800c6de:	4621      	mov	r1, r4
 800c6e0:	4648      	mov	r0, r9
 800c6e2:	f7ff f9c3 	bl	800ba6c <quorem>
 800c6e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c6ea:	9b00      	ldr	r3, [sp, #0]
 800c6ec:	f806 8b01 	strb.w	r8, [r6], #1
 800c6f0:	eba6 020a 	sub.w	r2, r6, sl
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	ddb3      	ble.n	800c660 <_dtoa_r+0xad8>
 800c6f8:	4649      	mov	r1, r9
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	220a      	movs	r2, #10
 800c6fe:	4658      	mov	r0, fp
 800c700:	f000 fb0c 	bl	800cd1c <__multadd>
 800c704:	4681      	mov	r9, r0
 800c706:	e7ea      	b.n	800c6de <_dtoa_r+0xb56>
 800c708:	0800f680 	.word	0x0800f680
 800c70c:	0800f61b 	.word	0x0800f61b

0800c710 <__sfputc_r>:
 800c710:	6893      	ldr	r3, [r2, #8]
 800c712:	3b01      	subs	r3, #1
 800c714:	2b00      	cmp	r3, #0
 800c716:	6093      	str	r3, [r2, #8]
 800c718:	b410      	push	{r4}
 800c71a:	da08      	bge.n	800c72e <__sfputc_r+0x1e>
 800c71c:	6994      	ldr	r4, [r2, #24]
 800c71e:	42a3      	cmp	r3, r4
 800c720:	db01      	blt.n	800c726 <__sfputc_r+0x16>
 800c722:	290a      	cmp	r1, #10
 800c724:	d103      	bne.n	800c72e <__sfputc_r+0x1e>
 800c726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c72a:	f000 be73 	b.w	800d414 <__swbuf_r>
 800c72e:	6813      	ldr	r3, [r2, #0]
 800c730:	1c58      	adds	r0, r3, #1
 800c732:	6010      	str	r0, [r2, #0]
 800c734:	4608      	mov	r0, r1
 800c736:	7019      	strb	r1, [r3, #0]
 800c738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c73c:	4770      	bx	lr

0800c73e <__sfputs_r>:
 800c73e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c740:	4606      	mov	r6, r0
 800c742:	460f      	mov	r7, r1
 800c744:	4614      	mov	r4, r2
 800c746:	18d5      	adds	r5, r2, r3
 800c748:	42ac      	cmp	r4, r5
 800c74a:	d101      	bne.n	800c750 <__sfputs_r+0x12>
 800c74c:	2000      	movs	r0, #0
 800c74e:	e007      	b.n	800c760 <__sfputs_r+0x22>
 800c750:	463a      	mov	r2, r7
 800c752:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c756:	4630      	mov	r0, r6
 800c758:	f7ff ffda 	bl	800c710 <__sfputc_r>
 800c75c:	1c43      	adds	r3, r0, #1
 800c75e:	d1f3      	bne.n	800c748 <__sfputs_r+0xa>
 800c760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c764 <_vfiprintf_r>:
 800c764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c768:	460d      	mov	r5, r1
 800c76a:	b09d      	sub	sp, #116	@ 0x74
 800c76c:	4614      	mov	r4, r2
 800c76e:	4698      	mov	r8, r3
 800c770:	4606      	mov	r6, r0
 800c772:	b118      	cbz	r0, 800c77c <_vfiprintf_r+0x18>
 800c774:	6a03      	ldr	r3, [r0, #32]
 800c776:	b90b      	cbnz	r3, 800c77c <_vfiprintf_r+0x18>
 800c778:	f7ff f858 	bl	800b82c <__sinit>
 800c77c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c77e:	07d9      	lsls	r1, r3, #31
 800c780:	d405      	bmi.n	800c78e <_vfiprintf_r+0x2a>
 800c782:	89ab      	ldrh	r3, [r5, #12]
 800c784:	059a      	lsls	r2, r3, #22
 800c786:	d402      	bmi.n	800c78e <_vfiprintf_r+0x2a>
 800c788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c78a:	f7ff f934 	bl	800b9f6 <__retarget_lock_acquire_recursive>
 800c78e:	89ab      	ldrh	r3, [r5, #12]
 800c790:	071b      	lsls	r3, r3, #28
 800c792:	d501      	bpl.n	800c798 <_vfiprintf_r+0x34>
 800c794:	692b      	ldr	r3, [r5, #16]
 800c796:	b99b      	cbnz	r3, 800c7c0 <_vfiprintf_r+0x5c>
 800c798:	4629      	mov	r1, r5
 800c79a:	4630      	mov	r0, r6
 800c79c:	f000 fe78 	bl	800d490 <__swsetup_r>
 800c7a0:	b170      	cbz	r0, 800c7c0 <_vfiprintf_r+0x5c>
 800c7a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7a4:	07dc      	lsls	r4, r3, #31
 800c7a6:	d504      	bpl.n	800c7b2 <_vfiprintf_r+0x4e>
 800c7a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7ac:	b01d      	add	sp, #116	@ 0x74
 800c7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b2:	89ab      	ldrh	r3, [r5, #12]
 800c7b4:	0598      	lsls	r0, r3, #22
 800c7b6:	d4f7      	bmi.n	800c7a8 <_vfiprintf_r+0x44>
 800c7b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7ba:	f7ff f91d 	bl	800b9f8 <__retarget_lock_release_recursive>
 800c7be:	e7f3      	b.n	800c7a8 <_vfiprintf_r+0x44>
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7c6:	f04f 0901 	mov.w	r9, #1
 800c7ca:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800c980 <_vfiprintf_r+0x21c>
 800c7ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7d0:	2320      	movs	r3, #32
 800c7d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c7d6:	2330      	movs	r3, #48	@ 0x30
 800c7d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c7dc:	4623      	mov	r3, r4
 800c7de:	469a      	mov	sl, r3
 800c7e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7e4:	b10a      	cbz	r2, 800c7ea <_vfiprintf_r+0x86>
 800c7e6:	2a25      	cmp	r2, #37	@ 0x25
 800c7e8:	d1f9      	bne.n	800c7de <_vfiprintf_r+0x7a>
 800c7ea:	ebba 0b04 	subs.w	fp, sl, r4
 800c7ee:	d00b      	beq.n	800c808 <_vfiprintf_r+0xa4>
 800c7f0:	465b      	mov	r3, fp
 800c7f2:	4622      	mov	r2, r4
 800c7f4:	4629      	mov	r1, r5
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	f7ff ffa1 	bl	800c73e <__sfputs_r>
 800c7fc:	3001      	adds	r0, #1
 800c7fe:	f000 80a7 	beq.w	800c950 <_vfiprintf_r+0x1ec>
 800c802:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c804:	445a      	add	r2, fp
 800c806:	9209      	str	r2, [sp, #36]	@ 0x24
 800c808:	f89a 3000 	ldrb.w	r3, [sl]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	f000 809f 	beq.w	800c950 <_vfiprintf_r+0x1ec>
 800c812:	2300      	movs	r3, #0
 800c814:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c818:	f10a 0a01 	add.w	sl, sl, #1
 800c81c:	9304      	str	r3, [sp, #16]
 800c81e:	9307      	str	r3, [sp, #28]
 800c820:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c824:	931a      	str	r3, [sp, #104]	@ 0x68
 800c826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c82a:	4654      	mov	r4, sl
 800c82c:	2205      	movs	r2, #5
 800c82e:	4854      	ldr	r0, [pc, #336]	@ (800c980 <_vfiprintf_r+0x21c>)
 800c830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c834:	f7ff f8e1 	bl	800b9fa <memchr>
 800c838:	9a04      	ldr	r2, [sp, #16]
 800c83a:	b9d8      	cbnz	r0, 800c874 <_vfiprintf_r+0x110>
 800c83c:	06d1      	lsls	r1, r2, #27
 800c83e:	bf44      	itt	mi
 800c840:	2320      	movmi	r3, #32
 800c842:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c846:	0713      	lsls	r3, r2, #28
 800c848:	bf44      	itt	mi
 800c84a:	232b      	movmi	r3, #43	@ 0x2b
 800c84c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c850:	f89a 3000 	ldrb.w	r3, [sl]
 800c854:	2b2a      	cmp	r3, #42	@ 0x2a
 800c856:	d015      	beq.n	800c884 <_vfiprintf_r+0x120>
 800c858:	9a07      	ldr	r2, [sp, #28]
 800c85a:	4654      	mov	r4, sl
 800c85c:	2000      	movs	r0, #0
 800c85e:	f04f 0c0a 	mov.w	ip, #10
 800c862:	4621      	mov	r1, r4
 800c864:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c868:	3b30      	subs	r3, #48	@ 0x30
 800c86a:	2b09      	cmp	r3, #9
 800c86c:	d94b      	bls.n	800c906 <_vfiprintf_r+0x1a2>
 800c86e:	b1b0      	cbz	r0, 800c89e <_vfiprintf_r+0x13a>
 800c870:	9207      	str	r2, [sp, #28]
 800c872:	e014      	b.n	800c89e <_vfiprintf_r+0x13a>
 800c874:	eba0 0308 	sub.w	r3, r0, r8
 800c878:	46a2      	mov	sl, r4
 800c87a:	fa09 f303 	lsl.w	r3, r9, r3
 800c87e:	4313      	orrs	r3, r2
 800c880:	9304      	str	r3, [sp, #16]
 800c882:	e7d2      	b.n	800c82a <_vfiprintf_r+0xc6>
 800c884:	9b03      	ldr	r3, [sp, #12]
 800c886:	1d19      	adds	r1, r3, #4
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	9103      	str	r1, [sp, #12]
 800c88e:	bfbb      	ittet	lt
 800c890:	425b      	neglt	r3, r3
 800c892:	f042 0202 	orrlt.w	r2, r2, #2
 800c896:	9307      	strge	r3, [sp, #28]
 800c898:	9307      	strlt	r3, [sp, #28]
 800c89a:	bfb8      	it	lt
 800c89c:	9204      	strlt	r2, [sp, #16]
 800c89e:	7823      	ldrb	r3, [r4, #0]
 800c8a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c8a2:	d10a      	bne.n	800c8ba <_vfiprintf_r+0x156>
 800c8a4:	7863      	ldrb	r3, [r4, #1]
 800c8a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8a8:	d132      	bne.n	800c910 <_vfiprintf_r+0x1ac>
 800c8aa:	9b03      	ldr	r3, [sp, #12]
 800c8ac:	3402      	adds	r4, #2
 800c8ae:	1d1a      	adds	r2, r3, #4
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c8b6:	9203      	str	r2, [sp, #12]
 800c8b8:	9305      	str	r3, [sp, #20]
 800c8ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c990 <_vfiprintf_r+0x22c>
 800c8be:	2203      	movs	r2, #3
 800c8c0:	7821      	ldrb	r1, [r4, #0]
 800c8c2:	4650      	mov	r0, sl
 800c8c4:	f7ff f899 	bl	800b9fa <memchr>
 800c8c8:	b138      	cbz	r0, 800c8da <_vfiprintf_r+0x176>
 800c8ca:	eba0 000a 	sub.w	r0, r0, sl
 800c8ce:	2240      	movs	r2, #64	@ 0x40
 800c8d0:	9b04      	ldr	r3, [sp, #16]
 800c8d2:	3401      	adds	r4, #1
 800c8d4:	4082      	lsls	r2, r0
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	9304      	str	r3, [sp, #16]
 800c8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8de:	2206      	movs	r2, #6
 800c8e0:	4828      	ldr	r0, [pc, #160]	@ (800c984 <_vfiprintf_r+0x220>)
 800c8e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c8e6:	f7ff f888 	bl	800b9fa <memchr>
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	d03f      	beq.n	800c96e <_vfiprintf_r+0x20a>
 800c8ee:	4b26      	ldr	r3, [pc, #152]	@ (800c988 <_vfiprintf_r+0x224>)
 800c8f0:	bb1b      	cbnz	r3, 800c93a <_vfiprintf_r+0x1d6>
 800c8f2:	9b03      	ldr	r3, [sp, #12]
 800c8f4:	3307      	adds	r3, #7
 800c8f6:	f023 0307 	bic.w	r3, r3, #7
 800c8fa:	3308      	adds	r3, #8
 800c8fc:	9303      	str	r3, [sp, #12]
 800c8fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c900:	443b      	add	r3, r7
 800c902:	9309      	str	r3, [sp, #36]	@ 0x24
 800c904:	e76a      	b.n	800c7dc <_vfiprintf_r+0x78>
 800c906:	fb0c 3202 	mla	r2, ip, r2, r3
 800c90a:	460c      	mov	r4, r1
 800c90c:	2001      	movs	r0, #1
 800c90e:	e7a8      	b.n	800c862 <_vfiprintf_r+0xfe>
 800c910:	2300      	movs	r3, #0
 800c912:	3401      	adds	r4, #1
 800c914:	f04f 0c0a 	mov.w	ip, #10
 800c918:	4619      	mov	r1, r3
 800c91a:	9305      	str	r3, [sp, #20]
 800c91c:	4620      	mov	r0, r4
 800c91e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c922:	3a30      	subs	r2, #48	@ 0x30
 800c924:	2a09      	cmp	r2, #9
 800c926:	d903      	bls.n	800c930 <_vfiprintf_r+0x1cc>
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d0c6      	beq.n	800c8ba <_vfiprintf_r+0x156>
 800c92c:	9105      	str	r1, [sp, #20]
 800c92e:	e7c4      	b.n	800c8ba <_vfiprintf_r+0x156>
 800c930:	fb0c 2101 	mla	r1, ip, r1, r2
 800c934:	4604      	mov	r4, r0
 800c936:	2301      	movs	r3, #1
 800c938:	e7f0      	b.n	800c91c <_vfiprintf_r+0x1b8>
 800c93a:	ab03      	add	r3, sp, #12
 800c93c:	462a      	mov	r2, r5
 800c93e:	a904      	add	r1, sp, #16
 800c940:	4630      	mov	r0, r6
 800c942:	9300      	str	r3, [sp, #0]
 800c944:	4b11      	ldr	r3, [pc, #68]	@ (800c98c <_vfiprintf_r+0x228>)
 800c946:	f7fe fabd 	bl	800aec4 <_printf_float>
 800c94a:	4607      	mov	r7, r0
 800c94c:	1c78      	adds	r0, r7, #1
 800c94e:	d1d6      	bne.n	800c8fe <_vfiprintf_r+0x19a>
 800c950:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c952:	07d9      	lsls	r1, r3, #31
 800c954:	d405      	bmi.n	800c962 <_vfiprintf_r+0x1fe>
 800c956:	89ab      	ldrh	r3, [r5, #12]
 800c958:	059a      	lsls	r2, r3, #22
 800c95a:	d402      	bmi.n	800c962 <_vfiprintf_r+0x1fe>
 800c95c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c95e:	f7ff f84b 	bl	800b9f8 <__retarget_lock_release_recursive>
 800c962:	89ab      	ldrh	r3, [r5, #12]
 800c964:	065b      	lsls	r3, r3, #25
 800c966:	f53f af1f 	bmi.w	800c7a8 <_vfiprintf_r+0x44>
 800c96a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c96c:	e71e      	b.n	800c7ac <_vfiprintf_r+0x48>
 800c96e:	ab03      	add	r3, sp, #12
 800c970:	462a      	mov	r2, r5
 800c972:	a904      	add	r1, sp, #16
 800c974:	4630      	mov	r0, r6
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	4b04      	ldr	r3, [pc, #16]	@ (800c98c <_vfiprintf_r+0x228>)
 800c97a:	f7fe fd3f 	bl	800b3fc <_printf_i>
 800c97e:	e7e4      	b.n	800c94a <_vfiprintf_r+0x1e6>
 800c980:	0800f691 	.word	0x0800f691
 800c984:	0800f69b 	.word	0x0800f69b
 800c988:	0800aec5 	.word	0x0800aec5
 800c98c:	0800c73f 	.word	0x0800c73f
 800c990:	0800f697 	.word	0x0800f697

0800c994 <malloc>:
 800c994:	4b02      	ldr	r3, [pc, #8]	@ (800c9a0 <malloc+0xc>)
 800c996:	4601      	mov	r1, r0
 800c998:	6818      	ldr	r0, [r3, #0]
 800c99a:	f000 b825 	b.w	800c9e8 <_malloc_r>
 800c99e:	bf00      	nop
 800c9a0:	200000b8 	.word	0x200000b8

0800c9a4 <sbrk_aligned>:
 800c9a4:	b570      	push	{r4, r5, r6, lr}
 800c9a6:	4e0f      	ldr	r6, [pc, #60]	@ (800c9e4 <sbrk_aligned+0x40>)
 800c9a8:	460c      	mov	r4, r1
 800c9aa:	4605      	mov	r5, r0
 800c9ac:	6831      	ldr	r1, [r6, #0]
 800c9ae:	b911      	cbnz	r1, 800c9b6 <sbrk_aligned+0x12>
 800c9b0:	f000 feb0 	bl	800d714 <_sbrk_r>
 800c9b4:	6030      	str	r0, [r6, #0]
 800c9b6:	4621      	mov	r1, r4
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	f000 feab 	bl	800d714 <_sbrk_r>
 800c9be:	1c43      	adds	r3, r0, #1
 800c9c0:	d103      	bne.n	800c9ca <sbrk_aligned+0x26>
 800c9c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ca:	1cc4      	adds	r4, r0, #3
 800c9cc:	f024 0403 	bic.w	r4, r4, #3
 800c9d0:	42a0      	cmp	r0, r4
 800c9d2:	d0f8      	beq.n	800c9c6 <sbrk_aligned+0x22>
 800c9d4:	1a21      	subs	r1, r4, r0
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	f000 fe9c 	bl	800d714 <_sbrk_r>
 800c9dc:	3001      	adds	r0, #1
 800c9de:	d1f2      	bne.n	800c9c6 <sbrk_aligned+0x22>
 800c9e0:	e7ef      	b.n	800c9c2 <sbrk_aligned+0x1e>
 800c9e2:	bf00      	nop
 800c9e4:	20001024 	.word	0x20001024

0800c9e8 <_malloc_r>:
 800c9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9ec:	1ccd      	adds	r5, r1, #3
 800c9ee:	4606      	mov	r6, r0
 800c9f0:	f025 0503 	bic.w	r5, r5, #3
 800c9f4:	3508      	adds	r5, #8
 800c9f6:	2d0c      	cmp	r5, #12
 800c9f8:	bf38      	it	cc
 800c9fa:	250c      	movcc	r5, #12
 800c9fc:	2d00      	cmp	r5, #0
 800c9fe:	db01      	blt.n	800ca04 <_malloc_r+0x1c>
 800ca00:	42a9      	cmp	r1, r5
 800ca02:	d904      	bls.n	800ca0e <_malloc_r+0x26>
 800ca04:	230c      	movs	r3, #12
 800ca06:	6033      	str	r3, [r6, #0]
 800ca08:	2000      	movs	r0, #0
 800ca0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cae4 <_malloc_r+0xfc>
 800ca12:	f000 f915 	bl	800cc40 <__malloc_lock>
 800ca16:	f8d8 3000 	ldr.w	r3, [r8]
 800ca1a:	461c      	mov	r4, r3
 800ca1c:	bb44      	cbnz	r4, 800ca70 <_malloc_r+0x88>
 800ca1e:	4629      	mov	r1, r5
 800ca20:	4630      	mov	r0, r6
 800ca22:	f7ff ffbf 	bl	800c9a4 <sbrk_aligned>
 800ca26:	1c43      	adds	r3, r0, #1
 800ca28:	4604      	mov	r4, r0
 800ca2a:	d158      	bne.n	800cade <_malloc_r+0xf6>
 800ca2c:	f8d8 4000 	ldr.w	r4, [r8]
 800ca30:	4627      	mov	r7, r4
 800ca32:	2f00      	cmp	r7, #0
 800ca34:	d143      	bne.n	800cabe <_malloc_r+0xd6>
 800ca36:	2c00      	cmp	r4, #0
 800ca38:	d04b      	beq.n	800cad2 <_malloc_r+0xea>
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	4639      	mov	r1, r7
 800ca3e:	4630      	mov	r0, r6
 800ca40:	eb04 0903 	add.w	r9, r4, r3
 800ca44:	f000 fe66 	bl	800d714 <_sbrk_r>
 800ca48:	4581      	cmp	r9, r0
 800ca4a:	d142      	bne.n	800cad2 <_malloc_r+0xea>
 800ca4c:	6821      	ldr	r1, [r4, #0]
 800ca4e:	4630      	mov	r0, r6
 800ca50:	1a6d      	subs	r5, r5, r1
 800ca52:	4629      	mov	r1, r5
 800ca54:	f7ff ffa6 	bl	800c9a4 <sbrk_aligned>
 800ca58:	3001      	adds	r0, #1
 800ca5a:	d03a      	beq.n	800cad2 <_malloc_r+0xea>
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	442b      	add	r3, r5
 800ca60:	6023      	str	r3, [r4, #0]
 800ca62:	f8d8 3000 	ldr.w	r3, [r8]
 800ca66:	685a      	ldr	r2, [r3, #4]
 800ca68:	bb62      	cbnz	r2, 800cac4 <_malloc_r+0xdc>
 800ca6a:	f8c8 7000 	str.w	r7, [r8]
 800ca6e:	e00f      	b.n	800ca90 <_malloc_r+0xa8>
 800ca70:	6822      	ldr	r2, [r4, #0]
 800ca72:	1b52      	subs	r2, r2, r5
 800ca74:	d420      	bmi.n	800cab8 <_malloc_r+0xd0>
 800ca76:	2a0b      	cmp	r2, #11
 800ca78:	d917      	bls.n	800caaa <_malloc_r+0xc2>
 800ca7a:	1961      	adds	r1, r4, r5
 800ca7c:	42a3      	cmp	r3, r4
 800ca7e:	6025      	str	r5, [r4, #0]
 800ca80:	bf18      	it	ne
 800ca82:	6059      	strne	r1, [r3, #4]
 800ca84:	6863      	ldr	r3, [r4, #4]
 800ca86:	bf08      	it	eq
 800ca88:	f8c8 1000 	streq.w	r1, [r8]
 800ca8c:	5162      	str	r2, [r4, r5]
 800ca8e:	604b      	str	r3, [r1, #4]
 800ca90:	4630      	mov	r0, r6
 800ca92:	f000 f8db 	bl	800cc4c <__malloc_unlock>
 800ca96:	f104 000b 	add.w	r0, r4, #11
 800ca9a:	1d23      	adds	r3, r4, #4
 800ca9c:	f020 0007 	bic.w	r0, r0, #7
 800caa0:	1ac2      	subs	r2, r0, r3
 800caa2:	bf1c      	itt	ne
 800caa4:	1a1b      	subne	r3, r3, r0
 800caa6:	50a3      	strne	r3, [r4, r2]
 800caa8:	e7af      	b.n	800ca0a <_malloc_r+0x22>
 800caaa:	6862      	ldr	r2, [r4, #4]
 800caac:	42a3      	cmp	r3, r4
 800caae:	bf0c      	ite	eq
 800cab0:	f8c8 2000 	streq.w	r2, [r8]
 800cab4:	605a      	strne	r2, [r3, #4]
 800cab6:	e7eb      	b.n	800ca90 <_malloc_r+0xa8>
 800cab8:	4623      	mov	r3, r4
 800caba:	6864      	ldr	r4, [r4, #4]
 800cabc:	e7ae      	b.n	800ca1c <_malloc_r+0x34>
 800cabe:	463c      	mov	r4, r7
 800cac0:	687f      	ldr	r7, [r7, #4]
 800cac2:	e7b6      	b.n	800ca32 <_malloc_r+0x4a>
 800cac4:	461a      	mov	r2, r3
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	42a3      	cmp	r3, r4
 800caca:	d1fb      	bne.n	800cac4 <_malloc_r+0xdc>
 800cacc:	2300      	movs	r3, #0
 800cace:	6053      	str	r3, [r2, #4]
 800cad0:	e7de      	b.n	800ca90 <_malloc_r+0xa8>
 800cad2:	230c      	movs	r3, #12
 800cad4:	4630      	mov	r0, r6
 800cad6:	6033      	str	r3, [r6, #0]
 800cad8:	f000 f8b8 	bl	800cc4c <__malloc_unlock>
 800cadc:	e794      	b.n	800ca08 <_malloc_r+0x20>
 800cade:	6005      	str	r5, [r0, #0]
 800cae0:	e7d6      	b.n	800ca90 <_malloc_r+0xa8>
 800cae2:	bf00      	nop
 800cae4:	20001028 	.word	0x20001028

0800cae8 <__sflush_r>:
 800cae8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800caec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caf0:	0716      	lsls	r6, r2, #28
 800caf2:	4605      	mov	r5, r0
 800caf4:	460c      	mov	r4, r1
 800caf6:	d454      	bmi.n	800cba2 <__sflush_r+0xba>
 800caf8:	684b      	ldr	r3, [r1, #4]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	dc02      	bgt.n	800cb04 <__sflush_r+0x1c>
 800cafe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	dd48      	ble.n	800cb96 <__sflush_r+0xae>
 800cb04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb06:	2e00      	cmp	r6, #0
 800cb08:	d045      	beq.n	800cb96 <__sflush_r+0xae>
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cb10:	682f      	ldr	r7, [r5, #0]
 800cb12:	6a21      	ldr	r1, [r4, #32]
 800cb14:	602b      	str	r3, [r5, #0]
 800cb16:	d030      	beq.n	800cb7a <__sflush_r+0x92>
 800cb18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb1a:	89a3      	ldrh	r3, [r4, #12]
 800cb1c:	0759      	lsls	r1, r3, #29
 800cb1e:	d505      	bpl.n	800cb2c <__sflush_r+0x44>
 800cb20:	6863      	ldr	r3, [r4, #4]
 800cb22:	1ad2      	subs	r2, r2, r3
 800cb24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb26:	b10b      	cbz	r3, 800cb2c <__sflush_r+0x44>
 800cb28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb2a:	1ad2      	subs	r2, r2, r3
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb30:	6a21      	ldr	r1, [r4, #32]
 800cb32:	4628      	mov	r0, r5
 800cb34:	47b0      	blx	r6
 800cb36:	1c43      	adds	r3, r0, #1
 800cb38:	89a3      	ldrh	r3, [r4, #12]
 800cb3a:	d106      	bne.n	800cb4a <__sflush_r+0x62>
 800cb3c:	6829      	ldr	r1, [r5, #0]
 800cb3e:	291d      	cmp	r1, #29
 800cb40:	d82b      	bhi.n	800cb9a <__sflush_r+0xb2>
 800cb42:	4a2a      	ldr	r2, [pc, #168]	@ (800cbec <__sflush_r+0x104>)
 800cb44:	410a      	asrs	r2, r1
 800cb46:	07d6      	lsls	r6, r2, #31
 800cb48:	d427      	bmi.n	800cb9a <__sflush_r+0xb2>
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	04d9      	lsls	r1, r3, #19
 800cb4e:	6062      	str	r2, [r4, #4]
 800cb50:	6922      	ldr	r2, [r4, #16]
 800cb52:	6022      	str	r2, [r4, #0]
 800cb54:	d504      	bpl.n	800cb60 <__sflush_r+0x78>
 800cb56:	1c42      	adds	r2, r0, #1
 800cb58:	d101      	bne.n	800cb5e <__sflush_r+0x76>
 800cb5a:	682b      	ldr	r3, [r5, #0]
 800cb5c:	b903      	cbnz	r3, 800cb60 <__sflush_r+0x78>
 800cb5e:	6560      	str	r0, [r4, #84]	@ 0x54
 800cb60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb62:	602f      	str	r7, [r5, #0]
 800cb64:	b1b9      	cbz	r1, 800cb96 <__sflush_r+0xae>
 800cb66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb6a:	4299      	cmp	r1, r3
 800cb6c:	d002      	beq.n	800cb74 <__sflush_r+0x8c>
 800cb6e:	4628      	mov	r0, r5
 800cb70:	f000 fe0e 	bl	800d790 <_free_r>
 800cb74:	2300      	movs	r3, #0
 800cb76:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb78:	e00d      	b.n	800cb96 <__sflush_r+0xae>
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	47b0      	blx	r6
 800cb80:	4602      	mov	r2, r0
 800cb82:	1c50      	adds	r0, r2, #1
 800cb84:	d1c9      	bne.n	800cb1a <__sflush_r+0x32>
 800cb86:	682b      	ldr	r3, [r5, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d0c6      	beq.n	800cb1a <__sflush_r+0x32>
 800cb8c:	2b1d      	cmp	r3, #29
 800cb8e:	d001      	beq.n	800cb94 <__sflush_r+0xac>
 800cb90:	2b16      	cmp	r3, #22
 800cb92:	d11d      	bne.n	800cbd0 <__sflush_r+0xe8>
 800cb94:	602f      	str	r7, [r5, #0]
 800cb96:	2000      	movs	r0, #0
 800cb98:	e021      	b.n	800cbde <__sflush_r+0xf6>
 800cb9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb9e:	b21b      	sxth	r3, r3
 800cba0:	e01a      	b.n	800cbd8 <__sflush_r+0xf0>
 800cba2:	690f      	ldr	r7, [r1, #16]
 800cba4:	2f00      	cmp	r7, #0
 800cba6:	d0f6      	beq.n	800cb96 <__sflush_r+0xae>
 800cba8:	0793      	lsls	r3, r2, #30
 800cbaa:	680e      	ldr	r6, [r1, #0]
 800cbac:	600f      	str	r7, [r1, #0]
 800cbae:	bf0c      	ite	eq
 800cbb0:	694b      	ldreq	r3, [r1, #20]
 800cbb2:	2300      	movne	r3, #0
 800cbb4:	eba6 0807 	sub.w	r8, r6, r7
 800cbb8:	608b      	str	r3, [r1, #8]
 800cbba:	f1b8 0f00 	cmp.w	r8, #0
 800cbbe:	ddea      	ble.n	800cb96 <__sflush_r+0xae>
 800cbc0:	4643      	mov	r3, r8
 800cbc2:	463a      	mov	r2, r7
 800cbc4:	6a21      	ldr	r1, [r4, #32]
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cbca:	47b0      	blx	r6
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	dc08      	bgt.n	800cbe2 <__sflush_r+0xfa>
 800cbd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cbdc:	81a3      	strh	r3, [r4, #12]
 800cbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe2:	4407      	add	r7, r0
 800cbe4:	eba8 0800 	sub.w	r8, r8, r0
 800cbe8:	e7e7      	b.n	800cbba <__sflush_r+0xd2>
 800cbea:	bf00      	nop
 800cbec:	dfbffffe 	.word	0xdfbffffe

0800cbf0 <_fflush_r>:
 800cbf0:	b538      	push	{r3, r4, r5, lr}
 800cbf2:	690b      	ldr	r3, [r1, #16]
 800cbf4:	4605      	mov	r5, r0
 800cbf6:	460c      	mov	r4, r1
 800cbf8:	b913      	cbnz	r3, 800cc00 <_fflush_r+0x10>
 800cbfa:	2500      	movs	r5, #0
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	bd38      	pop	{r3, r4, r5, pc}
 800cc00:	b118      	cbz	r0, 800cc0a <_fflush_r+0x1a>
 800cc02:	6a03      	ldr	r3, [r0, #32]
 800cc04:	b90b      	cbnz	r3, 800cc0a <_fflush_r+0x1a>
 800cc06:	f7fe fe11 	bl	800b82c <__sinit>
 800cc0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d0f3      	beq.n	800cbfa <_fflush_r+0xa>
 800cc12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc14:	07d0      	lsls	r0, r2, #31
 800cc16:	d404      	bmi.n	800cc22 <_fflush_r+0x32>
 800cc18:	0599      	lsls	r1, r3, #22
 800cc1a:	d402      	bmi.n	800cc22 <_fflush_r+0x32>
 800cc1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc1e:	f7fe feea 	bl	800b9f6 <__retarget_lock_acquire_recursive>
 800cc22:	4628      	mov	r0, r5
 800cc24:	4621      	mov	r1, r4
 800cc26:	f7ff ff5f 	bl	800cae8 <__sflush_r>
 800cc2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc2c:	4605      	mov	r5, r0
 800cc2e:	07da      	lsls	r2, r3, #31
 800cc30:	d4e4      	bmi.n	800cbfc <_fflush_r+0xc>
 800cc32:	89a3      	ldrh	r3, [r4, #12]
 800cc34:	059b      	lsls	r3, r3, #22
 800cc36:	d4e1      	bmi.n	800cbfc <_fflush_r+0xc>
 800cc38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc3a:	f7fe fedd 	bl	800b9f8 <__retarget_lock_release_recursive>
 800cc3e:	e7dd      	b.n	800cbfc <_fflush_r+0xc>

0800cc40 <__malloc_lock>:
 800cc40:	4801      	ldr	r0, [pc, #4]	@ (800cc48 <__malloc_lock+0x8>)
 800cc42:	f7fe bed8 	b.w	800b9f6 <__retarget_lock_acquire_recursive>
 800cc46:	bf00      	nop
 800cc48:	20001020 	.word	0x20001020

0800cc4c <__malloc_unlock>:
 800cc4c:	4801      	ldr	r0, [pc, #4]	@ (800cc54 <__malloc_unlock+0x8>)
 800cc4e:	f7fe bed3 	b.w	800b9f8 <__retarget_lock_release_recursive>
 800cc52:	bf00      	nop
 800cc54:	20001020 	.word	0x20001020

0800cc58 <_Balloc>:
 800cc58:	b570      	push	{r4, r5, r6, lr}
 800cc5a:	69c6      	ldr	r6, [r0, #28]
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	460d      	mov	r5, r1
 800cc60:	b976      	cbnz	r6, 800cc80 <_Balloc+0x28>
 800cc62:	2010      	movs	r0, #16
 800cc64:	f7ff fe96 	bl	800c994 <malloc>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	61e0      	str	r0, [r4, #28]
 800cc6c:	b920      	cbnz	r0, 800cc78 <_Balloc+0x20>
 800cc6e:	4b18      	ldr	r3, [pc, #96]	@ (800ccd0 <_Balloc+0x78>)
 800cc70:	216b      	movs	r1, #107	@ 0x6b
 800cc72:	4818      	ldr	r0, [pc, #96]	@ (800ccd4 <_Balloc+0x7c>)
 800cc74:	f7fe fedc 	bl	800ba30 <__assert_func>
 800cc78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc7c:	6006      	str	r6, [r0, #0]
 800cc7e:	60c6      	str	r6, [r0, #12]
 800cc80:	69e6      	ldr	r6, [r4, #28]
 800cc82:	68f3      	ldr	r3, [r6, #12]
 800cc84:	b183      	cbz	r3, 800cca8 <_Balloc+0x50>
 800cc86:	69e3      	ldr	r3, [r4, #28]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc8e:	b9b8      	cbnz	r0, 800ccc0 <_Balloc+0x68>
 800cc90:	2101      	movs	r1, #1
 800cc92:	4620      	mov	r0, r4
 800cc94:	fa01 f605 	lsl.w	r6, r1, r5
 800cc98:	1d72      	adds	r2, r6, #5
 800cc9a:	0092      	lsls	r2, r2, #2
 800cc9c:	f000 fd63 	bl	800d766 <_calloc_r>
 800cca0:	b160      	cbz	r0, 800ccbc <_Balloc+0x64>
 800cca2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cca6:	e00e      	b.n	800ccc6 <_Balloc+0x6e>
 800cca8:	2221      	movs	r2, #33	@ 0x21
 800ccaa:	2104      	movs	r1, #4
 800ccac:	4620      	mov	r0, r4
 800ccae:	f000 fd5a 	bl	800d766 <_calloc_r>
 800ccb2:	69e3      	ldr	r3, [r4, #28]
 800ccb4:	60f0      	str	r0, [r6, #12]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1e4      	bne.n	800cc86 <_Balloc+0x2e>
 800ccbc:	2000      	movs	r0, #0
 800ccbe:	bd70      	pop	{r4, r5, r6, pc}
 800ccc0:	6802      	ldr	r2, [r0, #0]
 800ccc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cccc:	e7f7      	b.n	800ccbe <_Balloc+0x66>
 800ccce:	bf00      	nop
 800ccd0:	0800f570 	.word	0x0800f570
 800ccd4:	0800f6a2 	.word	0x0800f6a2

0800ccd8 <_Bfree>:
 800ccd8:	b570      	push	{r4, r5, r6, lr}
 800ccda:	69c6      	ldr	r6, [r0, #28]
 800ccdc:	4605      	mov	r5, r0
 800ccde:	460c      	mov	r4, r1
 800cce0:	b976      	cbnz	r6, 800cd00 <_Bfree+0x28>
 800cce2:	2010      	movs	r0, #16
 800cce4:	f7ff fe56 	bl	800c994 <malloc>
 800cce8:	4602      	mov	r2, r0
 800ccea:	61e8      	str	r0, [r5, #28]
 800ccec:	b920      	cbnz	r0, 800ccf8 <_Bfree+0x20>
 800ccee:	4b09      	ldr	r3, [pc, #36]	@ (800cd14 <_Bfree+0x3c>)
 800ccf0:	218f      	movs	r1, #143	@ 0x8f
 800ccf2:	4809      	ldr	r0, [pc, #36]	@ (800cd18 <_Bfree+0x40>)
 800ccf4:	f7fe fe9c 	bl	800ba30 <__assert_func>
 800ccf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccfc:	6006      	str	r6, [r0, #0]
 800ccfe:	60c6      	str	r6, [r0, #12]
 800cd00:	b13c      	cbz	r4, 800cd12 <_Bfree+0x3a>
 800cd02:	69eb      	ldr	r3, [r5, #28]
 800cd04:	6862      	ldr	r2, [r4, #4]
 800cd06:	68db      	ldr	r3, [r3, #12]
 800cd08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd0c:	6021      	str	r1, [r4, #0]
 800cd0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd12:	bd70      	pop	{r4, r5, r6, pc}
 800cd14:	0800f570 	.word	0x0800f570
 800cd18:	0800f6a2 	.word	0x0800f6a2

0800cd1c <__multadd>:
 800cd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd20:	f101 0c14 	add.w	ip, r1, #20
 800cd24:	4607      	mov	r7, r0
 800cd26:	460c      	mov	r4, r1
 800cd28:	461e      	mov	r6, r3
 800cd2a:	690d      	ldr	r5, [r1, #16]
 800cd2c:	2000      	movs	r0, #0
 800cd2e:	f8dc 3000 	ldr.w	r3, [ip]
 800cd32:	3001      	adds	r0, #1
 800cd34:	b299      	uxth	r1, r3
 800cd36:	4285      	cmp	r5, r0
 800cd38:	fb02 6101 	mla	r1, r2, r1, r6
 800cd3c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd40:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800cd44:	b289      	uxth	r1, r1
 800cd46:	fb02 3306 	mla	r3, r2, r6, r3
 800cd4a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd52:	f84c 1b04 	str.w	r1, [ip], #4
 800cd56:	dcea      	bgt.n	800cd2e <__multadd+0x12>
 800cd58:	b30e      	cbz	r6, 800cd9e <__multadd+0x82>
 800cd5a:	68a3      	ldr	r3, [r4, #8]
 800cd5c:	42ab      	cmp	r3, r5
 800cd5e:	dc19      	bgt.n	800cd94 <__multadd+0x78>
 800cd60:	6861      	ldr	r1, [r4, #4]
 800cd62:	4638      	mov	r0, r7
 800cd64:	3101      	adds	r1, #1
 800cd66:	f7ff ff77 	bl	800cc58 <_Balloc>
 800cd6a:	4680      	mov	r8, r0
 800cd6c:	b928      	cbnz	r0, 800cd7a <__multadd+0x5e>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	4b0c      	ldr	r3, [pc, #48]	@ (800cda4 <__multadd+0x88>)
 800cd72:	21ba      	movs	r1, #186	@ 0xba
 800cd74:	480c      	ldr	r0, [pc, #48]	@ (800cda8 <__multadd+0x8c>)
 800cd76:	f7fe fe5b 	bl	800ba30 <__assert_func>
 800cd7a:	6922      	ldr	r2, [r4, #16]
 800cd7c:	f104 010c 	add.w	r1, r4, #12
 800cd80:	300c      	adds	r0, #12
 800cd82:	3202      	adds	r2, #2
 800cd84:	0092      	lsls	r2, r2, #2
 800cd86:	f7fe fe46 	bl	800ba16 <memcpy>
 800cd8a:	4621      	mov	r1, r4
 800cd8c:	4644      	mov	r4, r8
 800cd8e:	4638      	mov	r0, r7
 800cd90:	f7ff ffa2 	bl	800ccd8 <_Bfree>
 800cd94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd98:	3501      	adds	r5, #1
 800cd9a:	615e      	str	r6, [r3, #20]
 800cd9c:	6125      	str	r5, [r4, #16]
 800cd9e:	4620      	mov	r0, r4
 800cda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cda4:	0800f680 	.word	0x0800f680
 800cda8:	0800f6a2 	.word	0x0800f6a2

0800cdac <__hi0bits>:
 800cdac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	bf36      	itet	cc
 800cdb4:	0403      	lslcc	r3, r0, #16
 800cdb6:	2000      	movcs	r0, #0
 800cdb8:	2010      	movcc	r0, #16
 800cdba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cdbe:	bf3c      	itt	cc
 800cdc0:	021b      	lslcc	r3, r3, #8
 800cdc2:	3008      	addcc	r0, #8
 800cdc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cdc8:	bf3c      	itt	cc
 800cdca:	011b      	lslcc	r3, r3, #4
 800cdcc:	3004      	addcc	r0, #4
 800cdce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdd2:	bf3c      	itt	cc
 800cdd4:	009b      	lslcc	r3, r3, #2
 800cdd6:	3002      	addcc	r0, #2
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	db05      	blt.n	800cde8 <__hi0bits+0x3c>
 800cddc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cde0:	f100 0001 	add.w	r0, r0, #1
 800cde4:	bf08      	it	eq
 800cde6:	2020      	moveq	r0, #32
 800cde8:	4770      	bx	lr

0800cdea <__lo0bits>:
 800cdea:	6803      	ldr	r3, [r0, #0]
 800cdec:	4602      	mov	r2, r0
 800cdee:	f013 0007 	ands.w	r0, r3, #7
 800cdf2:	d00b      	beq.n	800ce0c <__lo0bits+0x22>
 800cdf4:	07d9      	lsls	r1, r3, #31
 800cdf6:	d421      	bmi.n	800ce3c <__lo0bits+0x52>
 800cdf8:	0798      	lsls	r0, r3, #30
 800cdfa:	bf47      	ittee	mi
 800cdfc:	085b      	lsrmi	r3, r3, #1
 800cdfe:	2001      	movmi	r0, #1
 800ce00:	089b      	lsrpl	r3, r3, #2
 800ce02:	2002      	movpl	r0, #2
 800ce04:	bf4c      	ite	mi
 800ce06:	6013      	strmi	r3, [r2, #0]
 800ce08:	6013      	strpl	r3, [r2, #0]
 800ce0a:	4770      	bx	lr
 800ce0c:	b299      	uxth	r1, r3
 800ce0e:	b909      	cbnz	r1, 800ce14 <__lo0bits+0x2a>
 800ce10:	0c1b      	lsrs	r3, r3, #16
 800ce12:	2010      	movs	r0, #16
 800ce14:	b2d9      	uxtb	r1, r3
 800ce16:	b909      	cbnz	r1, 800ce1c <__lo0bits+0x32>
 800ce18:	3008      	adds	r0, #8
 800ce1a:	0a1b      	lsrs	r3, r3, #8
 800ce1c:	0719      	lsls	r1, r3, #28
 800ce1e:	bf04      	itt	eq
 800ce20:	091b      	lsreq	r3, r3, #4
 800ce22:	3004      	addeq	r0, #4
 800ce24:	0799      	lsls	r1, r3, #30
 800ce26:	bf04      	itt	eq
 800ce28:	089b      	lsreq	r3, r3, #2
 800ce2a:	3002      	addeq	r0, #2
 800ce2c:	07d9      	lsls	r1, r3, #31
 800ce2e:	d403      	bmi.n	800ce38 <__lo0bits+0x4e>
 800ce30:	085b      	lsrs	r3, r3, #1
 800ce32:	f100 0001 	add.w	r0, r0, #1
 800ce36:	d003      	beq.n	800ce40 <__lo0bits+0x56>
 800ce38:	6013      	str	r3, [r2, #0]
 800ce3a:	4770      	bx	lr
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	4770      	bx	lr
 800ce40:	2020      	movs	r0, #32
 800ce42:	4770      	bx	lr

0800ce44 <__i2b>:
 800ce44:	b510      	push	{r4, lr}
 800ce46:	460c      	mov	r4, r1
 800ce48:	2101      	movs	r1, #1
 800ce4a:	f7ff ff05 	bl	800cc58 <_Balloc>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	b928      	cbnz	r0, 800ce5e <__i2b+0x1a>
 800ce52:	4b05      	ldr	r3, [pc, #20]	@ (800ce68 <__i2b+0x24>)
 800ce54:	f240 1145 	movw	r1, #325	@ 0x145
 800ce58:	4804      	ldr	r0, [pc, #16]	@ (800ce6c <__i2b+0x28>)
 800ce5a:	f7fe fde9 	bl	800ba30 <__assert_func>
 800ce5e:	2301      	movs	r3, #1
 800ce60:	6144      	str	r4, [r0, #20]
 800ce62:	6103      	str	r3, [r0, #16]
 800ce64:	bd10      	pop	{r4, pc}
 800ce66:	bf00      	nop
 800ce68:	0800f680 	.word	0x0800f680
 800ce6c:	0800f6a2 	.word	0x0800f6a2

0800ce70 <__multiply>:
 800ce70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce74:	4614      	mov	r4, r2
 800ce76:	690a      	ldr	r2, [r1, #16]
 800ce78:	460f      	mov	r7, r1
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	6923      	ldr	r3, [r4, #16]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	bfa2      	ittt	ge
 800ce82:	4623      	movge	r3, r4
 800ce84:	460c      	movge	r4, r1
 800ce86:	461f      	movge	r7, r3
 800ce88:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ce8c:	68a3      	ldr	r3, [r4, #8]
 800ce8e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ce92:	6861      	ldr	r1, [r4, #4]
 800ce94:	eb0a 0609 	add.w	r6, sl, r9
 800ce98:	42b3      	cmp	r3, r6
 800ce9a:	bfb8      	it	lt
 800ce9c:	3101      	addlt	r1, #1
 800ce9e:	f7ff fedb 	bl	800cc58 <_Balloc>
 800cea2:	b930      	cbnz	r0, 800ceb2 <__multiply+0x42>
 800cea4:	4602      	mov	r2, r0
 800cea6:	4b45      	ldr	r3, [pc, #276]	@ (800cfbc <__multiply+0x14c>)
 800cea8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ceac:	4844      	ldr	r0, [pc, #272]	@ (800cfc0 <__multiply+0x150>)
 800ceae:	f7fe fdbf 	bl	800ba30 <__assert_func>
 800ceb2:	f100 0514 	add.w	r5, r0, #20
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cebc:	462b      	mov	r3, r5
 800cebe:	4543      	cmp	r3, r8
 800cec0:	d321      	bcc.n	800cf06 <__multiply+0x96>
 800cec2:	f107 0114 	add.w	r1, r7, #20
 800cec6:	f104 0214 	add.w	r2, r4, #20
 800ceca:	f104 0715 	add.w	r7, r4, #21
 800cece:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ced2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ced6:	9302      	str	r3, [sp, #8]
 800ced8:	1b13      	subs	r3, r2, r4
 800ceda:	3b15      	subs	r3, #21
 800cedc:	f023 0303 	bic.w	r3, r3, #3
 800cee0:	3304      	adds	r3, #4
 800cee2:	42ba      	cmp	r2, r7
 800cee4:	bf38      	it	cc
 800cee6:	2304      	movcc	r3, #4
 800cee8:	9301      	str	r3, [sp, #4]
 800ceea:	9b02      	ldr	r3, [sp, #8]
 800ceec:	9103      	str	r1, [sp, #12]
 800ceee:	428b      	cmp	r3, r1
 800cef0:	d80c      	bhi.n	800cf0c <__multiply+0x9c>
 800cef2:	2e00      	cmp	r6, #0
 800cef4:	dd03      	ble.n	800cefe <__multiply+0x8e>
 800cef6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d05b      	beq.n	800cfb6 <__multiply+0x146>
 800cefe:	6106      	str	r6, [r0, #16]
 800cf00:	b005      	add	sp, #20
 800cf02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf06:	f843 2b04 	str.w	r2, [r3], #4
 800cf0a:	e7d8      	b.n	800cebe <__multiply+0x4e>
 800cf0c:	f8b1 a000 	ldrh.w	sl, [r1]
 800cf10:	f1ba 0f00 	cmp.w	sl, #0
 800cf14:	d024      	beq.n	800cf60 <__multiply+0xf0>
 800cf16:	f104 0e14 	add.w	lr, r4, #20
 800cf1a:	46a9      	mov	r9, r5
 800cf1c:	f04f 0c00 	mov.w	ip, #0
 800cf20:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf24:	f8d9 3000 	ldr.w	r3, [r9]
 800cf28:	fa1f fb87 	uxth.w	fp, r7
 800cf2c:	4572      	cmp	r2, lr
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	fb0a 330b 	mla	r3, sl, fp, r3
 800cf34:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cf38:	f8d9 7000 	ldr.w	r7, [r9]
 800cf3c:	4463      	add	r3, ip
 800cf3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cf42:	fb0a c70b 	mla	r7, sl, fp, ip
 800cf46:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cf50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf54:	f849 3b04 	str.w	r3, [r9], #4
 800cf58:	d8e2      	bhi.n	800cf20 <__multiply+0xb0>
 800cf5a:	9b01      	ldr	r3, [sp, #4]
 800cf5c:	f845 c003 	str.w	ip, [r5, r3]
 800cf60:	9b03      	ldr	r3, [sp, #12]
 800cf62:	3104      	adds	r1, #4
 800cf64:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cf68:	f1b9 0f00 	cmp.w	r9, #0
 800cf6c:	d021      	beq.n	800cfb2 <__multiply+0x142>
 800cf6e:	682b      	ldr	r3, [r5, #0]
 800cf70:	f104 0c14 	add.w	ip, r4, #20
 800cf74:	46ae      	mov	lr, r5
 800cf76:	f04f 0a00 	mov.w	sl, #0
 800cf7a:	f8bc b000 	ldrh.w	fp, [ip]
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cf84:	fb09 770b 	mla	r7, r9, fp, r7
 800cf88:	4457      	add	r7, sl
 800cf8a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf8e:	f84e 3b04 	str.w	r3, [lr], #4
 800cf92:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cf96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf9a:	f8be 3000 	ldrh.w	r3, [lr]
 800cf9e:	4562      	cmp	r2, ip
 800cfa0:	fb09 330a 	mla	r3, r9, sl, r3
 800cfa4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cfa8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cfac:	d8e5      	bhi.n	800cf7a <__multiply+0x10a>
 800cfae:	9f01      	ldr	r7, [sp, #4]
 800cfb0:	51eb      	str	r3, [r5, r7]
 800cfb2:	3504      	adds	r5, #4
 800cfb4:	e799      	b.n	800ceea <__multiply+0x7a>
 800cfb6:	3e01      	subs	r6, #1
 800cfb8:	e79b      	b.n	800cef2 <__multiply+0x82>
 800cfba:	bf00      	nop
 800cfbc:	0800f680 	.word	0x0800f680
 800cfc0:	0800f6a2 	.word	0x0800f6a2

0800cfc4 <__pow5mult>:
 800cfc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfc8:	4615      	mov	r5, r2
 800cfca:	f012 0203 	ands.w	r2, r2, #3
 800cfce:	4607      	mov	r7, r0
 800cfd0:	460e      	mov	r6, r1
 800cfd2:	d007      	beq.n	800cfe4 <__pow5mult+0x20>
 800cfd4:	3a01      	subs	r2, #1
 800cfd6:	4c25      	ldr	r4, [pc, #148]	@ (800d06c <__pow5mult+0xa8>)
 800cfd8:	2300      	movs	r3, #0
 800cfda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cfde:	f7ff fe9d 	bl	800cd1c <__multadd>
 800cfe2:	4606      	mov	r6, r0
 800cfe4:	10ad      	asrs	r5, r5, #2
 800cfe6:	d03d      	beq.n	800d064 <__pow5mult+0xa0>
 800cfe8:	69fc      	ldr	r4, [r7, #28]
 800cfea:	b97c      	cbnz	r4, 800d00c <__pow5mult+0x48>
 800cfec:	2010      	movs	r0, #16
 800cfee:	f7ff fcd1 	bl	800c994 <malloc>
 800cff2:	4602      	mov	r2, r0
 800cff4:	61f8      	str	r0, [r7, #28]
 800cff6:	b928      	cbnz	r0, 800d004 <__pow5mult+0x40>
 800cff8:	4b1d      	ldr	r3, [pc, #116]	@ (800d070 <__pow5mult+0xac>)
 800cffa:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cffe:	481d      	ldr	r0, [pc, #116]	@ (800d074 <__pow5mult+0xb0>)
 800d000:	f7fe fd16 	bl	800ba30 <__assert_func>
 800d004:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d008:	6004      	str	r4, [r0, #0]
 800d00a:	60c4      	str	r4, [r0, #12]
 800d00c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d010:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d014:	b94c      	cbnz	r4, 800d02a <__pow5mult+0x66>
 800d016:	f240 2171 	movw	r1, #625	@ 0x271
 800d01a:	4638      	mov	r0, r7
 800d01c:	f7ff ff12 	bl	800ce44 <__i2b>
 800d020:	2300      	movs	r3, #0
 800d022:	4604      	mov	r4, r0
 800d024:	f8c8 0008 	str.w	r0, [r8, #8]
 800d028:	6003      	str	r3, [r0, #0]
 800d02a:	f04f 0900 	mov.w	r9, #0
 800d02e:	07eb      	lsls	r3, r5, #31
 800d030:	d50a      	bpl.n	800d048 <__pow5mult+0x84>
 800d032:	4631      	mov	r1, r6
 800d034:	4622      	mov	r2, r4
 800d036:	4638      	mov	r0, r7
 800d038:	f7ff ff1a 	bl	800ce70 <__multiply>
 800d03c:	4680      	mov	r8, r0
 800d03e:	4631      	mov	r1, r6
 800d040:	4638      	mov	r0, r7
 800d042:	4646      	mov	r6, r8
 800d044:	f7ff fe48 	bl	800ccd8 <_Bfree>
 800d048:	106d      	asrs	r5, r5, #1
 800d04a:	d00b      	beq.n	800d064 <__pow5mult+0xa0>
 800d04c:	6820      	ldr	r0, [r4, #0]
 800d04e:	b938      	cbnz	r0, 800d060 <__pow5mult+0x9c>
 800d050:	4622      	mov	r2, r4
 800d052:	4621      	mov	r1, r4
 800d054:	4638      	mov	r0, r7
 800d056:	f7ff ff0b 	bl	800ce70 <__multiply>
 800d05a:	6020      	str	r0, [r4, #0]
 800d05c:	f8c0 9000 	str.w	r9, [r0]
 800d060:	4604      	mov	r4, r0
 800d062:	e7e4      	b.n	800d02e <__pow5mult+0x6a>
 800d064:	4630      	mov	r0, r6
 800d066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d06a:	bf00      	nop
 800d06c:	0800f6fc 	.word	0x0800f6fc
 800d070:	0800f570 	.word	0x0800f570
 800d074:	0800f6a2 	.word	0x0800f6a2

0800d078 <__lshift>:
 800d078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d07c:	460c      	mov	r4, r1
 800d07e:	4607      	mov	r7, r0
 800d080:	4691      	mov	r9, r2
 800d082:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d086:	6923      	ldr	r3, [r4, #16]
 800d088:	6849      	ldr	r1, [r1, #4]
 800d08a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d08e:	68a3      	ldr	r3, [r4, #8]
 800d090:	f108 0601 	add.w	r6, r8, #1
 800d094:	42b3      	cmp	r3, r6
 800d096:	db0b      	blt.n	800d0b0 <__lshift+0x38>
 800d098:	4638      	mov	r0, r7
 800d09a:	f7ff fddd 	bl	800cc58 <_Balloc>
 800d09e:	4605      	mov	r5, r0
 800d0a0:	b948      	cbnz	r0, 800d0b6 <__lshift+0x3e>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	4b28      	ldr	r3, [pc, #160]	@ (800d148 <__lshift+0xd0>)
 800d0a6:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d0aa:	4828      	ldr	r0, [pc, #160]	@ (800d14c <__lshift+0xd4>)
 800d0ac:	f7fe fcc0 	bl	800ba30 <__assert_func>
 800d0b0:	3101      	adds	r1, #1
 800d0b2:	005b      	lsls	r3, r3, #1
 800d0b4:	e7ee      	b.n	800d094 <__lshift+0x1c>
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	f100 0114 	add.w	r1, r0, #20
 800d0bc:	f100 0210 	add.w	r2, r0, #16
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	4553      	cmp	r3, sl
 800d0c4:	db33      	blt.n	800d12e <__lshift+0xb6>
 800d0c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0ca:	f104 0314 	add.w	r3, r4, #20
 800d0ce:	6920      	ldr	r0, [r4, #16]
 800d0d0:	f019 091f 	ands.w	r9, r9, #31
 800d0d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d0dc:	d02b      	beq.n	800d136 <__lshift+0xbe>
 800d0de:	f1c9 0e20 	rsb	lr, r9, #32
 800d0e2:	468a      	mov	sl, r1
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	6818      	ldr	r0, [r3, #0]
 800d0e8:	fa00 f009 	lsl.w	r0, r0, r9
 800d0ec:	4310      	orrs	r0, r2
 800d0ee:	f84a 0b04 	str.w	r0, [sl], #4
 800d0f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0f6:	459c      	cmp	ip, r3
 800d0f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d0fc:	d8f3      	bhi.n	800d0e6 <__lshift+0x6e>
 800d0fe:	ebac 0304 	sub.w	r3, ip, r4
 800d102:	f104 0015 	add.w	r0, r4, #21
 800d106:	3b15      	subs	r3, #21
 800d108:	f023 0303 	bic.w	r3, r3, #3
 800d10c:	3304      	adds	r3, #4
 800d10e:	4584      	cmp	ip, r0
 800d110:	bf38      	it	cc
 800d112:	2304      	movcc	r3, #4
 800d114:	50ca      	str	r2, [r1, r3]
 800d116:	b10a      	cbz	r2, 800d11c <__lshift+0xa4>
 800d118:	f108 0602 	add.w	r6, r8, #2
 800d11c:	3e01      	subs	r6, #1
 800d11e:	4638      	mov	r0, r7
 800d120:	4621      	mov	r1, r4
 800d122:	612e      	str	r6, [r5, #16]
 800d124:	f7ff fdd8 	bl	800ccd8 <_Bfree>
 800d128:	4628      	mov	r0, r5
 800d12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d12e:	3301      	adds	r3, #1
 800d130:	f842 0f04 	str.w	r0, [r2, #4]!
 800d134:	e7c5      	b.n	800d0c2 <__lshift+0x4a>
 800d136:	3904      	subs	r1, #4
 800d138:	f853 2b04 	ldr.w	r2, [r3], #4
 800d13c:	459c      	cmp	ip, r3
 800d13e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d142:	d8f9      	bhi.n	800d138 <__lshift+0xc0>
 800d144:	e7ea      	b.n	800d11c <__lshift+0xa4>
 800d146:	bf00      	nop
 800d148:	0800f680 	.word	0x0800f680
 800d14c:	0800f6a2 	.word	0x0800f6a2

0800d150 <__mcmp>:
 800d150:	4603      	mov	r3, r0
 800d152:	690a      	ldr	r2, [r1, #16]
 800d154:	6900      	ldr	r0, [r0, #16]
 800d156:	1a80      	subs	r0, r0, r2
 800d158:	b530      	push	{r4, r5, lr}
 800d15a:	d10e      	bne.n	800d17a <__mcmp+0x2a>
 800d15c:	3314      	adds	r3, #20
 800d15e:	3114      	adds	r1, #20
 800d160:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d164:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d168:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d16c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d170:	4295      	cmp	r5, r2
 800d172:	d003      	beq.n	800d17c <__mcmp+0x2c>
 800d174:	d205      	bcs.n	800d182 <__mcmp+0x32>
 800d176:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d17a:	bd30      	pop	{r4, r5, pc}
 800d17c:	42a3      	cmp	r3, r4
 800d17e:	d3f3      	bcc.n	800d168 <__mcmp+0x18>
 800d180:	e7fb      	b.n	800d17a <__mcmp+0x2a>
 800d182:	2001      	movs	r0, #1
 800d184:	e7f9      	b.n	800d17a <__mcmp+0x2a>
	...

0800d188 <__mdiff>:
 800d188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d18c:	4689      	mov	r9, r1
 800d18e:	4606      	mov	r6, r0
 800d190:	4611      	mov	r1, r2
 800d192:	4614      	mov	r4, r2
 800d194:	4648      	mov	r0, r9
 800d196:	f7ff ffdb 	bl	800d150 <__mcmp>
 800d19a:	1e05      	subs	r5, r0, #0
 800d19c:	d112      	bne.n	800d1c4 <__mdiff+0x3c>
 800d19e:	4629      	mov	r1, r5
 800d1a0:	4630      	mov	r0, r6
 800d1a2:	f7ff fd59 	bl	800cc58 <_Balloc>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	b928      	cbnz	r0, 800d1b6 <__mdiff+0x2e>
 800d1aa:	4b41      	ldr	r3, [pc, #260]	@ (800d2b0 <__mdiff+0x128>)
 800d1ac:	f240 2137 	movw	r1, #567	@ 0x237
 800d1b0:	4840      	ldr	r0, [pc, #256]	@ (800d2b4 <__mdiff+0x12c>)
 800d1b2:	f7fe fc3d 	bl	800ba30 <__assert_func>
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d1bc:	4610      	mov	r0, r2
 800d1be:	b003      	add	sp, #12
 800d1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c4:	bfbc      	itt	lt
 800d1c6:	464b      	movlt	r3, r9
 800d1c8:	46a1      	movlt	r9, r4
 800d1ca:	4630      	mov	r0, r6
 800d1cc:	bfb8      	it	lt
 800d1ce:	2501      	movlt	r5, #1
 800d1d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d1d4:	bfb4      	ite	lt
 800d1d6:	461c      	movlt	r4, r3
 800d1d8:	2500      	movge	r5, #0
 800d1da:	f7ff fd3d 	bl	800cc58 <_Balloc>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	b918      	cbnz	r0, 800d1ea <__mdiff+0x62>
 800d1e2:	4b33      	ldr	r3, [pc, #204]	@ (800d2b0 <__mdiff+0x128>)
 800d1e4:	f240 2145 	movw	r1, #581	@ 0x245
 800d1e8:	e7e2      	b.n	800d1b0 <__mdiff+0x28>
 800d1ea:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d1ee:	f104 0e14 	add.w	lr, r4, #20
 800d1f2:	6926      	ldr	r6, [r4, #16]
 800d1f4:	f100 0b14 	add.w	fp, r0, #20
 800d1f8:	60c5      	str	r5, [r0, #12]
 800d1fa:	f109 0514 	add.w	r5, r9, #20
 800d1fe:	f109 0310 	add.w	r3, r9, #16
 800d202:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d206:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d20a:	46d9      	mov	r9, fp
 800d20c:	f04f 0c00 	mov.w	ip, #0
 800d210:	9301      	str	r3, [sp, #4]
 800d212:	9b01      	ldr	r3, [sp, #4]
 800d214:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d218:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d21c:	4576      	cmp	r6, lr
 800d21e:	9301      	str	r3, [sp, #4]
 800d220:	fa1f f38a 	uxth.w	r3, sl
 800d224:	4619      	mov	r1, r3
 800d226:	b283      	uxth	r3, r0
 800d228:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800d22c:	eba1 0303 	sub.w	r3, r1, r3
 800d230:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d234:	4463      	add	r3, ip
 800d236:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d240:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d244:	f849 3b04 	str.w	r3, [r9], #4
 800d248:	d8e3      	bhi.n	800d212 <__mdiff+0x8a>
 800d24a:	1b33      	subs	r3, r6, r4
 800d24c:	3415      	adds	r4, #21
 800d24e:	3b15      	subs	r3, #21
 800d250:	f023 0303 	bic.w	r3, r3, #3
 800d254:	3304      	adds	r3, #4
 800d256:	42a6      	cmp	r6, r4
 800d258:	bf38      	it	cc
 800d25a:	2304      	movcc	r3, #4
 800d25c:	441d      	add	r5, r3
 800d25e:	445b      	add	r3, fp
 800d260:	462c      	mov	r4, r5
 800d262:	461e      	mov	r6, r3
 800d264:	4544      	cmp	r4, r8
 800d266:	d30e      	bcc.n	800d286 <__mdiff+0xfe>
 800d268:	f108 0103 	add.w	r1, r8, #3
 800d26c:	1b49      	subs	r1, r1, r5
 800d26e:	3d03      	subs	r5, #3
 800d270:	f021 0103 	bic.w	r1, r1, #3
 800d274:	45a8      	cmp	r8, r5
 800d276:	bf38      	it	cc
 800d278:	2100      	movcc	r1, #0
 800d27a:	440b      	add	r3, r1
 800d27c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d280:	b199      	cbz	r1, 800d2aa <__mdiff+0x122>
 800d282:	6117      	str	r7, [r2, #16]
 800d284:	e79a      	b.n	800d1bc <__mdiff+0x34>
 800d286:	f854 1b04 	ldr.w	r1, [r4], #4
 800d28a:	46e6      	mov	lr, ip
 800d28c:	fa1f fc81 	uxth.w	ip, r1
 800d290:	0c08      	lsrs	r0, r1, #16
 800d292:	4471      	add	r1, lr
 800d294:	44f4      	add	ip, lr
 800d296:	b289      	uxth	r1, r1
 800d298:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d29c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d2a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d2a4:	f846 1b04 	str.w	r1, [r6], #4
 800d2a8:	e7dc      	b.n	800d264 <__mdiff+0xdc>
 800d2aa:	3f01      	subs	r7, #1
 800d2ac:	e7e6      	b.n	800d27c <__mdiff+0xf4>
 800d2ae:	bf00      	nop
 800d2b0:	0800f680 	.word	0x0800f680
 800d2b4:	0800f6a2 	.word	0x0800f6a2

0800d2b8 <__d2b>:
 800d2b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d2bc:	460f      	mov	r7, r1
 800d2be:	2101      	movs	r1, #1
 800d2c0:	4616      	mov	r6, r2
 800d2c2:	ec59 8b10 	vmov	r8, r9, d0
 800d2c6:	f7ff fcc7 	bl	800cc58 <_Balloc>
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	b930      	cbnz	r0, 800d2dc <__d2b+0x24>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	4b23      	ldr	r3, [pc, #140]	@ (800d360 <__d2b+0xa8>)
 800d2d2:	f240 310f 	movw	r1, #783	@ 0x30f
 800d2d6:	4823      	ldr	r0, [pc, #140]	@ (800d364 <__d2b+0xac>)
 800d2d8:	f7fe fbaa 	bl	800ba30 <__assert_func>
 800d2dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d2e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2e4:	b10d      	cbz	r5, 800d2ea <__d2b+0x32>
 800d2e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d2ea:	9301      	str	r3, [sp, #4]
 800d2ec:	f1b8 0300 	subs.w	r3, r8, #0
 800d2f0:	d023      	beq.n	800d33a <__d2b+0x82>
 800d2f2:	4668      	mov	r0, sp
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	f7ff fd78 	bl	800cdea <__lo0bits>
 800d2fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d2fe:	b1d0      	cbz	r0, 800d336 <__d2b+0x7e>
 800d300:	f1c0 0320 	rsb	r3, r0, #32
 800d304:	fa02 f303 	lsl.w	r3, r2, r3
 800d308:	40c2      	lsrs	r2, r0
 800d30a:	430b      	orrs	r3, r1
 800d30c:	9201      	str	r2, [sp, #4]
 800d30e:	6163      	str	r3, [r4, #20]
 800d310:	9b01      	ldr	r3, [sp, #4]
 800d312:	2b00      	cmp	r3, #0
 800d314:	61a3      	str	r3, [r4, #24]
 800d316:	bf0c      	ite	eq
 800d318:	2201      	moveq	r2, #1
 800d31a:	2202      	movne	r2, #2
 800d31c:	6122      	str	r2, [r4, #16]
 800d31e:	b1a5      	cbz	r5, 800d34a <__d2b+0x92>
 800d320:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d324:	4405      	add	r5, r0
 800d326:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d32a:	603d      	str	r5, [r7, #0]
 800d32c:	6030      	str	r0, [r6, #0]
 800d32e:	4620      	mov	r0, r4
 800d330:	b003      	add	sp, #12
 800d332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d336:	6161      	str	r1, [r4, #20]
 800d338:	e7ea      	b.n	800d310 <__d2b+0x58>
 800d33a:	a801      	add	r0, sp, #4
 800d33c:	f7ff fd55 	bl	800cdea <__lo0bits>
 800d340:	9b01      	ldr	r3, [sp, #4]
 800d342:	3020      	adds	r0, #32
 800d344:	2201      	movs	r2, #1
 800d346:	6163      	str	r3, [r4, #20]
 800d348:	e7e8      	b.n	800d31c <__d2b+0x64>
 800d34a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d34e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d352:	6038      	str	r0, [r7, #0]
 800d354:	6918      	ldr	r0, [r3, #16]
 800d356:	f7ff fd29 	bl	800cdac <__hi0bits>
 800d35a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d35e:	e7e5      	b.n	800d32c <__d2b+0x74>
 800d360:	0800f680 	.word	0x0800f680
 800d364:	0800f6a2 	.word	0x0800f6a2

0800d368 <__sread>:
 800d368:	b510      	push	{r4, lr}
 800d36a:	460c      	mov	r4, r1
 800d36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d370:	f000 f9be 	bl	800d6f0 <_read_r>
 800d374:	2800      	cmp	r0, #0
 800d376:	bfab      	itete	ge
 800d378:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d37a:	89a3      	ldrhlt	r3, [r4, #12]
 800d37c:	181b      	addge	r3, r3, r0
 800d37e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d382:	bfac      	ite	ge
 800d384:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d386:	81a3      	strhlt	r3, [r4, #12]
 800d388:	bd10      	pop	{r4, pc}

0800d38a <__swrite>:
 800d38a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d38e:	461f      	mov	r7, r3
 800d390:	898b      	ldrh	r3, [r1, #12]
 800d392:	4605      	mov	r5, r0
 800d394:	460c      	mov	r4, r1
 800d396:	05db      	lsls	r3, r3, #23
 800d398:	4616      	mov	r6, r2
 800d39a:	d505      	bpl.n	800d3a8 <__swrite+0x1e>
 800d39c:	2302      	movs	r3, #2
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3a4:	f000 f992 	bl	800d6cc <_lseek_r>
 800d3a8:	89a3      	ldrh	r3, [r4, #12]
 800d3aa:	4632      	mov	r2, r6
 800d3ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3b0:	4628      	mov	r0, r5
 800d3b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d3b6:	81a3      	strh	r3, [r4, #12]
 800d3b8:	463b      	mov	r3, r7
 800d3ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3be:	f000 b9b9 	b.w	800d734 <_write_r>

0800d3c2 <__sseek>:
 800d3c2:	b510      	push	{r4, lr}
 800d3c4:	460c      	mov	r4, r1
 800d3c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3ca:	f000 f97f 	bl	800d6cc <_lseek_r>
 800d3ce:	1c43      	adds	r3, r0, #1
 800d3d0:	89a3      	ldrh	r3, [r4, #12]
 800d3d2:	bf15      	itete	ne
 800d3d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d3d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d3da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d3de:	81a3      	strheq	r3, [r4, #12]
 800d3e0:	bf18      	it	ne
 800d3e2:	81a3      	strhne	r3, [r4, #12]
 800d3e4:	bd10      	pop	{r4, pc}

0800d3e6 <__sclose>:
 800d3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3ea:	f000 b93d 	b.w	800d668 <_close_r>
	...

0800d3f0 <fiprintf>:
 800d3f0:	b40e      	push	{r1, r2, r3}
 800d3f2:	b503      	push	{r0, r1, lr}
 800d3f4:	ab03      	add	r3, sp, #12
 800d3f6:	4601      	mov	r1, r0
 800d3f8:	4805      	ldr	r0, [pc, #20]	@ (800d410 <fiprintf+0x20>)
 800d3fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3fe:	6800      	ldr	r0, [r0, #0]
 800d400:	9301      	str	r3, [sp, #4]
 800d402:	f7ff f9af 	bl	800c764 <_vfiprintf_r>
 800d406:	b002      	add	sp, #8
 800d408:	f85d eb04 	ldr.w	lr, [sp], #4
 800d40c:	b003      	add	sp, #12
 800d40e:	4770      	bx	lr
 800d410:	200000b8 	.word	0x200000b8

0800d414 <__swbuf_r>:
 800d414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d416:	460e      	mov	r6, r1
 800d418:	4614      	mov	r4, r2
 800d41a:	4605      	mov	r5, r0
 800d41c:	b118      	cbz	r0, 800d426 <__swbuf_r+0x12>
 800d41e:	6a03      	ldr	r3, [r0, #32]
 800d420:	b90b      	cbnz	r3, 800d426 <__swbuf_r+0x12>
 800d422:	f7fe fa03 	bl	800b82c <__sinit>
 800d426:	69a3      	ldr	r3, [r4, #24]
 800d428:	60a3      	str	r3, [r4, #8]
 800d42a:	89a3      	ldrh	r3, [r4, #12]
 800d42c:	071a      	lsls	r2, r3, #28
 800d42e:	d501      	bpl.n	800d434 <__swbuf_r+0x20>
 800d430:	6923      	ldr	r3, [r4, #16]
 800d432:	b943      	cbnz	r3, 800d446 <__swbuf_r+0x32>
 800d434:	4621      	mov	r1, r4
 800d436:	4628      	mov	r0, r5
 800d438:	f000 f82a 	bl	800d490 <__swsetup_r>
 800d43c:	b118      	cbz	r0, 800d446 <__swbuf_r+0x32>
 800d43e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d442:	4638      	mov	r0, r7
 800d444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d446:	6823      	ldr	r3, [r4, #0]
 800d448:	b2f6      	uxtb	r6, r6
 800d44a:	6922      	ldr	r2, [r4, #16]
 800d44c:	4637      	mov	r7, r6
 800d44e:	1a98      	subs	r0, r3, r2
 800d450:	6963      	ldr	r3, [r4, #20]
 800d452:	4283      	cmp	r3, r0
 800d454:	dc05      	bgt.n	800d462 <__swbuf_r+0x4e>
 800d456:	4621      	mov	r1, r4
 800d458:	4628      	mov	r0, r5
 800d45a:	f7ff fbc9 	bl	800cbf0 <_fflush_r>
 800d45e:	2800      	cmp	r0, #0
 800d460:	d1ed      	bne.n	800d43e <__swbuf_r+0x2a>
 800d462:	68a3      	ldr	r3, [r4, #8]
 800d464:	3b01      	subs	r3, #1
 800d466:	60a3      	str	r3, [r4, #8]
 800d468:	6823      	ldr	r3, [r4, #0]
 800d46a:	1c5a      	adds	r2, r3, #1
 800d46c:	6022      	str	r2, [r4, #0]
 800d46e:	701e      	strb	r6, [r3, #0]
 800d470:	1c43      	adds	r3, r0, #1
 800d472:	6962      	ldr	r2, [r4, #20]
 800d474:	429a      	cmp	r2, r3
 800d476:	d004      	beq.n	800d482 <__swbuf_r+0x6e>
 800d478:	89a3      	ldrh	r3, [r4, #12]
 800d47a:	07db      	lsls	r3, r3, #31
 800d47c:	d5e1      	bpl.n	800d442 <__swbuf_r+0x2e>
 800d47e:	2e0a      	cmp	r6, #10
 800d480:	d1df      	bne.n	800d442 <__swbuf_r+0x2e>
 800d482:	4621      	mov	r1, r4
 800d484:	4628      	mov	r0, r5
 800d486:	f7ff fbb3 	bl	800cbf0 <_fflush_r>
 800d48a:	2800      	cmp	r0, #0
 800d48c:	d0d9      	beq.n	800d442 <__swbuf_r+0x2e>
 800d48e:	e7d6      	b.n	800d43e <__swbuf_r+0x2a>

0800d490 <__swsetup_r>:
 800d490:	b538      	push	{r3, r4, r5, lr}
 800d492:	4b29      	ldr	r3, [pc, #164]	@ (800d538 <__swsetup_r+0xa8>)
 800d494:	4605      	mov	r5, r0
 800d496:	460c      	mov	r4, r1
 800d498:	6818      	ldr	r0, [r3, #0]
 800d49a:	b118      	cbz	r0, 800d4a4 <__swsetup_r+0x14>
 800d49c:	6a03      	ldr	r3, [r0, #32]
 800d49e:	b90b      	cbnz	r3, 800d4a4 <__swsetup_r+0x14>
 800d4a0:	f7fe f9c4 	bl	800b82c <__sinit>
 800d4a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4a8:	0719      	lsls	r1, r3, #28
 800d4aa:	d422      	bmi.n	800d4f2 <__swsetup_r+0x62>
 800d4ac:	06da      	lsls	r2, r3, #27
 800d4ae:	d407      	bmi.n	800d4c0 <__swsetup_r+0x30>
 800d4b0:	2209      	movs	r2, #9
 800d4b2:	602a      	str	r2, [r5, #0]
 800d4b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4bc:	81a3      	strh	r3, [r4, #12]
 800d4be:	e033      	b.n	800d528 <__swsetup_r+0x98>
 800d4c0:	0758      	lsls	r0, r3, #29
 800d4c2:	d512      	bpl.n	800d4ea <__swsetup_r+0x5a>
 800d4c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4c6:	b141      	cbz	r1, 800d4da <__swsetup_r+0x4a>
 800d4c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4cc:	4299      	cmp	r1, r3
 800d4ce:	d002      	beq.n	800d4d6 <__swsetup_r+0x46>
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	f000 f95d 	bl	800d790 <_free_r>
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4da:	89a3      	ldrh	r3, [r4, #12]
 800d4dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d4e0:	81a3      	strh	r3, [r4, #12]
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	6063      	str	r3, [r4, #4]
 800d4e6:	6923      	ldr	r3, [r4, #16]
 800d4e8:	6023      	str	r3, [r4, #0]
 800d4ea:	89a3      	ldrh	r3, [r4, #12]
 800d4ec:	f043 0308 	orr.w	r3, r3, #8
 800d4f0:	81a3      	strh	r3, [r4, #12]
 800d4f2:	6923      	ldr	r3, [r4, #16]
 800d4f4:	b94b      	cbnz	r3, 800d50a <__swsetup_r+0x7a>
 800d4f6:	89a3      	ldrh	r3, [r4, #12]
 800d4f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d4fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d500:	d003      	beq.n	800d50a <__swsetup_r+0x7a>
 800d502:	4621      	mov	r1, r4
 800d504:	4628      	mov	r0, r5
 800d506:	f000 f83e 	bl	800d586 <__smakebuf_r>
 800d50a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d50e:	f013 0201 	ands.w	r2, r3, #1
 800d512:	d00a      	beq.n	800d52a <__swsetup_r+0x9a>
 800d514:	2200      	movs	r2, #0
 800d516:	60a2      	str	r2, [r4, #8]
 800d518:	6962      	ldr	r2, [r4, #20]
 800d51a:	4252      	negs	r2, r2
 800d51c:	61a2      	str	r2, [r4, #24]
 800d51e:	6922      	ldr	r2, [r4, #16]
 800d520:	b942      	cbnz	r2, 800d534 <__swsetup_r+0xa4>
 800d522:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d526:	d1c5      	bne.n	800d4b4 <__swsetup_r+0x24>
 800d528:	bd38      	pop	{r3, r4, r5, pc}
 800d52a:	0799      	lsls	r1, r3, #30
 800d52c:	bf58      	it	pl
 800d52e:	6962      	ldrpl	r2, [r4, #20]
 800d530:	60a2      	str	r2, [r4, #8]
 800d532:	e7f4      	b.n	800d51e <__swsetup_r+0x8e>
 800d534:	2000      	movs	r0, #0
 800d536:	e7f7      	b.n	800d528 <__swsetup_r+0x98>
 800d538:	200000b8 	.word	0x200000b8

0800d53c <__swhatbuf_r>:
 800d53c:	b570      	push	{r4, r5, r6, lr}
 800d53e:	460c      	mov	r4, r1
 800d540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d544:	b096      	sub	sp, #88	@ 0x58
 800d546:	4615      	mov	r5, r2
 800d548:	2900      	cmp	r1, #0
 800d54a:	461e      	mov	r6, r3
 800d54c:	da0c      	bge.n	800d568 <__swhatbuf_r+0x2c>
 800d54e:	89a3      	ldrh	r3, [r4, #12]
 800d550:	2100      	movs	r1, #0
 800d552:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d556:	bf14      	ite	ne
 800d558:	2340      	movne	r3, #64	@ 0x40
 800d55a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d55e:	2000      	movs	r0, #0
 800d560:	6031      	str	r1, [r6, #0]
 800d562:	602b      	str	r3, [r5, #0]
 800d564:	b016      	add	sp, #88	@ 0x58
 800d566:	bd70      	pop	{r4, r5, r6, pc}
 800d568:	466a      	mov	r2, sp
 800d56a:	f000 f88d 	bl	800d688 <_fstat_r>
 800d56e:	2800      	cmp	r0, #0
 800d570:	dbed      	blt.n	800d54e <__swhatbuf_r+0x12>
 800d572:	9901      	ldr	r1, [sp, #4]
 800d574:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d578:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d57c:	4259      	negs	r1, r3
 800d57e:	4159      	adcs	r1, r3
 800d580:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d584:	e7eb      	b.n	800d55e <__swhatbuf_r+0x22>

0800d586 <__smakebuf_r>:
 800d586:	898b      	ldrh	r3, [r1, #12]
 800d588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d58a:	079d      	lsls	r5, r3, #30
 800d58c:	4606      	mov	r6, r0
 800d58e:	460c      	mov	r4, r1
 800d590:	d507      	bpl.n	800d5a2 <__smakebuf_r+0x1c>
 800d592:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d596:	6023      	str	r3, [r4, #0]
 800d598:	6123      	str	r3, [r4, #16]
 800d59a:	2301      	movs	r3, #1
 800d59c:	6163      	str	r3, [r4, #20]
 800d59e:	b003      	add	sp, #12
 800d5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5a2:	ab01      	add	r3, sp, #4
 800d5a4:	466a      	mov	r2, sp
 800d5a6:	f7ff ffc9 	bl	800d53c <__swhatbuf_r>
 800d5aa:	9f00      	ldr	r7, [sp, #0]
 800d5ac:	4605      	mov	r5, r0
 800d5ae:	4630      	mov	r0, r6
 800d5b0:	4639      	mov	r1, r7
 800d5b2:	f7ff fa19 	bl	800c9e8 <_malloc_r>
 800d5b6:	b948      	cbnz	r0, 800d5cc <__smakebuf_r+0x46>
 800d5b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5bc:	059a      	lsls	r2, r3, #22
 800d5be:	d4ee      	bmi.n	800d59e <__smakebuf_r+0x18>
 800d5c0:	f023 0303 	bic.w	r3, r3, #3
 800d5c4:	f043 0302 	orr.w	r3, r3, #2
 800d5c8:	81a3      	strh	r3, [r4, #12]
 800d5ca:	e7e2      	b.n	800d592 <__smakebuf_r+0xc>
 800d5cc:	89a3      	ldrh	r3, [r4, #12]
 800d5ce:	6020      	str	r0, [r4, #0]
 800d5d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5d4:	81a3      	strh	r3, [r4, #12]
 800d5d6:	9b01      	ldr	r3, [sp, #4]
 800d5d8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d5dc:	b15b      	cbz	r3, 800d5f6 <__smakebuf_r+0x70>
 800d5de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	f000 f862 	bl	800d6ac <_isatty_r>
 800d5e8:	b128      	cbz	r0, 800d5f6 <__smakebuf_r+0x70>
 800d5ea:	89a3      	ldrh	r3, [r4, #12]
 800d5ec:	f023 0303 	bic.w	r3, r3, #3
 800d5f0:	f043 0301 	orr.w	r3, r3, #1
 800d5f4:	81a3      	strh	r3, [r4, #12]
 800d5f6:	89a3      	ldrh	r3, [r4, #12]
 800d5f8:	431d      	orrs	r5, r3
 800d5fa:	81a5      	strh	r5, [r4, #12]
 800d5fc:	e7cf      	b.n	800d59e <__smakebuf_r+0x18>

0800d5fe <_putc_r>:
 800d5fe:	b570      	push	{r4, r5, r6, lr}
 800d600:	460d      	mov	r5, r1
 800d602:	4614      	mov	r4, r2
 800d604:	4606      	mov	r6, r0
 800d606:	b118      	cbz	r0, 800d610 <_putc_r+0x12>
 800d608:	6a03      	ldr	r3, [r0, #32]
 800d60a:	b90b      	cbnz	r3, 800d610 <_putc_r+0x12>
 800d60c:	f7fe f90e 	bl	800b82c <__sinit>
 800d610:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d612:	07d8      	lsls	r0, r3, #31
 800d614:	d405      	bmi.n	800d622 <_putc_r+0x24>
 800d616:	89a3      	ldrh	r3, [r4, #12]
 800d618:	0599      	lsls	r1, r3, #22
 800d61a:	d402      	bmi.n	800d622 <_putc_r+0x24>
 800d61c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d61e:	f7fe f9ea 	bl	800b9f6 <__retarget_lock_acquire_recursive>
 800d622:	68a3      	ldr	r3, [r4, #8]
 800d624:	3b01      	subs	r3, #1
 800d626:	2b00      	cmp	r3, #0
 800d628:	60a3      	str	r3, [r4, #8]
 800d62a:	da05      	bge.n	800d638 <_putc_r+0x3a>
 800d62c:	69a2      	ldr	r2, [r4, #24]
 800d62e:	4293      	cmp	r3, r2
 800d630:	db12      	blt.n	800d658 <_putc_r+0x5a>
 800d632:	b2eb      	uxtb	r3, r5
 800d634:	2b0a      	cmp	r3, #10
 800d636:	d00f      	beq.n	800d658 <_putc_r+0x5a>
 800d638:	6823      	ldr	r3, [r4, #0]
 800d63a:	1c5a      	adds	r2, r3, #1
 800d63c:	6022      	str	r2, [r4, #0]
 800d63e:	701d      	strb	r5, [r3, #0]
 800d640:	b2ed      	uxtb	r5, r5
 800d642:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d644:	07da      	lsls	r2, r3, #31
 800d646:	d405      	bmi.n	800d654 <_putc_r+0x56>
 800d648:	89a3      	ldrh	r3, [r4, #12]
 800d64a:	059b      	lsls	r3, r3, #22
 800d64c:	d402      	bmi.n	800d654 <_putc_r+0x56>
 800d64e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d650:	f7fe f9d2 	bl	800b9f8 <__retarget_lock_release_recursive>
 800d654:	4628      	mov	r0, r5
 800d656:	bd70      	pop	{r4, r5, r6, pc}
 800d658:	4629      	mov	r1, r5
 800d65a:	4622      	mov	r2, r4
 800d65c:	4630      	mov	r0, r6
 800d65e:	f7ff fed9 	bl	800d414 <__swbuf_r>
 800d662:	4605      	mov	r5, r0
 800d664:	e7ed      	b.n	800d642 <_putc_r+0x44>
	...

0800d668 <_close_r>:
 800d668:	b538      	push	{r3, r4, r5, lr}
 800d66a:	2300      	movs	r3, #0
 800d66c:	4d05      	ldr	r5, [pc, #20]	@ (800d684 <_close_r+0x1c>)
 800d66e:	4604      	mov	r4, r0
 800d670:	4608      	mov	r0, r1
 800d672:	602b      	str	r3, [r5, #0]
 800d674:	f000 fa36 	bl	800dae4 <_close>
 800d678:	1c43      	adds	r3, r0, #1
 800d67a:	d102      	bne.n	800d682 <_close_r+0x1a>
 800d67c:	682b      	ldr	r3, [r5, #0]
 800d67e:	b103      	cbz	r3, 800d682 <_close_r+0x1a>
 800d680:	6023      	str	r3, [r4, #0]
 800d682:	bd38      	pop	{r3, r4, r5, pc}
 800d684:	2000102c 	.word	0x2000102c

0800d688 <_fstat_r>:
 800d688:	b538      	push	{r3, r4, r5, lr}
 800d68a:	2300      	movs	r3, #0
 800d68c:	4d06      	ldr	r5, [pc, #24]	@ (800d6a8 <_fstat_r+0x20>)
 800d68e:	4604      	mov	r4, r0
 800d690:	4608      	mov	r0, r1
 800d692:	4611      	mov	r1, r2
 800d694:	602b      	str	r3, [r5, #0]
 800d696:	f000 fa6a 	bl	800db6e <_fstat>
 800d69a:	1c43      	adds	r3, r0, #1
 800d69c:	d102      	bne.n	800d6a4 <_fstat_r+0x1c>
 800d69e:	682b      	ldr	r3, [r5, #0]
 800d6a0:	b103      	cbz	r3, 800d6a4 <_fstat_r+0x1c>
 800d6a2:	6023      	str	r3, [r4, #0]
 800d6a4:	bd38      	pop	{r3, r4, r5, pc}
 800d6a6:	bf00      	nop
 800d6a8:	2000102c 	.word	0x2000102c

0800d6ac <_isatty_r>:
 800d6ac:	b538      	push	{r3, r4, r5, lr}
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	4d05      	ldr	r5, [pc, #20]	@ (800d6c8 <_isatty_r+0x1c>)
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	4608      	mov	r0, r1
 800d6b6:	602b      	str	r3, [r5, #0]
 800d6b8:	f000 fbc8 	bl	800de4c <_isatty>
 800d6bc:	1c43      	adds	r3, r0, #1
 800d6be:	d102      	bne.n	800d6c6 <_isatty_r+0x1a>
 800d6c0:	682b      	ldr	r3, [r5, #0]
 800d6c2:	b103      	cbz	r3, 800d6c6 <_isatty_r+0x1a>
 800d6c4:	6023      	str	r3, [r4, #0]
 800d6c6:	bd38      	pop	{r3, r4, r5, pc}
 800d6c8:	2000102c 	.word	0x2000102c

0800d6cc <_lseek_r>:
 800d6cc:	b538      	push	{r3, r4, r5, lr}
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	4d06      	ldr	r5, [pc, #24]	@ (800d6ec <_lseek_r+0x20>)
 800d6d2:	4608      	mov	r0, r1
 800d6d4:	4611      	mov	r1, r2
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	602a      	str	r2, [r5, #0]
 800d6da:	461a      	mov	r2, r3
 800d6dc:	f000 f9c3 	bl	800da66 <_lseek>
 800d6e0:	1c43      	adds	r3, r0, #1
 800d6e2:	d102      	bne.n	800d6ea <_lseek_r+0x1e>
 800d6e4:	682b      	ldr	r3, [r5, #0]
 800d6e6:	b103      	cbz	r3, 800d6ea <_lseek_r+0x1e>
 800d6e8:	6023      	str	r3, [r4, #0]
 800d6ea:	bd38      	pop	{r3, r4, r5, pc}
 800d6ec:	2000102c 	.word	0x2000102c

0800d6f0 <_read_r>:
 800d6f0:	b538      	push	{r3, r4, r5, lr}
 800d6f2:	4604      	mov	r4, r0
 800d6f4:	4d06      	ldr	r5, [pc, #24]	@ (800d710 <_read_r+0x20>)
 800d6f6:	4608      	mov	r0, r1
 800d6f8:	4611      	mov	r1, r2
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	602a      	str	r2, [r5, #0]
 800d6fe:	461a      	mov	r2, r3
 800d700:	f000 f95b 	bl	800d9ba <_read>
 800d704:	1c43      	adds	r3, r0, #1
 800d706:	d102      	bne.n	800d70e <_read_r+0x1e>
 800d708:	682b      	ldr	r3, [r5, #0]
 800d70a:	b103      	cbz	r3, 800d70e <_read_r+0x1e>
 800d70c:	6023      	str	r3, [r4, #0]
 800d70e:	bd38      	pop	{r3, r4, r5, pc}
 800d710:	2000102c 	.word	0x2000102c

0800d714 <_sbrk_r>:
 800d714:	b538      	push	{r3, r4, r5, lr}
 800d716:	2300      	movs	r3, #0
 800d718:	4d05      	ldr	r5, [pc, #20]	@ (800d730 <_sbrk_r+0x1c>)
 800d71a:	4604      	mov	r4, r0
 800d71c:	4608      	mov	r0, r1
 800d71e:	602b      	str	r3, [r5, #0]
 800d720:	f7fd fafc 	bl	800ad1c <_sbrk>
 800d724:	1c43      	adds	r3, r0, #1
 800d726:	d102      	bne.n	800d72e <_sbrk_r+0x1a>
 800d728:	682b      	ldr	r3, [r5, #0]
 800d72a:	b103      	cbz	r3, 800d72e <_sbrk_r+0x1a>
 800d72c:	6023      	str	r3, [r4, #0]
 800d72e:	bd38      	pop	{r3, r4, r5, pc}
 800d730:	2000102c 	.word	0x2000102c

0800d734 <_write_r>:
 800d734:	b538      	push	{r3, r4, r5, lr}
 800d736:	4604      	mov	r4, r0
 800d738:	4d06      	ldr	r5, [pc, #24]	@ (800d754 <_write_r+0x20>)
 800d73a:	4608      	mov	r0, r1
 800d73c:	4611      	mov	r1, r2
 800d73e:	2200      	movs	r2, #0
 800d740:	602a      	str	r2, [r5, #0]
 800d742:	461a      	mov	r2, r3
 800d744:	f000 f9a1 	bl	800da8a <_write>
 800d748:	1c43      	adds	r3, r0, #1
 800d74a:	d102      	bne.n	800d752 <_write_r+0x1e>
 800d74c:	682b      	ldr	r3, [r5, #0]
 800d74e:	b103      	cbz	r3, 800d752 <_write_r+0x1e>
 800d750:	6023      	str	r3, [r4, #0]
 800d752:	bd38      	pop	{r3, r4, r5, pc}
 800d754:	2000102c 	.word	0x2000102c

0800d758 <abort>:
 800d758:	2006      	movs	r0, #6
 800d75a:	b508      	push	{r3, lr}
 800d75c:	f000 f8aa 	bl	800d8b4 <raise>
 800d760:	2001      	movs	r0, #1
 800d762:	f000 f8c3 	bl	800d8ec <_exit>

0800d766 <_calloc_r>:
 800d766:	b570      	push	{r4, r5, r6, lr}
 800d768:	fba1 5402 	umull	r5, r4, r1, r2
 800d76c:	b93c      	cbnz	r4, 800d77e <_calloc_r+0x18>
 800d76e:	4629      	mov	r1, r5
 800d770:	f7ff f93a 	bl	800c9e8 <_malloc_r>
 800d774:	4606      	mov	r6, r0
 800d776:	b928      	cbnz	r0, 800d784 <_calloc_r+0x1e>
 800d778:	2600      	movs	r6, #0
 800d77a:	4630      	mov	r0, r6
 800d77c:	bd70      	pop	{r4, r5, r6, pc}
 800d77e:	220c      	movs	r2, #12
 800d780:	6002      	str	r2, [r0, #0]
 800d782:	e7f9      	b.n	800d778 <_calloc_r+0x12>
 800d784:	462a      	mov	r2, r5
 800d786:	4621      	mov	r1, r4
 800d788:	f7fe f8fe 	bl	800b988 <memset>
 800d78c:	e7f5      	b.n	800d77a <_calloc_r+0x14>
	...

0800d790 <_free_r>:
 800d790:	b538      	push	{r3, r4, r5, lr}
 800d792:	4605      	mov	r5, r0
 800d794:	2900      	cmp	r1, #0
 800d796:	d041      	beq.n	800d81c <_free_r+0x8c>
 800d798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d79c:	1f0c      	subs	r4, r1, #4
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	bfb8      	it	lt
 800d7a2:	18e4      	addlt	r4, r4, r3
 800d7a4:	f7ff fa4c 	bl	800cc40 <__malloc_lock>
 800d7a8:	4a1d      	ldr	r2, [pc, #116]	@ (800d820 <_free_r+0x90>)
 800d7aa:	6813      	ldr	r3, [r2, #0]
 800d7ac:	b933      	cbnz	r3, 800d7bc <_free_r+0x2c>
 800d7ae:	6063      	str	r3, [r4, #4]
 800d7b0:	6014      	str	r4, [r2, #0]
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7b8:	f7ff ba48 	b.w	800cc4c <__malloc_unlock>
 800d7bc:	42a3      	cmp	r3, r4
 800d7be:	d908      	bls.n	800d7d2 <_free_r+0x42>
 800d7c0:	6820      	ldr	r0, [r4, #0]
 800d7c2:	1821      	adds	r1, r4, r0
 800d7c4:	428b      	cmp	r3, r1
 800d7c6:	bf01      	itttt	eq
 800d7c8:	6819      	ldreq	r1, [r3, #0]
 800d7ca:	685b      	ldreq	r3, [r3, #4]
 800d7cc:	1809      	addeq	r1, r1, r0
 800d7ce:	6021      	streq	r1, [r4, #0]
 800d7d0:	e7ed      	b.n	800d7ae <_free_r+0x1e>
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	b10b      	cbz	r3, 800d7dc <_free_r+0x4c>
 800d7d8:	42a3      	cmp	r3, r4
 800d7da:	d9fa      	bls.n	800d7d2 <_free_r+0x42>
 800d7dc:	6811      	ldr	r1, [r2, #0]
 800d7de:	1850      	adds	r0, r2, r1
 800d7e0:	42a0      	cmp	r0, r4
 800d7e2:	d10b      	bne.n	800d7fc <_free_r+0x6c>
 800d7e4:	6820      	ldr	r0, [r4, #0]
 800d7e6:	4401      	add	r1, r0
 800d7e8:	1850      	adds	r0, r2, r1
 800d7ea:	6011      	str	r1, [r2, #0]
 800d7ec:	4283      	cmp	r3, r0
 800d7ee:	d1e0      	bne.n	800d7b2 <_free_r+0x22>
 800d7f0:	6818      	ldr	r0, [r3, #0]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	4408      	add	r0, r1
 800d7f6:	6053      	str	r3, [r2, #4]
 800d7f8:	6010      	str	r0, [r2, #0]
 800d7fa:	e7da      	b.n	800d7b2 <_free_r+0x22>
 800d7fc:	d902      	bls.n	800d804 <_free_r+0x74>
 800d7fe:	230c      	movs	r3, #12
 800d800:	602b      	str	r3, [r5, #0]
 800d802:	e7d6      	b.n	800d7b2 <_free_r+0x22>
 800d804:	6820      	ldr	r0, [r4, #0]
 800d806:	1821      	adds	r1, r4, r0
 800d808:	428b      	cmp	r3, r1
 800d80a:	bf02      	ittt	eq
 800d80c:	6819      	ldreq	r1, [r3, #0]
 800d80e:	685b      	ldreq	r3, [r3, #4]
 800d810:	1809      	addeq	r1, r1, r0
 800d812:	6063      	str	r3, [r4, #4]
 800d814:	bf08      	it	eq
 800d816:	6021      	streq	r1, [r4, #0]
 800d818:	6054      	str	r4, [r2, #4]
 800d81a:	e7ca      	b.n	800d7b2 <_free_r+0x22>
 800d81c:	bd38      	pop	{r3, r4, r5, pc}
 800d81e:	bf00      	nop
 800d820:	20001028 	.word	0x20001028

0800d824 <__ascii_mbtowc>:
 800d824:	b082      	sub	sp, #8
 800d826:	b901      	cbnz	r1, 800d82a <__ascii_mbtowc+0x6>
 800d828:	a901      	add	r1, sp, #4
 800d82a:	b142      	cbz	r2, 800d83e <__ascii_mbtowc+0x1a>
 800d82c:	b14b      	cbz	r3, 800d842 <__ascii_mbtowc+0x1e>
 800d82e:	7813      	ldrb	r3, [r2, #0]
 800d830:	600b      	str	r3, [r1, #0]
 800d832:	7812      	ldrb	r2, [r2, #0]
 800d834:	1e10      	subs	r0, r2, #0
 800d836:	bf18      	it	ne
 800d838:	2001      	movne	r0, #1
 800d83a:	b002      	add	sp, #8
 800d83c:	4770      	bx	lr
 800d83e:	4610      	mov	r0, r2
 800d840:	e7fb      	b.n	800d83a <__ascii_mbtowc+0x16>
 800d842:	f06f 0001 	mvn.w	r0, #1
 800d846:	e7f8      	b.n	800d83a <__ascii_mbtowc+0x16>

0800d848 <__ascii_wctomb>:
 800d848:	4603      	mov	r3, r0
 800d84a:	4608      	mov	r0, r1
 800d84c:	b141      	cbz	r1, 800d860 <__ascii_wctomb+0x18>
 800d84e:	2aff      	cmp	r2, #255	@ 0xff
 800d850:	d904      	bls.n	800d85c <__ascii_wctomb+0x14>
 800d852:	228a      	movs	r2, #138	@ 0x8a
 800d854:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	4770      	bx	lr
 800d85c:	2001      	movs	r0, #1
 800d85e:	700a      	strb	r2, [r1, #0]
 800d860:	4770      	bx	lr

0800d862 <_raise_r>:
 800d862:	291f      	cmp	r1, #31
 800d864:	b538      	push	{r3, r4, r5, lr}
 800d866:	4605      	mov	r5, r0
 800d868:	460c      	mov	r4, r1
 800d86a:	d904      	bls.n	800d876 <_raise_r+0x14>
 800d86c:	2316      	movs	r3, #22
 800d86e:	6003      	str	r3, [r0, #0]
 800d870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d874:	bd38      	pop	{r3, r4, r5, pc}
 800d876:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d878:	b112      	cbz	r2, 800d880 <_raise_r+0x1e>
 800d87a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d87e:	b94b      	cbnz	r3, 800d894 <_raise_r+0x32>
 800d880:	4628      	mov	r0, r5
 800d882:	f000 f831 	bl	800d8e8 <_getpid_r>
 800d886:	4622      	mov	r2, r4
 800d888:	4601      	mov	r1, r0
 800d88a:	4628      	mov	r0, r5
 800d88c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d890:	f000 b818 	b.w	800d8c4 <_kill_r>
 800d894:	2b01      	cmp	r3, #1
 800d896:	d00a      	beq.n	800d8ae <_raise_r+0x4c>
 800d898:	1c59      	adds	r1, r3, #1
 800d89a:	d103      	bne.n	800d8a4 <_raise_r+0x42>
 800d89c:	2316      	movs	r3, #22
 800d89e:	6003      	str	r3, [r0, #0]
 800d8a0:	2001      	movs	r0, #1
 800d8a2:	e7e7      	b.n	800d874 <_raise_r+0x12>
 800d8a4:	2100      	movs	r1, #0
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d8ac:	4798      	blx	r3
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	e7e0      	b.n	800d874 <_raise_r+0x12>
	...

0800d8b4 <raise>:
 800d8b4:	4b02      	ldr	r3, [pc, #8]	@ (800d8c0 <raise+0xc>)
 800d8b6:	4601      	mov	r1, r0
 800d8b8:	6818      	ldr	r0, [r3, #0]
 800d8ba:	f7ff bfd2 	b.w	800d862 <_raise_r>
 800d8be:	bf00      	nop
 800d8c0:	200000b8 	.word	0x200000b8

0800d8c4 <_kill_r>:
 800d8c4:	b538      	push	{r3, r4, r5, lr}
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	4d06      	ldr	r5, [pc, #24]	@ (800d8e4 <_kill_r+0x20>)
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	4608      	mov	r0, r1
 800d8ce:	4611      	mov	r1, r2
 800d8d0:	602b      	str	r3, [r5, #0]
 800d8d2:	f000 f829 	bl	800d928 <_kill>
 800d8d6:	1c43      	adds	r3, r0, #1
 800d8d8:	d102      	bne.n	800d8e0 <_kill_r+0x1c>
 800d8da:	682b      	ldr	r3, [r5, #0]
 800d8dc:	b103      	cbz	r3, 800d8e0 <_kill_r+0x1c>
 800d8de:	6023      	str	r3, [r4, #0]
 800d8e0:	bd38      	pop	{r3, r4, r5, pc}
 800d8e2:	bf00      	nop
 800d8e4:	2000102c 	.word	0x2000102c

0800d8e8 <_getpid_r>:
 800d8e8:	f000 b91e 	b.w	800db28 <_getpid>

0800d8ec <_exit>:
 800d8ec:	4601      	mov	r1, r0
 800d8ee:	4a03      	ldr	r2, [pc, #12]	@ (800d8fc <_exit+0x10>)
 800d8f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d8f4:	b508      	push	{r3, lr}
 800d8f6:	f000 f803 	bl	800d900 <_kill_shared>
 800d8fa:	bf00      	nop
 800d8fc:	00020026 	.word	0x00020026

0800d900 <_kill_shared>:
 800d900:	b507      	push	{r0, r1, r2, lr}
 800d902:	e9cd 2100 	strd	r2, r1, [sp]
 800d906:	f000 fa29 	bl	800dd5c <_has_ext_exit_extended>
 800d90a:	2800      	cmp	r0, #0
 800d90c:	bf0c      	ite	eq
 800d90e:	2418      	moveq	r4, #24
 800d910:	2420      	movne	r4, #32
 800d912:	f000 fa23 	bl	800dd5c <_has_ext_exit_extended>
 800d916:	b120      	cbz	r0, 800d922 <_kill_shared+0x22>
 800d918:	466d      	mov	r5, sp
 800d91a:	4620      	mov	r0, r4
 800d91c:	4629      	mov	r1, r5
 800d91e:	beab      	bkpt	0x00ab
 800d920:	4604      	mov	r4, r0
 800d922:	9d00      	ldr	r5, [sp, #0]
 800d924:	e7f9      	b.n	800d91a <_kill_shared+0x1a>
	...

0800d928 <_kill>:
 800d928:	2906      	cmp	r1, #6
 800d92a:	b508      	push	{r3, lr}
 800d92c:	bf0c      	ite	eq
 800d92e:	4a02      	ldreq	r2, [pc, #8]	@ (800d938 <_kill+0x10>)
 800d930:	4a02      	ldrne	r2, [pc, #8]	@ (800d93c <_kill+0x14>)
 800d932:	f7ff ffe5 	bl	800d900 <_kill_shared>
 800d936:	bf00      	nop
 800d938:	00020023 	.word	0x00020023
 800d93c:	00020026 	.word	0x00020026

0800d940 <findslot>:
 800d940:	4b0a      	ldr	r3, [pc, #40]	@ (800d96c <findslot+0x2c>)
 800d942:	b510      	push	{r4, lr}
 800d944:	4604      	mov	r4, r0
 800d946:	6818      	ldr	r0, [r3, #0]
 800d948:	b118      	cbz	r0, 800d952 <findslot+0x12>
 800d94a:	6a03      	ldr	r3, [r0, #32]
 800d94c:	b90b      	cbnz	r3, 800d952 <findslot+0x12>
 800d94e:	f7fd ff6d 	bl	800b82c <__sinit>
 800d952:	2c13      	cmp	r4, #19
 800d954:	d807      	bhi.n	800d966 <findslot+0x26>
 800d956:	4806      	ldr	r0, [pc, #24]	@ (800d970 <findslot+0x30>)
 800d958:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800d95c:	3201      	adds	r2, #1
 800d95e:	d002      	beq.n	800d966 <findslot+0x26>
 800d960:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800d964:	bd10      	pop	{r4, pc}
 800d966:	2000      	movs	r0, #0
 800d968:	e7fc      	b.n	800d964 <findslot+0x24>
 800d96a:	bf00      	nop
 800d96c:	200000b8 	.word	0x200000b8
 800d970:	2000103c 	.word	0x2000103c

0800d974 <error>:
 800d974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d976:	4604      	mov	r4, r0
 800d978:	2613      	movs	r6, #19
 800d97a:	f7fe f811 	bl	800b9a0 <__errno>
 800d97e:	2700      	movs	r7, #0
 800d980:	4605      	mov	r5, r0
 800d982:	4630      	mov	r0, r6
 800d984:	4639      	mov	r1, r7
 800d986:	beab      	bkpt	0x00ab
 800d988:	4606      	mov	r6, r0
 800d98a:	4620      	mov	r0, r4
 800d98c:	602e      	str	r6, [r5, #0]
 800d98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d990 <checkerror>:
 800d990:	1c43      	adds	r3, r0, #1
 800d992:	d101      	bne.n	800d998 <checkerror+0x8>
 800d994:	f7ff bfee 	b.w	800d974 <error>
 800d998:	4770      	bx	lr

0800d99a <_swiread>:
 800d99a:	b530      	push	{r4, r5, lr}
 800d99c:	b085      	sub	sp, #20
 800d99e:	2406      	movs	r4, #6
 800d9a0:	ad01      	add	r5, sp, #4
 800d9a2:	9203      	str	r2, [sp, #12]
 800d9a4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	4629      	mov	r1, r5
 800d9ac:	beab      	bkpt	0x00ab
 800d9ae:	4604      	mov	r4, r0
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	f7ff ffed 	bl	800d990 <checkerror>
 800d9b6:	b005      	add	sp, #20
 800d9b8:	bd30      	pop	{r4, r5, pc}

0800d9ba <_read>:
 800d9ba:	b570      	push	{r4, r5, r6, lr}
 800d9bc:	460e      	mov	r6, r1
 800d9be:	4614      	mov	r4, r2
 800d9c0:	f7ff ffbe 	bl	800d940 <findslot>
 800d9c4:	4605      	mov	r5, r0
 800d9c6:	b930      	cbnz	r0, 800d9d6 <_read+0x1c>
 800d9c8:	f7fd ffea 	bl	800b9a0 <__errno>
 800d9cc:	2309      	movs	r3, #9
 800d9ce:	6003      	str	r3, [r0, #0]
 800d9d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9d4:	bd70      	pop	{r4, r5, r6, pc}
 800d9d6:	4622      	mov	r2, r4
 800d9d8:	4631      	mov	r1, r6
 800d9da:	6800      	ldr	r0, [r0, #0]
 800d9dc:	f7ff ffdd 	bl	800d99a <_swiread>
 800d9e0:	1c43      	adds	r3, r0, #1
 800d9e2:	d0f5      	beq.n	800d9d0 <_read+0x16>
 800d9e4:	686b      	ldr	r3, [r5, #4]
 800d9e6:	1a20      	subs	r0, r4, r0
 800d9e8:	4403      	add	r3, r0
 800d9ea:	606b      	str	r3, [r5, #4]
 800d9ec:	e7f2      	b.n	800d9d4 <_read+0x1a>

0800d9ee <_swilseek>:
 800d9ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9f0:	460c      	mov	r4, r1
 800d9f2:	4616      	mov	r6, r2
 800d9f4:	f7ff ffa4 	bl	800d940 <findslot>
 800d9f8:	4605      	mov	r5, r0
 800d9fa:	b940      	cbnz	r0, 800da0e <_swilseek+0x20>
 800d9fc:	f7fd ffd0 	bl	800b9a0 <__errno>
 800da00:	2309      	movs	r3, #9
 800da02:	6003      	str	r3, [r0, #0]
 800da04:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800da08:	4620      	mov	r0, r4
 800da0a:	b003      	add	sp, #12
 800da0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da0e:	2e02      	cmp	r6, #2
 800da10:	d903      	bls.n	800da1a <_swilseek+0x2c>
 800da12:	f7fd ffc5 	bl	800b9a0 <__errno>
 800da16:	2316      	movs	r3, #22
 800da18:	e7f3      	b.n	800da02 <_swilseek+0x14>
 800da1a:	2e01      	cmp	r6, #1
 800da1c:	d112      	bne.n	800da44 <_swilseek+0x56>
 800da1e:	6843      	ldr	r3, [r0, #4]
 800da20:	18e4      	adds	r4, r4, r3
 800da22:	d4f6      	bmi.n	800da12 <_swilseek+0x24>
 800da24:	682b      	ldr	r3, [r5, #0]
 800da26:	260a      	movs	r6, #10
 800da28:	466f      	mov	r7, sp
 800da2a:	e9cd 3400 	strd	r3, r4, [sp]
 800da2e:	4630      	mov	r0, r6
 800da30:	4639      	mov	r1, r7
 800da32:	beab      	bkpt	0x00ab
 800da34:	4606      	mov	r6, r0
 800da36:	4630      	mov	r0, r6
 800da38:	f7ff ffaa 	bl	800d990 <checkerror>
 800da3c:	2800      	cmp	r0, #0
 800da3e:	dbe1      	blt.n	800da04 <_swilseek+0x16>
 800da40:	606c      	str	r4, [r5, #4]
 800da42:	e7e1      	b.n	800da08 <_swilseek+0x1a>
 800da44:	2e02      	cmp	r6, #2
 800da46:	6803      	ldr	r3, [r0, #0]
 800da48:	d1ec      	bne.n	800da24 <_swilseek+0x36>
 800da4a:	260c      	movs	r6, #12
 800da4c:	466f      	mov	r7, sp
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	4630      	mov	r0, r6
 800da52:	4639      	mov	r1, r7
 800da54:	beab      	bkpt	0x00ab
 800da56:	4606      	mov	r6, r0
 800da58:	4630      	mov	r0, r6
 800da5a:	f7ff ff99 	bl	800d990 <checkerror>
 800da5e:	1c43      	adds	r3, r0, #1
 800da60:	d0d0      	beq.n	800da04 <_swilseek+0x16>
 800da62:	4404      	add	r4, r0
 800da64:	e7de      	b.n	800da24 <_swilseek+0x36>

0800da66 <_lseek>:
 800da66:	f7ff bfc2 	b.w	800d9ee <_swilseek>

0800da6a <_swiwrite>:
 800da6a:	b530      	push	{r4, r5, lr}
 800da6c:	b085      	sub	sp, #20
 800da6e:	2405      	movs	r4, #5
 800da70:	ad01      	add	r5, sp, #4
 800da72:	9203      	str	r2, [sp, #12]
 800da74:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800da78:	4620      	mov	r0, r4
 800da7a:	4629      	mov	r1, r5
 800da7c:	beab      	bkpt	0x00ab
 800da7e:	4604      	mov	r4, r0
 800da80:	4620      	mov	r0, r4
 800da82:	f7ff ff85 	bl	800d990 <checkerror>
 800da86:	b005      	add	sp, #20
 800da88:	bd30      	pop	{r4, r5, pc}

0800da8a <_write>:
 800da8a:	b570      	push	{r4, r5, r6, lr}
 800da8c:	460e      	mov	r6, r1
 800da8e:	4615      	mov	r5, r2
 800da90:	f7ff ff56 	bl	800d940 <findslot>
 800da94:	4604      	mov	r4, r0
 800da96:	b930      	cbnz	r0, 800daa6 <_write+0x1c>
 800da98:	f7fd ff82 	bl	800b9a0 <__errno>
 800da9c:	2309      	movs	r3, #9
 800da9e:	6003      	str	r3, [r0, #0]
 800daa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800daa4:	bd70      	pop	{r4, r5, r6, pc}
 800daa6:	462a      	mov	r2, r5
 800daa8:	4631      	mov	r1, r6
 800daaa:	6800      	ldr	r0, [r0, #0]
 800daac:	f7ff ffdd 	bl	800da6a <_swiwrite>
 800dab0:	1e03      	subs	r3, r0, #0
 800dab2:	dbf5      	blt.n	800daa0 <_write+0x16>
 800dab4:	6862      	ldr	r2, [r4, #4]
 800dab6:	1ae8      	subs	r0, r5, r3
 800dab8:	42ab      	cmp	r3, r5
 800daba:	4402      	add	r2, r0
 800dabc:	6062      	str	r2, [r4, #4]
 800dabe:	d1f1      	bne.n	800daa4 <_write+0x1a>
 800dac0:	2000      	movs	r0, #0
 800dac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dac6:	f7ff bf55 	b.w	800d974 <error>

0800daca <_swiclose>:
 800daca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dacc:	2402      	movs	r4, #2
 800dace:	ad01      	add	r5, sp, #4
 800dad0:	9001      	str	r0, [sp, #4]
 800dad2:	4620      	mov	r0, r4
 800dad4:	4629      	mov	r1, r5
 800dad6:	beab      	bkpt	0x00ab
 800dad8:	4604      	mov	r4, r0
 800dada:	4620      	mov	r0, r4
 800dadc:	f7ff ff58 	bl	800d990 <checkerror>
 800dae0:	b003      	add	sp, #12
 800dae2:	bd30      	pop	{r4, r5, pc}

0800dae4 <_close>:
 800dae4:	b538      	push	{r3, r4, r5, lr}
 800dae6:	4605      	mov	r5, r0
 800dae8:	f7ff ff2a 	bl	800d940 <findslot>
 800daec:	4604      	mov	r4, r0
 800daee:	b930      	cbnz	r0, 800dafe <_close+0x1a>
 800daf0:	f7fd ff56 	bl	800b9a0 <__errno>
 800daf4:	2309      	movs	r3, #9
 800daf6:	6003      	str	r3, [r0, #0]
 800daf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dafc:	bd38      	pop	{r3, r4, r5, pc}
 800dafe:	3d01      	subs	r5, #1
 800db00:	2d01      	cmp	r5, #1
 800db02:	d809      	bhi.n	800db18 <_close+0x34>
 800db04:	4b07      	ldr	r3, [pc, #28]	@ (800db24 <_close+0x40>)
 800db06:	689a      	ldr	r2, [r3, #8]
 800db08:	691b      	ldr	r3, [r3, #16]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d104      	bne.n	800db18 <_close+0x34>
 800db0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800db12:	2000      	movs	r0, #0
 800db14:	6023      	str	r3, [r4, #0]
 800db16:	e7f1      	b.n	800dafc <_close+0x18>
 800db18:	6820      	ldr	r0, [r4, #0]
 800db1a:	f7ff ffd6 	bl	800daca <_swiclose>
 800db1e:	2800      	cmp	r0, #0
 800db20:	d0f5      	beq.n	800db0e <_close+0x2a>
 800db22:	e7eb      	b.n	800dafc <_close+0x18>
 800db24:	2000103c 	.word	0x2000103c

0800db28 <_getpid>:
 800db28:	2001      	movs	r0, #1
 800db2a:	4770      	bx	lr

0800db2c <_swistat>:
 800db2c:	b570      	push	{r4, r5, r6, lr}
 800db2e:	460c      	mov	r4, r1
 800db30:	f7ff ff06 	bl	800d940 <findslot>
 800db34:	4605      	mov	r5, r0
 800db36:	b930      	cbnz	r0, 800db46 <_swistat+0x1a>
 800db38:	f7fd ff32 	bl	800b9a0 <__errno>
 800db3c:	2309      	movs	r3, #9
 800db3e:	6003      	str	r3, [r0, #0]
 800db40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db44:	bd70      	pop	{r4, r5, r6, pc}
 800db46:	6863      	ldr	r3, [r4, #4]
 800db48:	260c      	movs	r6, #12
 800db4a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800db4e:	6063      	str	r3, [r4, #4]
 800db50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db54:	64a3      	str	r3, [r4, #72]	@ 0x48
 800db56:	4630      	mov	r0, r6
 800db58:	4629      	mov	r1, r5
 800db5a:	beab      	bkpt	0x00ab
 800db5c:	4605      	mov	r5, r0
 800db5e:	4628      	mov	r0, r5
 800db60:	f7ff ff16 	bl	800d990 <checkerror>
 800db64:	1c43      	adds	r3, r0, #1
 800db66:	d0eb      	beq.n	800db40 <_swistat+0x14>
 800db68:	6120      	str	r0, [r4, #16]
 800db6a:	2000      	movs	r0, #0
 800db6c:	e7ea      	b.n	800db44 <_swistat+0x18>

0800db6e <_fstat>:
 800db6e:	460b      	mov	r3, r1
 800db70:	2258      	movs	r2, #88	@ 0x58
 800db72:	2100      	movs	r1, #0
 800db74:	b510      	push	{r4, lr}
 800db76:	4604      	mov	r4, r0
 800db78:	4618      	mov	r0, r3
 800db7a:	f7fd ff05 	bl	800b988 <memset>
 800db7e:	4601      	mov	r1, r0
 800db80:	4620      	mov	r0, r4
 800db82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db86:	f7ff bfd1 	b.w	800db2c <_swistat>

0800db8a <_stat>:
 800db8a:	b538      	push	{r3, r4, r5, lr}
 800db8c:	460d      	mov	r5, r1
 800db8e:	4604      	mov	r4, r0
 800db90:	2258      	movs	r2, #88	@ 0x58
 800db92:	2100      	movs	r1, #0
 800db94:	4628      	mov	r0, r5
 800db96:	f7fd fef7 	bl	800b988 <memset>
 800db9a:	4620      	mov	r0, r4
 800db9c:	2100      	movs	r1, #0
 800db9e:	f000 f811 	bl	800dbc4 <_swiopen>
 800dba2:	1c43      	adds	r3, r0, #1
 800dba4:	4604      	mov	r4, r0
 800dba6:	d00b      	beq.n	800dbc0 <_stat+0x36>
 800dba8:	686b      	ldr	r3, [r5, #4]
 800dbaa:	4629      	mov	r1, r5
 800dbac:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800dbb0:	606b      	str	r3, [r5, #4]
 800dbb2:	f7ff ffbb 	bl	800db2c <_swistat>
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	4620      	mov	r0, r4
 800dbba:	462c      	mov	r4, r5
 800dbbc:	f7ff ff92 	bl	800dae4 <_close>
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	bd38      	pop	{r3, r4, r5, pc}

0800dbc4 <_swiopen>:
 800dbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbc8:	4682      	mov	sl, r0
 800dbca:	b096      	sub	sp, #88	@ 0x58
 800dbcc:	460e      	mov	r6, r1
 800dbce:	2400      	movs	r4, #0
 800dbd0:	4f27      	ldr	r7, [pc, #156]	@ (800dc70 <_swiopen+0xac>)
 800dbd2:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800dbd6:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800dbda:	3301      	adds	r3, #1
 800dbdc:	d00c      	beq.n	800dbf8 <_swiopen+0x34>
 800dbde:	3401      	adds	r4, #1
 800dbe0:	2c14      	cmp	r4, #20
 800dbe2:	d1f6      	bne.n	800dbd2 <_swiopen+0xe>
 800dbe4:	f7fd fedc 	bl	800b9a0 <__errno>
 800dbe8:	2318      	movs	r3, #24
 800dbea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800dbee:	6003      	str	r3, [r0, #0]
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	b016      	add	sp, #88	@ 0x58
 800dbf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbf8:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800dbfc:	46e9      	mov	r9, sp
 800dbfe:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800dc02:	d109      	bne.n	800dc18 <_swiopen+0x54>
 800dc04:	4649      	mov	r1, r9
 800dc06:	4650      	mov	r0, sl
 800dc08:	f7ff ffbf 	bl	800db8a <_stat>
 800dc0c:	3001      	adds	r0, #1
 800dc0e:	d003      	beq.n	800dc18 <_swiopen+0x54>
 800dc10:	f7fd fec6 	bl	800b9a0 <__errno>
 800dc14:	2311      	movs	r3, #17
 800dc16:	e7e8      	b.n	800dbea <_swiopen+0x26>
 800dc18:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800dc1c:	f240 6301 	movw	r3, #1537	@ 0x601
 800dc20:	07b2      	lsls	r2, r6, #30
 800dc22:	4650      	mov	r0, sl
 800dc24:	f8cd a000 	str.w	sl, [sp]
 800dc28:	bf48      	it	mi
 800dc2a:	f045 0502 	orrmi.w	r5, r5, #2
 800dc2e:	421e      	tst	r6, r3
 800dc30:	bf18      	it	ne
 800dc32:	f045 0504 	orrne.w	r5, r5, #4
 800dc36:	0733      	lsls	r3, r6, #28
 800dc38:	bf44      	itt	mi
 800dc3a:	f025 0504 	bicmi.w	r5, r5, #4
 800dc3e:	f045 0508 	orrmi.w	r5, r5, #8
 800dc42:	f7f2 fb19 	bl	8000278 <strlen>
 800dc46:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800dc4a:	2501      	movs	r5, #1
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	4649      	mov	r1, r9
 800dc50:	beab      	bkpt	0x00ab
 800dc52:	4605      	mov	r5, r0
 800dc54:	2d00      	cmp	r5, #0
 800dc56:	db05      	blt.n	800dc64 <_swiopen+0xa0>
 800dc58:	2300      	movs	r3, #0
 800dc5a:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800dc5e:	4447      	add	r7, r8
 800dc60:	607b      	str	r3, [r7, #4]
 800dc62:	e7c5      	b.n	800dbf0 <_swiopen+0x2c>
 800dc64:	4628      	mov	r0, r5
 800dc66:	f7ff fe85 	bl	800d974 <error>
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	e7c0      	b.n	800dbf0 <_swiopen+0x2c>
 800dc6e:	bf00      	nop
 800dc70:	2000103c 	.word	0x2000103c

0800dc74 <_get_semihosting_exts>:
 800dc74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc78:	4606      	mov	r6, r0
 800dc7a:	4615      	mov	r5, r2
 800dc7c:	460f      	mov	r7, r1
 800dc7e:	4829      	ldr	r0, [pc, #164]	@ (800dd24 <_get_semihosting_exts+0xb0>)
 800dc80:	2100      	movs	r1, #0
 800dc82:	f7ff ff9f 	bl	800dbc4 <_swiopen>
 800dc86:	4604      	mov	r4, r0
 800dc88:	462a      	mov	r2, r5
 800dc8a:	2100      	movs	r1, #0
 800dc8c:	4630      	mov	r0, r6
 800dc8e:	f7fd fe7b 	bl	800b988 <memset>
 800dc92:	1c63      	adds	r3, r4, #1
 800dc94:	d014      	beq.n	800dcc0 <_get_semihosting_exts+0x4c>
 800dc96:	4620      	mov	r0, r4
 800dc98:	f04f 080c 	mov.w	r8, #12
 800dc9c:	f7ff fe50 	bl	800d940 <findslot>
 800dca0:	4681      	mov	r9, r0
 800dca2:	4640      	mov	r0, r8
 800dca4:	4649      	mov	r1, r9
 800dca6:	beab      	bkpt	0x00ab
 800dca8:	4680      	mov	r8, r0
 800dcaa:	4640      	mov	r0, r8
 800dcac:	f7ff fe70 	bl	800d990 <checkerror>
 800dcb0:	2803      	cmp	r0, #3
 800dcb2:	dd02      	ble.n	800dcba <_get_semihosting_exts+0x46>
 800dcb4:	1ec3      	subs	r3, r0, #3
 800dcb6:	42ab      	cmp	r3, r5
 800dcb8:	dc07      	bgt.n	800dcca <_get_semihosting_exts+0x56>
 800dcba:	4620      	mov	r0, r4
 800dcbc:	f7ff ff12 	bl	800dae4 <_close>
 800dcc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dcc4:	b003      	add	sp, #12
 800dcc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcca:	2204      	movs	r2, #4
 800dccc:	4620      	mov	r0, r4
 800dcce:	eb0d 0102 	add.w	r1, sp, r2
 800dcd2:	f7ff fe72 	bl	800d9ba <_read>
 800dcd6:	2803      	cmp	r0, #3
 800dcd8:	ddef      	ble.n	800dcba <_get_semihosting_exts+0x46>
 800dcda:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dcde:	2b53      	cmp	r3, #83	@ 0x53
 800dce0:	d1eb      	bne.n	800dcba <_get_semihosting_exts+0x46>
 800dce2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dce6:	2b48      	cmp	r3, #72	@ 0x48
 800dce8:	d1e7      	bne.n	800dcba <_get_semihosting_exts+0x46>
 800dcea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dcee:	2b46      	cmp	r3, #70	@ 0x46
 800dcf0:	d1e3      	bne.n	800dcba <_get_semihosting_exts+0x46>
 800dcf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dcf6:	2b42      	cmp	r3, #66	@ 0x42
 800dcf8:	d1df      	bne.n	800dcba <_get_semihosting_exts+0x46>
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	4639      	mov	r1, r7
 800dcfe:	4620      	mov	r0, r4
 800dd00:	f7ff fe75 	bl	800d9ee <_swilseek>
 800dd04:	2800      	cmp	r0, #0
 800dd06:	dbd8      	blt.n	800dcba <_get_semihosting_exts+0x46>
 800dd08:	462a      	mov	r2, r5
 800dd0a:	4631      	mov	r1, r6
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	f7ff fe54 	bl	800d9ba <_read>
 800dd12:	4605      	mov	r5, r0
 800dd14:	4620      	mov	r0, r4
 800dd16:	f7ff fee5 	bl	800dae4 <_close>
 800dd1a:	4628      	mov	r0, r5
 800dd1c:	f7ff fe38 	bl	800d990 <checkerror>
 800dd20:	e7d0      	b.n	800dcc4 <_get_semihosting_exts+0x50>
 800dd22:	bf00      	nop
 800dd24:	0800f903 	.word	0x0800f903

0800dd28 <initialise_semihosting_exts>:
 800dd28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	4d09      	ldr	r5, [pc, #36]	@ (800dd54 <initialise_semihosting_exts+0x2c>)
 800dd30:	a801      	add	r0, sp, #4
 800dd32:	4c09      	ldr	r4, [pc, #36]	@ (800dd58 <initialise_semihosting_exts+0x30>)
 800dd34:	6029      	str	r1, [r5, #0]
 800dd36:	6022      	str	r2, [r4, #0]
 800dd38:	f7ff ff9c 	bl	800dc74 <_get_semihosting_exts>
 800dd3c:	2800      	cmp	r0, #0
 800dd3e:	dd07      	ble.n	800dd50 <initialise_semihosting_exts+0x28>
 800dd40:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dd44:	f003 0201 	and.w	r2, r3, #1
 800dd48:	f003 0302 	and.w	r3, r3, #2
 800dd4c:	602a      	str	r2, [r5, #0]
 800dd4e:	6023      	str	r3, [r4, #0]
 800dd50:	b003      	add	sp, #12
 800dd52:	bd30      	pop	{r4, r5, pc}
 800dd54:	20000278 	.word	0x20000278
 800dd58:	20000274 	.word	0x20000274

0800dd5c <_has_ext_exit_extended>:
 800dd5c:	b510      	push	{r4, lr}
 800dd5e:	4c04      	ldr	r4, [pc, #16]	@ (800dd70 <_has_ext_exit_extended+0x14>)
 800dd60:	6823      	ldr	r3, [r4, #0]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	da01      	bge.n	800dd6a <_has_ext_exit_extended+0xe>
 800dd66:	f7ff ffdf 	bl	800dd28 <initialise_semihosting_exts>
 800dd6a:	6820      	ldr	r0, [r4, #0]
 800dd6c:	bd10      	pop	{r4, pc}
 800dd6e:	bf00      	nop
 800dd70:	20000278 	.word	0x20000278

0800dd74 <_has_ext_stdout_stderr>:
 800dd74:	b510      	push	{r4, lr}
 800dd76:	4c04      	ldr	r4, [pc, #16]	@ (800dd88 <_has_ext_stdout_stderr+0x14>)
 800dd78:	6823      	ldr	r3, [r4, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	da01      	bge.n	800dd82 <_has_ext_stdout_stderr+0xe>
 800dd7e:	f7ff ffd3 	bl	800dd28 <initialise_semihosting_exts>
 800dd82:	6820      	ldr	r0, [r4, #0]
 800dd84:	bd10      	pop	{r4, pc}
 800dd86:	bf00      	nop
 800dd88:	20000274 	.word	0x20000274

0800dd8c <initialise_monitor_handles>:
 800dd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd90:	2303      	movs	r3, #3
 800dd92:	b085      	sub	sp, #20
 800dd94:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 800de44 <initialise_monitor_handles+0xb8>
 800dd98:	2400      	movs	r4, #0
 800dd9a:	af01      	add	r7, sp, #4
 800dd9c:	2501      	movs	r5, #1
 800dd9e:	f8cd 9004 	str.w	r9, [sp, #4]
 800dda2:	9303      	str	r3, [sp, #12]
 800dda4:	9402      	str	r4, [sp, #8]
 800dda6:	4628      	mov	r0, r5
 800dda8:	4639      	mov	r1, r7
 800ddaa:	beab      	bkpt	0x00ab
 800ddac:	4605      	mov	r5, r0
 800ddae:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800de48 <initialise_monitor_handles+0xbc>
 800ddb2:	4623      	mov	r3, r4
 800ddb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ddb8:	4c1f      	ldr	r4, [pc, #124]	@ (800de38 <initialise_monitor_handles+0xac>)
 800ddba:	f8c8 5000 	str.w	r5, [r8]
 800ddbe:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	2b14      	cmp	r3, #20
 800ddc6:	d1fa      	bne.n	800ddbe <initialise_monitor_handles+0x32>
 800ddc8:	4d1c      	ldr	r5, [pc, #112]	@ (800de3c <initialise_monitor_handles+0xb0>)
 800ddca:	f7ff ffd3 	bl	800dd74 <_has_ext_stdout_stderr>
 800ddce:	b1d0      	cbz	r0, 800de06 <initialise_monitor_handles+0x7a>
 800ddd0:	f04f 0a03 	mov.w	sl, #3
 800ddd4:	2304      	movs	r3, #4
 800ddd6:	f8cd 9004 	str.w	r9, [sp, #4]
 800ddda:	2601      	movs	r6, #1
 800dddc:	f8cd a00c 	str.w	sl, [sp, #12]
 800dde0:	9302      	str	r3, [sp, #8]
 800dde2:	4630      	mov	r0, r6
 800dde4:	4639      	mov	r1, r7
 800dde6:	beab      	bkpt	0x00ab
 800dde8:	4683      	mov	fp, r0
 800ddea:	4b15      	ldr	r3, [pc, #84]	@ (800de40 <initialise_monitor_handles+0xb4>)
 800ddec:	f8cd 9004 	str.w	r9, [sp, #4]
 800ddf0:	f8c3 b000 	str.w	fp, [r3]
 800ddf4:	2308      	movs	r3, #8
 800ddf6:	f8cd a00c 	str.w	sl, [sp, #12]
 800ddfa:	9302      	str	r3, [sp, #8]
 800ddfc:	4630      	mov	r0, r6
 800ddfe:	4639      	mov	r1, r7
 800de00:	beab      	bkpt	0x00ab
 800de02:	4606      	mov	r6, r0
 800de04:	602e      	str	r6, [r5, #0]
 800de06:	682b      	ldr	r3, [r5, #0]
 800de08:	2600      	movs	r6, #0
 800de0a:	3301      	adds	r3, #1
 800de0c:	6066      	str	r6, [r4, #4]
 800de0e:	bf02      	ittt	eq
 800de10:	4b0b      	ldreq	r3, [pc, #44]	@ (800de40 <initialise_monitor_handles+0xb4>)
 800de12:	681b      	ldreq	r3, [r3, #0]
 800de14:	602b      	streq	r3, [r5, #0]
 800de16:	f8d8 3000 	ldr.w	r3, [r8]
 800de1a:	6023      	str	r3, [r4, #0]
 800de1c:	f7ff ffaa 	bl	800dd74 <_has_ext_stdout_stderr>
 800de20:	b130      	cbz	r0, 800de30 <initialise_monitor_handles+0xa4>
 800de22:	4b07      	ldr	r3, [pc, #28]	@ (800de40 <initialise_monitor_handles+0xb4>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800de2a:	682b      	ldr	r3, [r5, #0]
 800de2c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800de30:	b005      	add	sp, #20
 800de32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de36:	bf00      	nop
 800de38:	2000103c 	.word	0x2000103c
 800de3c:	20001030 	.word	0x20001030
 800de40:	20001034 	.word	0x20001034
 800de44:	0800f919 	.word	0x0800f919
 800de48:	20001038 	.word	0x20001038

0800de4c <_isatty>:
 800de4c:	b570      	push	{r4, r5, r6, lr}
 800de4e:	f7ff fd77 	bl	800d940 <findslot>
 800de52:	2409      	movs	r4, #9
 800de54:	4605      	mov	r5, r0
 800de56:	b920      	cbnz	r0, 800de62 <_isatty+0x16>
 800de58:	f7fd fda2 	bl	800b9a0 <__errno>
 800de5c:	6004      	str	r4, [r0, #0]
 800de5e:	2000      	movs	r0, #0
 800de60:	bd70      	pop	{r4, r5, r6, pc}
 800de62:	4620      	mov	r0, r4
 800de64:	4629      	mov	r1, r5
 800de66:	beab      	bkpt	0x00ab
 800de68:	4604      	mov	r4, r0
 800de6a:	2c01      	cmp	r4, #1
 800de6c:	4620      	mov	r0, r4
 800de6e:	d0f7      	beq.n	800de60 <_isatty+0x14>
 800de70:	f7fd fd96 	bl	800b9a0 <__errno>
 800de74:	2513      	movs	r5, #19
 800de76:	4604      	mov	r4, r0
 800de78:	2600      	movs	r6, #0
 800de7a:	4628      	mov	r0, r5
 800de7c:	4631      	mov	r1, r6
 800de7e:	beab      	bkpt	0x00ab
 800de80:	4605      	mov	r5, r0
 800de82:	6025      	str	r5, [r4, #0]
 800de84:	e7eb      	b.n	800de5e <_isatty+0x12>
	...

0800de88 <pow>:
 800de88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8a:	ec55 4b11 	vmov	r4, r5, d1
 800de8e:	ed2d 8b02 	vpush	{d8}
 800de92:	eeb0 8a40 	vmov.f32	s16, s0
 800de96:	eef0 8a60 	vmov.f32	s17, s1
 800de9a:	f000 f97d 	bl	800e198 <__ieee754_pow>
 800de9e:	4622      	mov	r2, r4
 800dea0:	462b      	mov	r3, r5
 800dea2:	4620      	mov	r0, r4
 800dea4:	4629      	mov	r1, r5
 800dea6:	ec57 6b10 	vmov	r6, r7, d0
 800deaa:	f7f2 fe43 	bl	8000b34 <__aeabi_dcmpun>
 800deae:	2800      	cmp	r0, #0
 800deb0:	d13b      	bne.n	800df2a <pow+0xa2>
 800deb2:	2200      	movs	r2, #0
 800deb4:	2300      	movs	r3, #0
 800deb6:	ec51 0b18 	vmov	r0, r1, d8
 800deba:	f7f2 fe09 	bl	8000ad0 <__aeabi_dcmpeq>
 800debe:	b1b8      	cbz	r0, 800def0 <pow+0x68>
 800dec0:	2200      	movs	r2, #0
 800dec2:	2300      	movs	r3, #0
 800dec4:	4620      	mov	r0, r4
 800dec6:	4629      	mov	r1, r5
 800dec8:	f7f2 fe02 	bl	8000ad0 <__aeabi_dcmpeq>
 800decc:	2800      	cmp	r0, #0
 800dece:	d146      	bne.n	800df5e <pow+0xd6>
 800ded0:	ec45 4b10 	vmov	d0, r4, r5
 800ded4:	f000 f874 	bl	800dfc0 <finite>
 800ded8:	b338      	cbz	r0, 800df2a <pow+0xa2>
 800deda:	2200      	movs	r2, #0
 800dedc:	2300      	movs	r3, #0
 800dede:	4620      	mov	r0, r4
 800dee0:	4629      	mov	r1, r5
 800dee2:	f7f2 fdff 	bl	8000ae4 <__aeabi_dcmplt>
 800dee6:	b300      	cbz	r0, 800df2a <pow+0xa2>
 800dee8:	f7fd fd5a 	bl	800b9a0 <__errno>
 800deec:	2322      	movs	r3, #34	@ 0x22
 800deee:	e01b      	b.n	800df28 <pow+0xa0>
 800def0:	ec47 6b10 	vmov	d0, r6, r7
 800def4:	f000 f864 	bl	800dfc0 <finite>
 800def8:	b9e0      	cbnz	r0, 800df34 <pow+0xac>
 800defa:	eeb0 0a48 	vmov.f32	s0, s16
 800defe:	eef0 0a68 	vmov.f32	s1, s17
 800df02:	f000 f85d 	bl	800dfc0 <finite>
 800df06:	b1a8      	cbz	r0, 800df34 <pow+0xac>
 800df08:	ec45 4b10 	vmov	d0, r4, r5
 800df0c:	f000 f858 	bl	800dfc0 <finite>
 800df10:	b180      	cbz	r0, 800df34 <pow+0xac>
 800df12:	4632      	mov	r2, r6
 800df14:	463b      	mov	r3, r7
 800df16:	4630      	mov	r0, r6
 800df18:	4639      	mov	r1, r7
 800df1a:	f7f2 fe0b 	bl	8000b34 <__aeabi_dcmpun>
 800df1e:	2800      	cmp	r0, #0
 800df20:	d0e2      	beq.n	800dee8 <pow+0x60>
 800df22:	f7fd fd3d 	bl	800b9a0 <__errno>
 800df26:	2321      	movs	r3, #33	@ 0x21
 800df28:	6003      	str	r3, [r0, #0]
 800df2a:	ecbd 8b02 	vpop	{d8}
 800df2e:	ec47 6b10 	vmov	d0, r6, r7
 800df32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df34:	2200      	movs	r2, #0
 800df36:	2300      	movs	r3, #0
 800df38:	4630      	mov	r0, r6
 800df3a:	4639      	mov	r1, r7
 800df3c:	f7f2 fdc8 	bl	8000ad0 <__aeabi_dcmpeq>
 800df40:	2800      	cmp	r0, #0
 800df42:	d0f2      	beq.n	800df2a <pow+0xa2>
 800df44:	eeb0 0a48 	vmov.f32	s0, s16
 800df48:	eef0 0a68 	vmov.f32	s1, s17
 800df4c:	f000 f838 	bl	800dfc0 <finite>
 800df50:	2800      	cmp	r0, #0
 800df52:	d0ea      	beq.n	800df2a <pow+0xa2>
 800df54:	ec45 4b10 	vmov	d0, r4, r5
 800df58:	f000 f832 	bl	800dfc0 <finite>
 800df5c:	e7c3      	b.n	800dee6 <pow+0x5e>
 800df5e:	2600      	movs	r6, #0
 800df60:	4f00      	ldr	r7, [pc, #0]	@ (800df64 <pow+0xdc>)
 800df62:	e7e2      	b.n	800df2a <pow+0xa2>
 800df64:	3ff00000 	.word	0x3ff00000

0800df68 <sqrt>:
 800df68:	b538      	push	{r3, r4, r5, lr}
 800df6a:	ec55 4b10 	vmov	r4, r5, d0
 800df6e:	ed2d 8b02 	vpush	{d8}
 800df72:	f000 f831 	bl	800dfd8 <__ieee754_sqrt>
 800df76:	4622      	mov	r2, r4
 800df78:	462b      	mov	r3, r5
 800df7a:	4620      	mov	r0, r4
 800df7c:	4629      	mov	r1, r5
 800df7e:	eeb0 8a40 	vmov.f32	s16, s0
 800df82:	eef0 8a60 	vmov.f32	s17, s1
 800df86:	f7f2 fdd5 	bl	8000b34 <__aeabi_dcmpun>
 800df8a:	b990      	cbnz	r0, 800dfb2 <sqrt+0x4a>
 800df8c:	2200      	movs	r2, #0
 800df8e:	2300      	movs	r3, #0
 800df90:	4620      	mov	r0, r4
 800df92:	4629      	mov	r1, r5
 800df94:	f7f2 fda6 	bl	8000ae4 <__aeabi_dcmplt>
 800df98:	b158      	cbz	r0, 800dfb2 <sqrt+0x4a>
 800df9a:	f7fd fd01 	bl	800b9a0 <__errno>
 800df9e:	2321      	movs	r3, #33	@ 0x21
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	6003      	str	r3, [r0, #0]
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	4610      	mov	r0, r2
 800dfa8:	4619      	mov	r1, r3
 800dfaa:	f7f2 fc53 	bl	8000854 <__aeabi_ddiv>
 800dfae:	ec41 0b18 	vmov	d8, r0, r1
 800dfb2:	eeb0 0a48 	vmov.f32	s0, s16
 800dfb6:	eef0 0a68 	vmov.f32	s1, s17
 800dfba:	ecbd 8b02 	vpop	{d8}
 800dfbe:	bd38      	pop	{r3, r4, r5, pc}

0800dfc0 <finite>:
 800dfc0:	b082      	sub	sp, #8
 800dfc2:	ed8d 0b00 	vstr	d0, [sp]
 800dfc6:	9801      	ldr	r0, [sp, #4]
 800dfc8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800dfcc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800dfd0:	0fc0      	lsrs	r0, r0, #31
 800dfd2:	b002      	add	sp, #8
 800dfd4:	4770      	bx	lr
	...

0800dfd8 <__ieee754_sqrt>:
 800dfd8:	4a6b      	ldr	r2, [pc, #428]	@ (800e188 <__ieee754_sqrt+0x1b0>)
 800dfda:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfde:	ec55 4b10 	vmov	r4, r5, d0
 800dfe2:	43aa      	bics	r2, r5
 800dfe4:	462b      	mov	r3, r5
 800dfe6:	4621      	mov	r1, r4
 800dfe8:	d110      	bne.n	800e00c <__ieee754_sqrt+0x34>
 800dfea:	4622      	mov	r2, r4
 800dfec:	4620      	mov	r0, r4
 800dfee:	4629      	mov	r1, r5
 800dff0:	f7f2 fb06 	bl	8000600 <__aeabi_dmul>
 800dff4:	4602      	mov	r2, r0
 800dff6:	460b      	mov	r3, r1
 800dff8:	4620      	mov	r0, r4
 800dffa:	4629      	mov	r1, r5
 800dffc:	f7f2 f94a 	bl	8000294 <__adddf3>
 800e000:	4604      	mov	r4, r0
 800e002:	460d      	mov	r5, r1
 800e004:	ec45 4b10 	vmov	d0, r4, r5
 800e008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e00c:	2d00      	cmp	r5, #0
 800e00e:	dc0e      	bgt.n	800e02e <__ieee754_sqrt+0x56>
 800e010:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e014:	4322      	orrs	r2, r4
 800e016:	d0f5      	beq.n	800e004 <__ieee754_sqrt+0x2c>
 800e018:	b19d      	cbz	r5, 800e042 <__ieee754_sqrt+0x6a>
 800e01a:	4622      	mov	r2, r4
 800e01c:	4620      	mov	r0, r4
 800e01e:	4629      	mov	r1, r5
 800e020:	f7f2 f936 	bl	8000290 <__aeabi_dsub>
 800e024:	4602      	mov	r2, r0
 800e026:	460b      	mov	r3, r1
 800e028:	f7f2 fc14 	bl	8000854 <__aeabi_ddiv>
 800e02c:	e7e8      	b.n	800e000 <__ieee754_sqrt+0x28>
 800e02e:	152a      	asrs	r2, r5, #20
 800e030:	d115      	bne.n	800e05e <__ieee754_sqrt+0x86>
 800e032:	2000      	movs	r0, #0
 800e034:	e009      	b.n	800e04a <__ieee754_sqrt+0x72>
 800e036:	0acb      	lsrs	r3, r1, #11
 800e038:	3a15      	subs	r2, #21
 800e03a:	0549      	lsls	r1, r1, #21
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d0fa      	beq.n	800e036 <__ieee754_sqrt+0x5e>
 800e040:	e7f7      	b.n	800e032 <__ieee754_sqrt+0x5a>
 800e042:	462a      	mov	r2, r5
 800e044:	e7fa      	b.n	800e03c <__ieee754_sqrt+0x64>
 800e046:	005b      	lsls	r3, r3, #1
 800e048:	3001      	adds	r0, #1
 800e04a:	02dc      	lsls	r4, r3, #11
 800e04c:	d5fb      	bpl.n	800e046 <__ieee754_sqrt+0x6e>
 800e04e:	1e44      	subs	r4, r0, #1
 800e050:	1b12      	subs	r2, r2, r4
 800e052:	f1c0 0420 	rsb	r4, r0, #32
 800e056:	fa21 f404 	lsr.w	r4, r1, r4
 800e05a:	4081      	lsls	r1, r0
 800e05c:	4323      	orrs	r3, r4
 800e05e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e062:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e066:	07d2      	lsls	r2, r2, #31
 800e068:	f04f 0600 	mov.w	r6, #0
 800e06c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e070:	ea4f 0565 	mov.w	r5, r5, asr #1
 800e074:	f04f 0016 	mov.w	r0, #22
 800e078:	4632      	mov	r2, r6
 800e07a:	bf58      	it	pl
 800e07c:	005b      	lslpl	r3, r3, #1
 800e07e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e082:	bf5c      	itt	pl
 800e084:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e088:	0049      	lslpl	r1, r1, #1
 800e08a:	005b      	lsls	r3, r3, #1
 800e08c:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e090:	0049      	lsls	r1, r1, #1
 800e092:	1917      	adds	r7, r2, r4
 800e094:	429f      	cmp	r7, r3
 800e096:	bfde      	ittt	le
 800e098:	193a      	addle	r2, r7, r4
 800e09a:	1bdb      	suble	r3, r3, r7
 800e09c:	1936      	addle	r6, r6, r4
 800e09e:	0fcf      	lsrs	r7, r1, #31
 800e0a0:	3801      	subs	r0, #1
 800e0a2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e0a6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e0aa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e0ae:	d1f0      	bne.n	800e092 <__ieee754_sqrt+0xba>
 800e0b0:	4604      	mov	r4, r0
 800e0b2:	2720      	movs	r7, #32
 800e0b4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	eb00 0e0c 	add.w	lr, r0, ip
 800e0be:	db02      	blt.n	800e0c6 <__ieee754_sqrt+0xee>
 800e0c0:	d113      	bne.n	800e0ea <__ieee754_sqrt+0x112>
 800e0c2:	458e      	cmp	lr, r1
 800e0c4:	d811      	bhi.n	800e0ea <__ieee754_sqrt+0x112>
 800e0c6:	f1be 0f00 	cmp.w	lr, #0
 800e0ca:	eb0e 000c 	add.w	r0, lr, ip
 800e0ce:	da43      	bge.n	800e158 <__ieee754_sqrt+0x180>
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	db41      	blt.n	800e158 <__ieee754_sqrt+0x180>
 800e0d4:	f102 0801 	add.w	r8, r2, #1
 800e0d8:	1a9b      	subs	r3, r3, r2
 800e0da:	458e      	cmp	lr, r1
 800e0dc:	4464      	add	r4, ip
 800e0de:	eba1 010e 	sub.w	r1, r1, lr
 800e0e2:	bf88      	it	hi
 800e0e4:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800e0e8:	4642      	mov	r2, r8
 800e0ea:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e0ee:	3f01      	subs	r7, #1
 800e0f0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e0f4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e0f8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e0fc:	d1dc      	bne.n	800e0b8 <__ieee754_sqrt+0xe0>
 800e0fe:	4319      	orrs	r1, r3
 800e100:	d01b      	beq.n	800e13a <__ieee754_sqrt+0x162>
 800e102:	f8df a088 	ldr.w	sl, [pc, #136]	@ 800e18c <__ieee754_sqrt+0x1b4>
 800e106:	f8df b088 	ldr.w	fp, [pc, #136]	@ 800e190 <__ieee754_sqrt+0x1b8>
 800e10a:	e9da 0100 	ldrd	r0, r1, [sl]
 800e10e:	e9db 2300 	ldrd	r2, r3, [fp]
 800e112:	e9da 8900 	ldrd	r8, r9, [sl]
 800e116:	f7f2 f8bb 	bl	8000290 <__aeabi_dsub>
 800e11a:	4602      	mov	r2, r0
 800e11c:	460b      	mov	r3, r1
 800e11e:	4640      	mov	r0, r8
 800e120:	4649      	mov	r1, r9
 800e122:	f7f2 fce9 	bl	8000af8 <__aeabi_dcmple>
 800e126:	b140      	cbz	r0, 800e13a <__ieee754_sqrt+0x162>
 800e128:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800e12c:	e9da 0100 	ldrd	r0, r1, [sl]
 800e130:	e9db 2300 	ldrd	r2, r3, [fp]
 800e134:	d112      	bne.n	800e15c <__ieee754_sqrt+0x184>
 800e136:	3601      	adds	r6, #1
 800e138:	463c      	mov	r4, r7
 800e13a:	1072      	asrs	r2, r6, #1
 800e13c:	07f1      	lsls	r1, r6, #31
 800e13e:	ea4f 0354 	mov.w	r3, r4, lsr #1
 800e142:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e146:	bf48      	it	mi
 800e148:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e14c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e150:	4618      	mov	r0, r3
 800e152:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e156:	e753      	b.n	800e000 <__ieee754_sqrt+0x28>
 800e158:	4690      	mov	r8, r2
 800e15a:	e7bd      	b.n	800e0d8 <__ieee754_sqrt+0x100>
 800e15c:	e9da 8900 	ldrd	r8, r9, [sl]
 800e160:	f7f2 f898 	bl	8000294 <__adddf3>
 800e164:	4602      	mov	r2, r0
 800e166:	460b      	mov	r3, r1
 800e168:	4640      	mov	r0, r8
 800e16a:	4649      	mov	r1, r9
 800e16c:	f7f2 fcba 	bl	8000ae4 <__aeabi_dcmplt>
 800e170:	b128      	cbz	r0, 800e17e <__ieee754_sqrt+0x1a6>
 800e172:	1ca0      	adds	r0, r4, #2
 800e174:	f104 0402 	add.w	r4, r4, #2
 800e178:	bf08      	it	eq
 800e17a:	3601      	addeq	r6, #1
 800e17c:	e7dd      	b.n	800e13a <__ieee754_sqrt+0x162>
 800e17e:	1c63      	adds	r3, r4, #1
 800e180:	f023 0401 	bic.w	r4, r3, #1
 800e184:	e7d9      	b.n	800e13a <__ieee754_sqrt+0x162>
 800e186:	bf00      	nop
 800e188:	7ff00000 	.word	0x7ff00000
 800e18c:	20000288 	.word	0x20000288
 800e190:	20000280 	.word	0x20000280
 800e194:	00000000 	.word	0x00000000

0800e198 <__ieee754_pow>:
 800e198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e19c:	b091      	sub	sp, #68	@ 0x44
 800e19e:	ed8d 1b00 	vstr	d1, [sp]
 800e1a2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800e1a6:	ec57 6b10 	vmov	r6, r7, d0
 800e1aa:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800e1ae:	ea5a 0001 	orrs.w	r0, sl, r1
 800e1b2:	d113      	bne.n	800e1dc <__ieee754_pow+0x44>
 800e1b4:	19b3      	adds	r3, r6, r6
 800e1b6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800e1ba:	4152      	adcs	r2, r2
 800e1bc:	4298      	cmp	r0, r3
 800e1be:	4b96      	ldr	r3, [pc, #600]	@ (800e418 <__ieee754_pow+0x280>)
 800e1c0:	4193      	sbcs	r3, r2
 800e1c2:	f080 84e7 	bcs.w	800eb94 <__ieee754_pow+0x9fc>
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	4639      	mov	r1, r7
 800e1ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1ce:	f7f2 f861 	bl	8000294 <__adddf3>
 800e1d2:	ec41 0b10 	vmov	d0, r0, r1
 800e1d6:	b011      	add	sp, #68	@ 0x44
 800e1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1dc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e1e0:	4a8e      	ldr	r2, [pc, #568]	@ (800e41c <__ieee754_pow+0x284>)
 800e1e2:	463d      	mov	r5, r7
 800e1e4:	4633      	mov	r3, r6
 800e1e6:	4590      	cmp	r8, r2
 800e1e8:	d806      	bhi.n	800e1f8 <__ieee754_pow+0x60>
 800e1ea:	d101      	bne.n	800e1f0 <__ieee754_pow+0x58>
 800e1ec:	2e00      	cmp	r6, #0
 800e1ee:	d1ea      	bne.n	800e1c6 <__ieee754_pow+0x2e>
 800e1f0:	4592      	cmp	sl, r2
 800e1f2:	d801      	bhi.n	800e1f8 <__ieee754_pow+0x60>
 800e1f4:	d10e      	bne.n	800e214 <__ieee754_pow+0x7c>
 800e1f6:	b169      	cbz	r1, 800e214 <__ieee754_pow+0x7c>
 800e1f8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800e1fc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800e200:	431d      	orrs	r5, r3
 800e202:	d1e0      	bne.n	800e1c6 <__ieee754_pow+0x2e>
 800e204:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e208:	18db      	adds	r3, r3, r3
 800e20a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800e20e:	4152      	adcs	r2, r2
 800e210:	429d      	cmp	r5, r3
 800e212:	e7d4      	b.n	800e1be <__ieee754_pow+0x26>
 800e214:	2d00      	cmp	r5, #0
 800e216:	46c3      	mov	fp, r8
 800e218:	da3a      	bge.n	800e290 <__ieee754_pow+0xf8>
 800e21a:	4a81      	ldr	r2, [pc, #516]	@ (800e420 <__ieee754_pow+0x288>)
 800e21c:	4592      	cmp	sl, r2
 800e21e:	d84d      	bhi.n	800e2bc <__ieee754_pow+0x124>
 800e220:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800e224:	4592      	cmp	sl, r2
 800e226:	f240 84c4 	bls.w	800ebb2 <__ieee754_pow+0xa1a>
 800e22a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800e22e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e232:	2a14      	cmp	r2, #20
 800e234:	dd0f      	ble.n	800e256 <__ieee754_pow+0xbe>
 800e236:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800e23a:	fa21 f402 	lsr.w	r4, r1, r2
 800e23e:	fa04 f202 	lsl.w	r2, r4, r2
 800e242:	428a      	cmp	r2, r1
 800e244:	f040 84b5 	bne.w	800ebb2 <__ieee754_pow+0xa1a>
 800e248:	f004 0401 	and.w	r4, r4, #1
 800e24c:	f1c4 0402 	rsb	r4, r4, #2
 800e250:	2900      	cmp	r1, #0
 800e252:	d158      	bne.n	800e306 <__ieee754_pow+0x16e>
 800e254:	e00e      	b.n	800e274 <__ieee754_pow+0xdc>
 800e256:	2900      	cmp	r1, #0
 800e258:	d154      	bne.n	800e304 <__ieee754_pow+0x16c>
 800e25a:	f1c2 0214 	rsb	r2, r2, #20
 800e25e:	fa4a f402 	asr.w	r4, sl, r2
 800e262:	fa04 f202 	lsl.w	r2, r4, r2
 800e266:	4552      	cmp	r2, sl
 800e268:	f040 84a0 	bne.w	800ebac <__ieee754_pow+0xa14>
 800e26c:	f004 0401 	and.w	r4, r4, #1
 800e270:	f1c4 0402 	rsb	r4, r4, #2
 800e274:	4a6b      	ldr	r2, [pc, #428]	@ (800e424 <__ieee754_pow+0x28c>)
 800e276:	4592      	cmp	sl, r2
 800e278:	d12e      	bne.n	800e2d8 <__ieee754_pow+0x140>
 800e27a:	f1b9 0f00 	cmp.w	r9, #0
 800e27e:	f280 8491 	bge.w	800eba4 <__ieee754_pow+0xa0c>
 800e282:	4632      	mov	r2, r6
 800e284:	463b      	mov	r3, r7
 800e286:	2000      	movs	r0, #0
 800e288:	4966      	ldr	r1, [pc, #408]	@ (800e424 <__ieee754_pow+0x28c>)
 800e28a:	f7f2 fae3 	bl	8000854 <__aeabi_ddiv>
 800e28e:	e7a0      	b.n	800e1d2 <__ieee754_pow+0x3a>
 800e290:	2400      	movs	r4, #0
 800e292:	bbc1      	cbnz	r1, 800e306 <__ieee754_pow+0x16e>
 800e294:	4a61      	ldr	r2, [pc, #388]	@ (800e41c <__ieee754_pow+0x284>)
 800e296:	4592      	cmp	sl, r2
 800e298:	d1ec      	bne.n	800e274 <__ieee754_pow+0xdc>
 800e29a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800e29e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800e2a2:	431a      	orrs	r2, r3
 800e2a4:	f000 8476 	beq.w	800eb94 <__ieee754_pow+0x9fc>
 800e2a8:	4b5f      	ldr	r3, [pc, #380]	@ (800e428 <__ieee754_pow+0x290>)
 800e2aa:	4598      	cmp	r8, r3
 800e2ac:	d908      	bls.n	800e2c0 <__ieee754_pow+0x128>
 800e2ae:	f1b9 0f00 	cmp.w	r9, #0
 800e2b2:	f2c0 8473 	blt.w	800eb9c <__ieee754_pow+0xa04>
 800e2b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2ba:	e78a      	b.n	800e1d2 <__ieee754_pow+0x3a>
 800e2bc:	2402      	movs	r4, #2
 800e2be:	e7e8      	b.n	800e292 <__ieee754_pow+0xfa>
 800e2c0:	f1b9 0f00 	cmp.w	r9, #0
 800e2c4:	f04f 0000 	mov.w	r0, #0
 800e2c8:	f04f 0100 	mov.w	r1, #0
 800e2cc:	da81      	bge.n	800e1d2 <__ieee754_pow+0x3a>
 800e2ce:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e2d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e2d6:	e77c      	b.n	800e1d2 <__ieee754_pow+0x3a>
 800e2d8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800e2dc:	d106      	bne.n	800e2ec <__ieee754_pow+0x154>
 800e2de:	4632      	mov	r2, r6
 800e2e0:	463b      	mov	r3, r7
 800e2e2:	4630      	mov	r0, r6
 800e2e4:	4639      	mov	r1, r7
 800e2e6:	f7f2 f98b 	bl	8000600 <__aeabi_dmul>
 800e2ea:	e772      	b.n	800e1d2 <__ieee754_pow+0x3a>
 800e2ec:	4a4f      	ldr	r2, [pc, #316]	@ (800e42c <__ieee754_pow+0x294>)
 800e2ee:	4591      	cmp	r9, r2
 800e2f0:	d109      	bne.n	800e306 <__ieee754_pow+0x16e>
 800e2f2:	2d00      	cmp	r5, #0
 800e2f4:	db07      	blt.n	800e306 <__ieee754_pow+0x16e>
 800e2f6:	ec47 6b10 	vmov	d0, r6, r7
 800e2fa:	b011      	add	sp, #68	@ 0x44
 800e2fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e300:	f7ff be6a 	b.w	800dfd8 <__ieee754_sqrt>
 800e304:	2400      	movs	r4, #0
 800e306:	9302      	str	r3, [sp, #8]
 800e308:	ec47 6b10 	vmov	d0, r6, r7
 800e30c:	f000 fcc0 	bl	800ec90 <fabs>
 800e310:	9b02      	ldr	r3, [sp, #8]
 800e312:	ec51 0b10 	vmov	r0, r1, d0
 800e316:	bb53      	cbnz	r3, 800e36e <__ieee754_pow+0x1d6>
 800e318:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800e31c:	4b41      	ldr	r3, [pc, #260]	@ (800e424 <__ieee754_pow+0x28c>)
 800e31e:	429a      	cmp	r2, r3
 800e320:	d002      	beq.n	800e328 <__ieee754_pow+0x190>
 800e322:	f1b8 0f00 	cmp.w	r8, #0
 800e326:	d122      	bne.n	800e36e <__ieee754_pow+0x1d6>
 800e328:	f1b9 0f00 	cmp.w	r9, #0
 800e32c:	da05      	bge.n	800e33a <__ieee754_pow+0x1a2>
 800e32e:	4602      	mov	r2, r0
 800e330:	460b      	mov	r3, r1
 800e332:	2000      	movs	r0, #0
 800e334:	493b      	ldr	r1, [pc, #236]	@ (800e424 <__ieee754_pow+0x28c>)
 800e336:	f7f2 fa8d 	bl	8000854 <__aeabi_ddiv>
 800e33a:	2d00      	cmp	r5, #0
 800e33c:	f6bf af49 	bge.w	800e1d2 <__ieee754_pow+0x3a>
 800e340:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800e344:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800e348:	ea58 0804 	orrs.w	r8, r8, r4
 800e34c:	d108      	bne.n	800e360 <__ieee754_pow+0x1c8>
 800e34e:	4602      	mov	r2, r0
 800e350:	460b      	mov	r3, r1
 800e352:	4610      	mov	r0, r2
 800e354:	4619      	mov	r1, r3
 800e356:	f7f1 ff9b 	bl	8000290 <__aeabi_dsub>
 800e35a:	4602      	mov	r2, r0
 800e35c:	460b      	mov	r3, r1
 800e35e:	e794      	b.n	800e28a <__ieee754_pow+0xf2>
 800e360:	2c01      	cmp	r4, #1
 800e362:	f47f af36 	bne.w	800e1d2 <__ieee754_pow+0x3a>
 800e366:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e36a:	4619      	mov	r1, r3
 800e36c:	e731      	b.n	800e1d2 <__ieee754_pow+0x3a>
 800e36e:	0feb      	lsrs	r3, r5, #31
 800e370:	3b01      	subs	r3, #1
 800e372:	ea53 0204 	orrs.w	r2, r3, r4
 800e376:	d102      	bne.n	800e37e <__ieee754_pow+0x1e6>
 800e378:	4632      	mov	r2, r6
 800e37a:	463b      	mov	r3, r7
 800e37c:	e7e9      	b.n	800e352 <__ieee754_pow+0x1ba>
 800e37e:	3c01      	subs	r4, #1
 800e380:	431c      	orrs	r4, r3
 800e382:	d016      	beq.n	800e3b2 <__ieee754_pow+0x21a>
 800e384:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800e408 <__ieee754_pow+0x270>
 800e388:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800e38c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e390:	f240 810e 	bls.w	800e5b0 <__ieee754_pow+0x418>
 800e394:	4b26      	ldr	r3, [pc, #152]	@ (800e430 <__ieee754_pow+0x298>)
 800e396:	459a      	cmp	sl, r3
 800e398:	4b23      	ldr	r3, [pc, #140]	@ (800e428 <__ieee754_pow+0x290>)
 800e39a:	d916      	bls.n	800e3ca <__ieee754_pow+0x232>
 800e39c:	4598      	cmp	r8, r3
 800e39e:	d80b      	bhi.n	800e3b8 <__ieee754_pow+0x220>
 800e3a0:	f1b9 0f00 	cmp.w	r9, #0
 800e3a4:	da0b      	bge.n	800e3be <__ieee754_pow+0x226>
 800e3a6:	2000      	movs	r0, #0
 800e3a8:	b011      	add	sp, #68	@ 0x44
 800e3aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ae:	f000 bc67 	b.w	800ec80 <__math_oflow>
 800e3b2:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 800e410 <__ieee754_pow+0x278>
 800e3b6:	e7e7      	b.n	800e388 <__ieee754_pow+0x1f0>
 800e3b8:	f1b9 0f00 	cmp.w	r9, #0
 800e3bc:	dcf3      	bgt.n	800e3a6 <__ieee754_pow+0x20e>
 800e3be:	2000      	movs	r0, #0
 800e3c0:	b011      	add	sp, #68	@ 0x44
 800e3c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c6:	f000 bc53 	b.w	800ec70 <__math_uflow>
 800e3ca:	4598      	cmp	r8, r3
 800e3cc:	d20c      	bcs.n	800e3e8 <__ieee754_pow+0x250>
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3d6:	f7f2 fb85 	bl	8000ae4 <__aeabi_dcmplt>
 800e3da:	3800      	subs	r0, #0
 800e3dc:	bf18      	it	ne
 800e3de:	2001      	movne	r0, #1
 800e3e0:	f1b9 0f00 	cmp.w	r9, #0
 800e3e4:	daec      	bge.n	800e3c0 <__ieee754_pow+0x228>
 800e3e6:	e7df      	b.n	800e3a8 <__ieee754_pow+0x210>
 800e3e8:	4b0e      	ldr	r3, [pc, #56]	@ (800e424 <__ieee754_pow+0x28c>)
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	4598      	cmp	r8, r3
 800e3ee:	d921      	bls.n	800e434 <__ieee754_pow+0x29c>
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3f6:	f7f2 fb75 	bl	8000ae4 <__aeabi_dcmplt>
 800e3fa:	3800      	subs	r0, #0
 800e3fc:	bf18      	it	ne
 800e3fe:	2001      	movne	r0, #1
 800e400:	f1b9 0f00 	cmp.w	r9, #0
 800e404:	dcd0      	bgt.n	800e3a8 <__ieee754_pow+0x210>
 800e406:	e7db      	b.n	800e3c0 <__ieee754_pow+0x228>
 800e408:	00000000 	.word	0x00000000
 800e40c:	3ff00000 	.word	0x3ff00000
 800e410:	00000000 	.word	0x00000000
 800e414:	bff00000 	.word	0xbff00000
 800e418:	fff00000 	.word	0xfff00000
 800e41c:	7ff00000 	.word	0x7ff00000
 800e420:	433fffff 	.word	0x433fffff
 800e424:	3ff00000 	.word	0x3ff00000
 800e428:	3fefffff 	.word	0x3fefffff
 800e42c:	3fe00000 	.word	0x3fe00000
 800e430:	43f00000 	.word	0x43f00000
 800e434:	4b5a      	ldr	r3, [pc, #360]	@ (800e5a0 <__ieee754_pow+0x408>)
 800e436:	f7f1 ff2b 	bl	8000290 <__aeabi_dsub>
 800e43a:	4604      	mov	r4, r0
 800e43c:	460d      	mov	r5, r1
 800e43e:	a350      	add	r3, pc, #320	@ (adr r3, 800e580 <__ieee754_pow+0x3e8>)
 800e440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e444:	f7f2 f8dc 	bl	8000600 <__aeabi_dmul>
 800e448:	4606      	mov	r6, r0
 800e44a:	460f      	mov	r7, r1
 800e44c:	4620      	mov	r0, r4
 800e44e:	4629      	mov	r1, r5
 800e450:	a34d      	add	r3, pc, #308	@ (adr r3, 800e588 <__ieee754_pow+0x3f0>)
 800e452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e456:	f7f2 f8d3 	bl	8000600 <__aeabi_dmul>
 800e45a:	2200      	movs	r2, #0
 800e45c:	4682      	mov	sl, r0
 800e45e:	468b      	mov	fp, r1
 800e460:	4b50      	ldr	r3, [pc, #320]	@ (800e5a4 <__ieee754_pow+0x40c>)
 800e462:	4620      	mov	r0, r4
 800e464:	4629      	mov	r1, r5
 800e466:	f7f2 f8cb 	bl	8000600 <__aeabi_dmul>
 800e46a:	4602      	mov	r2, r0
 800e46c:	460b      	mov	r3, r1
 800e46e:	a148      	add	r1, pc, #288	@ (adr r1, 800e590 <__ieee754_pow+0x3f8>)
 800e470:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e474:	f7f1 ff0c 	bl	8000290 <__aeabi_dsub>
 800e478:	4622      	mov	r2, r4
 800e47a:	462b      	mov	r3, r5
 800e47c:	f7f2 f8c0 	bl	8000600 <__aeabi_dmul>
 800e480:	4602      	mov	r2, r0
 800e482:	460b      	mov	r3, r1
 800e484:	2000      	movs	r0, #0
 800e486:	4948      	ldr	r1, [pc, #288]	@ (800e5a8 <__ieee754_pow+0x410>)
 800e488:	f7f1 ff02 	bl	8000290 <__aeabi_dsub>
 800e48c:	4680      	mov	r8, r0
 800e48e:	4689      	mov	r9, r1
 800e490:	4622      	mov	r2, r4
 800e492:	462b      	mov	r3, r5
 800e494:	4620      	mov	r0, r4
 800e496:	4629      	mov	r1, r5
 800e498:	2400      	movs	r4, #0
 800e49a:	f7f2 f8b1 	bl	8000600 <__aeabi_dmul>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	4640      	mov	r0, r8
 800e4a4:	4649      	mov	r1, r9
 800e4a6:	f7f2 f8ab 	bl	8000600 <__aeabi_dmul>
 800e4aa:	a33b      	add	r3, pc, #236	@ (adr r3, 800e598 <__ieee754_pow+0x400>)
 800e4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b0:	f7f2 f8a6 	bl	8000600 <__aeabi_dmul>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	460b      	mov	r3, r1
 800e4b8:	4650      	mov	r0, sl
 800e4ba:	4659      	mov	r1, fp
 800e4bc:	f7f1 fee8 	bl	8000290 <__aeabi_dsub>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	4680      	mov	r8, r0
 800e4c6:	4689      	mov	r9, r1
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	4639      	mov	r1, r7
 800e4cc:	f7f1 fee2 	bl	8000294 <__adddf3>
 800e4d0:	4632      	mov	r2, r6
 800e4d2:	463b      	mov	r3, r7
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	460d      	mov	r5, r1
 800e4d8:	f7f1 feda 	bl	8000290 <__aeabi_dsub>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	460b      	mov	r3, r1
 800e4e0:	4640      	mov	r0, r8
 800e4e2:	4649      	mov	r1, r9
 800e4e4:	f7f1 fed4 	bl	8000290 <__aeabi_dsub>
 800e4e8:	4606      	mov	r6, r0
 800e4ea:	460f      	mov	r7, r1
 800e4ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	9304      	str	r3, [sp, #16]
 800e4fc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e500:	4652      	mov	r2, sl
 800e502:	465b      	mov	r3, fp
 800e504:	f7f1 fec4 	bl	8000290 <__aeabi_dsub>
 800e508:	4622      	mov	r2, r4
 800e50a:	462b      	mov	r3, r5
 800e50c:	f7f2 f878 	bl	8000600 <__aeabi_dmul>
 800e510:	4680      	mov	r8, r0
 800e512:	4689      	mov	r9, r1
 800e514:	4630      	mov	r0, r6
 800e516:	4639      	mov	r1, r7
 800e518:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e51c:	f7f2 f870 	bl	8000600 <__aeabi_dmul>
 800e520:	4602      	mov	r2, r0
 800e522:	460b      	mov	r3, r1
 800e524:	4640      	mov	r0, r8
 800e526:	4649      	mov	r1, r9
 800e528:	f7f1 feb4 	bl	8000294 <__adddf3>
 800e52c:	4606      	mov	r6, r0
 800e52e:	460f      	mov	r7, r1
 800e530:	4652      	mov	r2, sl
 800e532:	465b      	mov	r3, fp
 800e534:	4620      	mov	r0, r4
 800e536:	4629      	mov	r1, r5
 800e538:	f7f2 f862 	bl	8000600 <__aeabi_dmul>
 800e53c:	460b      	mov	r3, r1
 800e53e:	4602      	mov	r2, r0
 800e540:	4680      	mov	r8, r0
 800e542:	4689      	mov	r9, r1
 800e544:	4630      	mov	r0, r6
 800e546:	4639      	mov	r1, r7
 800e548:	f7f1 fea4 	bl	8000294 <__adddf3>
 800e54c:	4b17      	ldr	r3, [pc, #92]	@ (800e5ac <__ieee754_pow+0x414>)
 800e54e:	4604      	mov	r4, r0
 800e550:	460d      	mov	r5, r1
 800e552:	4299      	cmp	r1, r3
 800e554:	468a      	mov	sl, r1
 800e556:	468b      	mov	fp, r1
 800e558:	f340 82f0 	ble.w	800eb3c <__ieee754_pow+0x9a4>
 800e55c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800e560:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800e564:	4303      	orrs	r3, r0
 800e566:	f000 81e8 	beq.w	800e93a <__ieee754_pow+0x7a2>
 800e56a:	2200      	movs	r2, #0
 800e56c:	2300      	movs	r3, #0
 800e56e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e572:	f7f2 fab7 	bl	8000ae4 <__aeabi_dcmplt>
 800e576:	3800      	subs	r0, #0
 800e578:	bf18      	it	ne
 800e57a:	2001      	movne	r0, #1
 800e57c:	e714      	b.n	800e3a8 <__ieee754_pow+0x210>
 800e57e:	bf00      	nop
 800e580:	60000000 	.word	0x60000000
 800e584:	3ff71547 	.word	0x3ff71547
 800e588:	f85ddf44 	.word	0xf85ddf44
 800e58c:	3e54ae0b 	.word	0x3e54ae0b
 800e590:	55555555 	.word	0x55555555
 800e594:	3fd55555 	.word	0x3fd55555
 800e598:	652b82fe 	.word	0x652b82fe
 800e59c:	3ff71547 	.word	0x3ff71547
 800e5a0:	3ff00000 	.word	0x3ff00000
 800e5a4:	3fd00000 	.word	0x3fd00000
 800e5a8:	3fe00000 	.word	0x3fe00000
 800e5ac:	408fffff 	.word	0x408fffff
 800e5b0:	4bd5      	ldr	r3, [pc, #852]	@ (800e908 <__ieee754_pow+0x770>)
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	402b      	ands	r3, r5
 800e5b6:	b92b      	cbnz	r3, 800e5c4 <__ieee754_pow+0x42c>
 800e5b8:	4bd4      	ldr	r3, [pc, #848]	@ (800e90c <__ieee754_pow+0x774>)
 800e5ba:	f7f2 f821 	bl	8000600 <__aeabi_dmul>
 800e5be:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800e5c2:	468b      	mov	fp, r1
 800e5c4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800e5c8:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800e5cc:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e5d0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800e5d4:	4413      	add	r3, r2
 800e5d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e5da:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5dc:	4bcc      	ldr	r3, [pc, #816]	@ (800e910 <__ieee754_pow+0x778>)
 800e5de:	459b      	cmp	fp, r3
 800e5e0:	dd08      	ble.n	800e5f4 <__ieee754_pow+0x45c>
 800e5e2:	4bcc      	ldr	r3, [pc, #816]	@ (800e914 <__ieee754_pow+0x77c>)
 800e5e4:	459b      	cmp	fp, r3
 800e5e6:	f340 81a5 	ble.w	800e934 <__ieee754_pow+0x79c>
 800e5ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5ec:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5f4:	f04f 0a00 	mov.w	sl, #0
 800e5f8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e5fc:	4629      	mov	r1, r5
 800e5fe:	106d      	asrs	r5, r5, #1
 800e600:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e602:	4bc5      	ldr	r3, [pc, #788]	@ (800e918 <__ieee754_pow+0x780>)
 800e604:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800e608:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e60c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800e610:	ed93 7b00 	vldr	d7, [r3]
 800e614:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e618:	ec53 2b17 	vmov	r2, r3, d7
 800e61c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e620:	f7f1 fe36 	bl	8000290 <__aeabi_dsub>
 800e624:	4606      	mov	r6, r0
 800e626:	460f      	mov	r7, r1
 800e628:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e62c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e630:	f7f1 fe30 	bl	8000294 <__adddf3>
 800e634:	4602      	mov	r2, r0
 800e636:	460b      	mov	r3, r1
 800e638:	2000      	movs	r0, #0
 800e63a:	49b8      	ldr	r1, [pc, #736]	@ (800e91c <__ieee754_pow+0x784>)
 800e63c:	f7f2 f90a 	bl	8000854 <__aeabi_ddiv>
 800e640:	4602      	mov	r2, r0
 800e642:	460b      	mov	r3, r1
 800e644:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800e648:	4630      	mov	r0, r6
 800e64a:	4639      	mov	r1, r7
 800e64c:	f7f1 ffd8 	bl	8000600 <__aeabi_dmul>
 800e650:	2200      	movs	r2, #0
 800e652:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e656:	4614      	mov	r4, r2
 800e658:	461d      	mov	r5, r3
 800e65a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e65e:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800e662:	f04f 0b00 	mov.w	fp, #0
 800e666:	4661      	mov	r1, ip
 800e668:	46e1      	mov	r9, ip
 800e66a:	4658      	mov	r0, fp
 800e66c:	46d8      	mov	r8, fp
 800e66e:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800e672:	f7f1 ffc5 	bl	8000600 <__aeabi_dmul>
 800e676:	4602      	mov	r2, r0
 800e678:	460b      	mov	r3, r1
 800e67a:	4630      	mov	r0, r6
 800e67c:	4639      	mov	r1, r7
 800e67e:	f7f1 fe07 	bl	8000290 <__aeabi_dsub>
 800e682:	4606      	mov	r6, r0
 800e684:	460f      	mov	r7, r1
 800e686:	4620      	mov	r0, r4
 800e688:	4629      	mov	r1, r5
 800e68a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e68e:	f7f1 fdff 	bl	8000290 <__aeabi_dsub>
 800e692:	4602      	mov	r2, r0
 800e694:	460b      	mov	r3, r1
 800e696:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e69a:	f7f1 fdf9 	bl	8000290 <__aeabi_dsub>
 800e69e:	465a      	mov	r2, fp
 800e6a0:	464b      	mov	r3, r9
 800e6a2:	f7f1 ffad 	bl	8000600 <__aeabi_dmul>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	4639      	mov	r1, r7
 800e6ae:	f7f1 fdef 	bl	8000290 <__aeabi_dsub>
 800e6b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e6b6:	f7f1 ffa3 	bl	8000600 <__aeabi_dmul>
 800e6ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e6c2:	4610      	mov	r0, r2
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	f7f1 ff9b 	bl	8000600 <__aeabi_dmul>
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	460d      	mov	r5, r1
 800e6ce:	a37c      	add	r3, pc, #496	@ (adr r3, 800e8c0 <__ieee754_pow+0x728>)
 800e6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d4:	f7f1 ff94 	bl	8000600 <__aeabi_dmul>
 800e6d8:	a37b      	add	r3, pc, #492	@ (adr r3, 800e8c8 <__ieee754_pow+0x730>)
 800e6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6de:	f7f1 fdd9 	bl	8000294 <__adddf3>
 800e6e2:	4622      	mov	r2, r4
 800e6e4:	462b      	mov	r3, r5
 800e6e6:	f7f1 ff8b 	bl	8000600 <__aeabi_dmul>
 800e6ea:	a379      	add	r3, pc, #484	@ (adr r3, 800e8d0 <__ieee754_pow+0x738>)
 800e6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f0:	f7f1 fdd0 	bl	8000294 <__adddf3>
 800e6f4:	4622      	mov	r2, r4
 800e6f6:	462b      	mov	r3, r5
 800e6f8:	f7f1 ff82 	bl	8000600 <__aeabi_dmul>
 800e6fc:	a376      	add	r3, pc, #472	@ (adr r3, 800e8d8 <__ieee754_pow+0x740>)
 800e6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e702:	f7f1 fdc7 	bl	8000294 <__adddf3>
 800e706:	4622      	mov	r2, r4
 800e708:	462b      	mov	r3, r5
 800e70a:	f7f1 ff79 	bl	8000600 <__aeabi_dmul>
 800e70e:	a374      	add	r3, pc, #464	@ (adr r3, 800e8e0 <__ieee754_pow+0x748>)
 800e710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e714:	f7f1 fdbe 	bl	8000294 <__adddf3>
 800e718:	4622      	mov	r2, r4
 800e71a:	462b      	mov	r3, r5
 800e71c:	f7f1 ff70 	bl	8000600 <__aeabi_dmul>
 800e720:	a371      	add	r3, pc, #452	@ (adr r3, 800e8e8 <__ieee754_pow+0x750>)
 800e722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e726:	f7f1 fdb5 	bl	8000294 <__adddf3>
 800e72a:	4606      	mov	r6, r0
 800e72c:	460f      	mov	r7, r1
 800e72e:	4622      	mov	r2, r4
 800e730:	462b      	mov	r3, r5
 800e732:	4620      	mov	r0, r4
 800e734:	4629      	mov	r1, r5
 800e736:	f7f1 ff63 	bl	8000600 <__aeabi_dmul>
 800e73a:	4602      	mov	r2, r0
 800e73c:	460b      	mov	r3, r1
 800e73e:	4630      	mov	r0, r6
 800e740:	4639      	mov	r1, r7
 800e742:	f7f1 ff5d 	bl	8000600 <__aeabi_dmul>
 800e746:	465a      	mov	r2, fp
 800e748:	4604      	mov	r4, r0
 800e74a:	460d      	mov	r5, r1
 800e74c:	464b      	mov	r3, r9
 800e74e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e752:	f7f1 fd9f 	bl	8000294 <__adddf3>
 800e756:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e75a:	f7f1 ff51 	bl	8000600 <__aeabi_dmul>
 800e75e:	4622      	mov	r2, r4
 800e760:	462b      	mov	r3, r5
 800e762:	f7f1 fd97 	bl	8000294 <__adddf3>
 800e766:	465a      	mov	r2, fp
 800e768:	464b      	mov	r3, r9
 800e76a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e76e:	4658      	mov	r0, fp
 800e770:	4649      	mov	r1, r9
 800e772:	f7f1 ff45 	bl	8000600 <__aeabi_dmul>
 800e776:	2200      	movs	r2, #0
 800e778:	4b69      	ldr	r3, [pc, #420]	@ (800e920 <__ieee754_pow+0x788>)
 800e77a:	4606      	mov	r6, r0
 800e77c:	460f      	mov	r7, r1
 800e77e:	f7f1 fd89 	bl	8000294 <__adddf3>
 800e782:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e786:	f7f1 fd85 	bl	8000294 <__adddf3>
 800e78a:	460d      	mov	r5, r1
 800e78c:	460b      	mov	r3, r1
 800e78e:	4640      	mov	r0, r8
 800e790:	4649      	mov	r1, r9
 800e792:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800e796:	465c      	mov	r4, fp
 800e798:	465a      	mov	r2, fp
 800e79a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800e79e:	f7f1 ff2f 	bl	8000600 <__aeabi_dmul>
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	4680      	mov	r8, r0
 800e7a6:	4689      	mov	r9, r1
 800e7a8:	4b5d      	ldr	r3, [pc, #372]	@ (800e920 <__ieee754_pow+0x788>)
 800e7aa:	4620      	mov	r0, r4
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	f7f1 fd6f 	bl	8000290 <__aeabi_dsub>
 800e7b2:	4632      	mov	r2, r6
 800e7b4:	463b      	mov	r3, r7
 800e7b6:	f7f1 fd6b 	bl	8000290 <__aeabi_dsub>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	460b      	mov	r3, r1
 800e7be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e7c2:	f7f1 fd65 	bl	8000290 <__aeabi_dsub>
 800e7c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7ca:	f7f1 ff19 	bl	8000600 <__aeabi_dmul>
 800e7ce:	4606      	mov	r6, r0
 800e7d0:	460f      	mov	r7, r1
 800e7d2:	4622      	mov	r2, r4
 800e7d4:	462b      	mov	r3, r5
 800e7d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7da:	f7f1 ff11 	bl	8000600 <__aeabi_dmul>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	4639      	mov	r1, r7
 800e7e6:	f7f1 fd55 	bl	8000294 <__adddf3>
 800e7ea:	4606      	mov	r6, r0
 800e7ec:	460f      	mov	r7, r1
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	4640      	mov	r0, r8
 800e7f4:	4649      	mov	r1, r9
 800e7f6:	f7f1 fd4d 	bl	8000294 <__adddf3>
 800e7fa:	460d      	mov	r5, r1
 800e7fc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800e800:	a33b      	add	r3, pc, #236	@ (adr r3, 800e8f0 <__ieee754_pow+0x758>)
 800e802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e806:	465c      	mov	r4, fp
 800e808:	4658      	mov	r0, fp
 800e80a:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800e80e:	f7f1 fef7 	bl	8000600 <__aeabi_dmul>
 800e812:	4642      	mov	r2, r8
 800e814:	464b      	mov	r3, r9
 800e816:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e81a:	4620      	mov	r0, r4
 800e81c:	4629      	mov	r1, r5
 800e81e:	f7f1 fd37 	bl	8000290 <__aeabi_dsub>
 800e822:	4602      	mov	r2, r0
 800e824:	460b      	mov	r3, r1
 800e826:	4630      	mov	r0, r6
 800e828:	4639      	mov	r1, r7
 800e82a:	f7f1 fd31 	bl	8000290 <__aeabi_dsub>
 800e82e:	a332      	add	r3, pc, #200	@ (adr r3, 800e8f8 <__ieee754_pow+0x760>)
 800e830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e834:	f7f1 fee4 	bl	8000600 <__aeabi_dmul>
 800e838:	4606      	mov	r6, r0
 800e83a:	460f      	mov	r7, r1
 800e83c:	4620      	mov	r0, r4
 800e83e:	4629      	mov	r1, r5
 800e840:	a32f      	add	r3, pc, #188	@ (adr r3, 800e900 <__ieee754_pow+0x768>)
 800e842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e846:	f7f1 fedb 	bl	8000600 <__aeabi_dmul>
 800e84a:	4602      	mov	r2, r0
 800e84c:	460b      	mov	r3, r1
 800e84e:	4630      	mov	r0, r6
 800e850:	4639      	mov	r1, r7
 800e852:	f7f1 fd1f 	bl	8000294 <__adddf3>
 800e856:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e858:	4b32      	ldr	r3, [pc, #200]	@ (800e924 <__ieee754_pow+0x78c>)
 800e85a:	4413      	add	r3, r2
 800e85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e860:	f7f1 fd18 	bl	8000294 <__adddf3>
 800e864:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e868:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e86a:	f7f1 fe5f 	bl	800052c <__aeabi_i2d>
 800e86e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e870:	4b2d      	ldr	r3, [pc, #180]	@ (800e928 <__ieee754_pow+0x790>)
 800e872:	4606      	mov	r6, r0
 800e874:	460f      	mov	r7, r1
 800e876:	4413      	add	r3, r2
 800e878:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e87c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e880:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e884:	f7f1 fd06 	bl	8000294 <__adddf3>
 800e888:	4642      	mov	r2, r8
 800e88a:	464b      	mov	r3, r9
 800e88c:	f7f1 fd02 	bl	8000294 <__adddf3>
 800e890:	4632      	mov	r2, r6
 800e892:	463b      	mov	r3, r7
 800e894:	f7f1 fcfe 	bl	8000294 <__adddf3>
 800e898:	4632      	mov	r2, r6
 800e89a:	463b      	mov	r3, r7
 800e89c:	460d      	mov	r5, r1
 800e89e:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800e8a2:	4658      	mov	r0, fp
 800e8a4:	465c      	mov	r4, fp
 800e8a6:	f7f1 fcf3 	bl	8000290 <__aeabi_dsub>
 800e8aa:	4642      	mov	r2, r8
 800e8ac:	464b      	mov	r3, r9
 800e8ae:	f7f1 fcef 	bl	8000290 <__aeabi_dsub>
 800e8b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8b6:	f7f1 fceb 	bl	8000290 <__aeabi_dsub>
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	e036      	b.n	800e92c <__ieee754_pow+0x794>
 800e8be:	bf00      	nop
 800e8c0:	4a454eef 	.word	0x4a454eef
 800e8c4:	3fca7e28 	.word	0x3fca7e28
 800e8c8:	93c9db65 	.word	0x93c9db65
 800e8cc:	3fcd864a 	.word	0x3fcd864a
 800e8d0:	a91d4101 	.word	0xa91d4101
 800e8d4:	3fd17460 	.word	0x3fd17460
 800e8d8:	518f264d 	.word	0x518f264d
 800e8dc:	3fd55555 	.word	0x3fd55555
 800e8e0:	db6fabff 	.word	0xdb6fabff
 800e8e4:	3fdb6db6 	.word	0x3fdb6db6
 800e8e8:	33333303 	.word	0x33333303
 800e8ec:	3fe33333 	.word	0x3fe33333
 800e8f0:	e0000000 	.word	0xe0000000
 800e8f4:	3feec709 	.word	0x3feec709
 800e8f8:	dc3a03fd 	.word	0xdc3a03fd
 800e8fc:	3feec709 	.word	0x3feec709
 800e900:	145b01f5 	.word	0x145b01f5
 800e904:	be3e2fe0 	.word	0xbe3e2fe0
 800e908:	7ff00000 	.word	0x7ff00000
 800e90c:	43400000 	.word	0x43400000
 800e910:	0003988e 	.word	0x0003988e
 800e914:	000bb679 	.word	0x000bb679
 800e918:	0800f940 	.word	0x0800f940
 800e91c:	3ff00000 	.word	0x3ff00000
 800e920:	40080000 	.word	0x40080000
 800e924:	0800f920 	.word	0x0800f920
 800e928:	0800f930 	.word	0x0800f930
 800e92c:	460b      	mov	r3, r1
 800e92e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e932:	e5d7      	b.n	800e4e4 <__ieee754_pow+0x34c>
 800e934:	f04f 0a01 	mov.w	sl, #1
 800e938:	e65e      	b.n	800e5f8 <__ieee754_pow+0x460>
 800e93a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800ec0c <__ieee754_pow+0xa74>)
 800e93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e940:	4630      	mov	r0, r6
 800e942:	4639      	mov	r1, r7
 800e944:	f7f1 fca6 	bl	8000294 <__adddf3>
 800e948:	4642      	mov	r2, r8
 800e94a:	464b      	mov	r3, r9
 800e94c:	e9cd 0100 	strd	r0, r1, [sp]
 800e950:	4620      	mov	r0, r4
 800e952:	4629      	mov	r1, r5
 800e954:	f7f1 fc9c 	bl	8000290 <__aeabi_dsub>
 800e958:	4602      	mov	r2, r0
 800e95a:	460b      	mov	r3, r1
 800e95c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e960:	f7f2 f8de 	bl	8000b20 <__aeabi_dcmpgt>
 800e964:	2800      	cmp	r0, #0
 800e966:	f47f ae00 	bne.w	800e56a <__ieee754_pow+0x3d2>
 800e96a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800e96e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e972:	48a1      	ldr	r0, [pc, #644]	@ (800ebf8 <__ieee754_pow+0xa60>)
 800e974:	f1bb 0f00 	cmp.w	fp, #0
 800e978:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800e97c:	f04f 0200 	mov.w	r2, #0
 800e980:	fa43 fa0a 	asr.w	sl, r3, sl
 800e984:	44da      	add	sl, fp
 800e986:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e98a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800e98e:	fa40 f001 	asr.w	r0, r0, r1
 800e992:	f1c1 0114 	rsb	r1, r1, #20
 800e996:	ea00 030a 	and.w	r3, r0, sl
 800e99a:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e99e:	4640      	mov	r0, r8
 800e9a0:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800e9a4:	fa4a fa01 	asr.w	sl, sl, r1
 800e9a8:	4649      	mov	r1, r9
 800e9aa:	bfb8      	it	lt
 800e9ac:	f1ca 0a00 	rsblt	sl, sl, #0
 800e9b0:	f7f1 fc6e 	bl	8000290 <__aeabi_dsub>
 800e9b4:	4680      	mov	r8, r0
 800e9b6:	4689      	mov	r9, r1
 800e9b8:	2400      	movs	r4, #0
 800e9ba:	4632      	mov	r2, r6
 800e9bc:	463b      	mov	r3, r7
 800e9be:	4640      	mov	r0, r8
 800e9c0:	4649      	mov	r1, r9
 800e9c2:	f7f1 fc67 	bl	8000294 <__adddf3>
 800e9c6:	460d      	mov	r5, r1
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	a37b      	add	r3, pc, #492	@ (adr r3, 800ebb8 <__ieee754_pow+0xa20>)
 800e9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d0:	f7f1 fe16 	bl	8000600 <__aeabi_dmul>
 800e9d4:	4642      	mov	r2, r8
 800e9d6:	464b      	mov	r3, r9
 800e9d8:	e9cd 0100 	strd	r0, r1, [sp]
 800e9dc:	4620      	mov	r0, r4
 800e9de:	4629      	mov	r1, r5
 800e9e0:	f7f1 fc56 	bl	8000290 <__aeabi_dsub>
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	4630      	mov	r0, r6
 800e9ea:	4639      	mov	r1, r7
 800e9ec:	f7f1 fc50 	bl	8000290 <__aeabi_dsub>
 800e9f0:	a373      	add	r3, pc, #460	@ (adr r3, 800ebc0 <__ieee754_pow+0xa28>)
 800e9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f6:	f7f1 fe03 	bl	8000600 <__aeabi_dmul>
 800e9fa:	4680      	mov	r8, r0
 800e9fc:	4689      	mov	r9, r1
 800e9fe:	4620      	mov	r0, r4
 800ea00:	4629      	mov	r1, r5
 800ea02:	a371      	add	r3, pc, #452	@ (adr r3, 800ebc8 <__ieee754_pow+0xa30>)
 800ea04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea08:	f7f1 fdfa 	bl	8000600 <__aeabi_dmul>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	460b      	mov	r3, r1
 800ea10:	4640      	mov	r0, r8
 800ea12:	4649      	mov	r1, r9
 800ea14:	f7f1 fc3e 	bl	8000294 <__adddf3>
 800ea18:	4604      	mov	r4, r0
 800ea1a:	460d      	mov	r5, r1
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	460b      	mov	r3, r1
 800ea20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea24:	f7f1 fc36 	bl	8000294 <__adddf3>
 800ea28:	4680      	mov	r8, r0
 800ea2a:	4689      	mov	r9, r1
 800ea2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea30:	f7f1 fc2e 	bl	8000290 <__aeabi_dsub>
 800ea34:	4602      	mov	r2, r0
 800ea36:	460b      	mov	r3, r1
 800ea38:	4620      	mov	r0, r4
 800ea3a:	4629      	mov	r1, r5
 800ea3c:	f7f1 fc28 	bl	8000290 <__aeabi_dsub>
 800ea40:	4642      	mov	r2, r8
 800ea42:	4606      	mov	r6, r0
 800ea44:	460f      	mov	r7, r1
 800ea46:	464b      	mov	r3, r9
 800ea48:	4640      	mov	r0, r8
 800ea4a:	4649      	mov	r1, r9
 800ea4c:	f7f1 fdd8 	bl	8000600 <__aeabi_dmul>
 800ea50:	4604      	mov	r4, r0
 800ea52:	460d      	mov	r5, r1
 800ea54:	a35e      	add	r3, pc, #376	@ (adr r3, 800ebd0 <__ieee754_pow+0xa38>)
 800ea56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5a:	f7f1 fdd1 	bl	8000600 <__aeabi_dmul>
 800ea5e:	a35e      	add	r3, pc, #376	@ (adr r3, 800ebd8 <__ieee754_pow+0xa40>)
 800ea60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea64:	f7f1 fc14 	bl	8000290 <__aeabi_dsub>
 800ea68:	4622      	mov	r2, r4
 800ea6a:	462b      	mov	r3, r5
 800ea6c:	f7f1 fdc8 	bl	8000600 <__aeabi_dmul>
 800ea70:	a35b      	add	r3, pc, #364	@ (adr r3, 800ebe0 <__ieee754_pow+0xa48>)
 800ea72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea76:	f7f1 fc0d 	bl	8000294 <__adddf3>
 800ea7a:	4622      	mov	r2, r4
 800ea7c:	462b      	mov	r3, r5
 800ea7e:	f7f1 fdbf 	bl	8000600 <__aeabi_dmul>
 800ea82:	a359      	add	r3, pc, #356	@ (adr r3, 800ebe8 <__ieee754_pow+0xa50>)
 800ea84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea88:	f7f1 fc02 	bl	8000290 <__aeabi_dsub>
 800ea8c:	4622      	mov	r2, r4
 800ea8e:	462b      	mov	r3, r5
 800ea90:	f7f1 fdb6 	bl	8000600 <__aeabi_dmul>
 800ea94:	a356      	add	r3, pc, #344	@ (adr r3, 800ebf0 <__ieee754_pow+0xa58>)
 800ea96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9a:	f7f1 fbfb 	bl	8000294 <__adddf3>
 800ea9e:	4622      	mov	r2, r4
 800eaa0:	462b      	mov	r3, r5
 800eaa2:	f7f1 fdad 	bl	8000600 <__aeabi_dmul>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	4640      	mov	r0, r8
 800eaac:	4649      	mov	r1, r9
 800eaae:	f7f1 fbef 	bl	8000290 <__aeabi_dsub>
 800eab2:	4604      	mov	r4, r0
 800eab4:	460d      	mov	r5, r1
 800eab6:	4602      	mov	r2, r0
 800eab8:	460b      	mov	r3, r1
 800eaba:	4640      	mov	r0, r8
 800eabc:	4649      	mov	r1, r9
 800eabe:	f7f1 fd9f 	bl	8000600 <__aeabi_dmul>
 800eac2:	2200      	movs	r2, #0
 800eac4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800eac8:	e9cd 0100 	strd	r0, r1, [sp]
 800eacc:	4620      	mov	r0, r4
 800eace:	4629      	mov	r1, r5
 800ead0:	f7f1 fbde 	bl	8000290 <__aeabi_dsub>
 800ead4:	4602      	mov	r2, r0
 800ead6:	460b      	mov	r3, r1
 800ead8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eadc:	f7f1 feba 	bl	8000854 <__aeabi_ddiv>
 800eae0:	4632      	mov	r2, r6
 800eae2:	4604      	mov	r4, r0
 800eae4:	460d      	mov	r5, r1
 800eae6:	463b      	mov	r3, r7
 800eae8:	4640      	mov	r0, r8
 800eaea:	4649      	mov	r1, r9
 800eaec:	f7f1 fd88 	bl	8000600 <__aeabi_dmul>
 800eaf0:	4632      	mov	r2, r6
 800eaf2:	463b      	mov	r3, r7
 800eaf4:	f7f1 fbce 	bl	8000294 <__adddf3>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	460b      	mov	r3, r1
 800eafc:	4620      	mov	r0, r4
 800eafe:	4629      	mov	r1, r5
 800eb00:	f7f1 fbc6 	bl	8000290 <__aeabi_dsub>
 800eb04:	4642      	mov	r2, r8
 800eb06:	464b      	mov	r3, r9
 800eb08:	f7f1 fbc2 	bl	8000290 <__aeabi_dsub>
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	4602      	mov	r2, r0
 800eb10:	493a      	ldr	r1, [pc, #232]	@ (800ebfc <__ieee754_pow+0xa64>)
 800eb12:	2000      	movs	r0, #0
 800eb14:	f7f1 fbbc 	bl	8000290 <__aeabi_dsub>
 800eb18:	ec41 0b10 	vmov	d0, r0, r1
 800eb1c:	ee10 3a90 	vmov	r3, s1
 800eb20:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800eb24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb28:	da30      	bge.n	800eb8c <__ieee754_pow+0x9f4>
 800eb2a:	4650      	mov	r0, sl
 800eb2c:	f000 f8b8 	bl	800eca0 <scalbn>
 800eb30:	ec51 0b10 	vmov	r0, r1, d0
 800eb34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb38:	f7ff bbd5 	b.w	800e2e6 <__ieee754_pow+0x14e>
 800eb3c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800eb40:	4c2f      	ldr	r4, [pc, #188]	@ (800ec00 <__ieee754_pow+0xa68>)
 800eb42:	42a3      	cmp	r3, r4
 800eb44:	d91a      	bls.n	800eb7c <__ieee754_pow+0x9e4>
 800eb46:	4b2f      	ldr	r3, [pc, #188]	@ (800ec04 <__ieee754_pow+0xa6c>)
 800eb48:	440b      	add	r3, r1
 800eb4a:	4303      	orrs	r3, r0
 800eb4c:	d009      	beq.n	800eb62 <__ieee754_pow+0x9ca>
 800eb4e:	2200      	movs	r2, #0
 800eb50:	2300      	movs	r3, #0
 800eb52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb56:	f7f1 ffc5 	bl	8000ae4 <__aeabi_dcmplt>
 800eb5a:	3800      	subs	r0, #0
 800eb5c:	bf18      	it	ne
 800eb5e:	2001      	movne	r0, #1
 800eb60:	e42e      	b.n	800e3c0 <__ieee754_pow+0x228>
 800eb62:	4642      	mov	r2, r8
 800eb64:	464b      	mov	r3, r9
 800eb66:	f7f1 fb93 	bl	8000290 <__aeabi_dsub>
 800eb6a:	4632      	mov	r2, r6
 800eb6c:	463b      	mov	r3, r7
 800eb6e:	f7f1 ffcd 	bl	8000b0c <__aeabi_dcmpge>
 800eb72:	2800      	cmp	r0, #0
 800eb74:	d1eb      	bne.n	800eb4e <__ieee754_pow+0x9b6>
 800eb76:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800ec14 <__ieee754_pow+0xa7c>
 800eb7a:	e6f6      	b.n	800e96a <__ieee754_pow+0x7d2>
 800eb7c:	469a      	mov	sl, r3
 800eb7e:	4b22      	ldr	r3, [pc, #136]	@ (800ec08 <__ieee754_pow+0xa70>)
 800eb80:	459a      	cmp	sl, r3
 800eb82:	f63f aef2 	bhi.w	800e96a <__ieee754_pow+0x7d2>
 800eb86:	f8dd a010 	ldr.w	sl, [sp, #16]
 800eb8a:	e715      	b.n	800e9b8 <__ieee754_pow+0x820>
 800eb8c:	ec51 0b10 	vmov	r0, r1, d0
 800eb90:	4619      	mov	r1, r3
 800eb92:	e7cf      	b.n	800eb34 <__ieee754_pow+0x99c>
 800eb94:	2000      	movs	r0, #0
 800eb96:	4919      	ldr	r1, [pc, #100]	@ (800ebfc <__ieee754_pow+0xa64>)
 800eb98:	f7ff bb1b 	b.w	800e1d2 <__ieee754_pow+0x3a>
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	2100      	movs	r1, #0
 800eba0:	f7ff bb17 	b.w	800e1d2 <__ieee754_pow+0x3a>
 800eba4:	4630      	mov	r0, r6
 800eba6:	4639      	mov	r1, r7
 800eba8:	f7ff bb13 	b.w	800e1d2 <__ieee754_pow+0x3a>
 800ebac:	460c      	mov	r4, r1
 800ebae:	f7ff bb61 	b.w	800e274 <__ieee754_pow+0xdc>
 800ebb2:	2400      	movs	r4, #0
 800ebb4:	f7ff bb4c 	b.w	800e250 <__ieee754_pow+0xb8>
 800ebb8:	00000000 	.word	0x00000000
 800ebbc:	3fe62e43 	.word	0x3fe62e43
 800ebc0:	fefa39ef 	.word	0xfefa39ef
 800ebc4:	3fe62e42 	.word	0x3fe62e42
 800ebc8:	0ca86c39 	.word	0x0ca86c39
 800ebcc:	be205c61 	.word	0xbe205c61
 800ebd0:	72bea4d0 	.word	0x72bea4d0
 800ebd4:	3e663769 	.word	0x3e663769
 800ebd8:	c5d26bf1 	.word	0xc5d26bf1
 800ebdc:	3ebbbd41 	.word	0x3ebbbd41
 800ebe0:	af25de2c 	.word	0xaf25de2c
 800ebe4:	3f11566a 	.word	0x3f11566a
 800ebe8:	16bebd93 	.word	0x16bebd93
 800ebec:	3f66c16c 	.word	0x3f66c16c
 800ebf0:	5555553e 	.word	0x5555553e
 800ebf4:	3fc55555 	.word	0x3fc55555
 800ebf8:	fff00000 	.word	0xfff00000
 800ebfc:	3ff00000 	.word	0x3ff00000
 800ec00:	4090cbff 	.word	0x4090cbff
 800ec04:	3f6f3400 	.word	0x3f6f3400
 800ec08:	3fe00000 	.word	0x3fe00000
 800ec0c:	652b82fe 	.word	0x652b82fe
 800ec10:	3c971547 	.word	0x3c971547
 800ec14:	4090cc00 	.word	0x4090cc00

0800ec18 <with_errno>:
 800ec18:	b510      	push	{r4, lr}
 800ec1a:	ed2d 8b02 	vpush	{d8}
 800ec1e:	eeb0 8a40 	vmov.f32	s16, s0
 800ec22:	eef0 8a60 	vmov.f32	s17, s1
 800ec26:	4604      	mov	r4, r0
 800ec28:	f7fc feba 	bl	800b9a0 <__errno>
 800ec2c:	6004      	str	r4, [r0, #0]
 800ec2e:	eeb0 0a48 	vmov.f32	s0, s16
 800ec32:	eef0 0a68 	vmov.f32	s1, s17
 800ec36:	ecbd 8b02 	vpop	{d8}
 800ec3a:	bd10      	pop	{r4, pc}

0800ec3c <xflow>:
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	b507      	push	{r0, r1, r2, lr}
 800ec40:	ec51 0b10 	vmov	r0, r1, d0
 800ec44:	b183      	cbz	r3, 800ec68 <xflow+0x2c>
 800ec46:	4602      	mov	r2, r0
 800ec48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ec4c:	e9cd 2300 	strd	r2, r3, [sp]
 800ec50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec54:	f7f1 fcd4 	bl	8000600 <__aeabi_dmul>
 800ec58:	ec41 0b10 	vmov	d0, r0, r1
 800ec5c:	2022      	movs	r0, #34	@ 0x22
 800ec5e:	b003      	add	sp, #12
 800ec60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec64:	f7ff bfd8 	b.w	800ec18 <with_errno>
 800ec68:	4602      	mov	r2, r0
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	e7ee      	b.n	800ec4c <xflow+0x10>
	...

0800ec70 <__math_uflow>:
 800ec70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ec78 <__math_uflow+0x8>
 800ec74:	f7ff bfe2 	b.w	800ec3c <xflow>
 800ec78:	00000000 	.word	0x00000000
 800ec7c:	10000000 	.word	0x10000000

0800ec80 <__math_oflow>:
 800ec80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ec88 <__math_oflow+0x8>
 800ec84:	f7ff bfda 	b.w	800ec3c <xflow>
 800ec88:	00000000 	.word	0x00000000
 800ec8c:	70000000 	.word	0x70000000

0800ec90 <fabs>:
 800ec90:	ec51 0b10 	vmov	r0, r1, d0
 800ec94:	4602      	mov	r2, r0
 800ec96:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ec9a:	ec43 2b10 	vmov	d0, r2, r3
 800ec9e:	4770      	bx	lr

0800eca0 <scalbn>:
 800eca0:	b570      	push	{r4, r5, r6, lr}
 800eca2:	ec55 4b10 	vmov	r4, r5, d0
 800eca6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ecaa:	4606      	mov	r6, r0
 800ecac:	462b      	mov	r3, r5
 800ecae:	b991      	cbnz	r1, 800ecd6 <scalbn+0x36>
 800ecb0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ecb4:	4323      	orrs	r3, r4
 800ecb6:	d03d      	beq.n	800ed34 <scalbn+0x94>
 800ecb8:	4b35      	ldr	r3, [pc, #212]	@ (800ed90 <scalbn+0xf0>)
 800ecba:	4620      	mov	r0, r4
 800ecbc:	4629      	mov	r1, r5
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f7f1 fc9e 	bl	8000600 <__aeabi_dmul>
 800ecc4:	4b33      	ldr	r3, [pc, #204]	@ (800ed94 <scalbn+0xf4>)
 800ecc6:	4604      	mov	r4, r0
 800ecc8:	460d      	mov	r5, r1
 800ecca:	429e      	cmp	r6, r3
 800eccc:	da0f      	bge.n	800ecee <scalbn+0x4e>
 800ecce:	a328      	add	r3, pc, #160	@ (adr r3, 800ed70 <scalbn+0xd0>)
 800ecd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd4:	e01e      	b.n	800ed14 <scalbn+0x74>
 800ecd6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ecda:	4291      	cmp	r1, r2
 800ecdc:	d10b      	bne.n	800ecf6 <scalbn+0x56>
 800ecde:	4622      	mov	r2, r4
 800ece0:	4620      	mov	r0, r4
 800ece2:	4629      	mov	r1, r5
 800ece4:	f7f1 fad6 	bl	8000294 <__adddf3>
 800ece8:	4604      	mov	r4, r0
 800ecea:	460d      	mov	r5, r1
 800ecec:	e022      	b.n	800ed34 <scalbn+0x94>
 800ecee:	460b      	mov	r3, r1
 800ecf0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ecf4:	3936      	subs	r1, #54	@ 0x36
 800ecf6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ecfa:	4296      	cmp	r6, r2
 800ecfc:	dd0d      	ble.n	800ed1a <scalbn+0x7a>
 800ecfe:	2d00      	cmp	r5, #0
 800ed00:	a11d      	add	r1, pc, #116	@ (adr r1, 800ed78 <scalbn+0xd8>)
 800ed02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed06:	da02      	bge.n	800ed0e <scalbn+0x6e>
 800ed08:	a11d      	add	r1, pc, #116	@ (adr r1, 800ed80 <scalbn+0xe0>)
 800ed0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed0e:	a31a      	add	r3, pc, #104	@ (adr r3, 800ed78 <scalbn+0xd8>)
 800ed10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed14:	f7f1 fc74 	bl	8000600 <__aeabi_dmul>
 800ed18:	e7e6      	b.n	800ece8 <scalbn+0x48>
 800ed1a:	1872      	adds	r2, r6, r1
 800ed1c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ed20:	428a      	cmp	r2, r1
 800ed22:	dcec      	bgt.n	800ecfe <scalbn+0x5e>
 800ed24:	2a00      	cmp	r2, #0
 800ed26:	dd08      	ble.n	800ed3a <scalbn+0x9a>
 800ed28:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ed2c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ed30:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ed34:	ec45 4b10 	vmov	d0, r4, r5
 800ed38:	bd70      	pop	{r4, r5, r6, pc}
 800ed3a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ed3e:	da08      	bge.n	800ed52 <scalbn+0xb2>
 800ed40:	2d00      	cmp	r5, #0
 800ed42:	a10b      	add	r1, pc, #44	@ (adr r1, 800ed70 <scalbn+0xd0>)
 800ed44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed48:	dac1      	bge.n	800ecce <scalbn+0x2e>
 800ed4a:	a10f      	add	r1, pc, #60	@ (adr r1, 800ed88 <scalbn+0xe8>)
 800ed4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed50:	e7bd      	b.n	800ecce <scalbn+0x2e>
 800ed52:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ed56:	3236      	adds	r2, #54	@ 0x36
 800ed58:	4620      	mov	r0, r4
 800ed5a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ed5e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ed62:	2200      	movs	r2, #0
 800ed64:	4b0c      	ldr	r3, [pc, #48]	@ (800ed98 <scalbn+0xf8>)
 800ed66:	4629      	mov	r1, r5
 800ed68:	e7d4      	b.n	800ed14 <scalbn+0x74>
 800ed6a:	bf00      	nop
 800ed6c:	f3af 8000 	nop.w
 800ed70:	c2f8f359 	.word	0xc2f8f359
 800ed74:	01a56e1f 	.word	0x01a56e1f
 800ed78:	8800759c 	.word	0x8800759c
 800ed7c:	7e37e43c 	.word	0x7e37e43c
 800ed80:	8800759c 	.word	0x8800759c
 800ed84:	fe37e43c 	.word	0xfe37e43c
 800ed88:	c2f8f359 	.word	0xc2f8f359
 800ed8c:	81a56e1f 	.word	0x81a56e1f
 800ed90:	43500000 	.word	0x43500000
 800ed94:	ffff3cb0 	.word	0xffff3cb0
 800ed98:	3c900000 	.word	0x3c900000

0800ed9c <_init>:
 800ed9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed9e:	bf00      	nop
 800eda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eda2:	bc08      	pop	{r3}
 800eda4:	469e      	mov	lr, r3
 800eda6:	4770      	bx	lr

0800eda8 <_fini>:
 800eda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edaa:	bf00      	nop
 800edac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edae:	bc08      	pop	{r3}
 800edb0:	469e      	mov	lr, r3
 800edb2:	4770      	bx	lr
 800edb4:	0000      	movs	r0, r0
	...
