
BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b450  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000980  0800b688  0800b688  0000c688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c008  0800c008  0000e288  2**0
                  CONTENTS
  4 .ARM          00000008  0800c008  0800c008  0000d008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c010  0800c010  0000e288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c010  0800c010  0000d010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c018  0800c018  0000d018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800c020  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e50  20000288  0800c2a8  0000e288  2**2
                  ALLOC
 10 ._user_heap_stack 00001200  200010d8  0800c2a8  0000f0d8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e288  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ba8c  00000000  00000000  0000e2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bf4  00000000  00000000  00039d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002278  00000000  00000000  0003d940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a84  00000000  00000000  0003fbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00045535  00000000  00000000  0004163c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b728  00000000  00000000  00086b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001c248a  00000000  00000000  000b2299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00274723  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a984  00000000  00000000  00274768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  0027f0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000288 	.word	0x20000288
 8000254:	00000000 	.word	0x00000000
 8000258:	0800b66c 	.word	0x0800b66c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000028c 	.word	0x2000028c
 8000274:	0800b66c 	.word	0x0800b66c

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	@ 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	460a      	mov	r2, r1
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback,};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY,};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE,};

  if (Button != BUTTON_USER)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <BSP_PB_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000bca:	f06f 0301 	mvn.w	r3, #1
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bd0:	e05c      	b.n	8000c8c <BSP_PB_Init+0xdc>
  }
  else
  {
    /* Enable the BUTTON clock*/
    BUTTON_USER_GPIO_CLK_ENABLE();
 8000bd2:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <BSP_PB_Init+0xe8>)
 8000bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bd8:	4a2f      	ldr	r2, [pc, #188]	@ (8000c98 <BSP_PB_Init+0xe8>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000be2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <BSP_PB_Init+0xe8>)
 8000be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]

    gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000bf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf4:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61fb      	str	r3, [r7, #28]

    if (ButtonMode == BUTTON_MODE_GPIO)
 8000bfe:	79bb      	ldrb	r3, [r7, #6]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d10c      	bne.n	8000c1e <BSP_PB_Init+0x6e>
    {
      /* Configure Button pin as input */
      gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
      HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	4a24      	ldr	r2, [pc, #144]	@ (8000c9c <BSP_PB_Init+0xec>)
 8000c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c10:	f107 0210 	add.w	r2, r7, #16
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f004 f9aa 	bl	8004f70 <HAL_GPIO_Init>
 8000c1c:	e036      	b.n	8000c8c <BSP_PB_Init+0xdc>
    }
    else /* (ButtonMode == BUTTON_MODE_EXTI) */
    {
      /* Configure Button pin as input with External interrupt */
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000c1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ca0 <BSP_PB_Init+0xf0>)
 8000c20:	617b      	str	r3, [r7, #20]

      HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	4a1d      	ldr	r2, [pc, #116]	@ (8000c9c <BSP_PB_Init+0xec>)
 8000c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2a:	f107 0210 	add.w	r2, r7, #16
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f004 f99d 	bl	8004f70 <HAL_GPIO_Init>

      (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000c36:	79fa      	ldrb	r2, [r7, #7]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	4a18      	ldr	r2, [pc, #96]	@ (8000ca4 <BSP_PB_Init+0xf4>)
 8000c42:	441a      	add	r2, r3
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4918      	ldr	r1, [pc, #96]	@ (8000ca8 <BSP_PB_Init+0xf8>)
 8000c48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4610      	mov	r0, r2
 8000c50:	f004 f932 	bl	8004eb8 <HAL_EXTI_GetHandle>
      (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000c54:	79fa      	ldrb	r2, [r7, #7]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4a11      	ldr	r2, [pc, #68]	@ (8000ca4 <BSP_PB_Init+0xf4>)
 8000c60:	1898      	adds	r0, r3, r2
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4a11      	ldr	r2, [pc, #68]	@ (8000cac <BSP_PB_Init+0xfc>)
 8000c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	f004 f8f7 	bl	8004e60 <HAL_EXTI_RegisterCallback>

      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000c72:	2018      	movs	r0, #24
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb0 <BSP_PB_Init+0x100>)
 8000c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f003 fe6d 	bl	800495e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000c84:	2318      	movs	r3, #24
 8000c86:	4618      	mov	r0, r3
 8000c88:	f003 fe83 	bl	8004992 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3728      	adds	r7, #40	@ 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	46020c00 	.word	0x46020c00
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	10110000 	.word	0x10110000
 8000ca4:	200002a4 	.word	0x200002a4
 8000ca8:	0800bb18 	.word	0x0800bb18
 8000cac:	20000004 	.word	0x20000004
 8000cb0:	20000008 	.word	0x20000008

08000cb4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f007 f949 	bl	8007f50 <BSP_PB_Callback>
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <BSP_AUDIO_IN_IRQHandler>:
  * @param  Instance Audio in instance.
  * @param  Device Device of the audio in stream.
  * @retval None.
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t Device)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  if (Instance == 0U)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d109      	bne.n	8000ce8 <BSP_AUDIO_IN_IRQHandler+0x24>
  {
    if (Device == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d103      	bne.n	8000ce2 <BSP_AUDIO_IN_IRQHandler+0x1e>
    {
      HAL_DMA_IRQHandler(&haudio_mdf[0]);
 8000cda:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 8000cdc:	f003 ff4c 	bl	8004b78 <HAL_DMA_IRQHandler>
    else /* Device == AUDIO_IN_DEVICE_DIGITAL_MIC2 */
    {
      HAL_DMA_IRQHandler(&haudio_mdf[1]);
    }
  }
}
 8000ce0:	e002      	b.n	8000ce8 <BSP_AUDIO_IN_IRQHandler+0x24>
      HAL_DMA_IRQHandler(&haudio_mdf[1]);
 8000ce2:	4804      	ldr	r0, [pc, #16]	@ (8000cf4 <BSP_AUDIO_IN_IRQHandler+0x30>)
 8000ce4:	f003 ff48 	bl	8004b78 <HAL_DMA_IRQHandler>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	200002b0 	.word	0x200002b0
 8000cf4:	20000328 	.word	0x20000328

08000cf8 <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C2 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 8000d02:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <BSP_I2C2_Init+0x64>)
 8000d04:	4a16      	ldr	r2, [pc, #88]	@ (8000d60 <BSP_I2C2_Init+0x68>)
 8000d06:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8000d08:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <BSP_I2C2_Init+0x6c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d11f      	bne.n	8000d50 <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 8000d10:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <BSP_I2C2_Init+0x6c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3301      	adds	r3, #1
 8000d16:	4a13      	ldr	r2, [pc, #76]	@ (8000d64 <BSP_I2C2_Init+0x6c>)
 8000d18:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 8000d1a:	4810      	ldr	r0, [pc, #64]	@ (8000d5c <BSP_I2C2_Init+0x64>)
 8000d1c:	f004 fede 	bl	8005adc <HAL_I2C_GetState>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d114      	bne.n	8000d50 <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8000d26:	480d      	ldr	r0, [pc, #52]	@ (8000d5c <BSP_I2C2_Init+0x64>)
 8000d28:	f000 fb60 	bl	80013ec <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8000d2c:	f006 fd1a 	bl	8007764 <HAL_RCC_GetPCLK1Freq>
 8000d30:	4603      	mov	r3, r0
 8000d32:	490d      	ldr	r1, [pc, #52]	@ (8000d68 <BSP_I2C2_Init+0x70>)
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 f8e3 	bl	8000f00 <I2C_GetTiming>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4807      	ldr	r0, [pc, #28]	@ (8000d5c <BSP_I2C2_Init+0x64>)
 8000d40:	f000 f838 	bl	8000db4 <MX_I2C2_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d002      	beq.n	8000d50 <BSP_I2C2_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000d4a:	f06f 0307 	mvn.w	r3, #7
 8000d4e:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
return ret;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000da8 	.word	0x20000da8
 8000d60:	40005800 	.word	0x40005800
 8000d64:	200003a0 	.word	0x200003a0
 8000d68:	000186a0 	.word	0x000186a0

08000d6c <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 8000d76:	4b0d      	ldr	r3, [pc, #52]	@ (8000dac <BSP_I2C2_DeInit+0x40>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dac <BSP_I2C2_DeInit+0x40>)
 8000d7e:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 8000d80:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <BSP_I2C2_DeInit+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d10b      	bne.n	8000da0 <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 8000d88:	4809      	ldr	r0, [pc, #36]	@ (8000db0 <BSP_I2C2_DeInit+0x44>)
 8000d8a:	f000 fb95 	bl	80014b8 <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 8000d8e:	4808      	ldr	r0, [pc, #32]	@ (8000db0 <BSP_I2C2_DeInit+0x44>)
 8000d90:	f004 fc33 	bl	80055fa <HAL_I2C_DeInit>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d002      	beq.n	8000da0 <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8000d9a:	f06f 0307 	mvn.w	r3, #7
 8000d9e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8000da0:	687b      	ldr	r3, [r7, #4]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200003a0 	.word	0x200003a0
 8000db0:	20000da8 	.word	0x20000da8

08000db4 <MX_I2C2_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f004 fb72 	bl	80054dc <HAL_I2C_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <MX_I2C2_Init+0x50>
  {
    status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	73fb      	strb	r3, [r7, #15]
 8000e02:	e014      	b.n	8000e2e <MX_I2C2_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f005 f926 	bl	800605c <HAL_I2CEx_ConfigAnalogFilter>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <MX_I2C2_Init+0x68>
    {
      status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	e008      	b.n	8000e2e <MX_I2C2_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f005 f967 	bl	80060f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_I2C2_Init+0x7a>
      {
        status = HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <BSP_I2C2_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	60ba      	str	r2, [r7, #8]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4603      	mov	r3, r0
 8000e44:	81fb      	strh	r3, [r7, #14]
 8000e46:	460b      	mov	r3, r1
 8000e48:	81bb      	strh	r3, [r7, #12]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8000e4e:	89b9      	ldrh	r1, [r7, #12]
 8000e50:	89f8      	ldrh	r0, [r7, #14]
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f000 fb4f 	bl	80014fc <I2C2_WriteReg>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <BSP_I2C2_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	e00c      	b.n	8000e84 <BSP_I2C2_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8000e6a:	4809      	ldr	r0, [pc, #36]	@ (8000e90 <BSP_I2C2_WriteReg+0x58>)
 8000e6c:	f004 fe44 	bl	8005af8 <HAL_I2C_GetError>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	d103      	bne.n	8000e7e <BSP_I2C2_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000e76:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	e002      	b.n	8000e84 <BSP_I2C2_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000e7e:	f06f 0303 	mvn.w	r3, #3
 8000e82:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8000e84:	697b      	ldr	r3, [r7, #20]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000da8 	.word	0x20000da8

08000e94 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	60ba      	str	r2, [r7, #8]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	81fb      	strh	r3, [r7, #14]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	81bb      	strh	r3, [r7, #12]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8000eaa:	89b9      	ldrh	r1, [r7, #12]
 8000eac:	89f8      	ldrh	r0, [r7, #14]
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f000 fb47 	bl	8001548 <I2C2_ReadReg>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <BSP_I2C2_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	e00c      	b.n	8000ee0 <BSP_I2C2_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8000ec6:	4809      	ldr	r0, [pc, #36]	@ (8000eec <BSP_I2C2_ReadReg+0x58>)
 8000ec8:	f004 fe16 	bl	8005af8 <HAL_I2C_GetError>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d103      	bne.n	8000eda <BSP_I2C2_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000ed2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	e002      	b.n	8000ee0 <BSP_I2C2_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000eda:	f06f 0303 	mvn.w	r3, #3
 8000ede:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8000ee0:	697b      	ldr	r3, [r7, #20]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000da8 	.word	0x20000da8

08000ef0 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8000ef4:	f003 fc28 	bl	8004748 <HAL_GetTick>
 8000ef8:	4603      	mov	r3, r0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d06b      	beq.n	8000fec <I2C_GetTiming+0xec>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d068      	beq.n	8000fec <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	e060      	b.n	8000fe2 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8000f20:	4a35      	ldr	r2, [pc, #212]	@ (8000ff8 <I2C_GetTiming+0xf8>)
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	212c      	movs	r1, #44	@ 0x2c
 8000f26:	fb01 f303 	mul.w	r3, r1, r3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d352      	bcc.n	8000fdc <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8000f36:	4a30      	ldr	r2, [pc, #192]	@ (8000ff8 <I2C_GetTiming+0xf8>)
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	212c      	movs	r1, #44	@ 0x2c
 8000f3c:	fb01 f303 	mul.w	r3, r1, r3
 8000f40:	4413      	add	r3, r2
 8000f42:	3308      	adds	r3, #8
 8000f44:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d847      	bhi.n	8000fdc <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8000f4c:	6939      	ldr	r1, [r7, #16]
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f856 	bl	8001000 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8000f54:	6939      	ldr	r1, [r7, #16]
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f940 	bl	80011dc <I2C_Compute_SCLL_SCLH>
 8000f5c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f62:	d842      	bhi.n	8000fea <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8000f64:	4925      	ldr	r1, [pc, #148]	@ (8000ffc <I2C_GetTiming+0xfc>)
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8000f76:	4821      	ldr	r0, [pc, #132]	@ (8000ffc <I2C_GetTiming+0xfc>)
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4403      	add	r3, r0
 8000f84:	3304      	adds	r3, #4
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	051b      	lsls	r3, r3, #20
 8000f8a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8000f8e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8000f90:	481a      	ldr	r0, [pc, #104]	@ (8000ffc <I2C_GetTiming+0xfc>)
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4403      	add	r3, r0
 8000f9e:	3308      	adds	r3, #8
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	041b      	lsls	r3, r3, #16
 8000fa4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8000fa8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 8000faa:	4814      	ldr	r0, [pc, #80]	@ (8000ffc <I2C_GetTiming+0xfc>)
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4403      	add	r3, r0
 8000fb8:	330c      	adds	r3, #12
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8000fc0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8000fc2:	480e      	ldr	r0, [pc, #56]	@ (8000ffc <I2C_GetTiming+0xfc>)
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4403      	add	r3, r0
 8000fd0:	3310      	adds	r3, #16
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8000fd6:	430b      	orrs	r3, r1
 8000fd8:	617b      	str	r3, [r7, #20]
        }
        break;
 8000fda:	e006      	b.n	8000fea <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d99b      	bls.n	8000f20 <I2C_GetTiming+0x20>
 8000fe8:	e000      	b.n	8000fec <I2C_GetTiming+0xec>
        break;
 8000fea:	bf00      	nop
      }
    }
  }

  return ret;
 8000fec:	697b      	ldr	r3, [r7, #20]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	0800bb1c 	.word	0x0800bb1c
 8000ffc:	200003a4 	.word	0x200003a4

08001000 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8001000:	b480      	push	{r7}
 8001002:	b08f      	sub	sp, #60	@ 0x3c
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800100a:	2310      	movs	r3, #16
 800100c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	085a      	lsrs	r2, r3, #1
 8001012:	4b6e      	ldr	r3, [pc, #440]	@ (80011cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8001014:	4413      	add	r3, r2
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	fbb3 f3f2 	udiv	r3, r3, r2
 800101c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800101e:	2332      	movs	r3, #50	@ 0x32
 8001020:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8001022:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001026:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001028:	4a69      	ldr	r2, [pc, #420]	@ (80011d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	212c      	movs	r1, #44	@ 0x2c
 800102e:	fb01 f303 	mul.w	r3, r1, r3
 8001032:	4413      	add	r3, r2
 8001034:	3324      	adds	r3, #36	@ 0x24
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	4a65      	ldr	r2, [pc, #404]	@ (80011d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	212c      	movs	r1, #44	@ 0x2c
 8001040:	fb01 f303 	mul.w	r3, r1, r3
 8001044:	4413      	add	r3, r2
 8001046:	330c      	adds	r3, #12
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800104c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800104e:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8001050:	495f      	ldr	r1, [pc, #380]	@ (80011d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	202c      	movs	r0, #44	@ 0x2c
 8001056:	fb00 f303 	mul.w	r3, r0, r3
 800105a:	440b      	add	r3, r1
 800105c:	3328      	adds	r3, #40	@ 0x28
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3303      	adds	r3, #3
 8001062:	69f9      	ldr	r1, [r7, #28]
 8001064:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800106c:	4a58      	ldr	r2, [pc, #352]	@ (80011d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	212c      	movs	r1, #44	@ 0x2c
 8001072:	fb01 f303 	mul.w	r3, r1, r3
 8001076:	4413      	add	r3, r2
 8001078:	3310      	adds	r3, #16
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	4a54      	ldr	r2, [pc, #336]	@ (80011d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	212c      	movs	r1, #44	@ 0x2c
 8001084:	fb01 f303 	mul.w	r3, r1, r3
 8001088:	4413      	add	r3, r2
 800108a:	3320      	adds	r3, #32
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8001090:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001092:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8001094:	494e      	ldr	r1, [pc, #312]	@ (80011d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	202c      	movs	r0, #44	@ 0x2c
 800109a:	fb00 f303 	mul.w	r3, r0, r3
 800109e:	440b      	add	r3, r1
 80010a0:	3328      	adds	r3, #40	@ 0x28
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	3304      	adds	r3, #4
 80010a6:	69f9      	ldr	r1, [r7, #28]
 80010a8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80010b0:	4a47      	ldr	r2, [pc, #284]	@ (80011d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	212c      	movs	r1, #44	@ 0x2c
 80010b6:	fb01 f303 	mul.w	r3, r1, r3
 80010ba:	4413      	add	r3, r2
 80010bc:	3320      	adds	r3, #32
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	4a43      	ldr	r2, [pc, #268]	@ (80011d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	212c      	movs	r1, #44	@ 0x2c
 80010c8:	fb01 f303 	mul.w	r3, r1, r3
 80010cc:	4413      	add	r3, r2
 80010ce:	3314      	adds	r3, #20
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4403      	add	r3, r0
 80010d4:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80010d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010d8:	2b00      	cmp	r3, #0
 80010da:	dc01      	bgt.n	80010e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 80010e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	dc01      	bgt.n	80010ea <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010ee:	e062      	b.n	80011b6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80010f4:	e059      	b.n	80011aa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80010f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f8:	3301      	adds	r3, #1
 80010fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010fc:	3201      	adds	r2, #1
 80010fe:	fb03 f202 	mul.w	r2, r3, r2
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fb02 f303 	mul.w	r3, r2, r3
 8001108:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	429a      	cmp	r2, r3
 8001110:	d348      	bcc.n	80011a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
 8001116:	e042      	b.n	800119e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8001118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800111a:	3301      	adds	r3, #1
 800111c:	6a3a      	ldr	r2, [r7, #32]
 800111e:	fb03 f202 	mul.w	r2, r3, r2
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fb02 f303 	mul.w	r3, r2, r3
 8001128:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800112a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	429a      	cmp	r2, r3
 8001130:	d332      	bcc.n	8001198 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8001132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	429a      	cmp	r2, r3
 8001138:	d82e      	bhi.n	8001198 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 800113a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800113c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800113e:	429a      	cmp	r2, r3
 8001140:	d02a      	beq.n	8001198 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8001142:	4b24      	ldr	r3, [pc, #144]	@ (80011d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4924      	ldr	r1, [pc, #144]	@ (80011d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001154:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8001156:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	491f      	ldr	r1, [pc, #124]	@ (80011d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	3304      	adds	r3, #4
 8001168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800116a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800116c:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4919      	ldr	r1, [pc, #100]	@ (80011d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	3308      	adds	r3, #8
 800117e:	6a3a      	ldr	r2, [r7, #32]
 8001180:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8001182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001184:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 8001186:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	4a11      	ldr	r2, [pc, #68]	@ (80011d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800118e:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8001190:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b7f      	cmp	r3, #127	@ 0x7f
 8001196:	d812      	bhi.n	80011be <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001198:	6a3b      	ldr	r3, [r7, #32]
 800119a:	3301      	adds	r3, #1
 800119c:	623b      	str	r3, [r7, #32]
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d9b9      	bls.n	8001118 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80011a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a6:	3301      	adds	r3, #1
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80011aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d9a2      	bls.n	80010f6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80011b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011b2:	3301      	adds	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d999      	bls.n	80010f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80011bc:	e000      	b.n	80011c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80011be:	bf00      	nop
          }
        }
      }
    }
  }
}
 80011c0:	373c      	adds	r7, #60	@ 0x3c
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	3b9aca00 	.word	0x3b9aca00
 80011d0:	0800bb1c 	.word	0x0800bb1c
 80011d4:	20000da4 	.word	0x20000da4
 80011d8:	200003a4 	.word	0x200003a4

080011dc <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80011dc:	b480      	push	{r7}
 80011de:	b093      	sub	sp, #76	@ 0x4c
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	085a      	lsrs	r2, r3, #1
 80011f0:	4b7a      	ldr	r3, [pc, #488]	@ (80013dc <I2C_Compute_SCLL_SCLH+0x200>)
 80011f2:	4413      	add	r3, r2
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80011fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 80011fc:	4a78      	ldr	r2, [pc, #480]	@ (80013e0 <I2C_Compute_SCLL_SCLH+0x204>)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	212c      	movs	r1, #44	@ 0x2c
 8001202:	fb01 f303 	mul.w	r3, r1, r3
 8001206:	4413      	add	r3, r2
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	085a      	lsrs	r2, r3, #1
 800120c:	4b73      	ldr	r3, [pc, #460]	@ (80013dc <I2C_Compute_SCLL_SCLH+0x200>)
 800120e:	4413      	add	r3, r2
 8001210:	4973      	ldr	r1, [pc, #460]	@ (80013e0 <I2C_Compute_SCLL_SCLH+0x204>)
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	202c      	movs	r0, #44	@ 0x2c
 8001216:	fb00 f202 	mul.w	r2, r0, r2
 800121a:	440a      	add	r2, r1
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001222:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8001224:	2332      	movs	r3, #50	@ 0x32
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8001228:	4a6d      	ldr	r2, [pc, #436]	@ (80013e0 <I2C_Compute_SCLL_SCLH+0x204>)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	212c      	movs	r1, #44	@ 0x2c
 800122e:	fb01 f303 	mul.w	r3, r1, r3
 8001232:	4413      	add	r3, r2
 8001234:	3328      	adds	r3, #40	@ 0x28
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800123a:	fb02 f303 	mul.w	r3, r2, r3
 800123e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8001240:	4a67      	ldr	r2, [pc, #412]	@ (80013e0 <I2C_Compute_SCLL_SCLH+0x204>)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	212c      	movs	r1, #44	@ 0x2c
 8001246:	fb01 f303 	mul.w	r3, r1, r3
 800124a:	4413      	add	r3, r2
 800124c:	3304      	adds	r3, #4
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a62      	ldr	r2, [pc, #392]	@ (80013dc <I2C_Compute_SCLL_SCLH+0x200>)
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8001258:	4a61      	ldr	r2, [pc, #388]	@ (80013e0 <I2C_Compute_SCLL_SCLH+0x204>)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	212c      	movs	r1, #44	@ 0x2c
 800125e:	fb01 f303 	mul.w	r3, r1, r3
 8001262:	4413      	add	r3, r2
 8001264:	3308      	adds	r3, #8
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a5c      	ldr	r2, [pc, #368]	@ (80013dc <I2C_Compute_SCLL_SCLH+0x200>)
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8001270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001272:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001274:	2300      	movs	r3, #0
 8001276:	637b      	str	r3, [r7, #52]	@ 0x34
 8001278:	e0a3      	b.n	80013c2 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800127a:	495a      	ldr	r1, [pc, #360]	@ (80013e4 <I2C_Compute_SCLL_SCLH+0x208>)
 800127c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800128e:	fb02 f303 	mul.w	r3, r2, r3
 8001292:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001294:	2300      	movs	r3, #0
 8001296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001298:	e08c      	b.n	80013b4 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800129a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	441a      	add	r2, r3
 80012a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012a2:	3301      	adds	r3, #1
 80012a4:	6979      	ldr	r1, [r7, #20]
 80012a6:	fb03 f101 	mul.w	r1, r3, r1
 80012aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	440b      	add	r3, r1
 80012b0:	4413      	add	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80012b4:	4a4a      	ldr	r2, [pc, #296]	@ (80013e0 <I2C_Compute_SCLL_SCLH+0x204>)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	212c      	movs	r1, #44	@ 0x2c
 80012ba:	fb01 f303 	mul.w	r3, r1, r3
 80012be:	4413      	add	r3, r2
 80012c0:	3318      	adds	r3, #24
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d971      	bls.n	80013ae <I2C_Compute_SCLL_SCLH+0x1d2>
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ce:	1ad2      	subs	r2, r2, r3
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012d8:	429a      	cmp	r2, r3
 80012da:	d268      	bcs.n	80013ae <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80012dc:	2300      	movs	r3, #0
 80012de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012e0:	e062      	b.n	80013a8 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80012e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	441a      	add	r2, r3
 80012e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012ea:	3301      	adds	r3, #1
 80012ec:	6979      	ldr	r1, [r7, #20]
 80012ee:	fb03 f101 	mul.w	r1, r3, r1
 80012f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	440b      	add	r3, r1
 80012f8:	4413      	add	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	441a      	add	r2, r3
 8001302:	4937      	ldr	r1, [pc, #220]	@ (80013e0 <I2C_Compute_SCLL_SCLH+0x204>)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	202c      	movs	r0, #44	@ 0x2c
 8001308:	fb00 f303 	mul.w	r3, r0, r3
 800130c:	440b      	add	r3, r1
 800130e:	3320      	adds	r3, #32
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	441a      	add	r2, r3
 8001314:	4932      	ldr	r1, [pc, #200]	@ (80013e0 <I2C_Compute_SCLL_SCLH+0x204>)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	202c      	movs	r0, #44	@ 0x2c
 800131a:	fb00 f303 	mul.w	r3, r0, r3
 800131e:	440b      	add	r3, r1
 8001320:	3324      	adds	r3, #36	@ 0x24
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4413      	add	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min)
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	429a      	cmp	r2, r3
 800132e:	d338      	bcc.n	80013a2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	429a      	cmp	r2, r3
 8001336:	d834      	bhi.n	80013a2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8001338:	4a29      	ldr	r2, [pc, #164]	@ (80013e0 <I2C_Compute_SCLL_SCLH+0x204>)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	212c      	movs	r1, #44	@ 0x2c
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	4413      	add	r3, r2
 8001344:	331c      	adds	r3, #28
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	429a      	cmp	r2, r3
 800134c:	d329      	bcc.n	80013a2 <I2C_Compute_SCLL_SCLH+0x1c6>
              && (ti2cclk < tscl_h))
 800134e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	429a      	cmp	r2, r3
 8001354:	d225      	bcs.n	80013a2 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 800135e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001360:	2b00      	cmp	r3, #0
 8001362:	da02      	bge.n	800136a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8001364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001366:	425b      	negs	r3, r3
 8001368:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800136a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800136c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800136e:	429a      	cmp	r2, r3
 8001370:	d917      	bls.n	80013a2 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8001372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001374:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 8001376:	491b      	ldr	r1, [pc, #108]	@ (80013e4 <I2C_Compute_SCLL_SCLH+0x208>)
 8001378:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	440b      	add	r3, r1
 8001384:	3310      	adds	r3, #16
 8001386:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001388:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800138a:	4916      	ldr	r1, [pc, #88]	@ (80013e4 <I2C_Compute_SCLL_SCLH+0x208>)
 800138c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	330c      	adds	r3, #12
 800139a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800139c:	601a      	str	r2, [r3, #0]
              ret = count;
 800139e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013a0:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80013a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013a4:	3301      	adds	r3, #1
 80013a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80013a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013aa:	2bff      	cmp	r3, #255	@ 0xff
 80013ac:	d999      	bls.n	80012e2 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80013ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013b0:	3301      	adds	r3, #1
 80013b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013b6:	2bff      	cmp	r3, #255	@ 0xff
 80013b8:	f67f af6f 	bls.w	800129a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80013bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013be:	3301      	adds	r3, #1
 80013c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80013c2:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <I2C_Compute_SCLL_SCLH+0x20c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013c8:	429a      	cmp	r2, r3
 80013ca:	f4ff af56 	bcc.w	800127a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80013ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	374c      	adds	r7, #76	@ 0x4c
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	3b9aca00 	.word	0x3b9aca00
 80013e0:	0800bb1c 	.word	0x0800bb1c
 80013e4:	200003a4 	.word	0x200003a4
 80013e8:	20000da4 	.word	0x20000da4

080013ec <I2C2_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hI2c)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 80013f4:	4b2e      	ldr	r3, [pc, #184]	@ (80014b0 <I2C2_MspInit+0xc4>)
 80013f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fa:	4a2d      	ldr	r2, [pc, #180]	@ (80014b0 <I2C2_MspInit+0xc4>)
 80013fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001400:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001404:	4b2a      	ldr	r3, [pc, #168]	@ (80014b0 <I2C2_MspInit+0xc4>)
 8001406:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800140a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 8001412:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <I2C2_MspInit+0xc4>)
 8001414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001418:	4a25      	ldr	r2, [pc, #148]	@ (80014b0 <I2C2_MspInit+0xc4>)
 800141a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800141e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001422:	4b23      	ldr	r3, [pc, #140]	@ (80014b0 <I2C2_MspInit+0xc4>)
 8001424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SCL_PIN;
 8001430:	2310      	movs	r3, #16
 8001432:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8001434:	2312      	movs	r3, #18
 8001436:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8001438:	2301      	movs	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 800143c:	2302      	movs	r3, #2
 800143e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SCL_AF;
 8001440:	2304      	movs	r3, #4
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	481a      	ldr	r0, [pc, #104]	@ (80014b4 <I2C2_MspInit+0xc8>)
 800144c:	f003 fd90 	bl	8004f70 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SDA_PIN;
 8001450:	2320      	movs	r3, #32
 8001452:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8001454:	2312      	movs	r3, #18
 8001456:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8001458:	2301      	movs	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 800145c:	2302      	movs	r3, #2
 800145e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SDA_AF;
 8001460:	2304      	movs	r3, #4
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	4812      	ldr	r0, [pc, #72]	@ (80014b4 <I2C2_MspInit+0xc8>)
 800146c:	f003 fd80 	bl	8004f70 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 8001470:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <I2C2_MspInit+0xc4>)
 8001472:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001476:	4a0e      	ldr	r2, [pc, #56]	@ (80014b0 <I2C2_MspInit+0xc4>)
 8001478:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800147c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001480:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <I2C2_MspInit+0xc4>)
 8001482:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 800148e:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <I2C2_MspInit+0xc4>)
 8001490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001492:	4a07      	ldr	r2, [pc, #28]	@ (80014b0 <I2C2_MspInit+0xc4>)
 8001494:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001498:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 800149a:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <I2C2_MspInit+0xc4>)
 800149c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800149e:	4a04      	ldr	r2, [pc, #16]	@ (80014b0 <I2C2_MspInit+0xc4>)
 80014a0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80014a4:	6753      	str	r3, [r2, #116]	@ 0x74
}
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	@ 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	46020c00 	.word	0x46020c00
 80014b4:	42021c00 	.word	0x42021c00

080014b8 <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 80014c0:	2310      	movs	r3, #16
 80014c2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4619      	mov	r1, r3
 80014c8:	480a      	ldr	r0, [pc, #40]	@ (80014f4 <I2C2_MspDeInit+0x3c>)
 80014ca:	f003 ff29 	bl	8005320 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 80014ce:	2320      	movs	r3, #32
 80014d0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4807      	ldr	r0, [pc, #28]	@ (80014f4 <I2C2_MspDeInit+0x3c>)
 80014d8:	f003 ff22 	bl	8005320 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <I2C2_MspDeInit+0x40>)
 80014de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014e2:	4a05      	ldr	r2, [pc, #20]	@ (80014f8 <I2C2_MspDeInit+0x40>)
 80014e4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80014e8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 80014ec:	bf00      	nop
 80014ee:	3720      	adds	r7, #32
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	42021c00 	.word	0x42021c00
 80014f8:	46020c00 	.word	0x46020c00

080014fc <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af04      	add	r7, sp, #16
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	4603      	mov	r3, r0
 8001506:	81fb      	strh	r3, [r7, #14]
 8001508:	460b      	mov	r3, r1
 800150a:	81bb      	strh	r3, [r7, #12]
 800150c:	4613      	mov	r3, r2
 800150e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8001510:	8978      	ldrh	r0, [r7, #10]
 8001512:	89ba      	ldrh	r2, [r7, #12]
 8001514:	89f9      	ldrh	r1, [r7, #14]
 8001516:	f242 7310 	movw	r3, #10000	@ 0x2710
 800151a:	9302      	str	r3, [sp, #8]
 800151c:	8b3b      	ldrh	r3, [r7, #24]
 800151e:	9301      	str	r3, [sp, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	4603      	mov	r3, r0
 8001526:	4807      	ldr	r0, [pc, #28]	@ (8001544 <I2C2_WriteReg+0x48>)
 8001528:	f004 f8aa 	bl	8005680 <HAL_I2C_Mem_Write>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8001532:	2300      	movs	r3, #0
 8001534:	e001      	b.n	800153a <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8001536:	f06f 0307 	mvn.w	r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000da8 	.word	0x20000da8

08001548 <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af04      	add	r7, sp, #16
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	4603      	mov	r3, r0
 8001552:	81fb      	strh	r3, [r7, #14]
 8001554:	460b      	mov	r3, r1
 8001556:	81bb      	strh	r3, [r7, #12]
 8001558:	4613      	mov	r3, r2
 800155a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 800155c:	8978      	ldrh	r0, [r7, #10]
 800155e:	89ba      	ldrh	r2, [r7, #12]
 8001560:	89f9      	ldrh	r1, [r7, #14]
 8001562:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001566:	9302      	str	r3, [sp, #8]
 8001568:	8b3b      	ldrh	r3, [r7, #24]
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	4603      	mov	r3, r0
 8001572:	4807      	ldr	r0, [pc, #28]	@ (8001590 <I2C2_ReadReg+0x48>)
 8001574:	f004 f998 	bl	80058a8 <HAL_I2C_Mem_Read>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800157e:	2300      	movs	r3, #0
 8001580:	e001      	b.n	8001586 <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8001582:	f06f 0307 	mvn.w	r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000da8 	.word	0x20000da8

08001594 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <BSP_CAMERA_FrameEventCallback>:
  * @brief  Frame Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_FrameEventCallback(uint32_t Instance)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff ffd1 	bl	8001594 <BSP_CAMERA_LineEventCallback>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff ffd0 	bl	80015a8 <BSP_CAMERA_FrameEventCallback>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff ffcf 	bl	80015bc <BSP_CAMERA_VsyncEventCallback>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 800162e:	2000      	movs	r0, #0
 8001630:	f7ff ffce 	bl	80015d0 <BSP_CAMERA_ErrorCallback>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_GYRO and/or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d903      	bls.n	8001658 <BSP_MOTION_SENSOR_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001650:	f06f 0301 	mvn.w	r3, #1
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	e03a      	b.n	80016ce <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 0U) && ((Functions & MOTION_MAGNETO) != 0U))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d108      	bne.n	8001670 <BSP_MOTION_SENSOR_Init+0x34>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <BSP_MOTION_SENSOR_Init+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001668:	f06f 030a 	mvn.w	r3, #10
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	e02e      	b.n	80016ce <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 1U) && ((Functions & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d108      	bne.n	8001688 <BSP_MOTION_SENSOR_Init+0x4c>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <BSP_MOTION_SENSOR_Init+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001680:	f06f 030a 	mvn.w	r3, #10
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e022      	b.n	80016ce <BSP_MOTION_SENSOR_Init+0x92>
  }
  else
  {
    /* Probe the motion sensor */
    if (Instance == 0U)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d109      	bne.n	80016a2 <BSP_MOTION_SENSOR_Init+0x66>
    {
      /* Probe the ISM330DHCX sensor */
      if (ISM330DHCX_Probe(Functions) != BSP_ERROR_NONE)
 800168e:	6838      	ldr	r0, [r7, #0]
 8001690:	f000 fb50 	bl	8001d34 <ISM330DHCX_Probe>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00c      	beq.n	80016b4 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 800169a:	f06f 0304 	mvn.w	r3, #4
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	e008      	b.n	80016b4 <BSP_MOTION_SENSOR_Init+0x78>
      }
    }
    else /* Instance = 1 */
    {
      /* Probe the IIS2MDC sensor */
      if (IIS2MDC_Probe(Functions) != BSP_ERROR_NONE)
 80016a2:	6838      	ldr	r0, [r7, #0]
 80016a4:	f000 fbbc 	bl	8001e20 <IIS2MDC_Probe>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 80016ae:	f06f 0304 	mvn.w	r3, #4
 80016b2:	60fb      	str	r3, [r7, #12]
      }
    }

    if (status == BSP_ERROR_NONE)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d109      	bne.n	80016ce <BSP_MOTION_SENSOR_Init+0x92>
    {
      /* Store current initialized functions */
      Motion_Sensor_Ctx[Instance].Functions |= Functions;
 80016ba:	4a07      	ldr	r2, [pc, #28]	@ (80016d8 <BSP_MOTION_SENSOR_Init+0x9c>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	431a      	orrs	r2, r3
 80016c6:	4904      	ldr	r1, [pc, #16]	@ (80016d8 <BSP_MOTION_SENSOR_Init+0x9c>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }
  return status;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000e44 	.word	0x20000e44

080016dc <BSP_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance.
  * @param  Capabilities Pointer to motion sensor capabilities.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetCapabilities(uint32_t Instance, MOTION_SENSOR_Capabilities_t *Capabilities)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Capabilities == NULL))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d802      	bhi.n	80016f6 <BSP_MOTION_SENSOR_GetCapabilities+0x1a>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d103      	bne.n	80016fe <BSP_MOTION_SENSOR_GetCapabilities+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80016f6:	f06f 0301 	mvn.w	r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	e01b      	b.n	8001736 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
  }
  else if (Motion_Sensor_Ctx[Instance].Functions == 0U)
 80016fe:	4a10      	ldr	r2, [pc, #64]	@ (8001740 <BSP_MOTION_SENSOR_GetCapabilities+0x64>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d103      	bne.n	8001712 <BSP_MOTION_SENSOR_GetCapabilities+0x36>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	e011      	b.n	8001736 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
  }
  else
  {
    /* Get the capabilities of the motion sensor */
    if (Motion_Sensor_Drv[Instance]->GetCapabilities(Motion_Sensor_CompObj[Instance], Capabilities) < 0)
 8001712:	4a0c      	ldr	r2, [pc, #48]	@ (8001744 <BSP_MOTION_SENSOR_GetCapabilities+0x68>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	490a      	ldr	r1, [pc, #40]	@ (8001748 <BSP_MOTION_SENSOR_GetCapabilities+0x6c>)
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001724:	6839      	ldr	r1, [r7, #0]
 8001726:	4610      	mov	r0, r2
 8001728:	4798      	blx	r3
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	da02      	bge.n	8001736 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001730:	f06f 0304 	mvn.w	r3, #4
 8001734:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000e44 	.word	0x20000e44
 8001744:	20000e54 	.word	0x20000e54
 8001748:	20000e4c 	.word	0x20000e4c

0800174c <BSP_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance.
  * @param  Id Pointer to motion sensor ID.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Id == NULL))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d802      	bhi.n	8001766 <BSP_MOTION_SENSOR_ReadID+0x1a>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d103      	bne.n	800176e <BSP_MOTION_SENSOR_ReadID+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001766:	f06f 0301 	mvn.w	r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	e01b      	b.n	80017a6 <BSP_MOTION_SENSOR_ReadID+0x5a>
  }
  else if (Motion_Sensor_Ctx[Instance].Functions == 0U)
 800176e:	4a10      	ldr	r2, [pc, #64]	@ (80017b0 <BSP_MOTION_SENSOR_ReadID+0x64>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d103      	bne.n	8001782 <BSP_MOTION_SENSOR_ReadID+0x36>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	e011      	b.n	80017a6 <BSP_MOTION_SENSOR_ReadID+0x5a>
  }
  else
  {
    /* Read the motion sensor ID */
    if (Motion_Sensor_Drv[Instance]->ReadID(Motion_Sensor_CompObj[Instance], Id) < 0)
 8001782:	4a0c      	ldr	r2, [pc, #48]	@ (80017b4 <BSP_MOTION_SENSOR_ReadID+0x68>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	490a      	ldr	r1, [pc, #40]	@ (80017b8 <BSP_MOTION_SENSOR_ReadID+0x6c>)
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001794:	6839      	ldr	r1, [r7, #0]
 8001796:	4610      	mov	r0, r2
 8001798:	4798      	blx	r3
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	da02      	bge.n	80017a6 <BSP_MOTION_SENSOR_ReadID+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80017a0:	f06f 0304 	mvn.w	r3, #4
 80017a4:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000e44 	.word	0x20000e44
 80017b4:	20000e54 	.word	0x20000e54
 80017b8:	20000e4c 	.word	0x20000e4c

080017bc <BSP_MOTION_SENSOR_Enable>:
  *         - MOTION_GYRO or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d903      	bls.n	80017d8 <BSP_MOTION_SENSOR_Enable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80017d0:	f06f 0301 	mvn.w	r3, #1
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	e045      	b.n	8001864 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d108      	bne.n	80017f0 <BSP_MOTION_SENSOR_Enable+0x34>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <BSP_MOTION_SENSOR_Enable+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80017e8:	f06f 030a 	mvn.w	r3, #10
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	e039      	b.n	8001864 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d108      	bne.n	8001808 <BSP_MOTION_SENSOR_Enable+0x4c>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <BSP_MOTION_SENSOR_Enable+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001800:	f06f 030a 	mvn.w	r3, #10
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e02d      	b.n	8001864 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001808:	4a19      	ldr	r2, [pc, #100]	@ (8001870 <BSP_MOTION_SENSOR_Enable+0xb4>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d103      	bne.n	8001820 <BSP_MOTION_SENSOR_Enable+0x64>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 8001818:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	e021      	b.n	8001864 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else
  {
    /* Enable the motion sensor function */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d006      	beq.n	8001834 <BSP_MOTION_SENSOR_Enable+0x78>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d101      	bne.n	8001830 <BSP_MOTION_SENSOR_Enable+0x74>
 800182c:	2301      	movs	r3, #1
 800182e:	e002      	b.n	8001836 <BSP_MOTION_SENSOR_Enable+0x7a>
 8001830:	2302      	movs	r3, #2
 8001832:	e000      	b.n	8001836 <BSP_MOTION_SENSOR_Enable+0x7a>
 8001834:	2300      	movs	r3, #0
 8001836:	72fb      	strb	r3, [r7, #11]
    if (Motion_Sensor_FuncDrv[Instance][index]->Enable(Motion_Sensor_CompObj[Instance]) < 0)
 8001838:	7af9      	ldrb	r1, [r7, #11]
 800183a:	480e      	ldr	r0, [pc, #56]	@ (8001874 <BSP_MOTION_SENSOR_Enable+0xb8>)
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	440b      	add	r3, r1
 8001846:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	490a      	ldr	r1, [pc, #40]	@ (8001878 <BSP_MOTION_SENSOR_Enable+0xbc>)
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001854:	4610      	mov	r0, r2
 8001856:	4798      	blx	r3
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	da02      	bge.n	8001864 <BSP_MOTION_SENSOR_Enable+0xa8>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800185e:	f06f 0304 	mvn.w	r3, #4
 8001862:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8001864:	68fb      	ldr	r3, [r7, #12]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000e44 	.word	0x20000e44
 8001874:	20000e5c 	.word	0x20000e5c
 8001878:	20000e4c 	.word	0x20000e4c

0800187c <BSP_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Axes Pointer to motion sensor axes.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_Axes_t *Axes)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Axes == NULL))
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d802      	bhi.n	8001898 <BSP_MOTION_SENSOR_GetAxes+0x1c>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d103      	bne.n	80018a0 <BSP_MOTION_SENSOR_GetAxes+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001898:	f06f 0301 	mvn.w	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	e046      	b.n	800192e <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d108      	bne.n	80018b8 <BSP_MOTION_SENSOR_GetAxes+0x3c>
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <BSP_MOTION_SENSOR_GetAxes+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80018b0:	f06f 030a 	mvn.w	r3, #10
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e03a      	b.n	800192e <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d108      	bne.n	80018d0 <BSP_MOTION_SENSOR_GetAxes+0x54>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <BSP_MOTION_SENSOR_GetAxes+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80018c8:	f06f 030a 	mvn.w	r3, #10
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	e02e      	b.n	800192e <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 80018d0:	4a19      	ldr	r2, [pc, #100]	@ (8001938 <BSP_MOTION_SENSOR_GetAxes+0xbc>)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d103      	bne.n	80018e8 <BSP_MOTION_SENSOR_GetAxes+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e022      	b.n	800192e <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else
  {
    /* Get the motion sensor axes */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d006      	beq.n	80018fc <BSP_MOTION_SENSOR_GetAxes+0x80>
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d101      	bne.n	80018f8 <BSP_MOTION_SENSOR_GetAxes+0x7c>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e002      	b.n	80018fe <BSP_MOTION_SENSOR_GetAxes+0x82>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e000      	b.n	80018fe <BSP_MOTION_SENSOR_GetAxes+0x82>
 80018fc:	2300      	movs	r3, #0
 80018fe:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetAxes(Motion_Sensor_CompObj[Instance], Axes) < 0)
 8001900:	7cf9      	ldrb	r1, [r7, #19]
 8001902:	480e      	ldr	r0, [pc, #56]	@ (800193c <BSP_MOTION_SENSOR_GetAxes+0xc0>)
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	440b      	add	r3, r1
 800190e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	490a      	ldr	r1, [pc, #40]	@ (8001940 <BSP_MOTION_SENSOR_GetAxes+0xc4>)
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4610      	mov	r0, r2
 8001920:	4798      	blx	r3
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	da02      	bge.n	800192e <BSP_MOTION_SENSOR_GetAxes+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001928:	f06f 0304 	mvn.w	r3, #4
 800192c:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 800192e:	697b      	ldr	r3, [r7, #20]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000e44 	.word	0x20000e44
 800193c:	20000e5c 	.word	0x20000e5c
 8001940:	20000e4c 	.word	0x20000e4c

08001944 <BSP_MOTION_SENSOR_GetSensitivity>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Sensitivity Pointer to sensitivity.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetSensitivity(uint32_t Instance, uint32_t Function, float_t *Sensitivity)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Sensitivity == NULL))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d802      	bhi.n	8001960 <BSP_MOTION_SENSOR_GetSensitivity+0x1c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d103      	bne.n	8001968 <BSP_MOTION_SENSOR_GetSensitivity+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001960:	f06f 0301 	mvn.w	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e046      	b.n	80019f6 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d108      	bne.n	8001980 <BSP_MOTION_SENSOR_GetSensitivity+0x3c>
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <BSP_MOTION_SENSOR_GetSensitivity+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001978:	f06f 030a 	mvn.w	r3, #10
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e03a      	b.n	80019f6 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d108      	bne.n	8001998 <BSP_MOTION_SENSOR_GetSensitivity+0x54>
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <BSP_MOTION_SENSOR_GetSensitivity+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001990:	f06f 030a 	mvn.w	r3, #10
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e02e      	b.n	80019f6 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001998:	4a19      	ldr	r2, [pc, #100]	@ (8001a00 <BSP_MOTION_SENSOR_GetSensitivity+0xbc>)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d103      	bne.n	80019b0 <BSP_MOTION_SENSOR_GetSensitivity+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e022      	b.n	80019f6 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else
  {
    /* Get the motion sensor sensitivity */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d006      	beq.n	80019c4 <BSP_MOTION_SENSOR_GetSensitivity+0x80>
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d101      	bne.n	80019c0 <BSP_MOTION_SENSOR_GetSensitivity+0x7c>
 80019bc:	2301      	movs	r3, #1
 80019be:	e002      	b.n	80019c6 <BSP_MOTION_SENSOR_GetSensitivity+0x82>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e000      	b.n	80019c6 <BSP_MOTION_SENSOR_GetSensitivity+0x82>
 80019c4:	2300      	movs	r3, #0
 80019c6:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetSensitivity(Motion_Sensor_CompObj[Instance], Sensitivity) < 0)
 80019c8:	7cf9      	ldrb	r1, [r7, #19]
 80019ca:	480e      	ldr	r0, [pc, #56]	@ (8001a04 <BSP_MOTION_SENSOR_GetSensitivity+0xc0>)
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	490a      	ldr	r1, [pc, #40]	@ (8001a08 <BSP_MOTION_SENSOR_GetSensitivity+0xc4>)
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	4610      	mov	r0, r2
 80019e8:	4798      	blx	r3
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	da02      	bge.n	80019f6 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80019f0:	f06f 0304 	mvn.w	r3, #4
 80019f4:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 80019f6:	697b      	ldr	r3, [r7, #20]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000e44 	.word	0x20000e44
 8001a04:	20000e5c 	.word	0x20000e5c
 8001a08:	20000e4c 	.word	0x20000e4c

08001a0c <BSP_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Pointer to output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Odr == NULL))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d802      	bhi.n	8001a28 <BSP_MOTION_SENSOR_GetOutputDataRate+0x1c>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d103      	bne.n	8001a30 <BSP_MOTION_SENSOR_GetOutputDataRate+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001a28:	f06f 0301 	mvn.w	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e046      	b.n	8001abe <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d108      	bne.n	8001a48 <BSP_MOTION_SENSOR_GetOutputDataRate+0x3c>
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <BSP_MOTION_SENSOR_GetOutputDataRate+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001a40:	f06f 030a 	mvn.w	r3, #10
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e03a      	b.n	8001abe <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d108      	bne.n	8001a60 <BSP_MOTION_SENSOR_GetOutputDataRate+0x54>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <BSP_MOTION_SENSOR_GetOutputDataRate+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001a58:	f06f 030a 	mvn.w	r3, #10
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e02e      	b.n	8001abe <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001a60:	4a19      	ldr	r2, [pc, #100]	@ (8001ac8 <BSP_MOTION_SENSOR_GetOutputDataRate+0xbc>)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d103      	bne.n	8001a78 <BSP_MOTION_SENSOR_GetOutputDataRate+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	e022      	b.n	8001abe <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else
  {
    /* Get the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d006      	beq.n	8001a8c <BSP_MOTION_SENSOR_GetOutputDataRate+0x80>
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d101      	bne.n	8001a88 <BSP_MOTION_SENSOR_GetOutputDataRate+0x7c>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e002      	b.n	8001a8e <BSP_MOTION_SENSOR_GetOutputDataRate+0x82>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e000      	b.n	8001a8e <BSP_MOTION_SENSOR_GetOutputDataRate+0x82>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 8001a90:	7cf9      	ldrb	r1, [r7, #19]
 8001a92:	480e      	ldr	r0, [pc, #56]	@ (8001acc <BSP_MOTION_SENSOR_GetOutputDataRate+0xc0>)
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	490a      	ldr	r1, [pc, #40]	@ (8001ad0 <BSP_MOTION_SENSOR_GetOutputDataRate+0xc4>)
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4798      	blx	r3
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	da02      	bge.n	8001abe <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001ab8:	f06f 0304 	mvn.w	r3, #4
 8001abc:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001abe:	697b      	ldr	r3, [r7, #20]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000e44 	.word	0x20000e44
 8001acc:	20000e5c 	.word	0x20000e5c
 8001ad0:	20000e4c 	.word	0x20000e4c

08001ad4 <BSP_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d903      	bls.n	8001af4 <BSP_MOTION_SENSOR_SetOutputDataRate+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001aec:	f06f 0301 	mvn.w	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e047      	b.n	8001b84 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d108      	bne.n	8001b0c <BSP_MOTION_SENSOR_SetOutputDataRate+0x38>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <BSP_MOTION_SENSOR_SetOutputDataRate+0x38>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001b04:	f06f 030a 	mvn.w	r3, #10
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	e03b      	b.n	8001b84 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d108      	bne.n	8001b24 <BSP_MOTION_SENSOR_SetOutputDataRate+0x50>
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <BSP_MOTION_SENSOR_SetOutputDataRate+0x50>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001b1c:	f06f 030a 	mvn.w	r3, #10
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e02f      	b.n	8001b84 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001b24:	4a1a      	ldr	r2, [pc, #104]	@ (8001b90 <BSP_MOTION_SENSOR_SetOutputDataRate+0xbc>)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d103      	bne.n	8001b3c <BSP_MOTION_SENSOR_SetOutputDataRate+0x68>
  {
    status = BSP_ERROR_NO_INIT;
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e023      	b.n	8001b84 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else
  {
    /* Set the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d006      	beq.n	8001b50 <BSP_MOTION_SENSOR_SetOutputDataRate+0x7c>
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d101      	bne.n	8001b4c <BSP_MOTION_SENSOR_SetOutputDataRate+0x78>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e002      	b.n	8001b52 <BSP_MOTION_SENSOR_SetOutputDataRate+0x7e>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e000      	b.n	8001b52 <BSP_MOTION_SENSOR_SetOutputDataRate+0x7e>
 8001b50:	2300      	movs	r3, #0
 8001b52:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->SetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 8001b54:	7cf9      	ldrb	r1, [r7, #19]
 8001b56:	480f      	ldr	r0, [pc, #60]	@ (8001b94 <BSP_MOTION_SENSOR_SetOutputDataRate+0xc0>)
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	440b      	add	r3, r1
 8001b62:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	490b      	ldr	r1, [pc, #44]	@ (8001b98 <BSP_MOTION_SENSOR_SetOutputDataRate+0xc4>)
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b70:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b74:	4610      	mov	r0, r2
 8001b76:	4798      	blx	r3
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	da02      	bge.n	8001b84 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001b7e:	f06f 0304 	mvn.w	r3, #4
 8001b82:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001b84:	697b      	ldr	r3, [r7, #20]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000e44 	.word	0x20000e44
 8001b94:	20000e5c 	.word	0x20000e5c
 8001b98:	20000e4c 	.word	0x20000e4c

08001b9c <BSP_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Pointer to full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Fullscale == NULL))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d802      	bhi.n	8001bb8 <BSP_MOTION_SENSOR_GetFullScale+0x1c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d103      	bne.n	8001bc0 <BSP_MOTION_SENSOR_GetFullScale+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001bb8:	f06f 0301 	mvn.w	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e046      	b.n	8001c4e <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d108      	bne.n	8001bd8 <BSP_MOTION_SENSOR_GetFullScale+0x3c>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <BSP_MOTION_SENSOR_GetFullScale+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001bd0:	f06f 030a 	mvn.w	r3, #10
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e03a      	b.n	8001c4e <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d108      	bne.n	8001bf0 <BSP_MOTION_SENSOR_GetFullScale+0x54>
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <BSP_MOTION_SENSOR_GetFullScale+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001be8:	f06f 030a 	mvn.w	r3, #10
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e02e      	b.n	8001c4e <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001bf0:	4a19      	ldr	r2, [pc, #100]	@ (8001c58 <BSP_MOTION_SENSOR_GetFullScale+0xbc>)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d103      	bne.n	8001c08 <BSP_MOTION_SENSOR_GetFullScale+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	e022      	b.n	8001c4e <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else
  {
    /* Get the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d006      	beq.n	8001c1c <BSP_MOTION_SENSOR_GetFullScale+0x80>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d101      	bne.n	8001c18 <BSP_MOTION_SENSOR_GetFullScale+0x7c>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e002      	b.n	8001c1e <BSP_MOTION_SENSOR_GetFullScale+0x82>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e000      	b.n	8001c1e <BSP_MOTION_SENSOR_GetFullScale+0x82>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 8001c20:	7cf9      	ldrb	r1, [r7, #19]
 8001c22:	480e      	ldr	r0, [pc, #56]	@ (8001c5c <BSP_MOTION_SENSOR_GetFullScale+0xc0>)
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	490a      	ldr	r1, [pc, #40]	@ (8001c60 <BSP_MOTION_SENSOR_GetFullScale+0xc4>)
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4798      	blx	r3
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	da02      	bge.n	8001c4e <BSP_MOTION_SENSOR_GetFullScale+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001c48:	f06f 0304 	mvn.w	r3, #4
 8001c4c:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001c4e:	697b      	ldr	r3, [r7, #20]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000e44 	.word	0x20000e44
 8001c5c:	20000e5c 	.word	0x20000e5c
 8001c60:	20000e4c 	.word	0x20000e4c

08001c64 <BSP_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d903      	bls.n	8001c82 <BSP_MOTION_SENSOR_SetFullScale+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001c7a:	f06f 0301 	mvn.w	r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	e04d      	b.n	8001d1e <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d108      	bne.n	8001c9a <BSP_MOTION_SENSOR_SetFullScale+0x36>
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <BSP_MOTION_SENSOR_SetFullScale+0x36>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001c92:	f06f 030a 	mvn.w	r3, #10
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e041      	b.n	8001d1e <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d108      	bne.n	8001cb2 <BSP_MOTION_SENSOR_SetFullScale+0x4e>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <BSP_MOTION_SENSOR_SetFullScale+0x4e>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001caa:	f06f 030a 	mvn.w	r3, #10
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	e035      	b.n	8001d1e <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d28 <BSP_MOTION_SENSOR_SetFullScale+0xc4>)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d103      	bne.n	8001cca <BSP_MOTION_SENSOR_SetFullScale+0x66>
  {
    status = BSP_ERROR_NO_INIT;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	e029      	b.n	8001d1e <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else
  {
    /* Set the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d006      	beq.n	8001cde <BSP_MOTION_SENSOR_SetFullScale+0x7a>
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d101      	bne.n	8001cda <BSP_MOTION_SENSOR_SetFullScale+0x76>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e002      	b.n	8001ce0 <BSP_MOTION_SENSOR_SetFullScale+0x7c>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e000      	b.n	8001ce0 <BSP_MOTION_SENSOR_SetFullScale+0x7c>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	74fb      	strb	r3, [r7, #19]
    if (index == MAGNETO_ID)
 8001ce2:	7cfb      	ldrb	r3, [r7, #19]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d103      	bne.n	8001cf0 <BSP_MOTION_SENSOR_SetFullScale+0x8c>
    {
      /* Feature not supported for Magneto */
      status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001ce8:	f06f 030a 	mvn.w	r3, #10
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	e016      	b.n	8001d1e <BSP_MOTION_SENSOR_SetFullScale+0xba>
    }
    else
    {
      if (Motion_Sensor_FuncDrv[Instance][index]->SetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 8001cf0:	7cf9      	ldrb	r1, [r7, #19]
 8001cf2:	480e      	ldr	r0, [pc, #56]	@ (8001d2c <BSP_MOTION_SENSOR_SetFullScale+0xc8>)
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	490a      	ldr	r1, [pc, #40]	@ (8001d30 <BSP_MOTION_SENSOR_SetFullScale+0xcc>)
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4798      	blx	r3
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	da02      	bge.n	8001d1e <BSP_MOTION_SENSOR_SetFullScale+0xba>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8001d18:	f06f 0304 	mvn.w	r3, #4
 8001d1c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return status;
 8001d1e:	697b      	ldr	r3, [r7, #20]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000e44 	.word	0x20000e44
 8001d2c:	20000e5c 	.word	0x20000e5c
 8001d30:	20000e4c 	.word	0x20000e4c

08001d34 <ISM330DHCX_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status.
  */
static int32_t ISM330DHCX_Probe(uint32_t Functions)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08c      	sub	sp, #48	@ 0x30
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ISM330DHCX_IO_t            IOCtx;
  uint8_t                 ism330dlc_id;
  static ISM330DHCX_Object_t ISM330DHCX_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = ISM330DHCX_I2C_BUS;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = ISM330DHCX_I2C_ADD_H;
 8001d44:	23d7      	movs	r3, #215	@ 0xd7
 8001d46:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8001d48:	4b29      	ldr	r3, [pc, #164]	@ (8001df0 <ISM330DHCX_Probe+0xbc>)
 8001d4a:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8001d4c:	4b29      	ldr	r3, [pc, #164]	@ (8001df4 <ISM330DHCX_Probe+0xc0>)
 8001d4e:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8001d50:	4b29      	ldr	r3, [pc, #164]	@ (8001df8 <ISM330DHCX_Probe+0xc4>)
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8001d54:	4b29      	ldr	r3, [pc, #164]	@ (8001dfc <ISM330DHCX_Probe+0xc8>)
 8001d56:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 8001d58:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <ISM330DHCX_Probe+0xcc>)
 8001d5a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Register Component Bus IO operations */
  if (ISM330DHCX_RegisterBusIO(&ISM330DHCX_Obj, &IOCtx) != ISM330DHCX_OK)
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	4619      	mov	r1, r3
 8001d62:	4828      	ldr	r0, [pc, #160]	@ (8001e04 <ISM330DHCX_Probe+0xd0>)
 8001d64:	f000 fd08 	bl	8002778 <ISM330DHCX_RegisterBusIO>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <ISM330DHCX_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8001d6e:	f06f 0307 	mvn.w	r3, #7
 8001d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d74:	e037      	b.n	8001de6 <ISM330DHCX_Probe+0xb2>
  }
  /* Read the sensor ID */
  else if (ISM330DHCX_ReadID(&ISM330DHCX_Obj, &ism330dlc_id) != ISM330DHCX_OK)
 8001d76:	f107 030f 	add.w	r3, r7, #15
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4821      	ldr	r0, [pc, #132]	@ (8001e04 <ISM330DHCX_Probe+0xd0>)
 8001d7e:	f000 fe15 	bl	80029ac <ISM330DHCX_ReadID>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <ISM330DHCX_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8001d88:	f06f 0304 	mvn.w	r3, #4
 8001d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d8e:	e02a      	b.n	8001de6 <ISM330DHCX_Probe+0xb2>
  }
  /* Check if the returned sensor ID is correct */
  else if (ism330dlc_id != ISM330DHCX_ID)
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	2b6b      	cmp	r3, #107	@ 0x6b
 8001d94:	d003      	beq.n	8001d9e <ISM330DHCX_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8001d96:	f06f 0306 	mvn.w	r3, #6
 8001d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d9c:	e023      	b.n	8001de6 <ISM330DHCX_Probe+0xb2>
  }
  else
  {
    Motion_Sensor_CompObj[0] = &ISM330DHCX_Obj;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <ISM330DHCX_Probe+0xd4>)
 8001da0:	4a18      	ldr	r2, [pc, #96]	@ (8001e04 <ISM330DHCX_Probe+0xd0>)
 8001da2:	601a      	str	r2, [r3, #0]
    Motion_Sensor_Drv[0]     = (MOTION_SENSOR_CommonDrv_t *) &ISM330DHCX_COMMON_Driver;
 8001da4:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <ISM330DHCX_Probe+0xd8>)
 8001da6:	4a1a      	ldr	r2, [pc, #104]	@ (8001e10 <ISM330DHCX_Probe+0xdc>)
 8001da8:	601a      	str	r2, [r3, #0]
    /* Initialize the component */
    if (Motion_Sensor_Drv[0]->Init(Motion_Sensor_CompObj[0]) < 0)
 8001daa:	4b18      	ldr	r3, [pc, #96]	@ (8001e0c <ISM330DHCX_Probe+0xd8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a15      	ldr	r2, [pc, #84]	@ (8001e08 <ISM330DHCX_Probe+0xd4>)
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	4610      	mov	r0, r2
 8001db6:	4798      	blx	r3
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	da03      	bge.n	8001dc6 <ISM330DHCX_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001dbe:	f06f 0304 	mvn.w	r3, #4
 8001dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dc4:	e00f      	b.n	8001de6 <ISM330DHCX_Probe+0xb2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_GYRO) != 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <ISM330DHCX_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[0][GYRO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_GYRO_Driver;
 8001dd0:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <ISM330DHCX_Probe+0xe0>)
 8001dd2:	4a11      	ldr	r2, [pc, #68]	@ (8001e18 <ISM330DHCX_Probe+0xe4>)
 8001dd4:	601a      	str	r2, [r3, #0]
      }
      if ((Functions & MOTION_ACCELERO) != 0U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <ISM330DHCX_Probe+0xb2>
      {
        Motion_Sensor_FuncDrv[0][ACCELERO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_ACC_Driver;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <ISM330DHCX_Probe+0xe0>)
 8001de2:	4a0e      	ldr	r2, [pc, #56]	@ (8001e1c <ISM330DHCX_Probe+0xe8>)
 8001de4:	605a      	str	r2, [r3, #4]
      }
    }
  }

  return status;
 8001de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3730      	adds	r7, #48	@ 0x30
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	08000cf9 	.word	0x08000cf9
 8001df4:	08000d6d 	.word	0x08000d6d
 8001df8:	08000e95 	.word	0x08000e95
 8001dfc:	08000e39 	.word	0x08000e39
 8001e00:	08000ef1 	.word	0x08000ef1
 8001e04:	20000e74 	.word	0x20000e74
 8001e08:	20000e4c 	.word	0x20000e4c
 8001e0c:	20000e54 	.word	0x20000e54
 8001e10:	20000040 	.word	0x20000040
 8001e14:	20000e5c 	.word	0x20000e5c
 8001e18:	20000074 	.word	0x20000074
 8001e1c:	20000050 	.word	0x20000050

08001e20 <IIS2MDC_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status.
  */
static int32_t IIS2MDC_Probe(uint32_t Functions)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	@ 0x30
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  IIS2MDC_IO_t            IOCtx;
  uint8_t                 iis2mdc_id;
  static IIS2MDC_Object_t IIS2MDC_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = IIS2MDC_I2C_BUS;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = IIS2MDC_I2C_ADD;
 8001e30:	233d      	movs	r3, #61	@ 0x3d
 8001e32:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8001e34:	4b25      	ldr	r3, [pc, #148]	@ (8001ecc <IIS2MDC_Probe+0xac>)
 8001e36:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8001e38:	4b25      	ldr	r3, [pc, #148]	@ (8001ed0 <IIS2MDC_Probe+0xb0>)
 8001e3a:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8001e3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <IIS2MDC_Probe+0xb4>)
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8001e40:	4b25      	ldr	r3, [pc, #148]	@ (8001ed8 <IIS2MDC_Probe+0xb8>)
 8001e42:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 8001e44:	4b25      	ldr	r3, [pc, #148]	@ (8001edc <IIS2MDC_Probe+0xbc>)
 8001e46:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Register Component Bus IO operations */
  if (IIS2MDC_RegisterBusIO(&IIS2MDC_Obj, &IOCtx) != IIS2MDC_OK)
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4824      	ldr	r0, [pc, #144]	@ (8001ee0 <IIS2MDC_Probe+0xc0>)
 8001e50:	f000 f852 	bl	8001ef8 <IIS2MDC_RegisterBusIO>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <IIS2MDC_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8001e5a:	f06f 0307 	mvn.w	r3, #7
 8001e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e60:	e02f      	b.n	8001ec2 <IIS2MDC_Probe+0xa2>
  }
  /* Read the sensor ID */
  else if (IIS2MDC_ReadID(&IIS2MDC_Obj, &iis2mdc_id) != IIS2MDC_OK)
 8001e62:	f107 030f 	add.w	r3, r7, #15
 8001e66:	4619      	mov	r1, r3
 8001e68:	481d      	ldr	r0, [pc, #116]	@ (8001ee0 <IIS2MDC_Probe+0xc0>)
 8001e6a:	f000 f8fc 	bl	8002066 <IIS2MDC_ReadID>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <IIS2MDC_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8001e74:	f06f 0304 	mvn.w	r3, #4
 8001e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e7a:	e022      	b.n	8001ec2 <IIS2MDC_Probe+0xa2>
  }
  /* Check if the returned sensor ID is correct */
  else if (iis2mdc_id != IIS2MDC_ID)
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	2b40      	cmp	r3, #64	@ 0x40
 8001e80:	d003      	beq.n	8001e8a <IIS2MDC_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8001e82:	f06f 0306 	mvn.w	r3, #6
 8001e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e88:	e01b      	b.n	8001ec2 <IIS2MDC_Probe+0xa2>
  }
  else
  {
    Motion_Sensor_CompObj[1] = &IIS2MDC_Obj;
 8001e8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ee4 <IIS2MDC_Probe+0xc4>)
 8001e8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ee0 <IIS2MDC_Probe+0xc0>)
 8001e8e:	605a      	str	r2, [r3, #4]
    Motion_Sensor_Drv[1]     = (MOTION_SENSOR_CommonDrv_t *) &IIS2MDC_COMMON_Driver;
 8001e90:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <IIS2MDC_Probe+0xc8>)
 8001e92:	4a16      	ldr	r2, [pc, #88]	@ (8001eec <IIS2MDC_Probe+0xcc>)
 8001e94:	605a      	str	r2, [r3, #4]
    /* Initialize the component */
    if (Motion_Sensor_Drv[1]->Init(Motion_Sensor_CompObj[1]) < 0)
 8001e96:	4b14      	ldr	r3, [pc, #80]	@ (8001ee8 <IIS2MDC_Probe+0xc8>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a11      	ldr	r2, [pc, #68]	@ (8001ee4 <IIS2MDC_Probe+0xc4>)
 8001e9e:	6852      	ldr	r2, [r2, #4]
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4798      	blx	r3
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	da03      	bge.n	8001eb2 <IIS2MDC_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001eaa:	f06f 0304 	mvn.w	r3, #4
 8001eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eb0:	e007      	b.n	8001ec2 <IIS2MDC_Probe+0xa2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_MAGNETO) != 0U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <IIS2MDC_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[1][MAGNETO_ID] = (MOTION_SENSOR_FuncDrv_t *) &IIS2MDC_MAG_Driver;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <IIS2MDC_Probe+0xd0>)
 8001ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef4 <IIS2MDC_Probe+0xd4>)
 8001ec0:	615a      	str	r2, [r3, #20]
      }
    }
  }

  return status;
 8001ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3730      	adds	r7, #48	@ 0x30
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	08000cf9 	.word	0x08000cf9
 8001ed0:	08000d6d 	.word	0x08000d6d
 8001ed4:	08000e95 	.word	0x08000e95
 8001ed8:	08000e39 	.word	0x08000e39
 8001edc:	08000ef1 	.word	0x08000ef1
 8001ee0:	20000ea4 	.word	0x20000ea4
 8001ee4:	20000e4c 	.word	0x20000e4c
 8001ee8:	20000e54 	.word	0x20000e54
 8001eec:	2000000c 	.word	0x2000000c
 8001ef0:	20000e5c 	.word	0x20000e5c
 8001ef4:	2000001c 	.word	0x2000001c

08001ef8 <IIS2MDC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d103      	bne.n	8001f14 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	e04b      	b.n	8001fac <IIS2MDC_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	7b1a      	ldrb	r2, [r3, #12]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb8 <IIS2MDC_RegisterBusIO+0xc0>)
 8001f50:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a19      	ldr	r2, [pc, #100]	@ (8001fbc <IIS2MDC_RegisterBusIO+0xc4>)
 8001f56:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init == NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d103      	bne.n	8001f6e <IIS2MDC_RegisterBusIO+0x76>
    {
      ret = IIS2MDC_ERROR;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	e01e      	b.n	8001fac <IIS2MDC_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4798      	blx	r3
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <IIS2MDC_RegisterBusIO+0x8a>
    {
      ret = IIS2MDC_ERROR;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	e014      	b.n	8001fac <IIS2MDC_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d010      	beq.n	8001fac <IIS2MDC_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10b      	bne.n	8001fac <IIS2MDC_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	331c      	adds	r3, #28
 8001f98:	2101      	movs	r1, #1
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fbc5 	bl	800272a <iis2mdc_i2c_interface_set>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <IIS2MDC_RegisterBusIO+0xb4>
          {
            ret = IIS2MDC_ERROR;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001faa:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001fac:	68fb      	ldr	r3, [r7, #12]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	080023b3 	.word	0x080023b3
 8001fbc:	08002415 	.word	0x08002415

08001fc0 <IIS2MDC_Init>:
 * @brief  Initialize the IIS2MDC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	331c      	adds	r3, #28
 8001fcc:	2101      	movs	r1, #1
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fb06 	bl	80025e0 <iis2mdc_block_data_update_set>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fde:	e028      	b.n	8002032 <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	331c      	adds	r3, #28
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fa75 	bl	80024d6 <iis2mdc_operating_mode_set>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ff6:	e01c      	b.n	8002032 <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	331c      	adds	r3, #28
 8001ffc:	2103      	movs	r1, #3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fa8f 	bl	8002522 <iis2mdc_data_rate_set>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800200e:	e010      	b.n	8002032 <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	331c      	adds	r3, #28
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fb61 	bl	80026de <iis2mdc_self_test_set>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 8002022:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002026:	e004      	b.n	8002032 <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return IIS2MDC_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <IIS2MDC_DeInit>:
 * @brief  Deinitialize the IIS2MDC magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_DeInit(IIS2MDC_Object_t *pObj)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f874 	bl	8002130 <IIS2MDC_MAG_Disable>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <IIS2MDC_DeInit+0x1a>
  {
    return IIS2MDC_ERROR;
 800204e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002052:	e004      	b.n	800205e <IIS2MDC_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return IIS2MDC_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <IIS2MDC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_ReadID(IIS2MDC_Object_t *pObj, uint8_t *Id)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	331c      	adds	r3, #28
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f000 fb20 	bl	80026bc <iis2mdc_device_id_get>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d002      	beq.n	8002088 <IIS2MDC_ReadID+0x22>
  {
    return IIS2MDC_ERROR;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002086:	e000      	b.n	800208a <IIS2MDC_ReadID+0x24>
  }

  return IIS2MDC_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <IIS2MDC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
 * @retval Component status
 */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	2200      	movs	r2, #0
 80020a8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2201      	movs	r2, #1
 80020ae:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2200      	movs	r2, #0
 80020b4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2200      	movs	r2, #0
 80020ba:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2232      	movs	r2, #50	@ 0x32
 80020c6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4a04      	ldr	r2, [pc, #16]	@ (80020ec <IIS2MDC_GetCapabilities+0x58>)
 80020dc:	619a      	str	r2, [r3, #24]
  return IIS2MDC_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	42c80000 	.word	0x42c80000

080020f0 <IIS2MDC_MAG_Enable>:
 * @brief Enable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	e010      	b.n	8002128 <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	331c      	adds	r3, #28
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f000 f9e2 	bl	80024d6 <iis2mdc_operating_mode_set>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 8002118:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800211c:	e004      	b.n	8002128 <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return IIS2MDC_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <IIS2MDC_MAG_Disable>:
 * @brief Disable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Disable(IIS2MDC_Object_t *pObj)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <IIS2MDC_MAG_Disable+0x16>
  {
    return IIS2MDC_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	e010      	b.n	8002168 <IIS2MDC_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	331c      	adds	r3, #28
 800214a:	2102      	movs	r1, #2
 800214c:	4618      	mov	r0, r3
 800214e:	f000 f9c2 	bl	80024d6 <iis2mdc_operating_mode_set>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <IIS2MDC_MAG_Disable+0x2e>
  {
    return IIS2MDC_ERROR;
 8002158:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800215c:	e004      	b.n	8002168 <IIS2MDC_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return IIS2MDC_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <IIS2MDC_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8002180:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <IIS2MDC_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetOutputDataRate(IIS2MDC_Object_t *pObj, float *Odr)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
  iis2mdc_odr_t odr_low_level;

  /* Get current output data rate. */
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	331c      	adds	r3, #28
 80021a2:	f107 020b 	add.w	r2, r7, #11
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 f9e1 	bl	8002570 <iis2mdc_data_rate_get>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <IIS2MDC_MAG_GetOutputDataRate+0x2a>
  {
    return IIS2MDC_ERROR;
 80021b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021b8:	e023      	b.n	8002202 <IIS2MDC_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80021ba:	7afb      	ldrb	r3, [r7, #11]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d81b      	bhi.n	80021f8 <IIS2MDC_MAG_GetOutputDataRate+0x68>
 80021c0:	a201      	add	r2, pc, #4	@ (adr r2, 80021c8 <IIS2MDC_MAG_GetOutputDataRate+0x38>)
 80021c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c6:	bf00      	nop
 80021c8:	080021d9 	.word	0x080021d9
 80021cc:	080021e1 	.word	0x080021e1
 80021d0:	080021e9 	.word	0x080021e9
 80021d4:	080021f1 	.word	0x080021f1
  {
    case IIS2MDC_ODR_10Hz:
      *Odr = 10.0f;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4a0c      	ldr	r2, [pc, #48]	@ (800220c <IIS2MDC_MAG_GetOutputDataRate+0x7c>)
 80021dc:	601a      	str	r2, [r3, #0]
      break;
 80021de:	e00f      	b.n	8002200 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_20Hz:
      *Odr = 20.0f;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002210 <IIS2MDC_MAG_GetOutputDataRate+0x80>)
 80021e4:	601a      	str	r2, [r3, #0]
      break;
 80021e6:	e00b      	b.n	8002200 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_50Hz:
      *Odr = 50.0f;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002214 <IIS2MDC_MAG_GetOutputDataRate+0x84>)
 80021ec:	601a      	str	r2, [r3, #0]
      break;
 80021ee:	e007      	b.n	8002200 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_100Hz:
      *Odr = 100.0f;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4a09      	ldr	r2, [pc, #36]	@ (8002218 <IIS2MDC_MAG_GetOutputDataRate+0x88>)
 80021f4:	601a      	str	r2, [r3, #0]
      break;
 80021f6:	e003      	b.n	8002200 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    default:
      ret = IIS2MDC_ERROR;
 80021f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021fc:	60fb      	str	r3, [r7, #12]
      break;
 80021fe:	bf00      	nop
  }

  return ret;
 8002200:	68fb      	ldr	r3, [r7, #12]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	41200000 	.word	0x41200000
 8002210:	41a00000 	.word	0x41a00000
 8002214:	42480000 	.word	0x42480000
 8002218:	42c80000 	.word	0x42c80000

0800221c <IIS2MDC_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetOutputDataRate(IIS2MDC_Object_t *pObj, float Odr)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	ed87 0a00 	vstr	s0, [r7]
  iis2mdc_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8002228:	edd7 7a00 	vldr	s15, [r7]
 800222c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002230:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002238:	d801      	bhi.n	800223e <IIS2MDC_MAG_SetOutputDataRate+0x22>
 800223a:	2300      	movs	r3, #0
 800223c:	e016      	b.n	800226c <IIS2MDC_MAG_SetOutputDataRate+0x50>
 800223e:	edd7 7a00 	vldr	s15, [r7]
 8002242:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800224a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224e:	d801      	bhi.n	8002254 <IIS2MDC_MAG_SetOutputDataRate+0x38>
 8002250:	2301      	movs	r3, #1
 8002252:	e00b      	b.n	800226c <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8002254:	edd7 7a00 	vldr	s15, [r7]
 8002258:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002294 <IIS2MDC_MAG_SetOutputDataRate+0x78>
 800225c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002264:	d801      	bhi.n	800226a <IIS2MDC_MAG_SetOutputDataRate+0x4e>
 8002266:	2302      	movs	r3, #2
 8002268:	e000      	b.n	800226c <IIS2MDC_MAG_SetOutputDataRate+0x50>
 800226a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
 800226c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? IIS2MDC_ODR_50Hz
            :                    IIS2MDC_ODR_100Hz;

  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	331c      	adds	r3, #28
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f953 	bl	8002522 <iis2mdc_data_rate_set>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <IIS2MDC_MAG_SetOutputDataRate+0x6c>
  {
    return IIS2MDC_ERROR;
 8002282:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002286:	e000      	b.n	800228a <IIS2MDC_MAG_SetOutputDataRate+0x6e>
  }

  return IIS2MDC_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	42480000 	.word	0x42480000

08002298 <IIS2MDC_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *FullScale = 50;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2232      	movs	r2, #50	@ 0x32
 80022a6:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <IIS2MDC_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <IIS2MDC_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	331c      	adds	r3, #28
 80022dc:	f107 0208 	add.w	r2, r7, #8
 80022e0:	4611      	mov	r1, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f9a2 	bl	800262c <iis2mdc_magnetic_raw_get>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <IIS2MDC_MAG_GetAxesRaw+0x26>
  {
    return IIS2MDC_ERROR;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022f2:	e00c      	b.n	800230e <IIS2MDC_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80022f4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80022fc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002304:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	809a      	strh	r2, [r3, #4]

  return IIS2MDC_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <IIS2MDC_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	331c      	adds	r3, #28
 8002324:	f107 0210 	add.w	r2, r7, #16
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f97e 	bl	800262c <iis2mdc_magnetic_raw_get>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 8002336:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800233a:	e036      	b.n	80023aa <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	4619      	mov	r1, r3
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ff14 	bl	8002170 <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002348:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800234c:	ee07 3a90 	vmov	s15, r3
 8002350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002354:	edd7 7a03 	vldr	s15, [r7, #12]
 8002358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002360:	ee17 2a90 	vmov	r2, s15
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002368:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800236c:	ee07 3a90 	vmov	s15, r3
 8002370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002374:	edd7 7a03 	vldr	s15, [r7, #12]
 8002378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002380:	ee17 2a90 	vmov	r2, s15
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002388:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800238c:	ee07 3a90 	vmov	s15, r3
 8002390:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002394:	edd7 7a03 	vldr	s15, [r7, #12]
 8002398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a0:	ee17 2a90 	vmov	r2, s15
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80023b2:	b590      	push	{r4, r7, lr}
 80023b4:	b087      	sub	sp, #28
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	461a      	mov	r2, r3
 80023be:	460b      	mov	r3, r1
 80023c0:	72fb      	strb	r3, [r7, #11]
 80023c2:	4613      	mov	r3, r2
 80023c4:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10e      	bne.n	80023f0 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	695c      	ldr	r4, [r3, #20]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	7b1b      	ldrb	r3, [r3, #12]
 80023da:	4618      	mov	r0, r3
 80023dc:	7afb      	ldrb	r3, [r7, #11]
 80023de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	4619      	mov	r1, r3
 80023e6:	893b      	ldrh	r3, [r7, #8]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	47a0      	blx	r4
 80023ec:	4603      	mov	r3, r0
 80023ee:	e00d      	b.n	800240c <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	695c      	ldr	r4, [r3, #20]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	7b1b      	ldrb	r3, [r3, #12]
 80023f8:	4618      	mov	r0, r3
 80023fa:	7afb      	ldrb	r3, [r7, #11]
 80023fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002400:	b2db      	uxtb	r3, r3
 8002402:	4619      	mov	r1, r3
 8002404:	893b      	ldrh	r3, [r7, #8]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	47a0      	blx	r4
 800240a:	4603      	mov	r3, r0
  }
}
 800240c:	4618      	mov	r0, r3
 800240e:	371c      	adds	r7, #28
 8002410:	46bd      	mov	sp, r7
 8002412:	bd90      	pop	{r4, r7, pc}

08002414 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	461a      	mov	r2, r3
 8002420:	460b      	mov	r3, r1
 8002422:	72fb      	strb	r3, [r7, #11]
 8002424:	4613      	mov	r3, r2
 8002426:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10e      	bne.n	8002452 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	691c      	ldr	r4, [r3, #16]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	7b1b      	ldrb	r3, [r3, #12]
 800243c:	4618      	mov	r0, r3
 800243e:	7afb      	ldrb	r3, [r7, #11]
 8002440:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002444:	b2db      	uxtb	r3, r3
 8002446:	4619      	mov	r1, r3
 8002448:	893b      	ldrh	r3, [r7, #8]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	47a0      	blx	r4
 800244e:	4603      	mov	r3, r0
 8002450:	e00d      	b.n	800246e <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	691c      	ldr	r4, [r3, #16]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	7b1b      	ldrb	r3, [r3, #12]
 800245a:	4618      	mov	r0, r3
 800245c:	7afb      	ldrb	r3, [r7, #11]
 800245e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4619      	mov	r1, r3
 8002466:	893b      	ldrh	r3, [r7, #8]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	47a0      	blx	r4
 800246c:	4603      	mov	r3, r0
  }
}
 800246e:	4618      	mov	r0, r3
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	bd90      	pop	{r4, r7, pc}

08002476 <iis2mdc_read_reg>:
  *
  */
int32_t iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002476:	b590      	push	{r4, r7, lr}
 8002478:	b087      	sub	sp, #28
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	461a      	mov	r2, r3
 8002482:	460b      	mov	r3, r1
 8002484:	72fb      	strb	r3, [r7, #11]
 8002486:	4613      	mov	r3, r2
 8002488:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	685c      	ldr	r4, [r3, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6898      	ldr	r0, [r3, #8]
 8002492:	893b      	ldrh	r3, [r7, #8]
 8002494:	7af9      	ldrb	r1, [r7, #11]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	47a0      	blx	r4
 800249a:	6178      	str	r0, [r7, #20]
  return ret;
 800249c:	697b      	ldr	r3, [r7, #20]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	371c      	adds	r7, #28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd90      	pop	{r4, r7, pc}

080024a6 <iis2mdc_write_reg>:
  *
  */
int32_t iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80024a6:	b590      	push	{r4, r7, lr}
 80024a8:	b087      	sub	sp, #28
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	461a      	mov	r2, r3
 80024b2:	460b      	mov	r3, r1
 80024b4:	72fb      	strb	r3, [r7, #11]
 80024b6:	4613      	mov	r3, r2
 80024b8:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681c      	ldr	r4, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6898      	ldr	r0, [r3, #8]
 80024c2:	893b      	ldrh	r3, [r7, #8]
 80024c4:	7af9      	ldrb	r1, [r7, #11]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	47a0      	blx	r4
 80024ca:	6178      	str	r0, [r7, #20]
  return ret;
 80024cc:	697b      	ldr	r3, [r7, #20]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd90      	pop	{r4, r7, pc}

080024d6 <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80024e2:	f107 0208 	add.w	r2, r7, #8
 80024e6:	2301      	movs	r3, #1
 80024e8:	2160      	movs	r1, #96	@ 0x60
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff ffc3 	bl	8002476 <iis2mdc_read_reg>
 80024f0:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10f      	bne.n	8002518 <iis2mdc_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	7a3b      	ldrb	r3, [r7, #8]
 8002502:	f362 0301 	bfi	r3, r2, #0, #2
 8002506:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002508:	f107 0208 	add.w	r2, r7, #8
 800250c:	2301      	movs	r3, #1
 800250e:	2160      	movs	r1, #96	@ 0x60
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ffc8 	bl	80024a6 <iis2mdc_write_reg>
 8002516:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002518:	68fb      	ldr	r3, [r7, #12]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800252e:	f107 0208 	add.w	r2, r7, #8
 8002532:	2301      	movs	r3, #1
 8002534:	2160      	movs	r1, #96	@ 0x60
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ff9d 	bl	8002476 <iis2mdc_read_reg>
 800253c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10f      	bne.n	8002564 <iis2mdc_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	b2da      	uxtb	r2, r3
 800254c:	7a3b      	ldrb	r3, [r7, #8]
 800254e:	f362 0383 	bfi	r3, r2, #2, #2
 8002552:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002554:	f107 0208 	add.w	r2, r7, #8
 8002558:	2301      	movs	r3, #1
 800255a:	2160      	movs	r1, #96	@ 0x60
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ffa2 	bl	80024a6 <iis2mdc_write_reg>
 8002562:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002564:	68fb      	ldr	r3, [r7, #12]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800257a:	f107 0208 	add.w	r2, r7, #8
 800257e:	2301      	movs	r3, #1
 8002580:	2160      	movs	r1, #96	@ 0x60
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ff77 	bl	8002476 <iis2mdc_read_reg>
 8002588:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 800258a:	7a3b      	ldrb	r3, [r7, #8]
 800258c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b03      	cmp	r3, #3
 8002594:	d81a      	bhi.n	80025cc <iis2mdc_data_rate_get+0x5c>
 8002596:	a201      	add	r2, pc, #4	@ (adr r2, 800259c <iis2mdc_data_rate_get+0x2c>)
 8002598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259c:	080025ad 	.word	0x080025ad
 80025a0:	080025b5 	.word	0x080025b5
 80025a4:	080025bd 	.word	0x080025bd
 80025a8:	080025c5 	.word	0x080025c5
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
      break;
 80025b2:	e00f      	b.n	80025d4 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_20Hz:
      *val = IIS2MDC_ODR_20Hz;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
      break;
 80025ba:	e00b      	b.n	80025d4 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_50Hz:
      *val = IIS2MDC_ODR_50Hz;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2202      	movs	r2, #2
 80025c0:	701a      	strb	r2, [r3, #0]
      break;
 80025c2:	e007      	b.n	80025d4 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_100Hz:
      *val = IIS2MDC_ODR_100Hz;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2203      	movs	r2, #3
 80025c8:	701a      	strb	r2, [r3, #0]
      break;
 80025ca:	e003      	b.n	80025d4 <iis2mdc_data_rate_get+0x64>

    default:
      *val = IIS2MDC_ODR_10Hz;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2200      	movs	r2, #0
 80025d0:	701a      	strb	r2, [r3, #0]
      break;
 80025d2:	bf00      	nop
  }

  return ret;
 80025d4:	68fb      	ldr	r3, [r7, #12]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop

080025e0 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80025ec:	f107 0208 	add.w	r2, r7, #8
 80025f0:	2301      	movs	r3, #1
 80025f2:	2162      	movs	r1, #98	@ 0x62
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff3e 	bl	8002476 <iis2mdc_read_reg>
 80025fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10f      	bne.n	8002622 <iis2mdc_block_data_update_set+0x42>
    reg.bdu = val;
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	b2da      	uxtb	r2, r3
 800260a:	7a3b      	ldrb	r3, [r7, #8]
 800260c:	f362 1304 	bfi	r3, r2, #4, #1
 8002610:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8002612:	f107 0208 	add.w	r2, r7, #8
 8002616:	2301      	movs	r3, #1
 8002618:	2162      	movs	r1, #98	@ 0x62
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ff43 	bl	80024a6 <iis2mdc_write_reg>
 8002620:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 8002636:	f107 020c 	add.w	r2, r7, #12
 800263a:	2306      	movs	r3, #6
 800263c:	2168      	movs	r1, #104	@ 0x68
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ff19 	bl	8002476 <iis2mdc_read_reg>
 8002644:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002646:	7b7b      	ldrb	r3, [r7, #13]
 8002648:	b21a      	sxth	r2, r3
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002654:	b29b      	uxth	r3, r3
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	b29b      	uxth	r3, r3
 800265a:	7b3a      	ldrb	r2, [r7, #12]
 800265c:	4413      	add	r3, r2
 800265e:	b29b      	uxth	r3, r3
 8002660:	b21a      	sxth	r2, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002666:	7bfa      	ldrb	r2, [r7, #15]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	3302      	adds	r3, #2
 800266c:	b212      	sxth	r2, r2
 800266e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	3302      	adds	r3, #2
 8002674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002678:	b29b      	uxth	r3, r3
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	b29b      	uxth	r3, r3
 800267e:	7bba      	ldrb	r2, [r7, #14]
 8002680:	4413      	add	r3, r2
 8002682:	b29a      	uxth	r2, r3
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	3302      	adds	r3, #2
 8002688:	b212      	sxth	r2, r2
 800268a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800268c:	7c7a      	ldrb	r2, [r7, #17]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	3304      	adds	r3, #4
 8002692:	b212      	sxth	r2, r2
 8002694:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	3304      	adds	r3, #4
 800269a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	7c3a      	ldrb	r2, [r7, #16]
 80026a6:	4413      	add	r3, r2
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	3304      	adds	r3, #4
 80026ae:	b212      	sxth	r2, r2
 80026b0:	801a      	strh	r2, [r3, #0]
  return ret;
 80026b2:	697b      	ldr	r3, [r7, #20]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 80026c6:	2301      	movs	r3, #1
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	214f      	movs	r1, #79	@ 0x4f
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff fed2 	bl	8002476 <iis2mdc_read_reg>
 80026d2:	60f8      	str	r0, [r7, #12]
  return ret;
 80026d4:	68fb      	ldr	r3, [r7, #12]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80026ea:	f107 0208 	add.w	r2, r7, #8
 80026ee:	2301      	movs	r3, #1
 80026f0:	2162      	movs	r1, #98	@ 0x62
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff febf 	bl	8002476 <iis2mdc_read_reg>
 80026f8:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10f      	bne.n	8002720 <iis2mdc_self_test_set+0x42>
    reg.self_test = val;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	b2da      	uxtb	r2, r3
 8002708:	7a3b      	ldrb	r3, [r7, #8]
 800270a:	f362 0341 	bfi	r3, r2, #1, #1
 800270e:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8002710:	f107 0208 	add.w	r2, r7, #8
 8002714:	2301      	movs	r3, #1
 8002716:	2162      	movs	r1, #98	@ 0x62
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff fec4 	bl	80024a6 <iis2mdc_write_reg>
 800271e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002720:	68fb      	ldr	r3, [r7, #12]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8002736:	f107 0208 	add.w	r2, r7, #8
 800273a:	2301      	movs	r3, #1
 800273c:	2162      	movs	r1, #98	@ 0x62
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff fe99 	bl	8002476 <iis2mdc_read_reg>
 8002744:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10f      	bne.n	800276c <iis2mdc_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	b2da      	uxtb	r2, r3
 8002754:	7a3b      	ldrb	r3, [r7, #8]
 8002756:	f362 1345 	bfi	r3, r2, #5, #1
 800275a:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800275c:	f107 0208 	add.w	r2, r7, #8
 8002760:	2301      	movs	r3, #1
 8002762:	2162      	movs	r1, #98	@ 0x62
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff fe9e 	bl	80024a6 <iis2mdc_write_reg>
 800276a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800276c:	68fb      	ldr	r3, [r7, #12]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <ISM330DHCX_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d103      	bne.n	8002794 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 800278c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	e04d      	b.n	8002830 <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	7b1a      	ldrb	r2, [r3, #12]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	699a      	ldr	r2, [r3, #24]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a1b      	ldr	r2, [pc, #108]	@ (800283c <ISM330DHCX_RegisterBusIO+0xc4>)
 80027d0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002840 <ISM330DHCX_RegisterBusIO+0xc8>)
 80027d6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d103      	bne.n	80027ee <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	e020      	b.n	8002830 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4798      	blx	r3
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	e016      	b.n	8002830 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d112      	bne.n	8002830 <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10d      	bne.n	8002830 <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8002814:	230c      	movs	r3, #12
 8002816:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 8002818:	7afb      	ldrb	r3, [r7, #11]
 800281a:	461a      	mov	r2, r3
 800281c:	2112      	movs	r1, #18
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fd61 	bl	80032e6 <ISM330DHCX_Write_Reg>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800282e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002830:	68fb      	ldr	r3, [r7, #12]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	08003755 	.word	0x08003755
 8002840:	0800378b 	.word	0x0800378b

08002844 <ISM330DHCX_Init>:
 * @brief  Initialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	331c      	adds	r3, #28
 8002850:	2101      	movs	r1, #1
 8002852:	4618      	mov	r0, r3
 8002854:	f001 fd12 	bl	800427c <ism330dhcx_device_conf_set>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 800285e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002862:	e078      	b.n	8002956 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	331c      	adds	r3, #28
 8002868:	2101      	movs	r1, #1
 800286a:	4618      	mov	r0, r3
 800286c:	f001 fd89 	bl	8004382 <ism330dhcx_auto_increment_set>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 8002876:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800287a:	e06c      	b.n	8002956 <ISM330DHCX_Init+0x112>
  }

    /* SW reset */
  if ( ism330dhcx_reset_set( &(pObj->Ctx), PROPERTY_ENABLE)!= ISM330DHCX_OK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	331c      	adds	r3, #28
 8002880:	2101      	movs	r1, #1
 8002882:	4618      	mov	r0, r3
 8002884:	f001 fd57 	bl	8004336 <ism330dhcx_reset_set>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002892:	e060      	b.n	8002956 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if ( ism330dhcx_auto_increment_set( &(pObj->Ctx), PROPERTY_ENABLE ) != ISM330DHCX_OK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	331c      	adds	r3, #28
 8002898:	2101      	movs	r1, #1
 800289a:	4618      	mov	r0, r3
 800289c:	f001 fd71 	bl	8004382 <ism330dhcx_auto_increment_set>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028aa:	e054      	b.n	8002956 <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	331c      	adds	r3, #28
 80028b0:	2101      	movs	r1, #1
 80028b2:	4618      	mov	r0, r3
 80028b4:	f001 fc2c 	bl	8004110 <ism330dhcx_block_data_update_set>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 80028be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028c2:	e048      	b.n	8002956 <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	331c      	adds	r3, #28
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f001 fd7f 	bl	80043ce <ism330dhcx_fifo_mode_set>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028da:	e03c      	b.n	8002956 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2204      	movs	r2, #4
 80028e0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	331c      	adds	r3, #28
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fff6 	bl	80038dc <ism330dhcx_xl_data_rate_set>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028fa:	e02c      	b.n	8002956 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	331c      	adds	r3, #28
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f000 ff8c 	bl	8003820 <ism330dhcx_xl_full_scale_set>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002912:	e020      	b.n	8002956 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2204      	movs	r2, #4
 8002918:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	331c      	adds	r3, #28
 8002920:	2100      	movs	r1, #0
 8002922:	4618      	mov	r0, r3
 8002924:	f001 fa26 	bl	8003d74 <ism330dhcx_gy_data_rate_set>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002932:	e010      	b.n	8002956 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	331c      	adds	r3, #28
 8002938:	210c      	movs	r1, #12
 800293a:	4618      	mov	r0, r3
 800293c:	f001 f9a2 	bl	8003c84 <ism330dhcx_gy_full_scale_set>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800294a:	e004      	b.n	8002956 <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return ISM330DHCX_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <ISM330DHCX_DeInit>:
 * @brief  Deinitialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f888 	bl	8002a7c <ISM330DHCX_ACC_Disable>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 8002972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002976:	e015      	b.n	80029a4 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fa92 	bl	8002ea2 <ISM330DHCX_GYRO_Disable>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002988:	e00c      	b.n	80029a4 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  pObj->is_initialized = 0;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return ISM330DHCX_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <ISM330DHCX_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	331c      	adds	r3, #28
 80029ba:	6839      	ldr	r1, [r7, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 fca9 	bl	8004314 <ism330dhcx_device_id_get>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029cc:	e000      	b.n	80029d0 <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <ISM330DHCX_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to ISM330DHCX sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2201      	movs	r2, #1
 80029ec:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2200      	movs	r2, #0
 80029f2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2200      	movs	r2, #0
 80029f8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002a00:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2210      	movs	r2, #16
 8002a06:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	4a07      	ldr	r2, [pc, #28]	@ (8002a30 <ISM330DHCX_GetCapabilities+0x58>)
 8002a12:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	4a06      	ldr	r2, [pc, #24]	@ (8002a30 <ISM330DHCX_GetCapabilities+0x58>)
 8002a18:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	45d05800 	.word	0x45d05800

08002a34 <ISM330DHCX_ACC_Enable>:
 * @brief  Enable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e014      	b.n	8002a74 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f103 021c 	add.w	r2, r3, #28
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8002a56:	4619      	mov	r1, r3
 8002a58:	4610      	mov	r0, r2
 8002a5a:	f000 ff3f 	bl	80038dc <ism330dhcx_xl_data_rate_set>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a68:	e004      	b.n	8002a74 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return ISM330DHCX_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <ISM330DHCX_ACC_Disable>:
 * @brief  Disable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e01f      	b.n	8002ad2 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f103 021c 	add.w	r2, r3, #28
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	332b      	adds	r3, #43	@ 0x2b
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	f001 f888 	bl	8003bb4 <ism330dhcx_xl_data_rate_get>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002aae:	e010      	b.n	8002ad2 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	331c      	adds	r3, #28
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 ff10 	bl	80038dc <ism330dhcx_xl_data_rate_set>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ac6:	e004      	b.n	8002ad2 <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  return ISM330DHCX_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <ISM330DHCX_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	331c      	adds	r3, #28
 8002aee:	f107 020b 	add.w	r2, r7, #11
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 feb9 	bl	800386c <ism330dhcx_xl_full_scale_get>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b04:	e023      	b.n	8002b4e <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8002b06:	7afb      	ldrb	r3, [r7, #11]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d81b      	bhi.n	8002b44 <ISM330DHCX_ACC_GetSensitivity+0x68>
 8002b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b14 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 8002b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b12:	bf00      	nop
 8002b14:	08002b25 	.word	0x08002b25
 8002b18:	08002b3d 	.word	0x08002b3d
 8002b1c:	08002b2d 	.word	0x08002b2d
 8002b20:	08002b35 	.word	0x08002b35
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	4a0c      	ldr	r2, [pc, #48]	@ (8002b58 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8002b28:	601a      	str	r2, [r3, #0]
      break;
 8002b2a:	e00f      	b.n	8002b4c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002b5c <ISM330DHCX_ACC_GetSensitivity+0x80>)
 8002b30:	601a      	str	r2, [r3, #0]
      break;
 8002b32:	e00b      	b.n	8002b4c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	4a0a      	ldr	r2, [pc, #40]	@ (8002b60 <ISM330DHCX_ACC_GetSensitivity+0x84>)
 8002b38:	601a      	str	r2, [r3, #0]
      break;
 8002b3a:	e007      	b.n	8002b4c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	4a09      	ldr	r2, [pc, #36]	@ (8002b64 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 8002b40:	601a      	str	r2, [r3, #0]
      break;
 8002b42:	e003      	b.n	8002b4c <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8002b44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b48:	60fb      	str	r3, [r7, #12]
      break;
 8002b4a:	bf00      	nop
  }

  return ret;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	3d79db23 	.word	0x3d79db23
 8002b5c:	3df9db23 	.word	0x3df9db23
 8002b60:	3e79db23 	.word	0x3e79db23
 8002b64:	3ef9db23 	.word	0x3ef9db23

08002b68 <ISM330DHCX_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	331c      	adds	r3, #28
 8002b7a:	f107 020b 	add.w	r2, r7, #11
 8002b7e:	4611      	mov	r1, r2
 8002b80:	4618      	mov	r0, r3
 8002b82:	f001 f817 	bl	8003bb4 <ism330dhcx_xl_data_rate_get>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002b8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b90:	e04e      	b.n	8002c30 <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8002b92:	7afb      	ldrb	r3, [r7, #11]
 8002b94:	2b0a      	cmp	r3, #10
 8002b96:	d846      	bhi.n	8002c26 <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 8002b98:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba0 <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 8002b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9e:	bf00      	nop
 8002ba0:	08002bcd 	.word	0x08002bcd
 8002ba4:	08002bd7 	.word	0x08002bd7
 8002ba8:	08002bdf 	.word	0x08002bdf
 8002bac:	08002be7 	.word	0x08002be7
 8002bb0:	08002bef 	.word	0x08002bef
 8002bb4:	08002bf7 	.word	0x08002bf7
 8002bb8:	08002bff 	.word	0x08002bff
 8002bbc:	08002c07 	.word	0x08002c07
 8002bc0:	08002c0f 	.word	0x08002c0f
 8002bc4:	08002c17 	.word	0x08002c17
 8002bc8:	08002c1f 	.word	0x08002c1f
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
      break;
 8002bd4:	e02b      	b.n	8002c2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	4a17      	ldr	r2, [pc, #92]	@ (8002c38 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 8002bda:	601a      	str	r2, [r3, #0]
      break;
 8002bdc:	e027      	b.n	8002c2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	4a16      	ldr	r2, [pc, #88]	@ (8002c3c <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 8002be2:	601a      	str	r2, [r3, #0]
      break;
 8002be4:	e023      	b.n	8002c2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	4a15      	ldr	r2, [pc, #84]	@ (8002c40 <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 8002bea:	601a      	str	r2, [r3, #0]
      break;
 8002bec:	e01f      	b.n	8002c2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	4a14      	ldr	r2, [pc, #80]	@ (8002c44 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 8002bf2:	601a      	str	r2, [r3, #0]
      break;
 8002bf4:	e01b      	b.n	8002c2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	4a13      	ldr	r2, [pc, #76]	@ (8002c48 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 8002bfa:	601a      	str	r2, [r3, #0]
      break;
 8002bfc:	e017      	b.n	8002c2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_417Hz:
      *Odr = 417.0f;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	4a12      	ldr	r2, [pc, #72]	@ (8002c4c <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 8002c02:	601a      	str	r2, [r3, #0]
      break;
 8002c04:	e013      	b.n	8002c2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	4a11      	ldr	r2, [pc, #68]	@ (8002c50 <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 8002c0a:	601a      	str	r2, [r3, #0]
      break;
 8002c0c:	e00f      	b.n	8002c2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	4a10      	ldr	r2, [pc, #64]	@ (8002c54 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 8002c12:	601a      	str	r2, [r3, #0]
      break;
 8002c14:	e00b      	b.n	8002c2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	4a0f      	ldr	r2, [pc, #60]	@ (8002c58 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 8002c1a:	601a      	str	r2, [r3, #0]
      break;
 8002c1c:	e007      	b.n	8002c2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	4a0e      	ldr	r2, [pc, #56]	@ (8002c5c <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 8002c22:	601a      	str	r2, [r3, #0]
      break;
 8002c24:	e003      	b.n	8002c2e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c2a:	60fb      	str	r3, [r7, #12]
      break;
 8002c2c:	bf00      	nop
  }

  return ret;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	41480000 	.word	0x41480000
 8002c3c:	41d00000 	.word	0x41d00000
 8002c40:	42500000 	.word	0x42500000
 8002c44:	42d00000 	.word	0x42d00000
 8002c48:	43500000 	.word	0x43500000
 8002c4c:	43d08000 	.word	0x43d08000
 8002c50:	44504000 	.word	0x44504000
 8002c54:	44d06000 	.word	0x44d06000
 8002c58:	45505000 	.word	0x45505000
 8002c5c:	45d05800 	.word	0x45d05800

08002c60 <ISM330DHCX_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d106      	bne.n	8002c84 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002c76:	ed97 0a00 	vldr	s0, [r7]
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fb4e 	bl	800331c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 8002c80:	4603      	mov	r3, r0
 8002c82:	e005      	b.n	8002c90 <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002c84:	ed97 0a00 	vldr	s0, [r7]
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fbd3 	bl	8003434 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 8002c8e:	4603      	mov	r3, r0
  }
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <ISM330DHCX_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	331c      	adds	r3, #28
 8002caa:	f107 020b 	add.w	r2, r7, #11
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fddb 	bl	800386c <ism330dhcx_xl_full_scale_get>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cc0:	e023      	b.n	8002d0a <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d81b      	bhi.n	8002d00 <ISM330DHCX_ACC_GetFullScale+0x68>
 8002cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd0 <ISM330DHCX_ACC_GetFullScale+0x38>)
 8002cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cce:	bf00      	nop
 8002cd0:	08002ce1 	.word	0x08002ce1
 8002cd4:	08002cf9 	.word	0x08002cf9
 8002cd8:	08002ce9 	.word	0x08002ce9
 8002cdc:	08002cf1 	.word	0x08002cf1
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	601a      	str	r2, [r3, #0]
      break;
 8002ce6:	e00f      	b.n	8002d08 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2204      	movs	r2, #4
 8002cec:	601a      	str	r2, [r3, #0]
      break;
 8002cee:	e00b      	b.n	8002d08 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	601a      	str	r2, [r3, #0]
      break;
 8002cf6:	e007      	b.n	8002d08 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2210      	movs	r2, #16
 8002cfc:	601a      	str	r2, [r3, #0]
      break;
 8002cfe:	e003      	b.n	8002d08 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8002d00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d04:	60fb      	str	r3, [r7, #12]
      break;
 8002d06:	bf00      	nop
  }

  return ret;
 8002d08:	68fb      	ldr	r3, [r7, #12]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop

08002d14 <ISM330DHCX_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	dd0b      	ble.n	8002d3c <ISM330DHCX_ACC_SetFullScale+0x28>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	dd06      	ble.n	8002d38 <ISM330DHCX_ACC_SetFullScale+0x24>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	dc01      	bgt.n	8002d34 <ISM330DHCX_ACC_SetFullScale+0x20>
 8002d30:	2303      	movs	r3, #3
 8002d32:	e004      	b.n	8002d3e <ISM330DHCX_ACC_SetFullScale+0x2a>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e002      	b.n	8002d3e <ISM330DHCX_ACC_SetFullScale+0x2a>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e000      	b.n	8002d3e <ISM330DHCX_ACC_SetFullScale+0x2a>
 8002d3c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 8002d3e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	331c      	adds	r3, #28
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fd69 	bl	8003820 <ism330dhcx_xl_full_scale_set>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 8002d54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d58:	e000      	b.n	8002d5c <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <ISM330DHCX_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	331c      	adds	r3, #28
 8002d72:	f107 0208 	add.w	r2, r7, #8
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f001 fa37 	bl	80041ec <ism330dhcx_acceleration_raw_get>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8002d84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d88:	e00c      	b.n	8002da4 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002d8a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002d92:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002d9a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <ISM330DHCX_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	331c      	adds	r3, #28
 8002dc0:	f107 0210 	add.w	r2, r7, #16
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f001 fa10 	bl	80041ec <ism330dhcx_acceleration_raw_get>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dd6:	e03c      	b.n	8002e52 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8002dd8:	f107 030c 	add.w	r3, r7, #12
 8002ddc:	4619      	mov	r1, r3
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff fe7c 	bl	8002adc <ISM330DHCX_ACC_GetSensitivity>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dee:	e030      	b.n	8002e52 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002df0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e08:	ee17 2a90 	vmov	r2, s15
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002e10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e14:	ee07 3a90 	vmov	s15, r3
 8002e18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e28:	ee17 2a90 	vmov	r2, s15
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002e30:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e34:	ee07 3a90 	vmov	s15, r3
 8002e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e48:	ee17 2a90 	vmov	r2, s15
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <ISM330DHCX_GYRO_Enable>:
 * @brief  Enable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e014      	b.n	8002e9a <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f103 021c 	add.w	r2, r3, #28
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f000 ff78 	bl	8003d74 <ism330dhcx_gy_data_rate_set>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e8e:	e004      	b.n	8002e9a <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return ISM330DHCX_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <ISM330DHCX_GYRO_Disable>:
 * @brief  Disable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e01f      	b.n	8002ef8 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f103 021c 	add.w	r2, r3, #28
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	332c      	adds	r3, #44	@ 0x2c
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f001 f8c1 	bl	800404c <ism330dhcx_gy_data_rate_get>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8002ed0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ed4:	e010      	b.n	8002ef8 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	331c      	adds	r3, #28
 8002eda:	2100      	movs	r1, #0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 ff49 	bl	8003d74 <ism330dhcx_gy_data_rate_set>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8002ee8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002eec:	e004      	b.n	8002ef8 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return ISM330DHCX_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <ISM330DHCX_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	331c      	adds	r3, #28
 8002f12:	f107 020b 	add.w	r2, r7, #11
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 fed9 	bl	8003cd0 <ism330dhcx_gy_full_scale_get>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f28:	e039      	b.n	8002f9e <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8002f2a:	7afb      	ldrb	r3, [r7, #11]
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	d831      	bhi.n	8002f94 <ISM330DHCX_GYRO_GetSensitivity+0x94>
 8002f30:	a201      	add	r2, pc, #4	@ (adr r2, 8002f38 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f75 	.word	0x08002f75
 8002f3c:	08002f95 	.word	0x08002f95
 8002f40:	08002f6d 	.word	0x08002f6d
 8002f44:	08002f95 	.word	0x08002f95
 8002f48:	08002f7d 	.word	0x08002f7d
 8002f4c:	08002f95 	.word	0x08002f95
 8002f50:	08002f95 	.word	0x08002f95
 8002f54:	08002f95 	.word	0x08002f95
 8002f58:	08002f85 	.word	0x08002f85
 8002f5c:	08002f95 	.word	0x08002f95
 8002f60:	08002f95 	.word	0x08002f95
 8002f64:	08002f95 	.word	0x08002f95
 8002f68:	08002f8d 	.word	0x08002f8d
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002fa8 <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 8002f70:	601a      	str	r2, [r3, #0]
      break;
 8002f72:	e013      	b.n	8002f9c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4a0d      	ldr	r2, [pc, #52]	@ (8002fac <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 8002f78:	601a      	str	r2, [r3, #0]
      break;
 8002f7a:	e00f      	b.n	8002f9c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb0 <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 8002f80:	601a      	str	r2, [r3, #0]
      break;
 8002f82:	e00b      	b.n	8002f9c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	4a0b      	ldr	r2, [pc, #44]	@ (8002fb4 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 8002f88:	601a      	str	r2, [r3, #0]
      break;
 8002f8a:	e007      	b.n	8002f9c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb8 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 8002f90:	601a      	str	r2, [r3, #0]
      break;
 8002f92:	e003      	b.n	8002f9c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 8002f94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f98:	60fb      	str	r3, [r7, #12]
      break;
 8002f9a:	bf00      	nop
  }

  return ret;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	408c0000 	.word	0x408c0000
 8002fac:	410c0000 	.word	0x410c0000
 8002fb0:	418c0000 	.word	0x418c0000
 8002fb4:	420c0000 	.word	0x420c0000
 8002fb8:	428c0000 	.word	0x428c0000

08002fbc <ISM330DHCX_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	331c      	adds	r3, #28
 8002fce:	f107 020b 	add.w	r2, r7, #11
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f001 f839 	bl	800404c <ism330dhcx_gy_data_rate_get>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002fe0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fe4:	e04e      	b.n	8003084 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8002fe6:	7afb      	ldrb	r3, [r7, #11]
 8002fe8:	2b0a      	cmp	r3, #10
 8002fea:	d846      	bhi.n	800307a <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 8002fec:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff4 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003021 	.word	0x08003021
 8002ff8:	0800302b 	.word	0x0800302b
 8002ffc:	08003033 	.word	0x08003033
 8003000:	0800303b 	.word	0x0800303b
 8003004:	08003043 	.word	0x08003043
 8003008:	0800304b 	.word	0x0800304b
 800300c:	08003053 	.word	0x08003053
 8003010:	0800305b 	.word	0x0800305b
 8003014:	08003063 	.word	0x08003063
 8003018:	0800306b 	.word	0x0800306b
 800301c:	08003073 	.word	0x08003073
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
      break;
 8003028:	e02b      	b.n	8003082 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	4a17      	ldr	r2, [pc, #92]	@ (800308c <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 800302e:	601a      	str	r2, [r3, #0]
      break;
 8003030:	e027      	b.n	8003082 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	4a16      	ldr	r2, [pc, #88]	@ (8003090 <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 8003036:	601a      	str	r2, [r3, #0]
      break;
 8003038:	e023      	b.n	8003082 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	4a15      	ldr	r2, [pc, #84]	@ (8003094 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 800303e:	601a      	str	r2, [r3, #0]
      break;
 8003040:	e01f      	b.n	8003082 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	4a14      	ldr	r2, [pc, #80]	@ (8003098 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 8003046:	601a      	str	r2, [r3, #0]
      break;
 8003048:	e01b      	b.n	8003082 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	4a13      	ldr	r2, [pc, #76]	@ (800309c <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 800304e:	601a      	str	r2, [r3, #0]
      break;
 8003050:	e017      	b.n	8003082 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_417Hz:
      *Odr = 417.0f;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	4a12      	ldr	r2, [pc, #72]	@ (80030a0 <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 8003056:	601a      	str	r2, [r3, #0]
      break;
 8003058:	e013      	b.n	8003082 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	4a11      	ldr	r2, [pc, #68]	@ (80030a4 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 800305e:	601a      	str	r2, [r3, #0]
      break;
 8003060:	e00f      	b.n	8003082 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	4a10      	ldr	r2, [pc, #64]	@ (80030a8 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 8003066:	601a      	str	r2, [r3, #0]
      break;
 8003068:	e00b      	b.n	8003082 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	4a0f      	ldr	r2, [pc, #60]	@ (80030ac <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 800306e:	601a      	str	r2, [r3, #0]
      break;
 8003070:	e007      	b.n	8003082 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	4a0e      	ldr	r2, [pc, #56]	@ (80030b0 <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 8003076:	601a      	str	r2, [r3, #0]
      break;
 8003078:	e003      	b.n	8003082 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 800307a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800307e:	60fb      	str	r3, [r7, #12]
      break;
 8003080:	bf00      	nop
  }

  return ret;
 8003082:	68fb      	ldr	r3, [r7, #12]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	41480000 	.word	0x41480000
 8003090:	41d00000 	.word	0x41d00000
 8003094:	42500000 	.word	0x42500000
 8003098:	42d00000 	.word	0x42d00000
 800309c:	43500000 	.word	0x43500000
 80030a0:	43d08000 	.word	0x43d08000
 80030a4:	44504000 	.word	0x44504000
 80030a8:	44d06000 	.word	0x44d06000
 80030ac:	45505000 	.word	0x45505000
 80030b0:	45d05800 	.word	0x45d05800

080030b4 <ISM330DHCX_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d106      	bne.n	80030d8 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80030ca:	ed97 0a00 	vldr	s0, [r7]
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fa32 	bl	8003538 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 80030d4:	4603      	mov	r3, r0
 80030d6:	e005      	b.n	80030e4 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80030d8:	ed97 0a00 	vldr	s0, [r7]
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fab7 	bl	8003650 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 80030e2:	4603      	mov	r3, r0
  }
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <ISM330DHCX_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	331c      	adds	r3, #28
 80030fe:	f107 020b 	add.w	r2, r7, #11
 8003102:	4611      	mov	r1, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f000 fde3 	bl	8003cd0 <ism330dhcx_gy_full_scale_get>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003110:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003114:	e03c      	b.n	8003190 <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 8003116:	7afb      	ldrb	r3, [r7, #11]
 8003118:	2b0c      	cmp	r3, #12
 800311a:	d834      	bhi.n	8003186 <ISM330DHCX_GYRO_GetFullScale+0x9a>
 800311c:	a201      	add	r2, pc, #4	@ (adr r2, 8003124 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003161 	.word	0x08003161
 8003128:	08003187 	.word	0x08003187
 800312c:	08003159 	.word	0x08003159
 8003130:	08003187 	.word	0x08003187
 8003134:	08003169 	.word	0x08003169
 8003138:	08003187 	.word	0x08003187
 800313c:	08003187 	.word	0x08003187
 8003140:	08003187 	.word	0x08003187
 8003144:	08003173 	.word	0x08003173
 8003148:	08003187 	.word	0x08003187
 800314c:	08003187 	.word	0x08003187
 8003150:	08003187 	.word	0x08003187
 8003154:	0800317d 	.word	0x0800317d
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	227d      	movs	r2, #125	@ 0x7d
 800315c:	601a      	str	r2, [r3, #0]
      break;
 800315e:	e016      	b.n	800318e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	22fa      	movs	r2, #250	@ 0xfa
 8003164:	601a      	str	r2, [r3, #0]
      break;
 8003166:	e012      	b.n	800318e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800316e:	601a      	str	r2, [r3, #0]
      break;
 8003170:	e00d      	b.n	800318e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003178:	601a      	str	r2, [r3, #0]
      break;
 800317a:	e008      	b.n	800318e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003182:	601a      	str	r2, [r3, #0]
      break;
 8003184:	e003      	b.n	800318e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 8003186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800318a:	60fb      	str	r3, [r7, #12]
      break;
 800318c:	bf00      	nop
  }

  return ret;
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <ISM330DHCX_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b7d      	cmp	r3, #125	@ 0x7d
 80031a6:	dd12      	ble.n	80031ce <ISM330DHCX_GYRO_SetFullScale+0x36>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2bfa      	cmp	r3, #250	@ 0xfa
 80031ac:	dd0d      	ble.n	80031ca <ISM330DHCX_GYRO_SetFullScale+0x32>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80031b4:	dd07      	ble.n	80031c6 <ISM330DHCX_GYRO_SetFullScale+0x2e>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031bc:	dc01      	bgt.n	80031c2 <ISM330DHCX_GYRO_SetFullScale+0x2a>
 80031be:	2308      	movs	r3, #8
 80031c0:	e006      	b.n	80031d0 <ISM330DHCX_GYRO_SetFullScale+0x38>
 80031c2:	230c      	movs	r3, #12
 80031c4:	e004      	b.n	80031d0 <ISM330DHCX_GYRO_SetFullScale+0x38>
 80031c6:	2304      	movs	r3, #4
 80031c8:	e002      	b.n	80031d0 <ISM330DHCX_GYRO_SetFullScale+0x38>
 80031ca:	2300      	movs	r3, #0
 80031cc:	e000      	b.n	80031d0 <ISM330DHCX_GYRO_SetFullScale+0x38>
 80031ce:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 80031d0:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	331c      	adds	r3, #28
 80031d6:	7bfa      	ldrb	r2, [r7, #15]
 80031d8:	4611      	mov	r1, r2
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fd52 	bl	8003c84 <ism330dhcx_gy_full_scale_set>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 80031e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031ea:	e000      	b.n	80031ee <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <ISM330DHCX_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	331c      	adds	r3, #28
 8003204:	f107 0208 	add.w	r2, r7, #8
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f000 ffa6 	bl	800415c <ism330dhcx_angular_rate_raw_get>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8003216:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800321a:	e00c      	b.n	8003236 <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800321c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003224:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800322c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <ISM330DHCX_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	331c      	adds	r3, #28
 800324c:	f107 0210 	add.w	r2, r7, #16
 8003250:	4611      	mov	r1, r2
 8003252:	4618      	mov	r0, r3
 8003254:	f000 ff82 	bl	800415c <ism330dhcx_angular_rate_raw_get>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 800325e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003262:	e03c      	b.n	80032de <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8003264:	f107 030c 	add.w	r3, r7, #12
 8003268:	4619      	mov	r1, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff fe48 	bl	8002f00 <ISM330DHCX_GYRO_GetSensitivity>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 8003276:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800327a:	e030      	b.n	80032de <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800327c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003280:	ee07 3a90 	vmov	s15, r3
 8003284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003288:	edd7 7a03 	vldr	s15, [r7, #12]
 800328c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003294:	ee17 2a90 	vmov	r2, s15
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800329c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80032a0:	ee07 3a90 	vmov	s15, r3
 80032a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80032ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032b4:	ee17 2a90 	vmov	r2, s15
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80032bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80032c0:	ee07 3a90 	vmov	s15, r3
 80032c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80032cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032d4:	ee17 2a90 	vmov	r2, s15
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <ISM330DHCX_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	70fb      	strb	r3, [r7, #3]
 80032f2:	4613      	mov	r3, r2
 80032f4:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f103 001c 	add.w	r0, r3, #28
 80032fc:	1cba      	adds	r2, r7, #2
 80032fe:	78f9      	ldrb	r1, [r7, #3]
 8003300:	2301      	movs	r3, #1
 8003302:	f000 fa75 	bl	80037f0 <ism330dhcx_write_reg>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 800330c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003310:	e000      	b.n	8003314 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003328:	edd7 7a00 	vldr	s15, [r7]
 800332c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003338:	d801      	bhi.n	800333e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 800333a:	2301      	movs	r3, #1
 800333c:	e058      	b.n	80033f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800333e:	edd7 7a00 	vldr	s15, [r7]
 8003342:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8003346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334e:	d801      	bhi.n	8003354 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003350:	2302      	movs	r3, #2
 8003352:	e04d      	b.n	80033f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003354:	edd7 7a00 	vldr	s15, [r7]
 8003358:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8003418 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 800335c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003364:	d801      	bhi.n	800336a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003366:	2303      	movs	r3, #3
 8003368:	e042      	b.n	80033f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800336a:	edd7 7a00 	vldr	s15, [r7]
 800336e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800341c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 8003372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337a:	d801      	bhi.n	8003380 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 800337c:	2304      	movs	r3, #4
 800337e:	e037      	b.n	80033f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003380:	edd7 7a00 	vldr	s15, [r7]
 8003384:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8003420 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 8003388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800338c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003390:	d801      	bhi.n	8003396 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003392:	2305      	movs	r3, #5
 8003394:	e02c      	b.n	80033f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003396:	edd7 7a00 	vldr	s15, [r7]
 800339a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003424 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 800339e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	d801      	bhi.n	80033ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 80033a8:	2306      	movs	r3, #6
 80033aa:	e021      	b.n	80033f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80033ac:	edd7 7a00 	vldr	s15, [r7]
 80033b0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003428 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80033b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033bc:	d801      	bhi.n	80033c2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80033be:	2307      	movs	r3, #7
 80033c0:	e016      	b.n	80033f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80033c2:	edd7 7a00 	vldr	s15, [r7]
 80033c6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800342c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 80033ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d2:	d801      	bhi.n	80033d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80033d4:	2308      	movs	r3, #8
 80033d6:	e00b      	b.n	80033f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80033d8:	edd7 7a00 	vldr	s15, [r7]
 80033dc:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003430 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 80033e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e8:	d801      	bhi.n	80033ee <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80033ea:	2309      	movs	r3, #9
 80033ec:	e000      	b.n	80033f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80033ee:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80033f0:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
          :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	331c      	adds	r3, #28
 80033f6:	7bfa      	ldrb	r2, [r7, #15]
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fa6e 	bl	80038dc <ism330dhcx_xl_data_rate_set>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8003406:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800340a:	e000      	b.n	800340e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	42500000 	.word	0x42500000
 800341c:	42d00000 	.word	0x42d00000
 8003420:	43500000 	.word	0x43500000
 8003424:	43d08000 	.word	0x43d08000
 8003428:	44504000 	.word	0x44504000
 800342c:	44d06000 	.word	0x44d06000
 8003430:	45505000 	.word	0x45505000

08003434 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003440:	edd7 7a00 	vldr	s15, [r7]
 8003444:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800344c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003450:	d801      	bhi.n	8003456 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003452:	2301      	movs	r3, #1
 8003454:	e058      	b.n	8003508 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003456:	edd7 7a00 	vldr	s15, [r7]
 800345a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800345e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003466:	d801      	bhi.n	800346c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003468:	2302      	movs	r3, #2
 800346a:	e04d      	b.n	8003508 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800346c:	edd7 7a00 	vldr	s15, [r7]
 8003470:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800351c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8003474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347c:	d801      	bhi.n	8003482 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800347e:	2303      	movs	r3, #3
 8003480:	e042      	b.n	8003508 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003482:	edd7 7a00 	vldr	s15, [r7]
 8003486:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8003520 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 800348a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800348e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003492:	d801      	bhi.n	8003498 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003494:	2304      	movs	r3, #4
 8003496:	e037      	b.n	8003508 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003498:	edd7 7a00 	vldr	s15, [r7]
 800349c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003524 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80034a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a8:	d801      	bhi.n	80034ae <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80034aa:	2305      	movs	r3, #5
 80034ac:	e02c      	b.n	8003508 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80034ae:	edd7 7a00 	vldr	s15, [r7]
 80034b2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003528 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80034b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034be:	d801      	bhi.n	80034c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 80034c0:	2306      	movs	r3, #6
 80034c2:	e021      	b.n	8003508 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80034c4:	edd7 7a00 	vldr	s15, [r7]
 80034c8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800352c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80034cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d4:	d801      	bhi.n	80034da <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80034d6:	2307      	movs	r3, #7
 80034d8:	e016      	b.n	8003508 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80034da:	edd7 7a00 	vldr	s15, [r7]
 80034de:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003530 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80034e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ea:	d801      	bhi.n	80034f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80034ec:	2308      	movs	r3, #8
 80034ee:	e00b      	b.n	8003508 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80034f0:	edd7 7a00 	vldr	s15, [r7]
 80034f4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003534 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 80034f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003500:	d801      	bhi.n	8003506 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8003502:	2309      	movs	r3, #9
 8003504:	e000      	b.n	8003508 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003506:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
                : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
                :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	42500000 	.word	0x42500000
 8003520:	42d00000 	.word	0x42d00000
 8003524:	43500000 	.word	0x43500000
 8003528:	43d08000 	.word	0x43d08000
 800352c:	44504000 	.word	0x44504000
 8003530:	44d06000 	.word	0x44d06000
 8003534:	45505000 	.word	0x45505000

08003538 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003544:	edd7 7a00 	vldr	s15, [r7]
 8003548:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800354c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003554:	d801      	bhi.n	800355a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8003556:	2301      	movs	r3, #1
 8003558:	e058      	b.n	800360c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800355a:	edd7 7a00 	vldr	s15, [r7]
 800355e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8003562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356a:	d801      	bhi.n	8003570 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800356c:	2302      	movs	r3, #2
 800356e:	e04d      	b.n	800360c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003570:	edd7 7a00 	vldr	s15, [r7]
 8003574:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8003634 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8003578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800357c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003580:	d801      	bhi.n	8003586 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8003582:	2303      	movs	r3, #3
 8003584:	e042      	b.n	800360c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003586:	edd7 7a00 	vldr	s15, [r7]
 800358a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8003638 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800358e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003596:	d801      	bhi.n	800359c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8003598:	2304      	movs	r3, #4
 800359a:	e037      	b.n	800360c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800359c:	edd7 7a00 	vldr	s15, [r7]
 80035a0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800363c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80035a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ac:	d801      	bhi.n	80035b2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80035ae:	2305      	movs	r3, #5
 80035b0:	e02c      	b.n	800360c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80035b2:	edd7 7a00 	vldr	s15, [r7]
 80035b6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003640 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80035ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c2:	d801      	bhi.n	80035c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80035c4:	2306      	movs	r3, #6
 80035c6:	e021      	b.n	800360c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80035c8:	edd7 7a00 	vldr	s15, [r7]
 80035cc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003644 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80035d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d8:	d801      	bhi.n	80035de <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80035da:	2307      	movs	r3, #7
 80035dc:	e016      	b.n	800360c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80035de:	edd7 7a00 	vldr	s15, [r7]
 80035e2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003648 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80035e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ee:	d801      	bhi.n	80035f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80035f0:	2308      	movs	r3, #8
 80035f2:	e00b      	b.n	800360c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80035f4:	edd7 7a00 	vldr	s15, [r7]
 80035f8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800364c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80035fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003604:	d801      	bhi.n	800360a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8003606:	2309      	movs	r3, #9
 8003608:	e000      	b.n	800360c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800360a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 800360c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
          :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	331c      	adds	r3, #28
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fbac 	bl	8003d74 <ism330dhcx_gy_data_rate_set>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8003622:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003626:	e000      	b.n	800362a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	42500000 	.word	0x42500000
 8003638:	42d00000 	.word	0x42d00000
 800363c:	43500000 	.word	0x43500000
 8003640:	43d08000 	.word	0x43d08000
 8003644:	44504000 	.word	0x44504000
 8003648:	44d06000 	.word	0x44d06000
 800364c:	45505000 	.word	0x45505000

08003650 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800365c:	edd7 7a00 	vldr	s15, [r7]
 8003660:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366c:	d801      	bhi.n	8003672 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800366e:	2301      	movs	r3, #1
 8003670:	e058      	b.n	8003724 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003672:	edd7 7a00 	vldr	s15, [r7]
 8003676:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800367a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800367e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003682:	d801      	bhi.n	8003688 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8003684:	2302      	movs	r3, #2
 8003686:	e04d      	b.n	8003724 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003688:	edd7 7a00 	vldr	s15, [r7]
 800368c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003738 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8003690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003698:	d801      	bhi.n	800369e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800369a:	2303      	movs	r3, #3
 800369c:	e042      	b.n	8003724 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800369e:	edd7 7a00 	vldr	s15, [r7]
 80036a2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800373c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80036a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ae:	d801      	bhi.n	80036b4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80036b0:	2304      	movs	r3, #4
 80036b2:	e037      	b.n	8003724 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80036b4:	edd7 7a00 	vldr	s15, [r7]
 80036b8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003740 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80036bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c4:	d801      	bhi.n	80036ca <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80036c6:	2305      	movs	r3, #5
 80036c8:	e02c      	b.n	8003724 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80036ca:	edd7 7a00 	vldr	s15, [r7]
 80036ce:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003744 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80036d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036da:	d801      	bhi.n	80036e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80036dc:	2306      	movs	r3, #6
 80036de:	e021      	b.n	8003724 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80036e0:	edd7 7a00 	vldr	s15, [r7]
 80036e4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003748 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80036e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f0:	d801      	bhi.n	80036f6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80036f2:	2307      	movs	r3, #7
 80036f4:	e016      	b.n	8003724 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80036f6:	edd7 7a00 	vldr	s15, [r7]
 80036fa:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800374c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80036fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003706:	d801      	bhi.n	800370c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8003708:	2308      	movs	r3, #8
 800370a:	e00b      	b.n	8003724 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800370c:	edd7 7a00 	vldr	s15, [r7]
 8003710:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003750 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8003714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371c:	d801      	bhi.n	8003722 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800371e:	2309      	movs	r3, #9
 8003720:	e000      	b.n	8003724 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003722:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
                 : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
                 :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	42500000 	.word	0x42500000
 800373c:	42d00000 	.word	0x42d00000
 8003740:	43500000 	.word	0x43500000
 8003744:	43d08000 	.word	0x43d08000
 8003748:	44504000 	.word	0x44504000
 800374c:	44d06000 	.word	0x44d06000
 8003750:	45505000 	.word	0x45505000

08003754 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003754:	b590      	push	{r4, r7, lr}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	461a      	mov	r2, r3
 8003760:	460b      	mov	r3, r1
 8003762:	72fb      	strb	r3, [r7, #11]
 8003764:	4613      	mov	r3, r2
 8003766:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	695c      	ldr	r4, [r3, #20]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	7b1b      	ldrb	r3, [r3, #12]
 8003774:	4618      	mov	r0, r3
 8003776:	7afb      	ldrb	r3, [r7, #11]
 8003778:	b299      	uxth	r1, r3
 800377a:	893b      	ldrh	r3, [r7, #8]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	47a0      	blx	r4
 8003780:	4603      	mov	r3, r0
}
 8003782:	4618      	mov	r0, r3
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	bd90      	pop	{r4, r7, pc}

0800378a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800378a:	b590      	push	{r4, r7, lr}
 800378c:	b087      	sub	sp, #28
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	461a      	mov	r2, r3
 8003796:	460b      	mov	r3, r1
 8003798:	72fb      	strb	r3, [r7, #11]
 800379a:	4613      	mov	r3, r2
 800379c:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	691c      	ldr	r4, [r3, #16]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	7b1b      	ldrb	r3, [r3, #12]
 80037aa:	4618      	mov	r0, r3
 80037ac:	7afb      	ldrb	r3, [r7, #11]
 80037ae:	b299      	uxth	r1, r3
 80037b0:	893b      	ldrh	r3, [r7, #8]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	47a0      	blx	r4
 80037b6:	4603      	mov	r3, r0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd90      	pop	{r4, r7, pc}

080037c0 <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	461a      	mov	r2, r3
 80037cc:	460b      	mov	r3, r1
 80037ce:	72fb      	strb	r3, [r7, #11]
 80037d0:	4613      	mov	r3, r2
 80037d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685c      	ldr	r4, [r3, #4]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6898      	ldr	r0, [r3, #8]
 80037dc:	893b      	ldrh	r3, [r7, #8]
 80037de:	7af9      	ldrb	r1, [r7, #11]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	47a0      	blx	r4
 80037e4:	6178      	str	r0, [r7, #20]
  return ret;
 80037e6:	697b      	ldr	r3, [r7, #20]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd90      	pop	{r4, r7, pc}

080037f0 <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	461a      	mov	r2, r3
 80037fc:	460b      	mov	r3, r1
 80037fe:	72fb      	strb	r3, [r7, #11]
 8003800:	4613      	mov	r3, r2
 8003802:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681c      	ldr	r4, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6898      	ldr	r0, [r3, #8]
 800380c:	893b      	ldrh	r3, [r7, #8]
 800380e:	7af9      	ldrb	r1, [r7, #11]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	47a0      	blx	r4
 8003814:	6178      	str	r0, [r7, #20]
  return ret;
 8003816:	697b      	ldr	r3, [r7, #20]
}
 8003818:	4618      	mov	r0, r3
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	bd90      	pop	{r4, r7, pc}

08003820 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800382c:	f107 0208 	add.w	r2, r7, #8
 8003830:	2301      	movs	r3, #1
 8003832:	2110      	movs	r1, #16
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ffc3 	bl	80037c0 <ism330dhcx_read_reg>
 800383a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0) {
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10f      	bne.n	8003862 <ism330dhcx_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	b2da      	uxtb	r2, r3
 800384a:	7a3b      	ldrb	r3, [r7, #8]
 800384c:	f362 0383 	bfi	r3, r2, #2, #2
 8003850:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003852:	f107 0208 	add.w	r2, r7, #8
 8003856:	2301      	movs	r3, #1
 8003858:	2110      	movs	r1, #16
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff ffc8 	bl	80037f0 <ism330dhcx_write_reg>
 8003860:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003862:	68fb      	ldr	r3, [r7, #12]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003876:	f107 0208 	add.w	r2, r7, #8
 800387a:	2301      	movs	r3, #1
 800387c:	2110      	movs	r1, #16
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff ff9e 	bl	80037c0 <ism330dhcx_read_reg>
 8003884:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl) {
 8003886:	7a3b      	ldrb	r3, [r7, #8]
 8003888:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b03      	cmp	r3, #3
 8003890:	d81a      	bhi.n	80038c8 <ism330dhcx_xl_full_scale_get+0x5c>
 8003892:	a201      	add	r2, pc, #4	@ (adr r2, 8003898 <ism330dhcx_xl_full_scale_get+0x2c>)
 8003894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003898:	080038a9 	.word	0x080038a9
 800389c:	080038b1 	.word	0x080038b1
 80038a0:	080038b9 	.word	0x080038b9
 80038a4:	080038c1 	.word	0x080038c1
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
      break;
 80038ae:	e00f      	b.n	80038d0 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2201      	movs	r2, #1
 80038b4:	701a      	strb	r2, [r3, #0]
      break;
 80038b6:	e00b      	b.n	80038d0 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2202      	movs	r2, #2
 80038bc:	701a      	strb	r2, [r3, #0]
      break;
 80038be:	e007      	b.n	80038d0 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2203      	movs	r2, #3
 80038c4:	701a      	strb	r2, [r3, #0]
      break;
 80038c6:	e003      	b.n	80038d0 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2200      	movs	r2, #0
 80038cc:	701a      	strb	r2, [r3, #0]
      break;
 80038ce:	bf00      	nop
  }

  return ret;
 80038d0:	68fb      	ldr	r3, [r7, #12]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop

080038dc <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 80038ec:	f107 030c 	add.w	r3, r7, #12
 80038f0:	4619      	mov	r1, r3
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fd91 	bl	800441a <ism330dhcx_fsm_enable_get>
 80038f8:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f040 80c4 	bne.w	8003a8a <ism330dhcx_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003902:	7b3b      	ldrb	r3, [r7, #12]
 8003904:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003908:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800390a:	7b3b      	ldrb	r3, [r7, #12]
 800390c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003910:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003912:	4313      	orrs	r3, r2
 8003914:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8003916:	7b3b      	ldrb	r3, [r7, #12]
 8003918:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800391c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800391e:	4313      	orrs	r3, r2
 8003920:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003922:	7b3b      	ldrb	r3, [r7, #12]
 8003924:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003928:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800392a:	4313      	orrs	r3, r2
 800392c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 800392e:	7b3b      	ldrb	r3, [r7, #12]
 8003930:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003934:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003936:	4313      	orrs	r3, r2
 8003938:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800393a:	7b3b      	ldrb	r3, [r7, #12]
 800393c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003940:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003942:	4313      	orrs	r3, r2
 8003944:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8003946:	7b3b      	ldrb	r3, [r7, #12]
 8003948:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800394c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800394e:	4313      	orrs	r3, r2
 8003950:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003952:	7b3b      	ldrb	r3, [r7, #12]
 8003954:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003958:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800395a:	4313      	orrs	r3, r2
 800395c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800395e:	7b7b      	ldrb	r3, [r7, #13]
 8003960:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003964:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003966:	4313      	orrs	r3, r2
 8003968:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800396a:	7b7b      	ldrb	r3, [r7, #13]
 800396c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003970:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003972:	4313      	orrs	r3, r2
 8003974:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003976:	7b7b      	ldrb	r3, [r7, #13]
 8003978:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800397c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800397e:	4313      	orrs	r3, r2
 8003980:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003982:	7b7b      	ldrb	r3, [r7, #13]
 8003984:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003988:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800398a:	4313      	orrs	r3, r2
 800398c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800398e:	7b7b      	ldrb	r3, [r7, #13]
 8003990:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003994:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003996:	4313      	orrs	r3, r2
 8003998:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800399a:	7b7b      	ldrb	r3, [r7, #13]
 800399c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80039a0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80039a2:	4313      	orrs	r3, r2
 80039a4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80039a6:	7b7b      	ldrb	r3, [r7, #13]
 80039a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80039ac:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80039ae:	4313      	orrs	r3, r2
 80039b0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 80039b2:	7b7b      	ldrb	r3, [r7, #13]
 80039b4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80039b8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80039ba:	4313      	orrs	r3, r2
 80039bc:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d163      	bne.n	8003a8a <ism330dhcx_xl_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80039c2:	f107 030b 	add.w	r3, r7, #11
 80039c6:	4619      	mov	r1, r3
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fd53 	bl	8004474 <ism330dhcx_fsm_data_rate_get>
 80039ce:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d159      	bne.n	8003a8a <ism330dhcx_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 80039d6:	7afb      	ldrb	r3, [r7, #11]
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d853      	bhi.n	8003a84 <ism330dhcx_xl_data_rate_set+0x1a8>
 80039dc:	a201      	add	r2, pc, #4	@ (adr r2, 80039e4 <ism330dhcx_xl_data_rate_set+0x108>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	080039f5 	.word	0x080039f5
 80039e8:	08003a07 	.word	0x08003a07
 80039ec:	08003a25 	.word	0x08003a25
 80039f0:	08003a4f 	.word	0x08003a4f
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d102      	bne.n	8003a00 <ism330dhcx_xl_data_rate_set+0x124>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80039fa:	2301      	movs	r3, #1
 80039fc:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80039fe:	e044      	b.n	8003a8a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	75fb      	strb	r3, [r7, #23]
            break;
 8003a04:	e041      	b.n	8003a8a <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d102      	bne.n	8003a12 <ism330dhcx_xl_data_rate_set+0x136>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003a10:	e03b      	b.n	8003a8a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d102      	bne.n	8003a1e <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	75fb      	strb	r3, [r7, #23]
            break;
 8003a1c:	e035      	b.n	8003a8a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	75fb      	strb	r3, [r7, #23]
            break;
 8003a22:	e032      	b.n	8003a8a <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d102      	bne.n	8003a30 <ism330dhcx_xl_data_rate_set+0x154>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003a2e:	e02c      	b.n	8003a8a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d102      	bne.n	8003a3c <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003a36:	2303      	movs	r3, #3
 8003a38:	75fb      	strb	r3, [r7, #23]
            break;
 8003a3a:	e026      	b.n	8003a8a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d102      	bne.n	8003a48 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003a42:	2303      	movs	r3, #3
 8003a44:	75fb      	strb	r3, [r7, #23]
            break;
 8003a46:	e020      	b.n	8003a8a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	75fb      	strb	r3, [r7, #23]
            break;
 8003a4c:	e01d      	b.n	8003a8a <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d102      	bne.n	8003a5a <ism330dhcx_xl_data_rate_set+0x17e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003a54:	2304      	movs	r3, #4
 8003a56:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003a58:	e017      	b.n	8003a8a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d102      	bne.n	8003a66 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003a60:	2304      	movs	r3, #4
 8003a62:	75fb      	strb	r3, [r7, #23]
            break;
 8003a64:	e011      	b.n	8003a8a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d102      	bne.n	8003a72 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	75fb      	strb	r3, [r7, #23]
            break;
 8003a70:	e00b      	b.n	8003a8a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d102      	bne.n	8003a7e <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003a78:	2304      	movs	r3, #4
 8003a7a:	75fb      	strb	r3, [r7, #23]
            break;
 8003a7c:	e005      	b.n	8003a8a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	75fb      	strb	r3, [r7, #23]
            break;
 8003a82:	e002      	b.n	8003a8a <ism330dhcx_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	75fb      	strb	r3, [r7, #23]
            break;
 8003a88:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d16c      	bne.n	8003b6e <ism330dhcx_xl_data_rate_set+0x292>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8003a94:	f107 030a 	add.w	r3, r7, #10
 8003a98:	4619      	mov	r1, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fd32 	bl	8004504 <ism330dhcx_mlc_get>
 8003aa0:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 8003aa2:	7abb      	ldrb	r3, [r7, #10]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d162      	bne.n	8003b6e <ism330dhcx_xl_data_rate_set+0x292>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8003aa8:	f107 0309 	add.w	r3, r7, #9
 8003aac:	4619      	mov	r1, r3
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fd52 	bl	8004558 <ism330dhcx_mlc_data_rate_get>
 8003ab4:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d158      	bne.n	8003b6e <ism330dhcx_xl_data_rate_set+0x292>
        switch (mlc_odr) {
 8003abc:	7a7b      	ldrb	r3, [r7, #9]
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d852      	bhi.n	8003b68 <ism330dhcx_xl_data_rate_set+0x28c>
 8003ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac8 <ism330dhcx_xl_data_rate_set+0x1ec>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003ad9 	.word	0x08003ad9
 8003acc:	08003aeb 	.word	0x08003aeb
 8003ad0:	08003b09 	.word	0x08003b09
 8003ad4:	08003b33 	.word	0x08003b33
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d102      	bne.n	8003ae4 <ism330dhcx_xl_data_rate_set+0x208>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003ae2:	e044      	b.n	8003b6e <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	75fb      	strb	r3, [r7, #23]
            break;
 8003ae8:	e041      	b.n	8003b6e <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d102      	bne.n	8003af6 <ism330dhcx_xl_data_rate_set+0x21a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003af0:	2302      	movs	r3, #2
 8003af2:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003af4:	e03b      	b.n	8003b6e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d102      	bne.n	8003b02 <ism330dhcx_xl_data_rate_set+0x226>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003afc:	2302      	movs	r3, #2
 8003afe:	75fb      	strb	r3, [r7, #23]
            break;
 8003b00:	e035      	b.n	8003b6e <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	75fb      	strb	r3, [r7, #23]
            break;
 8003b06:	e032      	b.n	8003b6e <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d102      	bne.n	8003b14 <ism330dhcx_xl_data_rate_set+0x238>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003b12:	e02c      	b.n	8003b6e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d102      	bne.n	8003b20 <ism330dhcx_xl_data_rate_set+0x244>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	75fb      	strb	r3, [r7, #23]
            break;
 8003b1e:	e026      	b.n	8003b6e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d102      	bne.n	8003b2c <ism330dhcx_xl_data_rate_set+0x250>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003b26:	2303      	movs	r3, #3
 8003b28:	75fb      	strb	r3, [r7, #23]
            break;
 8003b2a:	e020      	b.n	8003b6e <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	75fb      	strb	r3, [r7, #23]
            break;
 8003b30:	e01d      	b.n	8003b6e <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <ism330dhcx_xl_data_rate_set+0x262>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003b38:	2304      	movs	r3, #4
 8003b3a:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003b3c:	e017      	b.n	8003b6e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d102      	bne.n	8003b4a <ism330dhcx_xl_data_rate_set+0x26e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003b44:	2304      	movs	r3, #4
 8003b46:	75fb      	strb	r3, [r7, #23]
            break;
 8003b48:	e011      	b.n	8003b6e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003b4a:	78fb      	ldrb	r3, [r7, #3]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d102      	bne.n	8003b56 <ism330dhcx_xl_data_rate_set+0x27a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003b50:	2304      	movs	r3, #4
 8003b52:	75fb      	strb	r3, [r7, #23]
            break;
 8003b54:	e00b      	b.n	8003b6e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d102      	bne.n	8003b62 <ism330dhcx_xl_data_rate_set+0x286>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	75fb      	strb	r3, [r7, #23]
            break;
 8003b60:	e005      	b.n	8003b6e <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	75fb      	strb	r3, [r7, #23]
            break;
 8003b66:	e002      	b.n	8003b6e <ism330dhcx_xl_data_rate_set+0x292>

          default:
            odr_xl = val;
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	75fb      	strb	r3, [r7, #23]
            break;
 8003b6c:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0) {
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d107      	bne.n	8003b84 <ism330dhcx_xl_data_rate_set+0x2a8>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003b74:	f107 0208 	add.w	r2, r7, #8
 8003b78:	2301      	movs	r3, #1
 8003b7a:	2110      	movs	r1, #16
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff fe1f 	bl	80037c0 <ism330dhcx_read_reg>
 8003b82:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0) {
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10f      	bne.n	8003baa <ism330dhcx_xl_data_rate_set+0x2ce>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	7a3b      	ldrb	r3, [r7, #8]
 8003b94:	f362 1307 	bfi	r3, r2, #4, #4
 8003b98:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003b9a:	f107 0208 	add.w	r2, r7, #8
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	2110      	movs	r1, #16
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff fe24 	bl	80037f0 <ism330dhcx_write_reg>
 8003ba8:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003baa:	693b      	ldr	r3, [r7, #16]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003bbe:	f107 0208 	add.w	r2, r7, #8
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	2110      	movs	r1, #16
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff fdfa 	bl	80037c0 <ism330dhcx_read_reg>
 8003bcc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl) {
 8003bce:	7a3b      	ldrb	r3, [r7, #8]
 8003bd0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b0b      	cmp	r3, #11
 8003bd8:	d84a      	bhi.n	8003c70 <ism330dhcx_xl_data_rate_get+0xbc>
 8003bda:	a201      	add	r2, pc, #4	@ (adr r2, 8003be0 <ism330dhcx_xl_data_rate_get+0x2c>)
 8003bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be0:	08003c11 	.word	0x08003c11
 8003be4:	08003c19 	.word	0x08003c19
 8003be8:	08003c21 	.word	0x08003c21
 8003bec:	08003c29 	.word	0x08003c29
 8003bf0:	08003c31 	.word	0x08003c31
 8003bf4:	08003c39 	.word	0x08003c39
 8003bf8:	08003c41 	.word	0x08003c41
 8003bfc:	08003c49 	.word	0x08003c49
 8003c00:	08003c51 	.word	0x08003c51
 8003c04:	08003c59 	.word	0x08003c59
 8003c08:	08003c61 	.word	0x08003c61
 8003c0c:	08003c69 	.word	0x08003c69
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2200      	movs	r2, #0
 8003c14:	701a      	strb	r2, [r3, #0]
      break;
 8003c16:	e02f      	b.n	8003c78 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	701a      	strb	r2, [r3, #0]
      break;
 8003c1e:	e02b      	b.n	8003c78 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2202      	movs	r2, #2
 8003c24:	701a      	strb	r2, [r3, #0]
      break;
 8003c26:	e027      	b.n	8003c78 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	701a      	strb	r2, [r3, #0]
      break;
 8003c2e:	e023      	b.n	8003c78 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2204      	movs	r2, #4
 8003c34:	701a      	strb	r2, [r3, #0]
      break;
 8003c36:	e01f      	b.n	8003c78 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2205      	movs	r2, #5
 8003c3c:	701a      	strb	r2, [r3, #0]
      break;
 8003c3e:	e01b      	b.n	8003c78 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_417Hz:
      *val = ISM330DHCX_XL_ODR_417Hz;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2206      	movs	r2, #6
 8003c44:	701a      	strb	r2, [r3, #0]
      break;
 8003c46:	e017      	b.n	8003c78 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2207      	movs	r2, #7
 8003c4c:	701a      	strb	r2, [r3, #0]
      break;
 8003c4e:	e013      	b.n	8003c78 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1667Hz:
      *val = ISM330DHCX_XL_ODR_1667Hz;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2208      	movs	r2, #8
 8003c54:	701a      	strb	r2, [r3, #0]
      break;
 8003c56:	e00f      	b.n	8003c78 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3333Hz:
      *val = ISM330DHCX_XL_ODR_3333Hz;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2209      	movs	r2, #9
 8003c5c:	701a      	strb	r2, [r3, #0]
      break;
 8003c5e:	e00b      	b.n	8003c78 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	220a      	movs	r2, #10
 8003c64:	701a      	strb	r2, [r3, #0]
      break;
 8003c66:	e007      	b.n	8003c78 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6Hz5:
      *val = ISM330DHCX_XL_ODR_6Hz5;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	220b      	movs	r2, #11
 8003c6c:	701a      	strb	r2, [r3, #0]
      break;
 8003c6e:	e003      	b.n	8003c78 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
      break;
 8003c76:	bf00      	nop
  }

  return ret;
 8003c78:	68fb      	ldr	r3, [r7, #12]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop

08003c84 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8003c90:	f107 0208 	add.w	r2, r7, #8
 8003c94:	2301      	movs	r3, #1
 8003c96:	2111      	movs	r1, #17
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff fd91 	bl	80037c0 <ism330dhcx_read_reg>
 8003c9e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0) {
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10f      	bne.n	8003cc6 <ism330dhcx_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 8003ca6:	78fb      	ldrb	r3, [r7, #3]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	7a3b      	ldrb	r3, [r7, #8]
 8003cb0:	f362 0303 	bfi	r3, r2, #0, #4
 8003cb4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8003cb6:	f107 0208 	add.w	r2, r7, #8
 8003cba:	2301      	movs	r3, #1
 8003cbc:	2111      	movs	r1, #17
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff fd96 	bl	80037f0 <ism330dhcx_write_reg>
 8003cc4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8003cda:	f107 0208 	add.w	r2, r7, #8
 8003cde:	2301      	movs	r3, #1
 8003ce0:	2111      	movs	r1, #17
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff fd6c 	bl	80037c0 <ism330dhcx_read_reg>
 8003ce8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g) {
 8003cea:	7a3b      	ldrb	r3, [r7, #8]
 8003cec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b0c      	cmp	r3, #12
 8003cf4:	d834      	bhi.n	8003d60 <ism330dhcx_gy_full_scale_get+0x90>
 8003cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cfc <ism330dhcx_gy_full_scale_get+0x2c>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d39 	.word	0x08003d39
 8003d00:	08003d59 	.word	0x08003d59
 8003d04:	08003d31 	.word	0x08003d31
 8003d08:	08003d61 	.word	0x08003d61
 8003d0c:	08003d41 	.word	0x08003d41
 8003d10:	08003d61 	.word	0x08003d61
 8003d14:	08003d61 	.word	0x08003d61
 8003d18:	08003d61 	.word	0x08003d61
 8003d1c:	08003d49 	.word	0x08003d49
 8003d20:	08003d61 	.word	0x08003d61
 8003d24:	08003d61 	.word	0x08003d61
 8003d28:	08003d61 	.word	0x08003d61
 8003d2c:	08003d51 	.word	0x08003d51
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2202      	movs	r2, #2
 8003d34:	701a      	strb	r2, [r3, #0]
      break;
 8003d36:	e017      	b.n	8003d68 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	701a      	strb	r2, [r3, #0]
      break;
 8003d3e:	e013      	b.n	8003d68 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2204      	movs	r2, #4
 8003d44:	701a      	strb	r2, [r3, #0]
      break;
 8003d46:	e00f      	b.n	8003d68 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	701a      	strb	r2, [r3, #0]
      break;
 8003d4e:	e00b      	b.n	8003d68 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	220c      	movs	r2, #12
 8003d54:	701a      	strb	r2, [r3, #0]
      break;
 8003d56:	e007      	b.n	8003d68 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	701a      	strb	r2, [r3, #0]
      break;
 8003d5e:	e003      	b.n	8003d68 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2202      	movs	r2, #2
 8003d64:	701a      	strb	r2, [r3, #0]
      break;
 8003d66:	bf00      	nop
  }

  return ret;
 8003d68:	68fb      	ldr	r3, [r7, #12]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop

08003d74 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8003d84:	f107 030c 	add.w	r3, r7, #12
 8003d88:	4619      	mov	r1, r3
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fb45 	bl	800441a <ism330dhcx_fsm_enable_get>
 8003d90:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f040 80c4 	bne.w	8003f22 <ism330dhcx_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003d9a:	7b3b      	ldrb	r3, [r7, #12]
 8003d9c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003da0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8003da2:	7b3b      	ldrb	r3, [r7, #12]
 8003da4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003da8:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003daa:	4313      	orrs	r3, r2
 8003dac:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8003dae:	7b3b      	ldrb	r3, [r7, #12]
 8003db0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003db4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8003db6:	4313      	orrs	r3, r2
 8003db8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003dba:	7b3b      	ldrb	r3, [r7, #12]
 8003dbc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003dc0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003dc6:	7b3b      	ldrb	r3, [r7, #12]
 8003dc8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003dcc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8003dd2:	7b3b      	ldrb	r3, [r7, #12]
 8003dd4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003dd8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8003dde:	7b3b      	ldrb	r3, [r7, #12]
 8003de0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003de4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8003de6:	4313      	orrs	r3, r2
 8003de8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003dea:	7b3b      	ldrb	r3, [r7, #12]
 8003dec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003df0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8003df2:	4313      	orrs	r3, r2
 8003df4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003df6:	7b7b      	ldrb	r3, [r7, #13]
 8003df8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003dfc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003e02:	7b7b      	ldrb	r3, [r7, #13]
 8003e04:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003e08:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003e0e:	7b7b      	ldrb	r3, [r7, #13]
 8003e10:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003e14:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003e16:	4313      	orrs	r3, r2
 8003e18:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003e1a:	7b7b      	ldrb	r3, [r7, #13]
 8003e1c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003e20:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003e22:	4313      	orrs	r3, r2
 8003e24:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003e26:	7b7b      	ldrb	r3, [r7, #13]
 8003e28:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e2c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8003e32:	7b7b      	ldrb	r3, [r7, #13]
 8003e34:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003e38:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8003e3e:	7b7b      	ldrb	r3, [r7, #13]
 8003e40:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003e44:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8003e46:	4313      	orrs	r3, r2
 8003e48:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8003e4a:	7b7b      	ldrb	r3, [r7, #13]
 8003e4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003e50:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8003e52:	4313      	orrs	r3, r2
 8003e54:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d163      	bne.n	8003f22 <ism330dhcx_gy_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8003e5a:	f107 030b 	add.w	r3, r7, #11
 8003e5e:	4619      	mov	r1, r3
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fb07 	bl	8004474 <ism330dhcx_fsm_data_rate_get>
 8003e66:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d159      	bne.n	8003f22 <ism330dhcx_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8003e6e:	7afb      	ldrb	r3, [r7, #11]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d853      	bhi.n	8003f1c <ism330dhcx_gy_data_rate_set+0x1a8>
 8003e74:	a201      	add	r2, pc, #4	@ (adr r2, 8003e7c <ism330dhcx_gy_data_rate_set+0x108>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003e8d 	.word	0x08003e8d
 8003e80:	08003e9f 	.word	0x08003e9f
 8003e84:	08003ebd 	.word	0x08003ebd
 8003e88:	08003ee7 	.word	0x08003ee7
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d102      	bne.n	8003e98 <ism330dhcx_gy_data_rate_set+0x124>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8003e92:	2301      	movs	r3, #1
 8003e94:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003e96:	e044      	b.n	8003f22 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	75fb      	strb	r3, [r7, #23]
            break;
 8003e9c:	e041      	b.n	8003f22 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <ism330dhcx_gy_data_rate_set+0x136>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003ea8:	e03b      	b.n	8003f22 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d102      	bne.n	8003eb6 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	75fb      	strb	r3, [r7, #23]
            break;
 8003eb4:	e035      	b.n	8003f22 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8003eb6:	78fb      	ldrb	r3, [r7, #3]
 8003eb8:	75fb      	strb	r3, [r7, #23]
            break;
 8003eba:	e032      	b.n	8003f22 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <ism330dhcx_gy_data_rate_set+0x154>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003ec6:	e02c      	b.n	8003f22 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d102      	bne.n	8003ed4 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	75fb      	strb	r3, [r7, #23]
            break;
 8003ed2:	e026      	b.n	8003f22 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d102      	bne.n	8003ee0 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003eda:	2303      	movs	r3, #3
 8003edc:	75fb      	strb	r3, [r7, #23]
            break;
 8003ede:	e020      	b.n	8003f22 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	75fb      	strb	r3, [r7, #23]
            break;
 8003ee4:	e01d      	b.n	8003f22 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <ism330dhcx_gy_data_rate_set+0x17e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003eec:	2304      	movs	r3, #4
 8003eee:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003ef0:	e017      	b.n	8003f22 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d102      	bne.n	8003efe <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003ef8:	2304      	movs	r3, #4
 8003efa:	75fb      	strb	r3, [r7, #23]
            break;
 8003efc:	e011      	b.n	8003f22 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d102      	bne.n	8003f0a <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003f04:	2304      	movs	r3, #4
 8003f06:	75fb      	strb	r3, [r7, #23]
            break;
 8003f08:	e00b      	b.n	8003f22 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d102      	bne.n	8003f16 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003f10:	2304      	movs	r3, #4
 8003f12:	75fb      	strb	r3, [r7, #23]
            break;
 8003f14:	e005      	b.n	8003f22 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	75fb      	strb	r3, [r7, #23]
            break;
 8003f1a:	e002      	b.n	8003f22 <ism330dhcx_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	75fb      	strb	r3, [r7, #23]
            break;
 8003f20:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d16c      	bne.n	8004006 <ism330dhcx_gy_data_rate_set+0x292>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8003f2c:	f107 030a 	add.w	r3, r7, #10
 8003f30:	4619      	mov	r1, r3
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fae6 	bl	8004504 <ism330dhcx_mlc_get>
 8003f38:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 8003f3a:	7abb      	ldrb	r3, [r7, #10]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d162      	bne.n	8004006 <ism330dhcx_gy_data_rate_set+0x292>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8003f40:	f107 0309 	add.w	r3, r7, #9
 8003f44:	4619      	mov	r1, r3
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fb06 	bl	8004558 <ism330dhcx_mlc_data_rate_get>
 8003f4c:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d158      	bne.n	8004006 <ism330dhcx_gy_data_rate_set+0x292>
        switch (mlc_odr) {
 8003f54:	7a7b      	ldrb	r3, [r7, #9]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d852      	bhi.n	8004000 <ism330dhcx_gy_data_rate_set+0x28c>
 8003f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f60 <ism330dhcx_gy_data_rate_set+0x1ec>)
 8003f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f60:	08003f71 	.word	0x08003f71
 8003f64:	08003f83 	.word	0x08003f83
 8003f68:	08003fa1 	.word	0x08003fa1
 8003f6c:	08003fcb 	.word	0x08003fcb
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <ism330dhcx_gy_data_rate_set+0x208>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8003f76:	2301      	movs	r3, #1
 8003f78:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003f7a:	e044      	b.n	8004006 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	75fb      	strb	r3, [r7, #23]
            break;
 8003f80:	e041      	b.n	8004006 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8003f82:	78fb      	ldrb	r3, [r7, #3]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <ism330dhcx_gy_data_rate_set+0x21a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003f8c:	e03b      	b.n	8004006 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8003f8e:	78fb      	ldrb	r3, [r7, #3]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d102      	bne.n	8003f9a <ism330dhcx_gy_data_rate_set+0x226>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8003f94:	2302      	movs	r3, #2
 8003f96:	75fb      	strb	r3, [r7, #23]
            break;
 8003f98:	e035      	b.n	8004006 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8003f9a:	78fb      	ldrb	r3, [r7, #3]
 8003f9c:	75fb      	strb	r3, [r7, #23]
            break;
 8003f9e:	e032      	b.n	8004006 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d102      	bne.n	8003fac <ism330dhcx_gy_data_rate_set+0x238>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003faa:	e02c      	b.n	8004006 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d102      	bne.n	8003fb8 <ism330dhcx_gy_data_rate_set+0x244>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	75fb      	strb	r3, [r7, #23]
            break;
 8003fb6:	e026      	b.n	8004006 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d102      	bne.n	8003fc4 <ism330dhcx_gy_data_rate_set+0x250>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	75fb      	strb	r3, [r7, #23]
            break;
 8003fc2:	e020      	b.n	8004006 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	75fb      	strb	r3, [r7, #23]
            break;
 8003fc8:	e01d      	b.n	8004006 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d102      	bne.n	8003fd6 <ism330dhcx_gy_data_rate_set+0x262>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8003fd4:	e017      	b.n	8004006 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d102      	bne.n	8003fe2 <ism330dhcx_gy_data_rate_set+0x26e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003fdc:	2304      	movs	r3, #4
 8003fde:	75fb      	strb	r3, [r7, #23]
            break;
 8003fe0:	e011      	b.n	8004006 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d102      	bne.n	8003fee <ism330dhcx_gy_data_rate_set+0x27a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003fe8:	2304      	movs	r3, #4
 8003fea:	75fb      	strb	r3, [r7, #23]
            break;
 8003fec:	e00b      	b.n	8004006 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d102      	bne.n	8003ffa <ism330dhcx_gy_data_rate_set+0x286>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	75fb      	strb	r3, [r7, #23]
            break;
 8003ff8:	e005      	b.n	8004006 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	75fb      	strb	r3, [r7, #23]
            break;
 8003ffe:	e002      	b.n	8004006 <ism330dhcx_gy_data_rate_set+0x292>

          default:
            odr_gy = val;
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	75fb      	strb	r3, [r7, #23]
            break;
 8004004:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0) {
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d107      	bne.n	800401c <ism330dhcx_gy_data_rate_set+0x2a8>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800400c:	f107 0208 	add.w	r2, r7, #8
 8004010:	2301      	movs	r3, #1
 8004012:	2111      	movs	r1, #17
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7ff fbd3 	bl	80037c0 <ism330dhcx_read_reg>
 800401a:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0) {
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10f      	bne.n	8004042 <ism330dhcx_gy_data_rate_set+0x2ce>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8004022:	7dfb      	ldrb	r3, [r7, #23]
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	b2da      	uxtb	r2, r3
 800402a:	7a3b      	ldrb	r3, [r7, #8]
 800402c:	f362 1307 	bfi	r3, r2, #4, #4
 8004030:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8004032:	f107 0208 	add.w	r2, r7, #8
 8004036:	2301      	movs	r3, #1
 8004038:	2111      	movs	r1, #17
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff fbd8 	bl	80037f0 <ism330dhcx_write_reg>
 8004040:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8004042:	693b      	ldr	r3, [r7, #16]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004056:	f107 0208 	add.w	r2, r7, #8
 800405a:	2301      	movs	r3, #1
 800405c:	2111      	movs	r1, #17
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff fbae 	bl	80037c0 <ism330dhcx_read_reg>
 8004064:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g) {
 8004066:	7a3b      	ldrb	r3, [r7, #8]
 8004068:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b0a      	cmp	r3, #10
 8004070:	d844      	bhi.n	80040fc <ism330dhcx_gy_data_rate_get+0xb0>
 8004072:	a201      	add	r2, pc, #4	@ (adr r2, 8004078 <ism330dhcx_gy_data_rate_get+0x2c>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	080040a5 	.word	0x080040a5
 800407c:	080040ad 	.word	0x080040ad
 8004080:	080040b5 	.word	0x080040b5
 8004084:	080040bd 	.word	0x080040bd
 8004088:	080040c5 	.word	0x080040c5
 800408c:	080040cd 	.word	0x080040cd
 8004090:	080040d5 	.word	0x080040d5
 8004094:	080040dd 	.word	0x080040dd
 8004098:	080040e5 	.word	0x080040e5
 800409c:	080040ed 	.word	0x080040ed
 80040a0:	080040f5 	.word	0x080040f5
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
      break;
 80040aa:	e02b      	b.n	8004104 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2201      	movs	r2, #1
 80040b0:	701a      	strb	r2, [r3, #0]
      break;
 80040b2:	e027      	b.n	8004104 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2202      	movs	r2, #2
 80040b8:	701a      	strb	r2, [r3, #0]
      break;
 80040ba:	e023      	b.n	8004104 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2203      	movs	r2, #3
 80040c0:	701a      	strb	r2, [r3, #0]
      break;
 80040c2:	e01f      	b.n	8004104 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2204      	movs	r2, #4
 80040c8:	701a      	strb	r2, [r3, #0]
      break;
 80040ca:	e01b      	b.n	8004104 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2205      	movs	r2, #5
 80040d0:	701a      	strb	r2, [r3, #0]
      break;
 80040d2:	e017      	b.n	8004104 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_417Hz:
      *val = ISM330DHCX_GY_ODR_417Hz;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2206      	movs	r2, #6
 80040d8:	701a      	strb	r2, [r3, #0]
      break;
 80040da:	e013      	b.n	8004104 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2207      	movs	r2, #7
 80040e0:	701a      	strb	r2, [r3, #0]
      break;
 80040e2:	e00f      	b.n	8004104 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1667Hz:
      *val = ISM330DHCX_GY_ODR_1667Hz;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2208      	movs	r2, #8
 80040e8:	701a      	strb	r2, [r3, #0]
      break;
 80040ea:	e00b      	b.n	8004104 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3333Hz:
      *val = ISM330DHCX_GY_ODR_3333Hz;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2209      	movs	r2, #9
 80040f0:	701a      	strb	r2, [r3, #0]
      break;
 80040f2:	e007      	b.n	8004104 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	220a      	movs	r2, #10
 80040f8:	701a      	strb	r2, [r3, #0]
      break;
 80040fa:	e003      	b.n	8004104 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
      break;
 8004102:	bf00      	nop
  }

  return ret;
 8004104:	68fb      	ldr	r3, [r7, #12]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop

08004110 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800411c:	f107 0208 	add.w	r2, r7, #8
 8004120:	2301      	movs	r3, #1
 8004122:	2112      	movs	r1, #18
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff fb4b 	bl	80037c0 <ism330dhcx_read_reg>
 800412a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10f      	bne.n	8004152 <ism330dhcx_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	b2da      	uxtb	r2, r3
 800413a:	7a3b      	ldrb	r3, [r7, #8]
 800413c:	f362 1386 	bfi	r3, r2, #6, #1
 8004140:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8004142:	f107 0208 	add.w	r2, r7, #8
 8004146:	2301      	movs	r3, #1
 8004148:	2112      	movs	r1, #18
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff fb50 	bl	80037f0 <ism330dhcx_write_reg>
 8004150:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004152:	68fb      	ldr	r3, [r7, #12]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8004166:	f107 020c 	add.w	r2, r7, #12
 800416a:	2306      	movs	r3, #6
 800416c:	2122      	movs	r1, #34	@ 0x22
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff fb26 	bl	80037c0 <ism330dhcx_read_reg>
 8004174:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004176:	7b7b      	ldrb	r3, [r7, #13]
 8004178:	b21a      	sxth	r2, r3
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004184:	b29b      	uxth	r3, r3
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	b29b      	uxth	r3, r3
 800418a:	7b3a      	ldrb	r2, [r7, #12]
 800418c:	4413      	add	r3, r2
 800418e:	b29b      	uxth	r3, r3
 8004190:	b21a      	sxth	r2, r3
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004196:	7bfa      	ldrb	r2, [r7, #15]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	3302      	adds	r3, #2
 800419c:	b212      	sxth	r2, r2
 800419e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	3302      	adds	r3, #2
 80041a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	7bba      	ldrb	r2, [r7, #14]
 80041b0:	4413      	add	r3, r2
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	3302      	adds	r3, #2
 80041b8:	b212      	sxth	r2, r2
 80041ba:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80041bc:	7c7a      	ldrb	r2, [r7, #17]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	3304      	adds	r3, #4
 80041c2:	b212      	sxth	r2, r2
 80041c4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	3304      	adds	r3, #4
 80041ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	7c3a      	ldrb	r2, [r7, #16]
 80041d6:	4413      	add	r3, r2
 80041d8:	b29a      	uxth	r2, r3
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	3304      	adds	r3, #4
 80041de:	b212      	sxth	r2, r2
 80041e0:	801a      	strh	r2, [r3, #0]
  return ret;
 80041e2:	697b      	ldr	r3, [r7, #20]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 80041f6:	f107 020c 	add.w	r2, r7, #12
 80041fa:	2306      	movs	r3, #6
 80041fc:	2128      	movs	r1, #40	@ 0x28
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff fade 	bl	80037c0 <ism330dhcx_read_reg>
 8004204:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004206:	7b7b      	ldrb	r3, [r7, #13]
 8004208:	b21a      	sxth	r2, r3
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004214:	b29b      	uxth	r3, r3
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	b29b      	uxth	r3, r3
 800421a:	7b3a      	ldrb	r2, [r7, #12]
 800421c:	4413      	add	r3, r2
 800421e:	b29b      	uxth	r3, r3
 8004220:	b21a      	sxth	r2, r3
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004226:	7bfa      	ldrb	r2, [r7, #15]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	3302      	adds	r3, #2
 800422c:	b212      	sxth	r2, r2
 800422e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	3302      	adds	r3, #2
 8004234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004238:	b29b      	uxth	r3, r3
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	b29b      	uxth	r3, r3
 800423e:	7bba      	ldrb	r2, [r7, #14]
 8004240:	4413      	add	r3, r2
 8004242:	b29a      	uxth	r2, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	3302      	adds	r3, #2
 8004248:	b212      	sxth	r2, r2
 800424a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800424c:	7c7a      	ldrb	r2, [r7, #17]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	3304      	adds	r3, #4
 8004252:	b212      	sxth	r2, r2
 8004254:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	3304      	adds	r3, #4
 800425a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800425e:	b29b      	uxth	r3, r3
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	b29b      	uxth	r3, r3
 8004264:	7c3a      	ldrb	r2, [r7, #16]
 8004266:	4413      	add	r3, r2
 8004268:	b29a      	uxth	r2, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	3304      	adds	r3, #4
 800426e:	b212      	sxth	r2, r2
 8004270:	801a      	strh	r2, [r3, #0]
  return ret;
 8004272:	697b      	ldr	r3, [r7, #20]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 8004288:	f107 0208 	add.w	r2, r7, #8
 800428c:	2301      	movs	r3, #1
 800428e:	2118      	movs	r1, #24
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff fa95 	bl	80037c0 <ism330dhcx_read_reg>
 8004296:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0) {
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10f      	bne.n	80042be <ism330dhcx_device_conf_set+0x42>
    ctrl9_xl.device_conf = (uint8_t)val;
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	7a3b      	ldrb	r3, [r7, #8]
 80042a8:	f362 0341 	bfi	r3, r2, #1, #1
 80042ac:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 80042ae:	f107 0208 	add.w	r2, r7, #8
 80042b2:	2301      	movs	r3, #1
 80042b4:	2118      	movs	r1, #24
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff fa9a 	bl	80037f0 <ism330dhcx_write_reg>
 80042bc:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 80042be:	68fb      	ldr	r3, [r7, #12]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 80042d4:	f107 0208 	add.w	r2, r7, #8
 80042d8:	2301      	movs	r3, #1
 80042da:	2101      	movs	r1, #1
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff fa6f 	bl	80037c0 <ism330dhcx_read_reg>
 80042e2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10f      	bne.n	800430a <ism330dhcx_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	f003 0303 	and.w	r3, r3, #3
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	7a3b      	ldrb	r3, [r7, #8]
 80042f4:	f362 1387 	bfi	r3, r2, #6, #2
 80042f8:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 80042fa:	f107 0208 	add.w	r2, r7, #8
 80042fe:	2301      	movs	r3, #1
 8004300:	2101      	movs	r1, #1
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff fa74 	bl	80037f0 <ism330dhcx_write_reg>
 8004308:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800430a:	68fb      	ldr	r3, [r7, #12]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 800431e:	2301      	movs	r3, #1
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	210f      	movs	r1, #15
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff fa4b 	bl	80037c0 <ism330dhcx_read_reg>
 800432a:	60f8      	str	r0, [r7, #12]
  return ret;
 800432c:	68fb      	ldr	r3, [r7, #12]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	460b      	mov	r3, r1
 8004340:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8004342:	f107 0208 	add.w	r2, r7, #8
 8004346:	2301      	movs	r3, #1
 8004348:	2112      	movs	r1, #18
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff fa38 	bl	80037c0 <ism330dhcx_read_reg>
 8004350:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10f      	bne.n	8004378 <ism330dhcx_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	b2da      	uxtb	r2, r3
 8004360:	7a3b      	ldrb	r3, [r7, #8]
 8004362:	f362 0300 	bfi	r3, r2, #0, #1
 8004366:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8004368:	f107 0208 	add.w	r2, r7, #8
 800436c:	2301      	movs	r3, #1
 800436e:	2112      	movs	r1, #18
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff fa3d 	bl	80037f0 <ism330dhcx_write_reg>
 8004376:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004378:	68fb      	ldr	r3, [r7, #12]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	460b      	mov	r3, r1
 800438c:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800438e:	f107 0208 	add.w	r2, r7, #8
 8004392:	2301      	movs	r3, #1
 8004394:	2112      	movs	r1, #18
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7ff fa12 	bl	80037c0 <ism330dhcx_read_reg>
 800439c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10f      	bne.n	80043c4 <ism330dhcx_auto_increment_set+0x42>
    ctrl3_c.if_inc = (uint8_t)val;
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	7a3b      	ldrb	r3, [r7, #8]
 80043ae:	f362 0382 	bfi	r3, r2, #2, #1
 80043b2:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80043b4:	f107 0208 	add.w	r2, r7, #8
 80043b8:	2301      	movs	r3, #1
 80043ba:	2112      	movs	r1, #18
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff fa17 	bl	80037f0 <ism330dhcx_write_reg>
 80043c2:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80043c4:	68fb      	ldr	r3, [r7, #12]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80043da:	f107 0208 	add.w	r2, r7, #8
 80043de:	2301      	movs	r3, #1
 80043e0:	210a      	movs	r1, #10
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7ff f9ec 	bl	80037c0 <ism330dhcx_read_reg>
 80043e8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10f      	bne.n	8004410 <ism330dhcx_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	7a3b      	ldrb	r3, [r7, #8]
 80043fa:	f362 0302 	bfi	r3, r2, #0, #3
 80043fe:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8004400:	f107 0208 	add.w	r2, r7, #8
 8004404:	2301      	movs	r3, #1
 8004406:	210a      	movs	r1, #10
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff f9f1 	bl	80037f0 <ism330dhcx_write_reg>
 800440e:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8004410:	68fb      	ldr	r3, [r7, #12]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8004424:	2102      	movs	r1, #2
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff ff4e 	bl	80042c8 <ism330dhcx_mem_bank_set>
 800442c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <ism330dhcx_fsm_enable_get+0x28>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 8004434:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 8004436:	2301      	movs	r3, #1
 8004438:	2146      	movs	r1, #70	@ 0x46
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff f9c0 	bl	80037c0 <ism330dhcx_read_reg>
 8004440:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d107      	bne.n	8004458 <ism330dhcx_fsm_enable_get+0x3e>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 800444c:	2301      	movs	r3, #1
 800444e:	2147      	movs	r1, #71	@ 0x47
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff f9b5 	bl	80037c0 <ism330dhcx_read_reg>
 8004456:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d104      	bne.n	8004468 <ism330dhcx_fsm_enable_get+0x4e>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800445e:	2100      	movs	r1, #0
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff ff31 	bl	80042c8 <ism330dhcx_mem_bank_set>
 8004466:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004468:	68fb      	ldr	r3, [r7, #12]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800447e:	2102      	movs	r1, #2
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff ff21 	bl	80042c8 <ism330dhcx_mem_bank_set>
 8004486:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d107      	bne.n	800449e <ism330dhcx_fsm_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 800448e:	f107 0208 	add.w	r2, r7, #8
 8004492:	2301      	movs	r3, #1
 8004494:	215f      	movs	r1, #95	@ 0x5f
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff f992 	bl	80037c0 <ism330dhcx_read_reg>
 800449c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d104      	bne.n	80044ae <ism330dhcx_fsm_data_rate_get+0x3a>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80044a4:	2100      	movs	r1, #0
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7ff ff0e 	bl	80042c8 <ism330dhcx_mem_bank_set>
 80044ac:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 80044ae:	7a3b      	ldrb	r3, [r7, #8]
 80044b0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d81a      	bhi.n	80044f0 <ism330dhcx_fsm_data_rate_get+0x7c>
 80044ba:	a201      	add	r2, pc, #4	@ (adr r2, 80044c0 <ism330dhcx_fsm_data_rate_get+0x4c>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	080044d9 	.word	0x080044d9
 80044c8:	080044e1 	.word	0x080044e1
 80044cc:	080044e9 	.word	0x080044e9
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	701a      	strb	r2, [r3, #0]
      break;
 80044d6:	e00f      	b.n	80044f8 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2201      	movs	r2, #1
 80044dc:	701a      	strb	r2, [r3, #0]
      break;
 80044de:	e00b      	b.n	80044f8 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2202      	movs	r2, #2
 80044e4:	701a      	strb	r2, [r3, #0]
      break;
 80044e6:	e007      	b.n	80044f8 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2203      	movs	r2, #3
 80044ec:	701a      	strb	r2, [r3, #0]
      break;
 80044ee:	e003      	b.n	80044f8 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2200      	movs	r2, #0
 80044f4:	701a      	strb	r2, [r3, #0]
      break;
 80044f6:	bf00      	nop
  }

  return ret;
 80044f8:	68fb      	ldr	r3, [r7, #12]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop

08004504 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800450e:	2102      	movs	r1, #2
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff fed9 	bl	80042c8 <ism330dhcx_mem_bank_set>
 8004516:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d107      	bne.n	800452e <ism330dhcx_mlc_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 800451e:	f107 0208 	add.w	r2, r7, #8
 8004522:	2301      	movs	r3, #1
 8004524:	2105      	movs	r1, #5
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff f94a 	bl	80037c0 <ism330dhcx_read_reg>
 800452c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <ism330dhcx_mlc_get+0x48>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004534:	2100      	movs	r1, #0
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff fec6 	bl	80042c8 <ism330dhcx_mem_bank_set>
 800453c:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 800453e:	7a3b      	ldrb	r3, [r7, #8]
 8004540:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004544:	b2db      	uxtb	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800454c:	68fb      	ldr	r3, [r7, #12]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8004562:	2102      	movs	r1, #2
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff feaf 	bl	80042c8 <ism330dhcx_mem_bank_set>
 800456a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d107      	bne.n	8004582 <ism330dhcx_mlc_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8004572:	f107 0208 	add.w	r2, r7, #8
 8004576:	2301      	movs	r3, #1
 8004578:	2160      	movs	r1, #96	@ 0x60
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff f920 	bl	80037c0 <ism330dhcx_read_reg>
 8004580:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d12a      	bne.n	80045de <ism330dhcx_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 8004588:	7a3b      	ldrb	r3, [r7, #8]
 800458a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b03      	cmp	r3, #3
 8004592:	d81b      	bhi.n	80045cc <ism330dhcx_mlc_data_rate_get+0x74>
 8004594:	a201      	add	r2, pc, #4	@ (adr r2, 800459c <ism330dhcx_mlc_data_rate_get+0x44>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045ad 	.word	0x080045ad
 80045a0:	080045b5 	.word	0x080045b5
 80045a4:	080045bd 	.word	0x080045bd
 80045a8:	080045c5 	.word	0x080045c5
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]
        break;
 80045b2:	e00f      	b.n	80045d4 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2201      	movs	r2, #1
 80045b8:	701a      	strb	r2, [r3, #0]
        break;
 80045ba:	e00b      	b.n	80045d4 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2202      	movs	r2, #2
 80045c0:	701a      	strb	r2, [r3, #0]
        break;
 80045c2:	e007      	b.n	80045d4 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2203      	movs	r2, #3
 80045c8:	701a      	strb	r2, [r3, #0]
        break;
 80045ca:	e003      	b.n	80045d4 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]
        break;
 80045d2:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80045d4:	2100      	movs	r1, #0
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7ff fe76 	bl	80042c8 <ism330dhcx_mem_bank_set>
 80045dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80045de:	68fb      	ldr	r3, [r7, #12]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80045ec:	4b18      	ldr	r3, [pc, #96]	@ (8004650 <SystemInit+0x68>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f2:	4a17      	ldr	r2, [pc, #92]	@ (8004650 <SystemInit+0x68>)
 80045f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80045f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80045fc:	4b15      	ldr	r3, [pc, #84]	@ (8004654 <SystemInit+0x6c>)
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8004602:	4b14      	ldr	r3, [pc, #80]	@ (8004654 <SystemInit+0x6c>)
 8004604:	2200      	movs	r2, #0
 8004606:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8004608:	4b12      	ldr	r3, [pc, #72]	@ (8004654 <SystemInit+0x6c>)
 800460a:	2200      	movs	r2, #0
 800460c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800460e:	4b11      	ldr	r3, [pc, #68]	@ (8004654 <SystemInit+0x6c>)
 8004610:	2200      	movs	r2, #0
 8004612:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8004614:	4b0f      	ldr	r3, [pc, #60]	@ (8004654 <SystemInit+0x6c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a0e      	ldr	r2, [pc, #56]	@ (8004654 <SystemInit+0x6c>)
 800461a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800461e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8004622:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8004624:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <SystemInit+0x6c>)
 8004626:	2200      	movs	r2, #0
 8004628:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800462a:	4b0a      	ldr	r3, [pc, #40]	@ (8004654 <SystemInit+0x6c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a09      	ldr	r2, [pc, #36]	@ (8004654 <SystemInit+0x6c>)
 8004630:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004634:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8004636:	4b07      	ldr	r3, [pc, #28]	@ (8004654 <SystemInit+0x6c>)
 8004638:	2200      	movs	r2, #0
 800463a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800463c:	4b04      	ldr	r3, [pc, #16]	@ (8004650 <SystemInit+0x68>)
 800463e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004642:	609a      	str	r2, [r3, #8]
  #endif
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	e000ed00 	.word	0xe000ed00
 8004654:	46020c00 	.word	0x46020c00

08004658 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800465c:	4b11      	ldr	r3, [pc, #68]	@ (80046a4 <HAL_Init+0x4c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a10      	ldr	r2, [pc, #64]	@ (80046a4 <HAL_Init+0x4c>)
 8004662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004668:	2003      	movs	r0, #3
 800466a:	f000 f96d 	bl	8004948 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800466e:	f002 ff57 	bl	8007520 <HAL_RCC_GetSysClockFreq>
 8004672:	4602      	mov	r2, r0
 8004674:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <HAL_Init+0x50>)
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f003 030f 	and.w	r3, r3, #15
 800467c:	490b      	ldr	r1, [pc, #44]	@ (80046ac <HAL_Init+0x54>)
 800467e:	5ccb      	ldrb	r3, [r1, r3]
 8004680:	fa22 f303 	lsr.w	r3, r2, r3
 8004684:	4a0a      	ldr	r2, [pc, #40]	@ (80046b0 <HAL_Init+0x58>)
 8004686:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004688:	200f      	movs	r0, #15
 800468a:	f000 f813 	bl	80046b4 <HAL_InitTick>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e002      	b.n	800469e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004698:	f003 fe36 	bl	8008308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40022000 	.word	0x40022000
 80046a8:	46020c00 	.word	0x46020c00
 80046ac:	0800bba0 	.word	0x0800bba0
 80046b0:	20000098 	.word	0x20000098

080046b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80046bc:	4b15      	ldr	r3, [pc, #84]	@ (8004714 <HAL_InitTick+0x60>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e021      	b.n	800470c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80046c8:	4b13      	ldr	r3, [pc, #76]	@ (8004718 <HAL_InitTick+0x64>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	4b11      	ldr	r3, [pc, #68]	@ (8004714 <HAL_InitTick+0x60>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	4619      	mov	r1, r3
 80046d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80046da:	fbb2 f3f3 	udiv	r3, r2, r3
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f965 	bl	80049ae <HAL_SYSTICK_Config>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e00e      	b.n	800470c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b0f      	cmp	r3, #15
 80046f2:	d80a      	bhi.n	800470a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046f4:	2200      	movs	r2, #0
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80046fc:	f000 f92f 	bl	800495e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004700:	4a06      	ldr	r2, [pc, #24]	@ (800471c <HAL_InitTick+0x68>)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	e000      	b.n	800470c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
}
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	200000a0 	.word	0x200000a0
 8004718:	20000098 	.word	0x20000098
 800471c:	2000009c 	.word	0x2000009c

08004720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004724:	4b06      	ldr	r3, [pc, #24]	@ (8004740 <HAL_IncTick+0x20>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	461a      	mov	r2, r3
 800472a:	4b06      	ldr	r3, [pc, #24]	@ (8004744 <HAL_IncTick+0x24>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4413      	add	r3, r2
 8004730:	4a04      	ldr	r2, [pc, #16]	@ (8004744 <HAL_IncTick+0x24>)
 8004732:	6013      	str	r3, [r2, #0]
}
 8004734:	bf00      	nop
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	200000a0 	.word	0x200000a0
 8004744:	20000ed0 	.word	0x20000ed0

08004748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  return uwTick;
 800474c:	4b03      	ldr	r3, [pc, #12]	@ (800475c <HAL_GetTick+0x14>)
 800474e:	681b      	ldr	r3, [r3, #0]
}
 8004750:	4618      	mov	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	20000ed0 	.word	0x20000ed0

08004760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004768:	f7ff ffee 	bl	8004748 <HAL_GetTick>
 800476c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004778:	d005      	beq.n	8004786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800477a:	4b0a      	ldr	r3, [pc, #40]	@ (80047a4 <HAL_Delay+0x44>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004786:	bf00      	nop
 8004788:	f7ff ffde 	bl	8004748 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	429a      	cmp	r2, r3
 8004796:	d8f7      	bhi.n	8004788 <HAL_Delay+0x28>
  {
  }
}
 8004798:	bf00      	nop
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	200000a0 	.word	0x200000a0

080047a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047b8:	4b0c      	ldr	r3, [pc, #48]	@ (80047ec <__NVIC_SetPriorityGrouping+0x44>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047c4:	4013      	ands	r3, r2
 80047c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047da:	4a04      	ldr	r2, [pc, #16]	@ (80047ec <__NVIC_SetPriorityGrouping+0x44>)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	60d3      	str	r3, [r2, #12]
}
 80047e0:	bf00      	nop
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	e000ed00 	.word	0xe000ed00

080047f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047f4:	4b04      	ldr	r3, [pc, #16]	@ (8004808 <__NVIC_GetPriorityGrouping+0x18>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	0a1b      	lsrs	r3, r3, #8
 80047fa:	f003 0307 	and.w	r3, r3, #7
}
 80047fe:	4618      	mov	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	e000ed00 	.word	0xe000ed00

0800480c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481a:	2b00      	cmp	r3, #0
 800481c:	db0b      	blt.n	8004836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	f003 021f 	and.w	r2, r3, #31
 8004824:	4907      	ldr	r1, [pc, #28]	@ (8004844 <__NVIC_EnableIRQ+0x38>)
 8004826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	2001      	movs	r0, #1
 800482e:	fa00 f202 	lsl.w	r2, r0, r2
 8004832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	e000e100 	.word	0xe000e100

08004848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	6039      	str	r1, [r7, #0]
 8004852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004858:	2b00      	cmp	r3, #0
 800485a:	db0a      	blt.n	8004872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	b2da      	uxtb	r2, r3
 8004860:	490c      	ldr	r1, [pc, #48]	@ (8004894 <__NVIC_SetPriority+0x4c>)
 8004862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004866:	0112      	lsls	r2, r2, #4
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	440b      	add	r3, r1
 800486c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004870:	e00a      	b.n	8004888 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	b2da      	uxtb	r2, r3
 8004876:	4908      	ldr	r1, [pc, #32]	@ (8004898 <__NVIC_SetPriority+0x50>)
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	3b04      	subs	r3, #4
 8004880:	0112      	lsls	r2, r2, #4
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	440b      	add	r3, r1
 8004886:	761a      	strb	r2, [r3, #24]
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	e000e100 	.word	0xe000e100
 8004898:	e000ed00 	.word	0xe000ed00

0800489c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800489c:	b480      	push	{r7}
 800489e:	b089      	sub	sp, #36	@ 0x24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f1c3 0307 	rsb	r3, r3, #7
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	bf28      	it	cs
 80048ba:	2304      	movcs	r3, #4
 80048bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	3304      	adds	r3, #4
 80048c2:	2b06      	cmp	r3, #6
 80048c4:	d902      	bls.n	80048cc <NVIC_EncodePriority+0x30>
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	3b03      	subs	r3, #3
 80048ca:	e000      	b.n	80048ce <NVIC_EncodePriority+0x32>
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43da      	mvns	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	401a      	ands	r2, r3
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	fa01 f303 	lsl.w	r3, r1, r3
 80048ee:	43d9      	mvns	r1, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048f4:	4313      	orrs	r3, r2
         );
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3724      	adds	r7, #36	@ 0x24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
	...

08004904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3b01      	subs	r3, #1
 8004910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004914:	d301      	bcc.n	800491a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004916:	2301      	movs	r3, #1
 8004918:	e00f      	b.n	800493a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800491a:	4a0a      	ldr	r2, [pc, #40]	@ (8004944 <SysTick_Config+0x40>)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3b01      	subs	r3, #1
 8004920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004922:	210f      	movs	r1, #15
 8004924:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004928:	f7ff ff8e 	bl	8004848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800492c:	4b05      	ldr	r3, [pc, #20]	@ (8004944 <SysTick_Config+0x40>)
 800492e:	2200      	movs	r2, #0
 8004930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004932:	4b04      	ldr	r3, [pc, #16]	@ (8004944 <SysTick_Config+0x40>)
 8004934:	2207      	movs	r2, #7
 8004936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	e000e010 	.word	0xe000e010

08004948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff ff29 	bl	80047a8 <__NVIC_SetPriorityGrouping>
}
 8004956:	bf00      	nop
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b086      	sub	sp, #24
 8004962:	af00      	add	r7, sp, #0
 8004964:	4603      	mov	r3, r0
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	607a      	str	r2, [r7, #4]
 800496a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800496c:	f7ff ff40 	bl	80047f0 <__NVIC_GetPriorityGrouping>
 8004970:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	68b9      	ldr	r1, [r7, #8]
 8004976:	6978      	ldr	r0, [r7, #20]
 8004978:	f7ff ff90 	bl	800489c <NVIC_EncodePriority>
 800497c:	4602      	mov	r2, r0
 800497e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff ff5f 	bl	8004848 <__NVIC_SetPriority>
}
 800498a:	bf00      	nop
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	4603      	mov	r3, r0
 800499a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800499c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff ff33 	bl	800480c <__NVIC_EnableIRQ>
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff ffa4 	bl	8004904 <SysTick_Config>
 80049bc:	4603      	mov	r3, r0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d01e      	beq.n	8004a20 <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2204      	movs	r2, #4
 80049e8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ee:	f043 0202 	orr.w	r2, r3, #2
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2204      	movs	r2, #4
 80049fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a02:	4a39      	ldr	r2, [pc, #228]	@ (8004ae8 <HAL_DCMI_IRQHandler+0x120>)
 8004a04:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 f88b 	bl	8004b26 <HAL_DMA_Abort_IT>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d004      	beq.n	8004a20 <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 f866 	bl	8004aec <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d01e      	beq.n	8004a68 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a36:	f043 0201 	orr.w	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2204      	movs	r2, #4
 8004a42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a4a:	4a27      	ldr	r2, [pc, #156]	@ (8004ae8 <HAL_DCMI_IRQHandler+0x120>)
 8004a4c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 f867 	bl	8004b26 <HAL_DMA_Abort_IT>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d004      	beq.n	8004a68 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f842 	bl	8004aec <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d006      	beq.n	8004a80 <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2210      	movs	r2, #16
 8004a78:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fc fdb2 	bl	80015e4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d006      	beq.n	8004a98 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2208      	movs	r2, #8
 8004a90:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fc fdbc 	bl	8001610 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d01d      	beq.n	8004ade <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d107      	bne.n	8004ac0 <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 021e 	bic.w	r2, r2, #30
 8004abe:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0201 	bic.w	r2, r2, #1
 8004ace:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7fc fd8e 	bl	80015fa <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	08004aed 	.word	0x08004aed

08004aec <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_ULE)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d009      	beq.n	8004b18 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b10:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f7fc fd84 	bl	8001626 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8004b1e:	bf00      	nop
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e019      	b.n	8004b6c <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d004      	beq.n	8004b4e <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e00e      	b.n	8004b6c <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2204      	movs	r2, #4
 8004b52:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004b64:	f043 0304 	orr.w	r3, r3, #4
 8004b68:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004b88:	f023 030f 	bic.w	r3, r3, #15
 8004b8c:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b96:	3b50      	subs	r3, #80	@ 0x50
 8004b98:	09db      	lsrs	r3, r3, #7
 8004b9a:	f003 031f 	and.w	r3, r3, #31
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4013      	ands	r3, r2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 8150 	beq.w	8004e54 <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d011      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004bd8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bde:	f043 0201 	orr.w	r2, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d011      	beq.n	8004c18 <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c0a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c10:	f043 0202 	orr.w	r2, r3, #2
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d011      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004c3c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c42:	f043 0204 	orr.w	r2, r3, #4
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d011      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004c6e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c74:	f043 0208 	orr.w	r2, r3, #8
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d013      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00c      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ca0:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d055      	beq.n	8004d6c <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d04e      	beq.n	8004d6c <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004cd6:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d137      	bne.n	8004d54 <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695a      	ldr	r2, [r3, #20]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cf2:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695a      	ldr	r2, [r3, #20]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0202 	orr.w	r2, r2, #2
 8004d02:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d004      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2203      	movs	r2, #3
 8004d16:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004d1a:	e003      	b.n	8004d24 <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d34:	2201      	movs	r2, #1
 8004d36:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8087 	beq.w	8004e58 <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	4798      	blx	r3
        }

        return;
 8004d52:	e081      	b.n	8004e58 <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2205      	movs	r2, #5
 8004d58:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d039      	beq.n	8004dee <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d032      	beq.n	8004dee <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d012      	beq.n	8004dba <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d116      	bne.n	8004dcc <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d111      	bne.n	8004dcc <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db4:	2201      	movs	r2, #1
 8004db6:	731a      	strb	r2, [r3, #12]
 8004db8:	e008      	b.n	8004dcc <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d103      	bne.n	8004dcc <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004dd4:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d031      	beq.n	8004e5a <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695a      	ldr	r2, [r3, #20]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0202 	orr.w	r2, r2, #2
 8004e04:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d004      	beq.n	8004e1e <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2203      	movs	r2, #3
 8004e18:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004e1c:	e003      	b.n	8004e26 <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e36:	2201      	movs	r2, #1
 8004e38:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d007      	beq.n	8004e5a <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	4798      	blx	r3
 8004e52:	e002      	b.n	8004e5a <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8004e54:	bf00      	nop
 8004e56:	e000      	b.n	8004e5a <HAL_DMA_IRQHandler+0x2e2>
        return;
 8004e58:	bf00      	nop
    }
  }
}
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004e72:	7afb      	ldrb	r3, [r7, #11]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d011      	beq.n	8004e9c <HAL_EXTI_RegisterCallback+0x3c>
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	dc13      	bgt.n	8004ea4 <HAL_EXTI_RegisterCallback+0x44>
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <HAL_EXTI_RegisterCallback+0x26>
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d007      	beq.n	8004e94 <HAL_EXTI_RegisterCallback+0x34>
 8004e84:	e00e      	b.n	8004ea4 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	609a      	str	r2, [r3, #8]
      break;
 8004e92:	e00a      	b.n	8004eaa <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	605a      	str	r2, [r3, #4]
      break;
 8004e9a:	e006      	b.n	8004eaa <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	609a      	str	r2, [r3, #8]
      break;
 8004ea2:	e002      	b.n	8004eaa <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ea8:	bf00      	nop
  }

  return status;
 8004eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	371c      	adds	r7, #28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e003      	b.n	8004ed4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
  }
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	0c1b      	lsrs	r3, r3, #16
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 031f 	and.w	r3, r3, #31
 8004efc:	2201      	movs	r2, #1
 8004efe:	fa02 f303 	lsl.w	r3, r2, r3
 8004f02:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	4b17      	ldr	r3, [pc, #92]	@ (8004f68 <HAL_EXTI_IRQHandler+0x88>)
 8004f0a:	4413      	add	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4013      	ands	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d009      	beq.n	8004f32 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	4b0d      	ldr	r3, [pc, #52]	@ (8004f6c <HAL_EXTI_IRQHandler+0x8c>)
 8004f38:	4413      	add	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4013      	ands	r3, r2
 8004f44:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d009      	beq.n	8004f60 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	4798      	blx	r3
    }
  }
}
 8004f60:	bf00      	nop
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	4602200c 	.word	0x4602200c
 8004f6c:	46022010 	.word	0x46022010

08004f70 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b089      	sub	sp, #36	@ 0x24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004f82:	e1ba      	b.n	80052fa <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	2101      	movs	r1, #1
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f90:	4013      	ands	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 81aa 	beq.w	80052f4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a55      	ldr	r2, [pc, #340]	@ (80050f8 <HAL_GPIO_Init+0x188>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d15d      	bne.n	8005064 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004fae:	2201      	movs	r2, #1
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	43db      	mvns	r3, r3
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f003 0201 	and.w	r2, r3, #1
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	69fa      	ldr	r2, [r7, #28]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004fd8:	4a48      	ldr	r2, [pc, #288]	@ (80050fc <HAL_GPIO_Init+0x18c>)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fe0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004fe2:	4a46      	ldr	r2, [pc, #280]	@ (80050fc <HAL_GPIO_Init+0x18c>)
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4413      	add	r3, r2
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	08da      	lsrs	r2, r3, #3
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	3208      	adds	r2, #8
 8004ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ffa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	220f      	movs	r2, #15
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	43db      	mvns	r3, r3
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	4013      	ands	r3, r2
 8005010:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	220b      	movs	r2, #11
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	69fa      	ldr	r2, [r7, #28]
 8005022:	4313      	orrs	r3, r2
 8005024:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	08da      	lsrs	r2, r3, #3
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	3208      	adds	r2, #8
 800502e:	69f9      	ldr	r1, [r7, #28]
 8005030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	2203      	movs	r2, #3
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	43db      	mvns	r3, r3
 8005046:	69fa      	ldr	r2, [r7, #28]
 8005048:	4013      	ands	r3, r2
 800504a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	2202      	movs	r2, #2
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	4313      	orrs	r3, r2
 800505a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	e067      	b.n	8005134 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d003      	beq.n	8005074 <HAL_GPIO_Init+0x104>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b12      	cmp	r3, #18
 8005072:	d145      	bne.n	8005100 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	08da      	lsrs	r2, r3, #3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3208      	adds	r2, #8
 800507c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005080:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	220f      	movs	r2, #15
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	4013      	ands	r3, r2
 8005096:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f003 020f 	and.w	r2, r3, #15
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	69fa      	ldr	r2, [r7, #28]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	08da      	lsrs	r2, r3, #3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3208      	adds	r2, #8
 80050ba:	69f9      	ldr	r1, [r7, #28]
 80050bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	2203      	movs	r2, #3
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	43db      	mvns	r3, r3
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	4013      	ands	r3, r2
 80050d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f003 0203 	and.w	r2, r3, #3
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	e01e      	b.n	8005134 <HAL_GPIO_Init+0x1c4>
 80050f6:	bf00      	nop
 80050f8:	46020000 	.word	0x46020000
 80050fc:	0800bbf8 	.word	0x0800bbf8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	2203      	movs	r2, #3
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	43db      	mvns	r3, r3
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	4013      	ands	r3, r2
 8005116:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 0203 	and.w	r2, r3, #3
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	4313      	orrs	r3, r2
 800512c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d00b      	beq.n	8005154 <HAL_GPIO_Init+0x1e4>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b02      	cmp	r3, #2
 8005142:	d007      	beq.n	8005154 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005148:	2b11      	cmp	r3, #17
 800514a:	d003      	beq.n	8005154 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b12      	cmp	r3, #18
 8005152:	d130      	bne.n	80051b6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	2203      	movs	r2, #3
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	43db      	mvns	r3, r3
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	4013      	ands	r3, r2
 800516a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	4313      	orrs	r3, r2
 800517c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800518a:	2201      	movs	r2, #1
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	43db      	mvns	r3, r3
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	4013      	ands	r3, r2
 8005198:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	091b      	lsrs	r3, r3, #4
 80051a0:	f003 0201 	and.w	r2, r3, #1
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	fa02 f303 	lsl.w	r3, r2, r3
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d017      	beq.n	80051ee <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	2203      	movs	r2, #3
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	43db      	mvns	r3, r3
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	4013      	ands	r3, r2
 80051d4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d07c      	beq.n	80052f4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80051fa:	4a47      	ldr	r2, [pc, #284]	@ (8005318 <HAL_GPIO_Init+0x3a8>)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	089b      	lsrs	r3, r3, #2
 8005200:	3318      	adds	r3, #24
 8005202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005206:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	220f      	movs	r2, #15
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	43db      	mvns	r3, r3
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	4013      	ands	r3, r2
 800521c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	0a9a      	lsrs	r2, r3, #10
 8005222:	4b3e      	ldr	r3, [pc, #248]	@ (800531c <HAL_GPIO_Init+0x3ac>)
 8005224:	4013      	ands	r3, r2
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	f002 0203 	and.w	r2, r2, #3
 800522c:	00d2      	lsls	r2, r2, #3
 800522e:	4093      	lsls	r3, r2
 8005230:	69fa      	ldr	r2, [r7, #28]
 8005232:	4313      	orrs	r3, r2
 8005234:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005236:	4938      	ldr	r1, [pc, #224]	@ (8005318 <HAL_GPIO_Init+0x3a8>)
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	089b      	lsrs	r3, r3, #2
 800523c:	3318      	adds	r3, #24
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005244:	4b34      	ldr	r3, [pc, #208]	@ (8005318 <HAL_GPIO_Init+0x3a8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	43db      	mvns	r3, r3
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	4013      	ands	r3, r2
 8005252:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4313      	orrs	r3, r2
 8005266:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005268:	4a2b      	ldr	r2, [pc, #172]	@ (8005318 <HAL_GPIO_Init+0x3a8>)
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800526e:	4b2a      	ldr	r3, [pc, #168]	@ (8005318 <HAL_GPIO_Init+0x3a8>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	43db      	mvns	r3, r3
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	4013      	ands	r3, r2
 800527c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8005292:	4a21      	ldr	r2, [pc, #132]	@ (8005318 <HAL_GPIO_Init+0x3a8>)
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005298:	4b1f      	ldr	r3, [pc, #124]	@ (8005318 <HAL_GPIO_Init+0x3a8>)
 800529a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800529e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	43db      	mvns	r3, r3
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	4013      	ands	r3, r2
 80052a8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80052be:	4a16      	ldr	r2, [pc, #88]	@ (8005318 <HAL_GPIO_Init+0x3a8>)
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80052c6:	4b14      	ldr	r3, [pc, #80]	@ (8005318 <HAL_GPIO_Init+0x3a8>)
 80052c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	43db      	mvns	r3, r3
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	4013      	ands	r3, r2
 80052d6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80052ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005318 <HAL_GPIO_Init+0x3a8>)
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	3301      	adds	r3, #1
 80052f8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	fa22 f303 	lsr.w	r3, r2, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	f47f ae3d 	bne.w	8004f84 <HAL_GPIO_Init+0x14>
  }
}
 800530a:	bf00      	nop
 800530c:	bf00      	nop
 800530e:	3724      	adds	r7, #36	@ 0x24
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	46022000 	.word	0x46022000
 800531c:	002f7f7f 	.word	0x002f7f7f

08005320 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005320:	b480      	push	{r7}
 8005322:	b089      	sub	sp, #36	@ 0x24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8005332:	e0bc      	b.n	80054ae <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8005334:	2201      	movs	r2, #1
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	4013      	ands	r3, r2
 8005340:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 80ad 	beq.w	80054a8 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a5e      	ldr	r2, [pc, #376]	@ (80054cc <HAL_GPIO_DeInit+0x1ac>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d115      	bne.n	8005382 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8005356:	4a5e      	ldr	r2, [pc, #376]	@ (80054d0 <HAL_GPIO_DeInit+0x1b0>)
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800535e:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8005360:	4a5b      	ldr	r2, [pc, #364]	@ (80054d0 <HAL_GPIO_DeInit+0x1b0>)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4413      	add	r3, r2
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 800536c:	4b57      	ldr	r3, [pc, #348]	@ (80054cc <HAL_GPIO_DeInit+0x1ac>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	2101      	movs	r1, #1
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	fa01 f303 	lsl.w	r3, r1, r3
 8005378:	43db      	mvns	r3, r3
 800537a:	4954      	ldr	r1, [pc, #336]	@ (80054cc <HAL_GPIO_DeInit+0x1ac>)
 800537c:	4013      	ands	r3, r2
 800537e:	600b      	str	r3, [r1, #0]
 8005380:	e053      	b.n	800542a <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8005382:	4a54      	ldr	r2, [pc, #336]	@ (80054d4 <HAL_GPIO_DeInit+0x1b4>)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	089b      	lsrs	r3, r3, #2
 8005388:	3318      	adds	r3, #24
 800538a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800538e:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	220f      	movs	r2, #15
 800539a:	fa02 f303 	lsl.w	r3, r2, r3
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4013      	ands	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	0a9a      	lsrs	r2, r3, #10
 80053a8:	4b4b      	ldr	r3, [pc, #300]	@ (80054d8 <HAL_GPIO_DeInit+0x1b8>)
 80053aa:	4013      	ands	r3, r2
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	f002 0203 	and.w	r2, r2, #3
 80053b2:	00d2      	lsls	r2, r2, #3
 80053b4:	4093      	lsls	r3, r2
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d136      	bne.n	800542a <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 80053bc:	4b45      	ldr	r3, [pc, #276]	@ (80054d4 <HAL_GPIO_DeInit+0x1b4>)
 80053be:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	43db      	mvns	r3, r3
 80053c6:	4943      	ldr	r1, [pc, #268]	@ (80054d4 <HAL_GPIO_DeInit+0x1b4>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 80053ce:	4b41      	ldr	r3, [pc, #260]	@ (80054d4 <HAL_GPIO_DeInit+0x1b4>)
 80053d0:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	43db      	mvns	r3, r3
 80053d8:	493e      	ldr	r1, [pc, #248]	@ (80054d4 <HAL_GPIO_DeInit+0x1b4>)
 80053da:	4013      	ands	r3, r2
 80053dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 80053e0:	4b3c      	ldr	r3, [pc, #240]	@ (80054d4 <HAL_GPIO_DeInit+0x1b4>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	43db      	mvns	r3, r3
 80053e8:	493a      	ldr	r1, [pc, #232]	@ (80054d4 <HAL_GPIO_DeInit+0x1b4>)
 80053ea:	4013      	ands	r3, r2
 80053ec:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 80053ee:	4b39      	ldr	r3, [pc, #228]	@ (80054d4 <HAL_GPIO_DeInit+0x1b4>)
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	43db      	mvns	r3, r3
 80053f6:	4937      	ldr	r1, [pc, #220]	@ (80054d4 <HAL_GPIO_DeInit+0x1b4>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	220f      	movs	r2, #15
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 800540c:	4a31      	ldr	r2, [pc, #196]	@ (80054d4 <HAL_GPIO_DeInit+0x1b4>)
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	089b      	lsrs	r3, r3, #2
 8005412:	3318      	adds	r3, #24
 8005414:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	43da      	mvns	r2, r3
 800541c:	482d      	ldr	r0, [pc, #180]	@ (80054d4 <HAL_GPIO_DeInit+0x1b4>)
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	089b      	lsrs	r3, r3, #2
 8005422:	400a      	ands	r2, r1
 8005424:	3318      	adds	r3, #24
 8005426:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	2103      	movs	r1, #3
 8005434:	fa01 f303 	lsl.w	r3, r1, r3
 8005438:	431a      	orrs	r2, r3
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	08da      	lsrs	r2, r3, #3
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	3208      	adds	r2, #8
 8005446:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	220f      	movs	r2, #15
 8005454:	fa02 f303 	lsl.w	r3, r2, r3
 8005458:	43db      	mvns	r3, r3
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	08d2      	lsrs	r2, r2, #3
 800545e:	4019      	ands	r1, r3
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	3208      	adds	r2, #8
 8005464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	2103      	movs	r1, #3
 8005472:	fa01 f303 	lsl.w	r3, r1, r3
 8005476:	43db      	mvns	r3, r3
 8005478:	401a      	ands	r2, r3
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	2101      	movs	r1, #1
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	fa01 f303 	lsl.w	r3, r1, r3
 800548a:	43db      	mvns	r3, r3
 800548c:	401a      	ands	r2, r3
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	2103      	movs	r1, #3
 800549c:	fa01 f303 	lsl.w	r3, r1, r3
 80054a0:	43db      	mvns	r3, r3
 80054a2:	401a      	ands	r2, r3
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	3301      	adds	r3, #1
 80054ac:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	fa22 f303 	lsr.w	r3, r2, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f47f af3c 	bne.w	8005334 <HAL_GPIO_DeInit+0x14>
  }
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	3724      	adds	r7, #36	@ 0x24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	46020000 	.word	0x46020000
 80054d0:	0800bbf8 	.word	0x0800bbf8
 80054d4:	46022000 	.word	0x46022000
 80054d8:	002f7f7f 	.word	0x002f7f7f

080054dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e081      	b.n	80055f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f8a8 	bl	8005658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2224      	movs	r2, #36	@ 0x24
 800550c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0201 	bic.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800552c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800553c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d107      	bne.n	8005556 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005552:	609a      	str	r2, [r3, #8]
 8005554:	e006      	b.n	8005564 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005562:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	2b02      	cmp	r3, #2
 800556a:	d104      	bne.n	8005576 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005574:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6812      	ldr	r2, [r2, #0]
 8005580:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005584:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005588:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005598:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691a      	ldr	r2, [r3, #16]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69d9      	ldr	r1, [r3, #28]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1a      	ldr	r2, [r3, #32]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e021      	b.n	8005650 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2224      	movs	r2, #36	@ 0x24
 8005610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0201 	bic.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f821 	bl	800566c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af02      	add	r7, sp, #8
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	4608      	mov	r0, r1
 800568a:	4611      	mov	r1, r2
 800568c:	461a      	mov	r2, r3
 800568e:	4603      	mov	r3, r0
 8005690:	817b      	strh	r3, [r7, #10]
 8005692:	460b      	mov	r3, r1
 8005694:	813b      	strh	r3, [r7, #8]
 8005696:	4613      	mov	r3, r2
 8005698:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	f040 80f9 	bne.w	800589a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <HAL_I2C_Mem_Write+0x34>
 80056ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d105      	bne.n	80056c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056ba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e0ed      	b.n	800589c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <HAL_I2C_Mem_Write+0x4e>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e0e6      	b.n	800589c <HAL_I2C_Mem_Write+0x21c>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056d6:	f7ff f837 	bl	8004748 <HAL_GetTick>
 80056da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	2319      	movs	r3, #25
 80056e2:	2201      	movs	r2, #1
 80056e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 fadd 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0d1      	b.n	800589c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2221      	movs	r2, #33	@ 0x21
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2240      	movs	r2, #64	@ 0x40
 8005704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a3a      	ldr	r2, [r7, #32]
 8005712:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005718:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005720:	88f8      	ldrh	r0, [r7, #6]
 8005722:	893a      	ldrh	r2, [r7, #8]
 8005724:	8979      	ldrh	r1, [r7, #10]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	9301      	str	r3, [sp, #4]
 800572a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	4603      	mov	r3, r0
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 f9ed 	bl	8005b10 <I2C_RequestMemoryWrite>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e0a9      	b.n	800589c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800574c:	b29b      	uxth	r3, r3
 800574e:	2bff      	cmp	r3, #255	@ 0xff
 8005750:	d90e      	bls.n	8005770 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	22ff      	movs	r2, #255	@ 0xff
 8005756:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800575c:	b2da      	uxtb	r2, r3
 800575e:	8979      	ldrh	r1, [r7, #10]
 8005760:	2300      	movs	r3, #0
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 fc45 	bl	8005ff8 <I2C_TransferConfig>
 800576e:	e00f      	b.n	8005790 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800577e:	b2da      	uxtb	r2, r3
 8005780:	8979      	ldrh	r1, [r7, #10]
 8005782:	2300      	movs	r3, #0
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 fc34 	bl	8005ff8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 fac7 	bl	8005d28 <I2C_WaitOnTXISFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e07b      	b.n	800589c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	781a      	ldrb	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d034      	beq.n	8005848 <HAL_I2C_Mem_Write+0x1c8>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d130      	bne.n	8005848 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ec:	2200      	movs	r2, #0
 80057ee:	2180      	movs	r1, #128	@ 0x80
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 fa59 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e04d      	b.n	800589c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	2bff      	cmp	r3, #255	@ 0xff
 8005808:	d90e      	bls.n	8005828 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	22ff      	movs	r2, #255	@ 0xff
 800580e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005814:	b2da      	uxtb	r2, r3
 8005816:	8979      	ldrh	r1, [r7, #10]
 8005818:	2300      	movs	r3, #0
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 fbe9 	bl	8005ff8 <I2C_TransferConfig>
 8005826:	e00f      	b.n	8005848 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005836:	b2da      	uxtb	r2, r3
 8005838:	8979      	ldrh	r1, [r7, #10]
 800583a:	2300      	movs	r3, #0
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fbd8 	bl	8005ff8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d19e      	bne.n	8005790 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 faa6 	bl	8005da8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e01a      	b.n	800589c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2220      	movs	r2, #32
 800586c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6859      	ldr	r1, [r3, #4]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	4b0a      	ldr	r3, [pc, #40]	@ (80058a4 <HAL_I2C_Mem_Write+0x224>)
 800587a:	400b      	ands	r3, r1
 800587c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	e000      	b.n	800589c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800589a:	2302      	movs	r3, #2
  }
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	fe00e800 	.word	0xfe00e800

080058a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	4608      	mov	r0, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	461a      	mov	r2, r3
 80058b6:	4603      	mov	r3, r0
 80058b8:	817b      	strh	r3, [r7, #10]
 80058ba:	460b      	mov	r3, r1
 80058bc:	813b      	strh	r3, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	f040 80fd 	bne.w	8005aca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <HAL_I2C_Mem_Read+0x34>
 80058d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d105      	bne.n	80058e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058e2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0f1      	b.n	8005acc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_I2C_Mem_Read+0x4e>
 80058f2:	2302      	movs	r3, #2
 80058f4:	e0ea      	b.n	8005acc <HAL_I2C_Mem_Read+0x224>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058fe:	f7fe ff23 	bl	8004748 <HAL_GetTick>
 8005902:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	2319      	movs	r3, #25
 800590a:	2201      	movs	r2, #1
 800590c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 f9c9 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e0d5      	b.n	8005acc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2222      	movs	r2, #34	@ 0x22
 8005924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2240      	movs	r2, #64	@ 0x40
 800592c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a3a      	ldr	r2, [r7, #32]
 800593a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005940:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005948:	88f8      	ldrh	r0, [r7, #6]
 800594a:	893a      	ldrh	r2, [r7, #8]
 800594c:	8979      	ldrh	r1, [r7, #10]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	9301      	str	r3, [sp, #4]
 8005952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	4603      	mov	r3, r0
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f92d 	bl	8005bb8 <I2C_RequestMemoryRead>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e0ad      	b.n	8005acc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005974:	b29b      	uxth	r3, r3
 8005976:	2bff      	cmp	r3, #255	@ 0xff
 8005978:	d90e      	bls.n	8005998 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	22ff      	movs	r2, #255	@ 0xff
 800597e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005984:	b2da      	uxtb	r2, r3
 8005986:	8979      	ldrh	r1, [r7, #10]
 8005988:	4b52      	ldr	r3, [pc, #328]	@ (8005ad4 <HAL_I2C_Mem_Read+0x22c>)
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 fb31 	bl	8005ff8 <I2C_TransferConfig>
 8005996:	e00f      	b.n	80059b8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	8979      	ldrh	r1, [r7, #10]
 80059aa:	4b4a      	ldr	r3, [pc, #296]	@ (8005ad4 <HAL_I2C_Mem_Read+0x22c>)
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 fb20 	bl	8005ff8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059be:	2200      	movs	r2, #0
 80059c0:	2104      	movs	r1, #4
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 f970 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e07c      	b.n	8005acc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d034      	beq.n	8005a78 <HAL_I2C_Mem_Read+0x1d0>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d130      	bne.n	8005a78 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2180      	movs	r1, #128	@ 0x80
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f941 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e04d      	b.n	8005acc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2bff      	cmp	r3, #255	@ 0xff
 8005a38:	d90e      	bls.n	8005a58 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	22ff      	movs	r2, #255	@ 0xff
 8005a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	8979      	ldrh	r1, [r7, #10]
 8005a48:	2300      	movs	r3, #0
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 fad1 	bl	8005ff8 <I2C_TransferConfig>
 8005a56:	e00f      	b.n	8005a78 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	8979      	ldrh	r1, [r7, #10]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 fac0 	bl	8005ff8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d19a      	bne.n	80059b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f98e 	bl	8005da8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e01a      	b.n	8005acc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6859      	ldr	r1, [r3, #4]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad8 <HAL_I2C_Mem_Read+0x230>)
 8005aaa:	400b      	ands	r3, r1
 8005aac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e000      	b.n	8005acc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005aca:	2302      	movs	r3, #2
  }
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	80002400 	.word	0x80002400
 8005ad8:	fe00e800 	.word	0xfe00e800

08005adc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aea:	b2db      	uxtb	r3, r3
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	4608      	mov	r0, r1
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	4603      	mov	r3, r0
 8005b20:	817b      	strh	r3, [r7, #10]
 8005b22:	460b      	mov	r3, r1
 8005b24:	813b      	strh	r3, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005b2a:	88fb      	ldrh	r3, [r7, #6]
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	8979      	ldrh	r1, [r7, #10]
 8005b30:	4b20      	ldr	r3, [pc, #128]	@ (8005bb4 <I2C_RequestMemoryWrite+0xa4>)
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 fa5d 	bl	8005ff8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b3e:	69fa      	ldr	r2, [r7, #28]
 8005b40:	69b9      	ldr	r1, [r7, #24]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 f8f0 	bl	8005d28 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e02c      	b.n	8005bac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b52:	88fb      	ldrh	r3, [r7, #6]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d105      	bne.n	8005b64 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b58:	893b      	ldrh	r3, [r7, #8]
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b62:	e015      	b.n	8005b90 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b64:	893b      	ldrh	r3, [r7, #8]
 8005b66:	0a1b      	lsrs	r3, r3, #8
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b72:	69fa      	ldr	r2, [r7, #28]
 8005b74:	69b9      	ldr	r1, [r7, #24]
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f8d6 	bl	8005d28 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e012      	b.n	8005bac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b86:	893b      	ldrh	r3, [r7, #8]
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	2200      	movs	r2, #0
 8005b98:	2180      	movs	r1, #128	@ 0x80
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 f884 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e000      	b.n	8005bac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	80002000 	.word	0x80002000

08005bb8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	817b      	strh	r3, [r7, #10]
 8005bca:	460b      	mov	r3, r1
 8005bcc:	813b      	strh	r3, [r7, #8]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005bd2:	88fb      	ldrh	r3, [r7, #6]
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	8979      	ldrh	r1, [r7, #10]
 8005bd8:	4b20      	ldr	r3, [pc, #128]	@ (8005c5c <I2C_RequestMemoryRead+0xa4>)
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 fa0a 	bl	8005ff8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	69b9      	ldr	r1, [r7, #24]
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 f89d 	bl	8005d28 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e02c      	b.n	8005c52 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bf8:	88fb      	ldrh	r3, [r7, #6]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d105      	bne.n	8005c0a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bfe:	893b      	ldrh	r3, [r7, #8]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c08:	e015      	b.n	8005c36 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c0a:	893b      	ldrh	r3, [r7, #8]
 8005c0c:	0a1b      	lsrs	r3, r3, #8
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c18:	69fa      	ldr	r2, [r7, #28]
 8005c1a:	69b9      	ldr	r1, [r7, #24]
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 f883 	bl	8005d28 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e012      	b.n	8005c52 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c2c:	893b      	ldrh	r3, [r7, #8]
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2140      	movs	r1, #64	@ 0x40
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 f831 	bl	8005ca8 <I2C_WaitOnFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e000      	b.n	8005c52 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	80002000 	.word	0x80002000

08005c60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d103      	bne.n	8005c7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d007      	beq.n	8005c9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	619a      	str	r2, [r3, #24]
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cb8:	e022      	b.n	8005d00 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cc0:	d01e      	beq.n	8005d00 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc2:	f7fe fd41 	bl	8004748 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d302      	bcc.n	8005cd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d113      	bne.n	8005d00 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cdc:	f043 0220 	orr.w	r2, r3, #32
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e00f      	b.n	8005d20 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	bf0c      	ite	eq
 8005d10:	2301      	moveq	r3, #1
 8005d12:	2300      	movne	r3, #0
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	461a      	mov	r2, r3
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d0cd      	beq.n	8005cba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d34:	e02c      	b.n	8005d90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	68b9      	ldr	r1, [r7, #8]
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 f870 	bl	8005e20 <I2C_IsErrorOccurred>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e02a      	b.n	8005da0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d50:	d01e      	beq.n	8005d90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d52:	f7fe fcf9 	bl	8004748 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d302      	bcc.n	8005d68 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d113      	bne.n	8005d90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d6c:	f043 0220 	orr.w	r2, r3, #32
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e007      	b.n	8005da0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d1cb      	bne.n	8005d36 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005db4:	e028      	b.n	8005e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f830 	bl	8005e20 <I2C_IsErrorOccurred>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e026      	b.n	8005e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dca:	f7fe fcbd 	bl	8004748 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d302      	bcc.n	8005de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d113      	bne.n	8005e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de4:	f043 0220 	orr.w	r2, r3, #32
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e007      	b.n	8005e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d1cf      	bne.n	8005db6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08a      	sub	sp, #40	@ 0x28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d075      	beq.n	8005f38 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2210      	movs	r2, #16
 8005e52:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e54:	e056      	b.n	8005f04 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e5c:	d052      	beq.n	8005f04 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e5e:	f7fe fc73 	bl	8004748 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d302      	bcc.n	8005e74 <I2C_IsErrorOccurred+0x54>
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d147      	bne.n	8005f04 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e86:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e96:	d12e      	bne.n	8005ef6 <I2C_IsErrorOccurred+0xd6>
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e9e:	d02a      	beq.n	8005ef6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005ea0:	7cfb      	ldrb	r3, [r7, #19]
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d027      	beq.n	8005ef6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005eb4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005eb6:	f7fe fc47 	bl	8004748 <HAL_GetTick>
 8005eba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ebc:	e01b      	b.n	8005ef6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ebe:	f7fe fc43 	bl	8004748 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b19      	cmp	r3, #25
 8005eca:	d914      	bls.n	8005ef6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed0:	f043 0220 	orr.w	r2, r3, #32
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

              status = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d1dc      	bne.n	8005ebe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f003 0320 	and.w	r3, r3, #32
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d003      	beq.n	8005f1a <I2C_IsErrorOccurred+0xfa>
 8005f12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d09d      	beq.n	8005e56 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d103      	bne.n	8005f2a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2220      	movs	r2, #32
 8005f28:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	f043 0304 	orr.w	r3, r3, #4
 8005f30:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00b      	beq.n	8005f62 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	f043 0301 	orr.w	r3, r3, #1
 8005f50:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00b      	beq.n	8005f84 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	f043 0308 	orr.w	r3, r3, #8
 8005f72:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00b      	beq.n	8005fa6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	f043 0302 	orr.w	r3, r3, #2
 8005f94:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d01c      	beq.n	8005fe8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f7ff fe56 	bl	8005c60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6859      	ldr	r1, [r3, #4]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff4 <I2C_IsErrorOccurred+0x1d4>)
 8005fc0:	400b      	ands	r3, r1
 8005fc2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3728      	adds	r7, #40	@ 0x28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	fe00e800 	.word	0xfe00e800

08005ff8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	607b      	str	r3, [r7, #4]
 8006002:	460b      	mov	r3, r1
 8006004:	817b      	strh	r3, [r7, #10]
 8006006:	4613      	mov	r3, r2
 8006008:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800600a:	897b      	ldrh	r3, [r7, #10]
 800600c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006010:	7a7b      	ldrb	r3, [r7, #9]
 8006012:	041b      	lsls	r3, r3, #16
 8006014:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006018:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	4313      	orrs	r3, r2
 8006022:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006026:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	0d5b      	lsrs	r3, r3, #21
 8006032:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006036:	4b08      	ldr	r3, [pc, #32]	@ (8006058 <I2C_TransferConfig+0x60>)
 8006038:	430b      	orrs	r3, r1
 800603a:	43db      	mvns	r3, r3
 800603c:	ea02 0103 	and.w	r1, r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800604a:	bf00      	nop
 800604c:	371c      	adds	r7, #28
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	03ff63ff 	.word	0x03ff63ff

0800605c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b20      	cmp	r3, #32
 8006070:	d138      	bne.n	80060e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800607c:	2302      	movs	r3, #2
 800607e:	e032      	b.n	80060e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2224      	movs	r2, #36	@ 0x24
 800608c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0201 	bic.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80060ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6819      	ldr	r1, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0201 	orr.w	r2, r2, #1
 80060ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	e000      	b.n	80060e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060e4:	2302      	movs	r3, #2
  }
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b085      	sub	sp, #20
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b20      	cmp	r3, #32
 8006106:	d139      	bne.n	800617c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006112:	2302      	movs	r3, #2
 8006114:	e033      	b.n	800617e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2224      	movs	r2, #36	@ 0x24
 8006122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0201 	bic.w	r2, r2, #1
 8006134:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006144:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0201 	orr.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	e000      	b.n	800617e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800617c:	2302      	movs	r3, #2
  }
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006198:	4b0b      	ldr	r3, [pc, #44]	@ (80061c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	73fb      	strb	r3, [r7, #15]
 80061a8:	e007      	b.n	80061ba <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80061aa:	4b07      	ldr	r3, [pc, #28]	@ (80061c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f023 0204 	bic.w	r2, r3, #4
 80061b2:	4905      	ldr	r1, [pc, #20]	@ (80061c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	40030400 	.word	0x40030400

080061cc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80061d0:	4b05      	ldr	r3, [pc, #20]	@ (80061e8 <HAL_ICACHE_Enable+0x1c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a04      	ldr	r2, [pc, #16]	@ (80061e8 <HAL_ICACHE_Enable+0x1c>)
 80061d6:	f043 0301 	orr.w	r3, r3, #1
 80061da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	40030400 	.word	0x40030400

080061ec <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80061f4:	4b34      	ldr	r3, [pc, #208]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80061f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061fc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	429a      	cmp	r2, r3
 8006204:	d101      	bne.n	800620a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	e057      	b.n	80062ba <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006210:	d90a      	bls.n	8006228 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8006212:	4b2d      	ldr	r3, [pc, #180]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4313      	orrs	r3, r2
 800621e:	4a2a      	ldr	r2, [pc, #168]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006224:	60d3      	str	r3, [r2, #12]
 8006226:	e007      	b.n	8006238 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006228:	4b27      	ldr	r3, [pc, #156]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006230:	4925      	ldr	r1, [pc, #148]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4313      	orrs	r3, r2
 8006236:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006238:	4b24      	ldr	r3, [pc, #144]	@ (80062cc <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a24      	ldr	r2, [pc, #144]	@ (80062d0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800623e:	fba2 2303 	umull	r2, r3, r2, r3
 8006242:	099b      	lsrs	r3, r3, #6
 8006244:	2232      	movs	r2, #50	@ 0x32
 8006246:	fb02 f303 	mul.w	r3, r2, r3
 800624a:	4a21      	ldr	r2, [pc, #132]	@ (80062d0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800624c:	fba2 2303 	umull	r2, r3, r2, r3
 8006250:	099b      	lsrs	r3, r3, #6
 8006252:	3301      	adds	r3, #1
 8006254:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006256:	e002      	b.n	800625e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3b01      	subs	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800625e:	4b1a      	ldr	r3, [pc, #104]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d102      	bne.n	8006270 <HAL_PWREx_ControlVoltageScaling+0x84>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1f3      	bne.n	8006258 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d01b      	beq.n	80062ae <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006276:	4b15      	ldr	r3, [pc, #84]	@ (80062cc <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a15      	ldr	r2, [pc, #84]	@ (80062d0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800627c:	fba2 2303 	umull	r2, r3, r2, r3
 8006280:	099b      	lsrs	r3, r3, #6
 8006282:	2232      	movs	r2, #50	@ 0x32
 8006284:	fb02 f303 	mul.w	r3, r2, r3
 8006288:	4a11      	ldr	r2, [pc, #68]	@ (80062d0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800628a:	fba2 2303 	umull	r2, r3, r2, r3
 800628e:	099b      	lsrs	r3, r3, #6
 8006290:	3301      	adds	r3, #1
 8006292:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006294:	e002      	b.n	800629c <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3b01      	subs	r3, #1
 800629a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800629c:	4b0a      	ldr	r3, [pc, #40]	@ (80062c8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800629e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d102      	bne.n	80062ae <HAL_PWREx_ControlVoltageScaling+0xc2>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f3      	bne.n	8006296 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e000      	b.n	80062ba <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	46020800 	.word	0x46020800
 80062cc:	20000098 	.word	0x20000098
 80062d0:	10624dd3 	.word	0x10624dd3

080062d4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80062d8:	4b04      	ldr	r3, [pc, #16]	@ (80062ec <HAL_PWREx_GetVoltageRange+0x18>)
 80062da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	46020800 	.word	0x46020800

080062f0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80062f8:	4b22      	ldr	r3, [pc, #136]	@ (8006384 <HAL_PWREx_ConfigSupply+0x94>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a22      	ldr	r2, [pc, #136]	@ (8006388 <HAL_PWREx_ConfigSupply+0x98>)
 80062fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006302:	099b      	lsrs	r3, r3, #6
 8006304:	2232      	movs	r2, #50	@ 0x32
 8006306:	fb02 f303 	mul.w	r3, r2, r3
 800630a:	4a1f      	ldr	r2, [pc, #124]	@ (8006388 <HAL_PWREx_ConfigSupply+0x98>)
 800630c:	fba2 2303 	umull	r2, r3, r2, r3
 8006310:	099b      	lsrs	r3, r3, #6
 8006312:	3301      	adds	r3, #1
 8006314:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d113      	bne.n	8006344 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800631c:	4b1b      	ldr	r3, [pc, #108]	@ (800638c <HAL_PWREx_ConfigSupply+0x9c>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	4a1a      	ldr	r2, [pc, #104]	@ (800638c <HAL_PWREx_ConfigSupply+0x9c>)
 8006322:	f023 0302 	bic.w	r3, r3, #2
 8006326:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006328:	e002      	b.n	8006330 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3b01      	subs	r3, #1
 800632e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006330:	4b16      	ldr	r3, [pc, #88]	@ (800638c <HAL_PWREx_ConfigSupply+0x9c>)
 8006332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b02      	cmp	r3, #2
 800633a:	d116      	bne.n	800636a <HAL_PWREx_ConfigSupply+0x7a>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1f3      	bne.n	800632a <HAL_PWREx_ConfigSupply+0x3a>
 8006342:	e012      	b.n	800636a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006344:	4b11      	ldr	r3, [pc, #68]	@ (800638c <HAL_PWREx_ConfigSupply+0x9c>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	4a10      	ldr	r2, [pc, #64]	@ (800638c <HAL_PWREx_ConfigSupply+0x9c>)
 800634a:	f043 0302 	orr.w	r3, r3, #2
 800634e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006350:	e002      	b.n	8006358 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3b01      	subs	r3, #1
 8006356:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006358:	4b0c      	ldr	r3, [pc, #48]	@ (800638c <HAL_PWREx_ConfigSupply+0x9c>)
 800635a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d102      	bne.n	800636a <HAL_PWREx_ConfigSupply+0x7a>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1f3      	bne.n	8006352 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e000      	b.n	8006376 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	20000098 	.word	0x20000098
 8006388:	10624dd3 	.word	0x10624dd3
 800638c:	46020800 	.word	0x46020800

08006390 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08e      	sub	sp, #56	@ 0x38
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006398:	2300      	movs	r3, #0
 800639a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d102      	bne.n	80063aa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f000 bec3 	b.w	8007130 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063aa:	4b9c      	ldr	r3, [pc, #624]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	f003 030c 	and.w	r3, r3, #12
 80063b2:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063b4:	4b99      	ldr	r3, [pc, #612]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80063b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0310 	and.w	r3, r3, #16
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 8172 	beq.w	80066b0 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80063cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d007      	beq.n	80063e2 <HAL_RCC_OscConfig+0x52>
 80063d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d4:	2b0c      	cmp	r3, #12
 80063d6:	f040 80e4 	bne.w	80065a2 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80063da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063dc:	2b01      	cmp	r3, #1
 80063de:	f040 80e0 	bne.w	80065a2 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80063e2:	4b8e      	ldr	r3, [pc, #568]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0304 	and.w	r3, r3, #4
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d006      	beq.n	80063fc <HAL_RCC_OscConfig+0x6c>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d102      	bne.n	80063fc <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	f000 be9a 	b.w	8007130 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006400:	4b86      	ldr	r3, [pc, #536]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d004      	beq.n	8006416 <HAL_RCC_OscConfig+0x86>
 800640c:	4b83      	ldr	r3, [pc, #524]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006414:	e005      	b.n	8006422 <HAL_RCC_OscConfig+0x92>
 8006416:	4b81      	ldr	r3, [pc, #516]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 8006418:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800641c:	041b      	lsls	r3, r3, #16
 800641e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006422:	4293      	cmp	r3, r2
 8006424:	d255      	bcs.n	80064d2 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10a      	bne.n	8006442 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006430:	4618      	mov	r0, r3
 8006432:	f001 f9ab 	bl	800778c <RCC_SetFlashLatencyFromMSIRange>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	f000 be77 	b.w	8007130 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006442:	4b76      	ldr	r3, [pc, #472]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	4a75      	ldr	r2, [pc, #468]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 8006448:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800644c:	6093      	str	r3, [r2, #8]
 800644e:	4b73      	ldr	r3, [pc, #460]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645a:	4970      	ldr	r1, [pc, #448]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 800645c:	4313      	orrs	r3, r2
 800645e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006464:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006468:	d309      	bcc.n	800647e <HAL_RCC_OscConfig+0xee>
 800646a:	4b6c      	ldr	r3, [pc, #432]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f023 021f 	bic.w	r2, r3, #31
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	4969      	ldr	r1, [pc, #420]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 8006478:	4313      	orrs	r3, r2
 800647a:	60cb      	str	r3, [r1, #12]
 800647c:	e07e      	b.n	800657c <HAL_RCC_OscConfig+0x1ec>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006482:	2b00      	cmp	r3, #0
 8006484:	da0a      	bge.n	800649c <HAL_RCC_OscConfig+0x10c>
 8006486:	4b65      	ldr	r3, [pc, #404]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	015b      	lsls	r3, r3, #5
 8006494:	4961      	ldr	r1, [pc, #388]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 8006496:	4313      	orrs	r3, r2
 8006498:	60cb      	str	r3, [r1, #12]
 800649a:	e06f      	b.n	800657c <HAL_RCC_OscConfig+0x1ec>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a4:	d30a      	bcc.n	80064bc <HAL_RCC_OscConfig+0x12c>
 80064a6:	4b5d      	ldr	r3, [pc, #372]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	029b      	lsls	r3, r3, #10
 80064b4:	4959      	ldr	r1, [pc, #356]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60cb      	str	r3, [r1, #12]
 80064ba:	e05f      	b.n	800657c <HAL_RCC_OscConfig+0x1ec>
 80064bc:	4b57      	ldr	r3, [pc, #348]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	03db      	lsls	r3, r3, #15
 80064ca:	4954      	ldr	r1, [pc, #336]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	60cb      	str	r3, [r1, #12]
 80064d0:	e054      	b.n	800657c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80064d2:	4b52      	ldr	r3, [pc, #328]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	4a51      	ldr	r2, [pc, #324]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80064d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80064dc:	6093      	str	r3, [r2, #8]
 80064de:	4b4f      	ldr	r3, [pc, #316]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ea:	494c      	ldr	r1, [pc, #304]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80064f8:	d309      	bcc.n	800650e <HAL_RCC_OscConfig+0x17e>
 80064fa:	4b48      	ldr	r3, [pc, #288]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f023 021f 	bic.w	r2, r3, #31
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	4945      	ldr	r1, [pc, #276]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 8006508:	4313      	orrs	r3, r2
 800650a:	60cb      	str	r3, [r1, #12]
 800650c:	e028      	b.n	8006560 <HAL_RCC_OscConfig+0x1d0>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006512:	2b00      	cmp	r3, #0
 8006514:	da0a      	bge.n	800652c <HAL_RCC_OscConfig+0x19c>
 8006516:	4b41      	ldr	r3, [pc, #260]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	015b      	lsls	r3, r3, #5
 8006524:	493d      	ldr	r1, [pc, #244]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 8006526:	4313      	orrs	r3, r2
 8006528:	60cb      	str	r3, [r1, #12]
 800652a:	e019      	b.n	8006560 <HAL_RCC_OscConfig+0x1d0>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006534:	d30a      	bcc.n	800654c <HAL_RCC_OscConfig+0x1bc>
 8006536:	4b39      	ldr	r3, [pc, #228]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	029b      	lsls	r3, r3, #10
 8006544:	4935      	ldr	r1, [pc, #212]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 8006546:	4313      	orrs	r3, r2
 8006548:	60cb      	str	r3, [r1, #12]
 800654a:	e009      	b.n	8006560 <HAL_RCC_OscConfig+0x1d0>
 800654c:	4b33      	ldr	r3, [pc, #204]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	03db      	lsls	r3, r3, #15
 800655a:	4930      	ldr	r1, [pc, #192]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 800655c:	4313      	orrs	r3, r2
 800655e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656a:	4618      	mov	r0, r3
 800656c:	f001 f90e 	bl	800778c <RCC_SetFlashLatencyFromMSIRange>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	f000 bdda 	b.w	8007130 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800657c:	f001 f8d8 	bl	8007730 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006580:	4b27      	ldr	r3, [pc, #156]	@ (8006620 <HAL_RCC_OscConfig+0x290>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	f7fe f895 	bl	80046b4 <HAL_InitTick>
 800658a:	4603      	mov	r3, r0
 800658c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8006590:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 808a 	beq.w	80066ae <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800659a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800659e:	f000 bdc7 	b.w	8007130 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d066      	beq.n	8006678 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80065aa:	4b1c      	ldr	r3, [pc, #112]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1b      	ldr	r2, [pc, #108]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80065b0:	f043 0301 	orr.w	r3, r3, #1
 80065b4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80065b6:	f7fe f8c7 	bl	8004748 <HAL_GetTick>
 80065ba:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80065bc:	e009      	b.n	80065d2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065be:	f7fe f8c3 	bl	8004748 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d902      	bls.n	80065d2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	f000 bdaf 	b.w	8007130 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80065d2:	4b12      	ldr	r3, [pc, #72]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0304 	and.w	r3, r3, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0ef      	beq.n	80065be <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80065de:	4b0f      	ldr	r3, [pc, #60]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	4a0e      	ldr	r2, [pc, #56]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80065e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80065e8:	6093      	str	r3, [r2, #8]
 80065ea:	4b0c      	ldr	r3, [pc, #48]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f6:	4909      	ldr	r1, [pc, #36]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006600:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006604:	d30e      	bcc.n	8006624 <HAL_RCC_OscConfig+0x294>
 8006606:	4b05      	ldr	r3, [pc, #20]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	f023 021f 	bic.w	r2, r3, #31
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	4902      	ldr	r1, [pc, #8]	@ (800661c <HAL_RCC_OscConfig+0x28c>)
 8006614:	4313      	orrs	r3, r2
 8006616:	60cb      	str	r3, [r1, #12]
 8006618:	e04a      	b.n	80066b0 <HAL_RCC_OscConfig+0x320>
 800661a:	bf00      	nop
 800661c:	46020c00 	.word	0x46020c00
 8006620:	2000009c 	.word	0x2000009c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006628:	2b00      	cmp	r3, #0
 800662a:	da0a      	bge.n	8006642 <HAL_RCC_OscConfig+0x2b2>
 800662c:	4b9b      	ldr	r3, [pc, #620]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	015b      	lsls	r3, r3, #5
 800663a:	4998      	ldr	r1, [pc, #608]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 800663c:	4313      	orrs	r3, r2
 800663e:	60cb      	str	r3, [r1, #12]
 8006640:	e036      	b.n	80066b0 <HAL_RCC_OscConfig+0x320>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800664a:	d30a      	bcc.n	8006662 <HAL_RCC_OscConfig+0x2d2>
 800664c:	4b93      	ldr	r3, [pc, #588]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	029b      	lsls	r3, r3, #10
 800665a:	4990      	ldr	r1, [pc, #576]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 800665c:	4313      	orrs	r3, r2
 800665e:	60cb      	str	r3, [r1, #12]
 8006660:	e026      	b.n	80066b0 <HAL_RCC_OscConfig+0x320>
 8006662:	4b8e      	ldr	r3, [pc, #568]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	03db      	lsls	r3, r3, #15
 8006670:	498a      	ldr	r1, [pc, #552]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006672:	4313      	orrs	r3, r2
 8006674:	60cb      	str	r3, [r1, #12]
 8006676:	e01b      	b.n	80066b0 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8006678:	4b88      	ldr	r3, [pc, #544]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a87      	ldr	r2, [pc, #540]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 800667e:	f023 0301 	bic.w	r3, r3, #1
 8006682:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006684:	f7fe f860 	bl	8004748 <HAL_GetTick>
 8006688:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800668a:	e009      	b.n	80066a0 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800668c:	f7fe f85c 	bl	8004748 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d902      	bls.n	80066a0 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	f000 bd48 	b.w	8007130 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80066a0:	4b7e      	ldr	r3, [pc, #504]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0304 	and.w	r3, r3, #4
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1ef      	bne.n	800668c <HAL_RCC_OscConfig+0x2fc>
 80066ac:	e000      	b.n	80066b0 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80066ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 8094 	beq.w	80067e6 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d005      	beq.n	80066d0 <HAL_RCC_OscConfig+0x340>
 80066c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c6:	2b0c      	cmp	r3, #12
 80066c8:	d110      	bne.n	80066ec <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80066ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	d10d      	bne.n	80066ec <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066d0:	4b72      	ldr	r3, [pc, #456]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 8083 	beq.w	80067e4 <HAL_RCC_OscConfig+0x454>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d17e      	bne.n	80067e4 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	f000 bd22 	b.w	8007130 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066f4:	d106      	bne.n	8006704 <HAL_RCC_OscConfig+0x374>
 80066f6:	4b69      	ldr	r3, [pc, #420]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a68      	ldr	r2, [pc, #416]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 80066fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	e041      	b.n	8006788 <HAL_RCC_OscConfig+0x3f8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800670c:	d112      	bne.n	8006734 <HAL_RCC_OscConfig+0x3a4>
 800670e:	4b63      	ldr	r3, [pc, #396]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a62      	ldr	r2, [pc, #392]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006714:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	4b60      	ldr	r3, [pc, #384]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a5f      	ldr	r2, [pc, #380]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006720:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	4b5d      	ldr	r3, [pc, #372]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a5c      	ldr	r2, [pc, #368]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 800672c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	e029      	b.n	8006788 <HAL_RCC_OscConfig+0x3f8>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800673c:	d112      	bne.n	8006764 <HAL_RCC_OscConfig+0x3d4>
 800673e:	4b57      	ldr	r3, [pc, #348]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a56      	ldr	r2, [pc, #344]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	4b54      	ldr	r3, [pc, #336]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a53      	ldr	r2, [pc, #332]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006750:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	4b51      	ldr	r3, [pc, #324]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a50      	ldr	r2, [pc, #320]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 800675c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	e011      	b.n	8006788 <HAL_RCC_OscConfig+0x3f8>
 8006764:	4b4d      	ldr	r3, [pc, #308]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a4c      	ldr	r2, [pc, #304]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 800676a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	4b4a      	ldr	r3, [pc, #296]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a49      	ldr	r2, [pc, #292]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	4b47      	ldr	r3, [pc, #284]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a46      	ldr	r2, [pc, #280]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006782:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d014      	beq.n	80067ba <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8006790:	f7fd ffda 	bl	8004748 <HAL_GetTick>
 8006794:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006796:	e009      	b.n	80067ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006798:	f7fd ffd6 	bl	8004748 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b64      	cmp	r3, #100	@ 0x64
 80067a4:	d902      	bls.n	80067ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	f000 bcc2 	b.w	8007130 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067ac:	4b3b      	ldr	r3, [pc, #236]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d0ef      	beq.n	8006798 <HAL_RCC_OscConfig+0x408>
 80067b8:	e015      	b.n	80067e6 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80067ba:	f7fd ffc5 	bl	8004748 <HAL_GetTick>
 80067be:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067c0:	e009      	b.n	80067d6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067c2:	f7fd ffc1 	bl	8004748 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b64      	cmp	r3, #100	@ 0x64
 80067ce:	d902      	bls.n	80067d6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	f000 bcad 	b.w	8007130 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067d6:	4b31      	ldr	r3, [pc, #196]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1ef      	bne.n	80067c2 <HAL_RCC_OscConfig+0x432>
 80067e2:	e000      	b.n	80067e6 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d066      	beq.n	80068c0 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d005      	beq.n	8006804 <HAL_RCC_OscConfig+0x474>
 80067f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fa:	2b0c      	cmp	r3, #12
 80067fc:	d11a      	bne.n	8006834 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80067fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006800:	2b02      	cmp	r3, #2
 8006802:	d117      	bne.n	8006834 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006804:	4b25      	ldr	r3, [pc, #148]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800680c:	2b00      	cmp	r3, #0
 800680e:	d006      	beq.n	800681e <HAL_RCC_OscConfig+0x48e>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d102      	bne.n	800681e <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	f000 bc89 	b.w	8007130 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800681e:	4b1f      	ldr	r3, [pc, #124]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	041b      	lsls	r3, r3, #16
 800682c:	491b      	ldr	r1, [pc, #108]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 800682e:	4313      	orrs	r3, r2
 8006830:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006832:	e045      	b.n	80068c0 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d024      	beq.n	8006886 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800683c:	4b17      	ldr	r3, [pc, #92]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a16      	ldr	r2, [pc, #88]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006846:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006848:	f7fd ff7e 	bl	8004748 <HAL_GetTick>
 800684c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800684e:	e009      	b.n	8006864 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006850:	f7fd ff7a 	bl	8004748 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d902      	bls.n	8006864 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	f000 bc66 	b.w	8007130 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006864:	4b0d      	ldr	r3, [pc, #52]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0ef      	beq.n	8006850 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006870:	4b0a      	ldr	r3, [pc, #40]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	041b      	lsls	r3, r3, #16
 800687e:	4907      	ldr	r1, [pc, #28]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006880:	4313      	orrs	r3, r2
 8006882:	610b      	str	r3, [r1, #16]
 8006884:	e01c      	b.n	80068c0 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006886:	4b05      	ldr	r3, [pc, #20]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a04      	ldr	r2, [pc, #16]	@ (800689c <HAL_RCC_OscConfig+0x50c>)
 800688c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006890:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006892:	f7fd ff59 	bl	8004748 <HAL_GetTick>
 8006896:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006898:	e00c      	b.n	80068b4 <HAL_RCC_OscConfig+0x524>
 800689a:	bf00      	nop
 800689c:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068a0:	f7fd ff52 	bl	8004748 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d902      	bls.n	80068b4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	f000 bc3e 	b.w	8007130 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068b4:	4baf      	ldr	r3, [pc, #700]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1ef      	bne.n	80068a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0308 	and.w	r3, r3, #8
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 80c7 	beq.w	8006a5c <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80068ce:	2300      	movs	r3, #0
 80068d0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068d4:	4ba7      	ldr	r3, [pc, #668]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 80068d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d111      	bne.n	8006906 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068e2:	4ba4      	ldr	r3, [pc, #656]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 80068e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068e8:	4aa2      	ldr	r2, [pc, #648]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 80068ea:	f043 0304 	orr.w	r3, r3, #4
 80068ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80068f2:	4ba0      	ldr	r3, [pc, #640]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 80068f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006906:	4b9c      	ldr	r3, [pc, #624]	@ (8006b78 <HAL_RCC_OscConfig+0x7e8>)
 8006908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d118      	bne.n	8006944 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006912:	4b99      	ldr	r3, [pc, #612]	@ (8006b78 <HAL_RCC_OscConfig+0x7e8>)
 8006914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006916:	4a98      	ldr	r2, [pc, #608]	@ (8006b78 <HAL_RCC_OscConfig+0x7e8>)
 8006918:	f043 0301 	orr.w	r3, r3, #1
 800691c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800691e:	f7fd ff13 	bl	8004748 <HAL_GetTick>
 8006922:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006924:	e008      	b.n	8006938 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006926:	f7fd ff0f 	bl	8004748 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d901      	bls.n	8006938 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e3fb      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006938:	4b8f      	ldr	r3, [pc, #572]	@ (8006b78 <HAL_RCC_OscConfig+0x7e8>)
 800693a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0f0      	beq.n	8006926 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d05f      	beq.n	8006a0c <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800694c:	4b89      	ldr	r3, [pc, #548]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 800694e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006952:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	699a      	ldr	r2, [r3, #24]
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800695e:	429a      	cmp	r2, r3
 8006960:	d037      	beq.n	80069d2 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d006      	beq.n	800697a <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e3da      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d01b      	beq.n	80069bc <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8006984:	4b7b      	ldr	r3, [pc, #492]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006986:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800698a:	4a7a      	ldr	r2, [pc, #488]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 800698c:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006990:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8006994:	f7fd fed8 	bl	8004748 <HAL_GetTick>
 8006998:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800699c:	f7fd fed4 	bl	8004748 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e3c0      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80069ae:	4b71      	ldr	r3, [pc, #452]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 80069b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1ef      	bne.n	800699c <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80069bc:	4b6d      	ldr	r3, [pc, #436]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 80069be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069c2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	496a      	ldr	r1, [pc, #424]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80069d2:	4b68      	ldr	r3, [pc, #416]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 80069d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069d8:	4a66      	ldr	r2, [pc, #408]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 80069da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80069e2:	f7fd feb1 	bl	8004748 <HAL_GetTick>
 80069e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80069e8:	e008      	b.n	80069fc <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069ea:	f7fd fead 	bl	8004748 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d901      	bls.n	80069fc <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e399      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80069fc:	4b5d      	ldr	r3, [pc, #372]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 80069fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0ef      	beq.n	80069ea <HAL_RCC_OscConfig+0x65a>
 8006a0a:	e01b      	b.n	8006a44 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006a0c:	4b59      	ldr	r3, [pc, #356]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a12:	4a58      	ldr	r2, [pc, #352]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006a14:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006a18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006a1c:	f7fd fe94 	bl	8004748 <HAL_GetTick>
 8006a20:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a24:	f7fd fe90 	bl	8004748 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e37c      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006a36:	4b4f      	ldr	r3, [pc, #316]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1ef      	bne.n	8006a24 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a44:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d107      	bne.n	8006a5c <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a4c:	4b49      	ldr	r3, [pc, #292]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a52:	4a48      	ldr	r2, [pc, #288]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006a54:	f023 0304 	bic.w	r3, r3, #4
 8006a58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0304 	and.w	r3, r3, #4
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 8112 	beq.w	8006c8e <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a70:	4b40      	ldr	r3, [pc, #256]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a76:	f003 0304 	and.w	r3, r3, #4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d111      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a84:	4a3b      	ldr	r2, [pc, #236]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006a86:	f043 0304 	orr.w	r3, r3, #4
 8006a8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006a8e:	4b39      	ldr	r3, [pc, #228]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	613b      	str	r3, [r7, #16]
 8006a9a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006aa2:	4b35      	ldr	r3, [pc, #212]	@ (8006b78 <HAL_RCC_OscConfig+0x7e8>)
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d118      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006aae:	4b32      	ldr	r3, [pc, #200]	@ (8006b78 <HAL_RCC_OscConfig+0x7e8>)
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab2:	4a31      	ldr	r2, [pc, #196]	@ (8006b78 <HAL_RCC_OscConfig+0x7e8>)
 8006ab4:	f043 0301 	orr.w	r3, r3, #1
 8006ab8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aba:	f7fd fe45 	bl	8004748 <HAL_GetTick>
 8006abe:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006ac0:	e008      	b.n	8006ad4 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ac2:	f7fd fe41 	bl	8004748 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e32d      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006ad4:	4b28      	ldr	r3, [pc, #160]	@ (8006b78 <HAL_RCC_OscConfig+0x7e8>)
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0f0      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d01f      	beq.n	8006b2c <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d010      	beq.n	8006b1a <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006af8:	4b1e      	ldr	r3, [pc, #120]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006afe:	4a1d      	ldr	r2, [pc, #116]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006b00:	f043 0304 	orr.w	r3, r3, #4
 8006b04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006b08:	4b1a      	ldr	r3, [pc, #104]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006b0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b0e:	4a19      	ldr	r2, [pc, #100]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006b10:	f043 0301 	orr.w	r3, r3, #1
 8006b14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006b18:	e018      	b.n	8006b4c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006b1a:	4b16      	ldr	r3, [pc, #88]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b20:	4a14      	ldr	r2, [pc, #80]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006b22:	f043 0301 	orr.w	r3, r3, #1
 8006b26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006b2a:	e00f      	b.n	8006b4c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006b2c:	4b11      	ldr	r3, [pc, #68]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b32:	4a10      	ldr	r2, [pc, #64]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006b34:	f023 0301 	bic.w	r3, r3, #1
 8006b38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006b3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b42:	4a0c      	ldr	r2, [pc, #48]	@ (8006b74 <HAL_RCC_OscConfig+0x7e4>)
 8006b44:	f023 0304 	bic.w	r3, r3, #4
 8006b48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d058      	beq.n	8006c06 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8006b54:	f7fd fdf8 	bl	8004748 <HAL_GetTick>
 8006b58:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b5a:	e00f      	b.n	8006b7c <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b5c:	f7fd fdf4 	bl	8004748 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d906      	bls.n	8006b7c <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e2de      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
 8006b72:	bf00      	nop
 8006b74:	46020c00 	.word	0x46020c00
 8006b78:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b7c:	4b9c      	ldr	r3, [pc, #624]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0e8      	beq.n	8006b5c <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d01b      	beq.n	8006bce <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006b96:	4b96      	ldr	r3, [pc, #600]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b9c:	4a94      	ldr	r2, [pc, #592]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006ba6:	e00a      	b.n	8006bbe <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ba8:	f7fd fdce 	bl	8004748 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e2b8      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006bbe:	4b8c      	ldr	r3, [pc, #560]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0ed      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x818>
 8006bcc:	e053      	b.n	8006c76 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006bce:	4b88      	ldr	r3, [pc, #544]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bd4:	4a86      	ldr	r2, [pc, #536]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006bd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006bde:	e00a      	b.n	8006bf6 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006be0:	f7fd fdb2 	bl	8004748 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e29c      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006bf6:	4b7e      	ldr	r3, [pc, #504]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1ed      	bne.n	8006be0 <HAL_RCC_OscConfig+0x850>
 8006c04:	e037      	b.n	8006c76 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006c06:	f7fd fd9f 	bl	8004748 <HAL_GetTick>
 8006c0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c0c:	e00a      	b.n	8006c24 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0e:	f7fd fd9b 	bl	8004748 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e285      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c24:	4b72      	ldr	r3, [pc, #456]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1ed      	bne.n	8006c0e <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006c32:	4b6f      	ldr	r3, [pc, #444]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01a      	beq.n	8006c76 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006c40:	4b6b      	ldr	r3, [pc, #428]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006c42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c46:	4a6a      	ldr	r2, [pc, #424]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006c48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006c50:	e00a      	b.n	8006c68 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c52:	f7fd fd79 	bl	8004748 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d901      	bls.n	8006c68 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e263      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006c68:	4b61      	ldr	r3, [pc, #388]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006c6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1ed      	bne.n	8006c52 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c76:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d107      	bne.n	8006c8e <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c7e:	4b5c      	ldr	r3, [pc, #368]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c84:	4a5a      	ldr	r2, [pc, #360]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006c86:	f023 0304 	bic.w	r3, r3, #4
 8006c8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d036      	beq.n	8006d08 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d019      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006ca2:	4b53      	ldr	r3, [pc, #332]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a52      	ldr	r2, [pc, #328]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006ca8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006cac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006cae:	f7fd fd4b 	bl	8004748 <HAL_GetTick>
 8006cb2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cb6:	f7fd fd47 	bl	8004748 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e233      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006cc8:	4b49      	ldr	r3, [pc, #292]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0f0      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x926>
 8006cd4:	e018      	b.n	8006d08 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006cd6:	4b46      	ldr	r3, [pc, #280]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a45      	ldr	r2, [pc, #276]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006cdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ce0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006ce2:	f7fd fd31 	bl	8004748 <HAL_GetTick>
 8006ce6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006ce8:	e008      	b.n	8006cfc <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cea:	f7fd fd2d 	bl	8004748 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d901      	bls.n	8006cfc <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e219      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006cfc:	4b3c      	ldr	r3, [pc, #240]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1f0      	bne.n	8006cea <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d036      	beq.n	8006d82 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d019      	beq.n	8006d50 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006d1c:	4b34      	ldr	r3, [pc, #208]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a33      	ldr	r2, [pc, #204]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006d22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d26:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006d28:	f7fd fd0e 	bl	8004748 <HAL_GetTick>
 8006d2c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006d30:	f7fd fd0a 	bl	8004748 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e1f6      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006d42:	4b2b      	ldr	r3, [pc, #172]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0f0      	beq.n	8006d30 <HAL_RCC_OscConfig+0x9a0>
 8006d4e:	e018      	b.n	8006d82 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006d50:	4b27      	ldr	r3, [pc, #156]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a26      	ldr	r2, [pc, #152]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006d56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d5a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006d5c:	f7fd fcf4 	bl	8004748 <HAL_GetTick>
 8006d60:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006d62:	e008      	b.n	8006d76 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006d64:	f7fd fcf0 	bl	8004748 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e1dc      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006d76:	4b1e      	ldr	r3, [pc, #120]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1f0      	bne.n	8006d64 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d07f      	beq.n	8006e8e <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d062      	beq.n	8006e5c <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006d96:	4b16      	ldr	r3, [pc, #88]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	4a15      	ldr	r2, [pc, #84]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006d9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006da0:	6093      	str	r3, [r2, #8]
 8006da2:	4b13      	ldr	r3, [pc, #76]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dae:	4910      	ldr	r1, [pc, #64]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006dbc:	d309      	bcc.n	8006dd2 <HAL_RCC_OscConfig+0xa42>
 8006dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f023 021f 	bic.w	r2, r3, #31
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	4909      	ldr	r1, [pc, #36]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	60cb      	str	r3, [r1, #12]
 8006dd0:	e02a      	b.n	8006e28 <HAL_RCC_OscConfig+0xa98>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	da0c      	bge.n	8006df4 <HAL_RCC_OscConfig+0xa64>
 8006dda:	4b05      	ldr	r3, [pc, #20]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	015b      	lsls	r3, r3, #5
 8006de8:	4901      	ldr	r1, [pc, #4]	@ (8006df0 <HAL_RCC_OscConfig+0xa60>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60cb      	str	r3, [r1, #12]
 8006dee:	e01b      	b.n	8006e28 <HAL_RCC_OscConfig+0xa98>
 8006df0:	46020c00 	.word	0x46020c00
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dfc:	d30a      	bcc.n	8006e14 <HAL_RCC_OscConfig+0xa84>
 8006dfe:	4ba5      	ldr	r3, [pc, #660]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	029b      	lsls	r3, r3, #10
 8006e0c:	49a1      	ldr	r1, [pc, #644]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60cb      	str	r3, [r1, #12]
 8006e12:	e009      	b.n	8006e28 <HAL_RCC_OscConfig+0xa98>
 8006e14:	4b9f      	ldr	r3, [pc, #636]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	03db      	lsls	r3, r3, #15
 8006e22:	499c      	ldr	r1, [pc, #624]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006e28:	4b9a      	ldr	r3, [pc, #616]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a99      	ldr	r2, [pc, #612]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006e2e:	f043 0310 	orr.w	r3, r3, #16
 8006e32:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006e34:	f7fd fc88 	bl	8004748 <HAL_GetTick>
 8006e38:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006e3c:	f7fd fc84 	bl	8004748 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e170      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006e4e:	4b91      	ldr	r3, [pc, #580]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0320 	and.w	r3, r3, #32
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0f0      	beq.n	8006e3c <HAL_RCC_OscConfig+0xaac>
 8006e5a:	e018      	b.n	8006e8e <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006e5c:	4b8d      	ldr	r3, [pc, #564]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a8c      	ldr	r2, [pc, #560]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006e62:	f023 0310 	bic.w	r3, r3, #16
 8006e66:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006e68:	f7fd fc6e 	bl	8004748 <HAL_GetTick>
 8006e6c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006e70:	f7fd fc6a 	bl	8004748 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e156      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006e82:	4b84      	ldr	r3, [pc, #528]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0320 	and.w	r3, r3, #32
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1f0      	bne.n	8006e70 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 814b 	beq.w	800712e <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e9e:	4b7d      	ldr	r3, [pc, #500]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	f003 030c 	and.w	r3, r3, #12
 8006ea6:	2b0c      	cmp	r3, #12
 8006ea8:	f000 80fa 	beq.w	80070a0 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	f040 80cc 	bne.w	800704e <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006eb6:	4b77      	ldr	r3, [pc, #476]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a76      	ldr	r2, [pc, #472]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006ebc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ec0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006ec2:	f7fd fc41 	bl	8004748 <HAL_GetTick>
 8006ec6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006ec8:	e008      	b.n	8006edc <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eca:	f7fd fc3d 	bl	8004748 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d901      	bls.n	8006edc <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e129      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006edc:	4b6d      	ldr	r3, [pc, #436]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1f0      	bne.n	8006eca <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ee8:	4b6a      	ldr	r3, [pc, #424]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006eee:	f003 0304 	and.w	r3, r3, #4
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d111      	bne.n	8006f1a <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006ef6:	4b67      	ldr	r3, [pc, #412]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006efc:	4a65      	ldr	r2, [pc, #404]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006efe:	f043 0304 	orr.w	r3, r3, #4
 8006f02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006f06:	4b63      	ldr	r3, [pc, #396]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f0c:	f003 0304 	and.w	r3, r3, #4
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006f14:	2301      	movs	r3, #1
 8006f16:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006f1a:	4b5f      	ldr	r3, [pc, #380]	@ (8007098 <HAL_RCC_OscConfig+0xd08>)
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f26:	d102      	bne.n	8006f2e <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006f2e:	4b5a      	ldr	r3, [pc, #360]	@ (8007098 <HAL_RCC_OscConfig+0xd08>)
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	4a59      	ldr	r2, [pc, #356]	@ (8007098 <HAL_RCC_OscConfig+0xd08>)
 8006f34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f38:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006f3a:	4b56      	ldr	r3, [pc, #344]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f42:	f023 0303 	bic.w	r3, r3, #3
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006f4e:	3a01      	subs	r2, #1
 8006f50:	0212      	lsls	r2, r2, #8
 8006f52:	4311      	orrs	r1, r2
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	494e      	ldr	r1, [pc, #312]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f60:	4b4c      	ldr	r3, [pc, #304]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006f62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f64:	4b4d      	ldr	r3, [pc, #308]	@ (800709c <HAL_RCC_OscConfig+0xd0c>)
 8006f66:	4013      	ands	r3, r2
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006f6c:	3a01      	subs	r2, #1
 8006f6e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006f76:	3a01      	subs	r2, #1
 8006f78:	0252      	lsls	r2, r2, #9
 8006f7a:	b292      	uxth	r2, r2
 8006f7c:	4311      	orrs	r1, r2
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006f82:	3a01      	subs	r2, #1
 8006f84:	0412      	lsls	r2, r2, #16
 8006f86:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006f8a:	4311      	orrs	r1, r2
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006f90:	3a01      	subs	r2, #1
 8006f92:	0612      	lsls	r2, r2, #24
 8006f94:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	493e      	ldr	r1, [pc, #248]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006fa0:	4b3c      	ldr	r3, [pc, #240]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa4:	4a3b      	ldr	r2, [pc, #236]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006fa6:	f023 0310 	bic.w	r3, r3, #16
 8006faa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006fac:	4b39      	ldr	r3, [pc, #228]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fb4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006fbc:	00d2      	lsls	r2, r2, #3
 8006fbe:	4935      	ldr	r1, [pc, #212]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	638b      	str	r3, [r1, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006fc4:	4b33      	ldr	r3, [pc, #204]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc8:	4a32      	ldr	r2, [pc, #200]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006fca:	f043 0310 	orr.w	r3, r3, #16
 8006fce:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006fd0:	4b30      	ldr	r3, [pc, #192]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd4:	f023 020c 	bic.w	r2, r3, #12
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fdc:	492d      	ldr	r1, [pc, #180]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8006fe2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d105      	bne.n	8006ff6 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006fea:	4b2b      	ldr	r3, [pc, #172]	@ (8007098 <HAL_RCC_OscConfig+0xd08>)
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	4a2a      	ldr	r2, [pc, #168]	@ (8007098 <HAL_RCC_OscConfig+0xd08>)
 8006ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ff4:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8006ff6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d107      	bne.n	800700e <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006ffe:	4b25      	ldr	r3, [pc, #148]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8007000:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007004:	4a23      	ldr	r2, [pc, #140]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8007006:	f023 0304 	bic.w	r3, r3, #4
 800700a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800700e:	4b21      	ldr	r3, [pc, #132]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8007010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007012:	4a20      	ldr	r2, [pc, #128]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8007014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007018:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800701a:	4b1e      	ldr	r3, [pc, #120]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a1d      	ldr	r2, [pc, #116]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8007020:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007024:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007026:	f7fd fb8f 	bl	8004748 <HAL_GetTick>
 800702a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800702c:	e008      	b.n	8007040 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800702e:	f7fd fb8b 	bl	8004748 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b02      	cmp	r3, #2
 800703a:	d901      	bls.n	8007040 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e077      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007040:	4b14      	ldr	r3, [pc, #80]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0f0      	beq.n	800702e <HAL_RCC_OscConfig+0xc9e>
 800704c:	e06f      	b.n	800712e <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800704e:	4b11      	ldr	r3, [pc, #68]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a10      	ldr	r2, [pc, #64]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8007054:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007058:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800705a:	f7fd fb75 	bl	8004748 <HAL_GetTick>
 800705e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007060:	e008      	b.n	8007074 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007062:	f7fd fb71 	bl	8004748 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	2b02      	cmp	r3, #2
 800706e:	d901      	bls.n	8007074 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e05d      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007074:	4b07      	ldr	r3, [pc, #28]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1f0      	bne.n	8007062 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007080:	4b04      	ldr	r3, [pc, #16]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8007082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007084:	4a03      	ldr	r2, [pc, #12]	@ (8007094 <HAL_RCC_OscConfig+0xd04>)
 8007086:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800708a:	f023 0303 	bic.w	r3, r3, #3
 800708e:	6293      	str	r3, [r2, #40]	@ 0x28
 8007090:	e04d      	b.n	800712e <HAL_RCC_OscConfig+0xd9e>
 8007092:	bf00      	nop
 8007094:	46020c00 	.word	0x46020c00
 8007098:	46020800 	.word	0x46020800
 800709c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80070a0:	4b25      	ldr	r3, [pc, #148]	@ (8007138 <HAL_RCC_OscConfig+0xda8>)
 80070a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80070a6:	4b24      	ldr	r3, [pc, #144]	@ (8007138 <HAL_RCC_OscConfig+0xda8>)
 80070a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070aa:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d03a      	beq.n	800712a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	f003 0203 	and.w	r2, r3, #3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070be:	429a      	cmp	r2, r3
 80070c0:	d133      	bne.n	800712a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	0a1b      	lsrs	r3, r3, #8
 80070c6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ce:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d12a      	bne.n	800712a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	0b1b      	lsrs	r3, r3, #12
 80070d8:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d122      	bne.n	800712a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070ee:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d11a      	bne.n	800712a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	0a5b      	lsrs	r3, r3, #9
 80070f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007100:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007102:	429a      	cmp	r2, r3
 8007104:	d111      	bne.n	800712a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	0c1b      	lsrs	r3, r3, #16
 800710a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007112:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007114:	429a      	cmp	r2, r3
 8007116:	d108      	bne.n	800712a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	0e1b      	lsrs	r3, r3, #24
 800711c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007124:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007126:	429a      	cmp	r2, r3
 8007128:	d001      	beq.n	800712e <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e000      	b.n	8007130 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3738      	adds	r7, #56	@ 0x38
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	46020c00 	.word	0x46020c00

0800713c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d101      	bne.n	8007150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e1d9      	b.n	8007504 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007150:	4b9b      	ldr	r3, [pc, #620]	@ (80073c0 <HAL_RCC_ClockConfig+0x284>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 030f 	and.w	r3, r3, #15
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	429a      	cmp	r2, r3
 800715c:	d910      	bls.n	8007180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800715e:	4b98      	ldr	r3, [pc, #608]	@ (80073c0 <HAL_RCC_ClockConfig+0x284>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f023 020f 	bic.w	r2, r3, #15
 8007166:	4996      	ldr	r1, [pc, #600]	@ (80073c0 <HAL_RCC_ClockConfig+0x284>)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	4313      	orrs	r3, r2
 800716c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800716e:	4b94      	ldr	r3, [pc, #592]	@ (80073c0 <HAL_RCC_ClockConfig+0x284>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 030f 	and.w	r3, r3, #15
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	429a      	cmp	r2, r3
 800717a:	d001      	beq.n	8007180 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e1c1      	b.n	8007504 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0310 	and.w	r3, r3, #16
 8007188:	2b00      	cmp	r3, #0
 800718a:	d010      	beq.n	80071ae <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	695a      	ldr	r2, [r3, #20]
 8007190:	4b8c      	ldr	r3, [pc, #560]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 8007192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007194:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007198:	429a      	cmp	r2, r3
 800719a:	d908      	bls.n	80071ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800719c:	4b89      	ldr	r3, [pc, #548]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 800719e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	4986      	ldr	r1, [pc, #536]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d012      	beq.n	80071e0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691a      	ldr	r2, [r3, #16]
 80071be:	4b81      	ldr	r3, [pc, #516]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	091b      	lsrs	r3, r3, #4
 80071c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d909      	bls.n	80071e0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80071cc:	4b7d      	ldr	r3, [pc, #500]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	497a      	ldr	r1, [pc, #488]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d010      	beq.n	800720e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68da      	ldr	r2, [r3, #12]
 80071f0:	4b74      	ldr	r3, [pc, #464]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d908      	bls.n	800720e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80071fc:	4b71      	ldr	r3, [pc, #452]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	496e      	ldr	r1, [pc, #440]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 800720a:	4313      	orrs	r3, r2
 800720c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d010      	beq.n	800723c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	4b69      	ldr	r3, [pc, #420]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	429a      	cmp	r2, r3
 8007228:	d908      	bls.n	800723c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800722a:	4b66      	ldr	r3, [pc, #408]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f023 020f 	bic.w	r2, r3, #15
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	4963      	ldr	r1, [pc, #396]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 8007238:	4313      	orrs	r3, r2
 800723a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 80d2 	beq.w	80073ee <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800724a:	2300      	movs	r3, #0
 800724c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	2b03      	cmp	r3, #3
 8007254:	d143      	bne.n	80072de <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007256:	4b5b      	ldr	r3, [pc, #364]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 8007258:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800725c:	f003 0304 	and.w	r3, r3, #4
 8007260:	2b00      	cmp	r3, #0
 8007262:	d110      	bne.n	8007286 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007264:	4b57      	ldr	r3, [pc, #348]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 8007266:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800726a:	4a56      	ldr	r2, [pc, #344]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 800726c:	f043 0304 	orr.w	r3, r3, #4
 8007270:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007274:	4b53      	ldr	r3, [pc, #332]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 8007276:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800727a:	f003 0304 	and.w	r3, r3, #4
 800727e:	60bb      	str	r3, [r7, #8]
 8007280:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007282:	2301      	movs	r3, #1
 8007284:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007286:	f7fd fa5f 	bl	8004748 <HAL_GetTick>
 800728a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800728c:	4b4e      	ldr	r3, [pc, #312]	@ (80073c8 <HAL_RCC_ClockConfig+0x28c>)
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00f      	beq.n	80072b8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007298:	e008      	b.n	80072ac <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800729a:	f7fd fa55 	bl	8004748 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d901      	bls.n	80072ac <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e12b      	b.n	8007504 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80072ac:	4b46      	ldr	r3, [pc, #280]	@ (80073c8 <HAL_RCC_ClockConfig+0x28c>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d0f0      	beq.n	800729a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d107      	bne.n	80072ce <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80072be:	4b41      	ldr	r3, [pc, #260]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 80072c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072c4:	4a3f      	ldr	r2, [pc, #252]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 80072c6:	f023 0304 	bic.w	r3, r3, #4
 80072ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80072ce:	4b3d      	ldr	r3, [pc, #244]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d121      	bne.n	800731e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e112      	b.n	8007504 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d107      	bne.n	80072f6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072e6:	4b37      	ldr	r3, [pc, #220]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d115      	bne.n	800731e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e106      	b.n	8007504 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d107      	bne.n	800730e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80072fe:	4b31      	ldr	r3, [pc, #196]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0304 	and.w	r3, r3, #4
 8007306:	2b00      	cmp	r3, #0
 8007308:	d109      	bne.n	800731e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e0fa      	b.n	8007504 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800730e:	4b2d      	ldr	r3, [pc, #180]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e0f2      	b.n	8007504 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800731e:	4b29      	ldr	r3, [pc, #164]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	f023 0203 	bic.w	r2, r3, #3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	4926      	ldr	r1, [pc, #152]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 800732c:	4313      	orrs	r3, r2
 800732e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8007330:	f7fd fa0a 	bl	8004748 <HAL_GetTick>
 8007334:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	2b03      	cmp	r3, #3
 800733c:	d112      	bne.n	8007364 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800733e:	e00a      	b.n	8007356 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007340:	f7fd fa02 	bl	8004748 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800734e:	4293      	cmp	r3, r2
 8007350:	d901      	bls.n	8007356 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e0d6      	b.n	8007504 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007356:	4b1b      	ldr	r3, [pc, #108]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	f003 030c 	and.w	r3, r3, #12
 800735e:	2b0c      	cmp	r3, #12
 8007360:	d1ee      	bne.n	8007340 <HAL_RCC_ClockConfig+0x204>
 8007362:	e044      	b.n	80073ee <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	2b02      	cmp	r3, #2
 800736a:	d112      	bne.n	8007392 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800736c:	e00a      	b.n	8007384 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800736e:	f7fd f9eb 	bl	8004748 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800737c:	4293      	cmp	r3, r2
 800737e:	d901      	bls.n	8007384 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e0bf      	b.n	8007504 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007384:	4b0f      	ldr	r3, [pc, #60]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 8007386:	69db      	ldr	r3, [r3, #28]
 8007388:	f003 030c 	and.w	r3, r3, #12
 800738c:	2b08      	cmp	r3, #8
 800738e:	d1ee      	bne.n	800736e <HAL_RCC_ClockConfig+0x232>
 8007390:	e02d      	b.n	80073ee <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d123      	bne.n	80073e2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800739a:	e00a      	b.n	80073b2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800739c:	f7fd f9d4 	bl	8004748 <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e0a8      	b.n	8007504 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80073b2:	4b04      	ldr	r3, [pc, #16]	@ (80073c4 <HAL_RCC_ClockConfig+0x288>)
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	f003 030c 	and.w	r3, r3, #12
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1ee      	bne.n	800739c <HAL_RCC_ClockConfig+0x260>
 80073be:	e016      	b.n	80073ee <HAL_RCC_ClockConfig+0x2b2>
 80073c0:	40022000 	.word	0x40022000
 80073c4:	46020c00 	.word	0x46020c00
 80073c8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073cc:	f7fd f9bc 	bl	8004748 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073da:	4293      	cmp	r3, r2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e090      	b.n	8007504 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80073e2:	4b4a      	ldr	r3, [pc, #296]	@ (800750c <HAL_RCC_ClockConfig+0x3d0>)
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	f003 030c 	and.w	r3, r3, #12
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d1ee      	bne.n	80073cc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d010      	beq.n	800741c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689a      	ldr	r2, [r3, #8]
 80073fe:	4b43      	ldr	r3, [pc, #268]	@ (800750c <HAL_RCC_ClockConfig+0x3d0>)
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	f003 030f 	and.w	r3, r3, #15
 8007406:	429a      	cmp	r2, r3
 8007408:	d208      	bcs.n	800741c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800740a:	4b40      	ldr	r3, [pc, #256]	@ (800750c <HAL_RCC_ClockConfig+0x3d0>)
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	f023 020f 	bic.w	r2, r3, #15
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	493d      	ldr	r1, [pc, #244]	@ (800750c <HAL_RCC_ClockConfig+0x3d0>)
 8007418:	4313      	orrs	r3, r2
 800741a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800741c:	4b3c      	ldr	r3, [pc, #240]	@ (8007510 <HAL_RCC_ClockConfig+0x3d4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 030f 	and.w	r3, r3, #15
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	429a      	cmp	r2, r3
 8007428:	d210      	bcs.n	800744c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800742a:	4b39      	ldr	r3, [pc, #228]	@ (8007510 <HAL_RCC_ClockConfig+0x3d4>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f023 020f 	bic.w	r2, r3, #15
 8007432:	4937      	ldr	r1, [pc, #220]	@ (8007510 <HAL_RCC_ClockConfig+0x3d4>)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	4313      	orrs	r3, r2
 8007438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800743a:	4b35      	ldr	r3, [pc, #212]	@ (8007510 <HAL_RCC_ClockConfig+0x3d4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 030f 	and.w	r3, r3, #15
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	d001      	beq.n	800744c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e05b      	b.n	8007504 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0304 	and.w	r3, r3, #4
 8007454:	2b00      	cmp	r3, #0
 8007456:	d010      	beq.n	800747a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68da      	ldr	r2, [r3, #12]
 800745c:	4b2b      	ldr	r3, [pc, #172]	@ (800750c <HAL_RCC_ClockConfig+0x3d0>)
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007464:	429a      	cmp	r2, r3
 8007466:	d208      	bcs.n	800747a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007468:	4b28      	ldr	r3, [pc, #160]	@ (800750c <HAL_RCC_ClockConfig+0x3d0>)
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	4925      	ldr	r1, [pc, #148]	@ (800750c <HAL_RCC_ClockConfig+0x3d0>)
 8007476:	4313      	orrs	r3, r2
 8007478:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0308 	and.w	r3, r3, #8
 8007482:	2b00      	cmp	r3, #0
 8007484:	d012      	beq.n	80074ac <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691a      	ldr	r2, [r3, #16]
 800748a:	4b20      	ldr	r3, [pc, #128]	@ (800750c <HAL_RCC_ClockConfig+0x3d0>)
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	091b      	lsrs	r3, r3, #4
 8007490:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007494:	429a      	cmp	r2, r3
 8007496:	d209      	bcs.n	80074ac <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007498:	4b1c      	ldr	r3, [pc, #112]	@ (800750c <HAL_RCC_ClockConfig+0x3d0>)
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	011b      	lsls	r3, r3, #4
 80074a6:	4919      	ldr	r1, [pc, #100]	@ (800750c <HAL_RCC_ClockConfig+0x3d0>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0310 	and.w	r3, r3, #16
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d010      	beq.n	80074da <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	695a      	ldr	r2, [r3, #20]
 80074bc:	4b13      	ldr	r3, [pc, #76]	@ (800750c <HAL_RCC_ClockConfig+0x3d0>)
 80074be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d208      	bcs.n	80074da <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80074c8:	4b10      	ldr	r3, [pc, #64]	@ (800750c <HAL_RCC_ClockConfig+0x3d0>)
 80074ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	490d      	ldr	r1, [pc, #52]	@ (800750c <HAL_RCC_ClockConfig+0x3d0>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80074da:	f000 f821 	bl	8007520 <HAL_RCC_GetSysClockFreq>
 80074de:	4602      	mov	r2, r0
 80074e0:	4b0a      	ldr	r3, [pc, #40]	@ (800750c <HAL_RCC_ClockConfig+0x3d0>)
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	f003 030f 	and.w	r3, r3, #15
 80074e8:	490a      	ldr	r1, [pc, #40]	@ (8007514 <HAL_RCC_ClockConfig+0x3d8>)
 80074ea:	5ccb      	ldrb	r3, [r1, r3]
 80074ec:	fa22 f303 	lsr.w	r3, r2, r3
 80074f0:	4a09      	ldr	r2, [pc, #36]	@ (8007518 <HAL_RCC_ClockConfig+0x3dc>)
 80074f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80074f4:	4b09      	ldr	r3, [pc, #36]	@ (800751c <HAL_RCC_ClockConfig+0x3e0>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fd f8db 	bl	80046b4 <HAL_InitTick>
 80074fe:	4603      	mov	r3, r0
 8007500:	73fb      	strb	r3, [r7, #15]

  return status;
 8007502:	7bfb      	ldrb	r3, [r7, #15]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	46020c00 	.word	0x46020c00
 8007510:	40022000 	.word	0x40022000
 8007514:	0800bba0 	.word	0x0800bba0
 8007518:	20000098 	.word	0x20000098
 800751c:	2000009c 	.word	0x2000009c

08007520 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007520:	b480      	push	{r7}
 8007522:	b08b      	sub	sp, #44	@ 0x2c
 8007524:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800752e:	4b7b      	ldr	r3, [pc, #492]	@ (800771c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	f003 030c 	and.w	r3, r3, #12
 8007536:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007538:	4b78      	ldr	r3, [pc, #480]	@ (800771c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800753a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753c:	f003 0303 	and.w	r3, r3, #3
 8007540:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <HAL_RCC_GetSysClockFreq+0x34>
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	2b0c      	cmp	r3, #12
 800754c:	d121      	bne.n	8007592 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d11e      	bne.n	8007592 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007554:	4b71      	ldr	r3, [pc, #452]	@ (800771c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d107      	bne.n	8007570 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8007560:	4b6e      	ldr	r3, [pc, #440]	@ (800771c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007562:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007566:	0b1b      	lsrs	r3, r3, #12
 8007568:	f003 030f 	and.w	r3, r3, #15
 800756c:	627b      	str	r3, [r7, #36]	@ 0x24
 800756e:	e005      	b.n	800757c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8007570:	4b6a      	ldr	r3, [pc, #424]	@ (800771c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	0f1b      	lsrs	r3, r3, #28
 8007576:	f003 030f 	and.w	r3, r3, #15
 800757a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800757c:	4a68      	ldr	r2, [pc, #416]	@ (8007720 <HAL_RCC_GetSysClockFreq+0x200>)
 800757e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007584:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d110      	bne.n	80075ae <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800758c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007590:	e00d      	b.n	80075ae <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007592:	4b62      	ldr	r3, [pc, #392]	@ (800771c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	f003 030c 	and.w	r3, r3, #12
 800759a:	2b04      	cmp	r3, #4
 800759c:	d102      	bne.n	80075a4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800759e:	4b61      	ldr	r3, [pc, #388]	@ (8007724 <HAL_RCC_GetSysClockFreq+0x204>)
 80075a0:	623b      	str	r3, [r7, #32]
 80075a2:	e004      	b.n	80075ae <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	2b08      	cmp	r3, #8
 80075a8:	d101      	bne.n	80075ae <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80075aa:	4b5e      	ldr	r3, [pc, #376]	@ (8007724 <HAL_RCC_GetSysClockFreq+0x204>)
 80075ac:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	2b0c      	cmp	r3, #12
 80075b2:	f040 80ac 	bne.w	800770e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80075b6:	4b59      	ldr	r3, [pc, #356]	@ (800771c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80075b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80075c0:	4b56      	ldr	r3, [pc, #344]	@ (800771c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80075c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c4:	0a1b      	lsrs	r3, r3, #8
 80075c6:	f003 030f 	and.w	r3, r3, #15
 80075ca:	3301      	adds	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80075ce:	4b53      	ldr	r3, [pc, #332]	@ (800771c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80075d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d2:	091b      	lsrs	r3, r3, #4
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80075da:	4b50      	ldr	r3, [pc, #320]	@ (800771c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80075dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075de:	08db      	lsrs	r3, r3, #3
 80075e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	fb02 f303 	mul.w	r3, r2, r3
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 8086 	beq.w	800770a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2b02      	cmp	r3, #2
 8007602:	d003      	beq.n	800760c <HAL_RCC_GetSysClockFreq+0xec>
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	2b03      	cmp	r3, #3
 8007608:	d022      	beq.n	8007650 <HAL_RCC_GetSysClockFreq+0x130>
 800760a:	e043      	b.n	8007694 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	ee07 3a90 	vmov	s15, r3
 8007612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007616:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8007728 <HAL_RCC_GetSysClockFreq+0x208>
 800761a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800761e:	4b3f      	ldr	r3, [pc, #252]	@ (800771c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800762e:	ed97 6a01 	vldr	s12, [r7, #4]
 8007632:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800772c <HAL_RCC_GetSysClockFreq+0x20c>
 8007636:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800763a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800763e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007642:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800764e:	e046      	b.n	80076de <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	ee07 3a90 	vmov	s15, r3
 8007656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8007728 <HAL_RCC_GetSysClockFreq+0x208>
 800765e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007662:	4b2e      	ldr	r3, [pc, #184]	@ (800771c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007672:	ed97 6a01 	vldr	s12, [r7, #4]
 8007676:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800772c <HAL_RCC_GetSysClockFreq+0x20c>
 800767a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800767e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007686:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800768a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8007692:	e024      	b.n	80076de <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	ee07 3a90 	vmov	s15, r3
 800769a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	ee07 3a90 	vmov	s15, r3
 80076a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ac:	4b1b      	ldr	r3, [pc, #108]	@ (800771c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80076ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b4:	ee07 3a90 	vmov	s15, r3
 80076b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80076bc:	ed97 6a01 	vldr	s12, [r7, #4]
 80076c0:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800772c <HAL_RCC_GetSysClockFreq+0x20c>
 80076c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80076c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80076cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80076d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d8:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80076dc:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80076de:	4b0f      	ldr	r3, [pc, #60]	@ (800771c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80076e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e2:	0e1b      	lsrs	r3, r3, #24
 80076e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076e8:	3301      	adds	r3, #1
 80076ea:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	ee07 3a90 	vmov	s15, r3
 80076f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80076fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007702:	ee17 3a90 	vmov	r3, s15
 8007706:	623b      	str	r3, [r7, #32]
 8007708:	e001      	b.n	800770e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800770a:	2300      	movs	r3, #0
 800770c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800770e:	6a3b      	ldr	r3, [r7, #32]
}
 8007710:	4618      	mov	r0, r3
 8007712:	372c      	adds	r7, #44	@ 0x2c
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	46020c00 	.word	0x46020c00
 8007720:	0800bbb8 	.word	0x0800bbb8
 8007724:	00f42400 	.word	0x00f42400
 8007728:	4b742400 	.word	0x4b742400
 800772c:	46000000 	.word	0x46000000

08007730 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007734:	f7ff fef4 	bl	8007520 <HAL_RCC_GetSysClockFreq>
 8007738:	4602      	mov	r2, r0
 800773a:	4b07      	ldr	r3, [pc, #28]	@ (8007758 <HAL_RCC_GetHCLKFreq+0x28>)
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	4906      	ldr	r1, [pc, #24]	@ (800775c <HAL_RCC_GetHCLKFreq+0x2c>)
 8007744:	5ccb      	ldrb	r3, [r1, r3]
 8007746:	fa22 f303 	lsr.w	r3, r2, r3
 800774a:	4a05      	ldr	r2, [pc, #20]	@ (8007760 <HAL_RCC_GetHCLKFreq+0x30>)
 800774c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800774e:	4b04      	ldr	r3, [pc, #16]	@ (8007760 <HAL_RCC_GetHCLKFreq+0x30>)
 8007750:	681b      	ldr	r3, [r3, #0]
}
 8007752:	4618      	mov	r0, r3
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	46020c00 	.word	0x46020c00
 800775c:	0800bba0 	.word	0x0800bba0
 8007760:	20000098 	.word	0x20000098

08007764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007768:	f7ff ffe2 	bl	8007730 <HAL_RCC_GetHCLKFreq>
 800776c:	4602      	mov	r2, r0
 800776e:	4b05      	ldr	r3, [pc, #20]	@ (8007784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	091b      	lsrs	r3, r3, #4
 8007774:	f003 0307 	and.w	r3, r3, #7
 8007778:	4903      	ldr	r1, [pc, #12]	@ (8007788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800777a:	5ccb      	ldrb	r3, [r1, r3]
 800777c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007780:	4618      	mov	r0, r3
 8007782:	bd80      	pop	{r7, pc}
 8007784:	46020c00 	.word	0x46020c00
 8007788:	0800bbb0 	.word	0x0800bbb0

0800778c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007794:	4b3e      	ldr	r3, [pc, #248]	@ (8007890 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800779a:	f003 0304 	and.w	r3, r3, #4
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80077a2:	f7fe fd97 	bl	80062d4 <HAL_PWREx_GetVoltageRange>
 80077a6:	6178      	str	r0, [r7, #20]
 80077a8:	e019      	b.n	80077de <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80077aa:	4b39      	ldr	r3, [pc, #228]	@ (8007890 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80077ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077b0:	4a37      	ldr	r2, [pc, #220]	@ (8007890 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80077b2:	f043 0304 	orr.w	r3, r3, #4
 80077b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80077ba:	4b35      	ldr	r3, [pc, #212]	@ (8007890 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80077bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80077c8:	f7fe fd84 	bl	80062d4 <HAL_PWREx_GetVoltageRange>
 80077cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80077ce:	4b30      	ldr	r3, [pc, #192]	@ (8007890 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80077d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077d4:	4a2e      	ldr	r2, [pc, #184]	@ (8007890 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80077d6:	f023 0304 	bic.w	r3, r3, #4
 80077da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80077e4:	d003      	beq.n	80077ee <RCC_SetFlashLatencyFromMSIRange+0x62>
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077ec:	d109      	bne.n	8007802 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077f4:	d202      	bcs.n	80077fc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80077f6:	2301      	movs	r3, #1
 80077f8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80077fa:	e033      	b.n	8007864 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80077fc:	2300      	movs	r3, #0
 80077fe:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007800:	e030      	b.n	8007864 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007808:	d208      	bcs.n	800781c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007810:	d102      	bne.n	8007818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8007812:	2303      	movs	r3, #3
 8007814:	613b      	str	r3, [r7, #16]
 8007816:	e025      	b.n	8007864 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e035      	b.n	8007888 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007822:	d90f      	bls.n	8007844 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d109      	bne.n	800783e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007830:	d902      	bls.n	8007838 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007832:	2300      	movs	r3, #0
 8007834:	613b      	str	r3, [r7, #16]
 8007836:	e015      	b.n	8007864 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007838:	2301      	movs	r3, #1
 800783a:	613b      	str	r3, [r7, #16]
 800783c:	e012      	b.n	8007864 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800783e:	2300      	movs	r3, #0
 8007840:	613b      	str	r3, [r7, #16]
 8007842:	e00f      	b.n	8007864 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800784a:	d109      	bne.n	8007860 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007852:	d102      	bne.n	800785a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007854:	2301      	movs	r3, #1
 8007856:	613b      	str	r3, [r7, #16]
 8007858:	e004      	b.n	8007864 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800785a:	2302      	movs	r3, #2
 800785c:	613b      	str	r3, [r7, #16]
 800785e:	e001      	b.n	8007864 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007860:	2301      	movs	r3, #1
 8007862:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007864:	4b0b      	ldr	r3, [pc, #44]	@ (8007894 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f023 020f 	bic.w	r2, r3, #15
 800786c:	4909      	ldr	r1, [pc, #36]	@ (8007894 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	4313      	orrs	r3, r2
 8007872:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007874:	4b07      	ldr	r3, [pc, #28]	@ (8007894 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 030f 	and.w	r3, r3, #15
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	429a      	cmp	r2, r3
 8007880:	d001      	beq.n	8007886 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e000      	b.n	8007888 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	46020c00 	.word	0x46020c00
 8007894:	40022000 	.word	0x40022000

08007898 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8007898:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80078d0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800789c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800789e:	e003      	b.n	80078a8 <LoopCopyDataInit>

080078a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80078a0:	4b0c      	ldr	r3, [pc, #48]	@ (80078d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80078a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80078a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80078a6:	3104      	adds	r1, #4

080078a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80078a8:	480b      	ldr	r0, [pc, #44]	@ (80078d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80078aa:	4b0c      	ldr	r3, [pc, #48]	@ (80078dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80078ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80078ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80078b0:	d3f6      	bcc.n	80078a0 <CopyDataInit>
	ldr	r2, =_sbss
 80078b2:	4a0b      	ldr	r2, [pc, #44]	@ (80078e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80078b4:	e002      	b.n	80078bc <LoopFillZerobss>

080078b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80078b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80078b8:	f842 3b04 	str.w	r3, [r2], #4

080078bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80078bc:	4b09      	ldr	r3, [pc, #36]	@ (80078e4 <LoopForever+0x16>)
	cmp	r2, r3
 80078be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80078c0:	d3f9      	bcc.n	80078b6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80078c2:	f7fc fe91 	bl	80045e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80078c6:	f001 fb59 	bl	8008f7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80078ca:	f000 f80f 	bl	80078ec <main>

080078ce <LoopForever>:

LoopForever:
    b LoopForever
 80078ce:	e7fe      	b.n	80078ce <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80078d0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80078d4:	0800c020 	.word	0x0800c020
	ldr	r0, =_sdata
 80078d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80078dc:	20000288 	.word	0x20000288
	ldr	r2, =_sbss
 80078e0:	20000288 	.word	0x20000288
	ldr	r3, = _ebss
 80078e4:	200010d8 	.word	0x200010d8

080078e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80078e8:	e7fe      	b.n	80078e8 <ADC1_IRQHandler>
	...

080078ec <main>:
 * @param  None
 * @retval None
 */

int main(void)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b092      	sub	sp, #72	@ 0x48
 80078f0:	af02      	add	r7, sp, #8
	int32_t  result = 0;
 80078f2:	2300      	movs	r3, #0
 80078f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	BSP_MOTION_SENSOR_Axes_t axes;

	int32_t j;
	uint32_t msTick, msTickPrev = 0;
 80078f6:	2300      	movs	r3, #0
 80078f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t rotation_rate_mag_threshold, acceleration_mag_threshold;
	int32_t accel_mag, gyro_mag;
	int32_t X_Offset, Y_Offset, Z_Offset;
	int32_t fullScale;

	initialise_monitor_handles();	/*rtt*/
 80078fa:	f003 fd2f 	bl	800b35c <initialise_monitor_handles>
       - Configure the Flash prefetch
       - Configurethe Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 3
       - Low Level Initialization
	 */
	HAL_Init();
 80078fe:	f7fc feab 	bl	8004658 <HAL_Init>
	/* Enable the Instruction Cache */
	CACHE_Enable();
 8007902:	f000 fb1b 	bl	8007f3c <CACHE_Enable>

	/* Configure the System clock to have a frequency of 160 MHz */
	SystemClock_Config();
 8007906:	f000 faa7 	bl	8007e58 <SystemClock_Config>

	/* Initialize User Button */

	result = Ms_Button_Init();
 800790a:	f000 fccd 	bl	80082a8 <Ms_Button_Init>
 800790e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (result < 0){
 8007910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007912:	2b00      	cmp	r3, #0
 8007914:	da03      	bge.n	800791e <main+0x32>
		printf("Initialization Error %i\n", result);
 8007916:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007918:	489f      	ldr	r0, [pc, #636]	@ (8007b98 <main+0x2ac>)
 800791a:	f001 faa5 	bl	8008e68 <iprintf>
	}

	while (1)
	{

		printf("\n\nAccelerometer Event Detection Test: Start and Stop with User Button Click\n");
 800791e:	489f      	ldr	r0, [pc, #636]	@ (8007b9c <main+0x2b0>)
 8007920:	f001 fb12 	bl	8008f48 <puts>
		User_Button_Wait();
 8007924:	f000 fcd4 	bl	80082d0 <User_Button_Wait>

		result = Ms_Accel_Init();
 8007928:	f000 fb26 	bl	8007f78 <Ms_Accel_Init>
 800792c:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (result < 0){
 800792e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007930:	2b00      	cmp	r3, #0
 8007932:	da03      	bge.n	800793c <main+0x50>
			printf("Initialization Error %i\n", result);
 8007934:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007936:	4898      	ldr	r0, [pc, #608]	@ (8007b98 <main+0x2ac>)
 8007938:	f001 fa96 	bl	8008e68 <iprintf>
		}

		/* GetFullScale and SetFullScale functions */
		if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 16) != BSP_ERROR_NONE) result--;
 800793c:	2210      	movs	r2, #16
 800793e:	2102      	movs	r1, #2
 8007940:	2000      	movs	r0, #0
 8007942:	f7fa f98f 	bl	8001c64 <BSP_MOTION_SENSOR_SetFullScale>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d002      	beq.n	8007952 <main+0x66>
 800794c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800794e:	3b01      	subs	r3, #1
 8007950:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 8007952:	1d3b      	adds	r3, r7, #4
 8007954:	461a      	mov	r2, r3
 8007956:	2102      	movs	r1, #2
 8007958:	2000      	movs	r0, #0
 800795a:	f7fa f91f 	bl	8001b9c <BSP_MOTION_SENSOR_GetFullScale>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <main+0x7e>
 8007964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007966:	3b01      	subs	r3, #1
 8007968:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (fullScale != 16) result--;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b10      	cmp	r3, #16
 800796e:	d002      	beq.n	8007976 <main+0x8a>
 8007970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007972:	3b01      	subs	r3, #1
 8007974:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (result < 0){
 8007976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007978:	2b00      	cmp	r3, #0
 800797a:	da03      	bge.n	8007984 <main+0x98>
			printf("Sensor Full Scale Error %i\n", result);
 800797c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800797e:	4888      	ldr	r0, [pc, #544]	@ (8007ba0 <main+0x2b4>)
 8007980:	f001 fa72 	bl	8008e68 <iprintf>
		}

		if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 2) != BSP_ERROR_NONE) result--;
 8007984:	2202      	movs	r2, #2
 8007986:	2102      	movs	r1, #2
 8007988:	2000      	movs	r0, #0
 800798a:	f7fa f96b 	bl	8001c64 <BSP_MOTION_SENSOR_SetFullScale>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <main+0xae>
 8007994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007996:	3b01      	subs	r3, #1
 8007998:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 800799a:	1d3b      	adds	r3, r7, #4
 800799c:	461a      	mov	r2, r3
 800799e:	2102      	movs	r1, #2
 80079a0:	2000      	movs	r0, #0
 80079a2:	f7fa f8fb 	bl	8001b9c <BSP_MOTION_SENSOR_GetFullScale>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <main+0xc6>
 80079ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ae:	3b01      	subs	r3, #1
 80079b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (fullScale != 2) result--;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d002      	beq.n	80079be <main+0xd2>
 80079b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ba:	3b01      	subs	r3, #1
 80079bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (result < 0){
 80079be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	da03      	bge.n	80079cc <main+0xe0>
			printf("Sensor Full Scale Error %i\n", result);
 80079c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079c6:	4876      	ldr	r0, [pc, #472]	@ (8007ba0 <main+0x2b4>)
 80079c8:	f001 fa4e 	bl	8008e68 <iprintf>

		/*
		 *  Adjust acceleration magnitude event detection threshold
		 */

		acceleration_mag_threshold = 500;
 80079cc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80079d0:	627b      	str	r3, [r7, #36]	@ 0x24

		printf("Acceleration Magnitude Event Detection Threshold: %i (milli-g) \n",
 80079d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079d4:	4873      	ldr	r0, [pc, #460]	@ (8007ba4 <main+0x2b8>)
 80079d6:	f001 fa47 	bl	8008e68 <iprintf>
				acceleration_mag_threshold);

		while (UserButtonPressed == 0)
 80079da:	e04e      	b.n	8007a7a <main+0x18e>
		{
			result = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_ACCELERO, &axes) != BSP_ERROR_NONE) result--;
 80079e0:	f107 0308 	add.w	r3, r7, #8
 80079e4:	461a      	mov	r2, r3
 80079e6:	2102      	movs	r1, #2
 80079e8:	2000      	movs	r0, #0
 80079ea:	f7f9 ff47 	bl	800187c <BSP_MOTION_SENSOR_GetAxes>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <main+0x10e>
 80079f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079f6:	3b01      	subs	r3, #1
 80079f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (result < 0){
 80079fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	da03      	bge.n	8007a08 <main+0x11c>
				printf("Sampling Error %i\n", result);
 8007a00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a02:	4869      	ldr	r0, [pc, #420]	@ (8007ba8 <main+0x2bc>)
 8007a04:	f001 fa30 	bl	8008e68 <iprintf>
			}
			msTick = HAL_GetTick();
 8007a08:	f7fc fe9e 	bl	8004748 <HAL_GetTick>
 8007a0c:	61f8      	str	r0, [r7, #28]

			accel_mag = axes.xval*axes.xval + axes.yval*axes.yval + (((axes.zval - 1000) - 1000))*((axes.zval - 1000));
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	fb03 f202 	mul.w	r2, r3, r2
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	68f9      	ldr	r1, [r7, #12]
 8007a1a:	fb01 f303 	mul.w	r3, r1, r3
 8007a1e:	441a      	add	r2, r3
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8007a26:	6939      	ldr	r1, [r7, #16]
 8007a28:	f5a1 717a 	sub.w	r1, r1, #1000	@ 0x3e8
 8007a2c:	fb01 f303 	mul.w	r3, r1, r3
 8007a30:	4413      	add	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]
			accel_mag = sqrt(accel_mag);
 8007a34:	6978      	ldr	r0, [r7, #20]
 8007a36:	f7f8 fd79 	bl	800052c <__aeabi_i2d>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	ec43 2b10 	vmov	d0, r2, r3
 8007a42:	f003 fd08 	bl	800b456 <sqrt>
 8007a46:	ec53 2b10 	vmov	r2, r3, d0
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	f7f9 f887 	bl	8000b60 <__aeabi_d2iz>
 8007a52:	4603      	mov	r3, r0
 8007a54:	617b      	str	r3, [r7, #20]

			if (accel_mag > acceleration_mag_threshold ){
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	dd0d      	ble.n	8007a7a <main+0x18e>
				printf("Event Time %i, X = %i, Y = %i, , Z = %i, |Acc| = %i\n", msTick, axes.xval,
 8007a5e:	68b9      	ldr	r1, [r7, #8]
 8007a60:	68f8      	ldr	r0, [r7, #12]
						axes.yval, (axes.zval - 1000), accel_mag);
 8007a62:	693b      	ldr	r3, [r7, #16]
				printf("Event Time %i, X = %i, Y = %i, , Z = %i, |Acc| = %i\n", msTick, axes.xval,
 8007a64:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	9201      	str	r2, [sp, #4]
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	4603      	mov	r3, r0
 8007a70:	460a      	mov	r2, r1
 8007a72:	69f9      	ldr	r1, [r7, #28]
 8007a74:	484d      	ldr	r0, [pc, #308]	@ (8007bac <main+0x2c0>)
 8007a76:	f001 f9f7 	bl	8008e68 <iprintf>
		while (UserButtonPressed == 0)
 8007a7a:	4b4d      	ldr	r3, [pc, #308]	@ (8007bb0 <main+0x2c4>)
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0ab      	beq.n	80079dc <main+0xf0>
			}
		}


		printf("\n\nGyroscope Event Detection Test: Start and Stop with User Button Click\n");
 8007a84:	484b      	ldr	r0, [pc, #300]	@ (8007bb4 <main+0x2c8>)
 8007a86:	f001 fa5f 	bl	8008f48 <puts>

		result = Ms_Gyro_Init();
 8007a8a:	f000 fb3f 	bl	800810c <Ms_Gyro_Init>
 8007a8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (result < 0){
 8007a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	da03      	bge.n	8007a9e <main+0x1b2>
			printf("Initialization Error %i\n", result);
 8007a96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a98:	483f      	ldr	r0, [pc, #252]	@ (8007b98 <main+0x2ac>)
 8007a9a:	f001 f9e5 	bl	8008e68 <iprintf>
		}

		rotation_rate_mag_threshold = 300;
 8007a9e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8007aa2:	623b      	str	r3, [r7, #32]
		printf("Rotation Rate Magnitude Event Detection Threshold: %i (milli-degree/s) \n",
 8007aa4:	6a39      	ldr	r1, [r7, #32]
 8007aa6:	4844      	ldr	r0, [pc, #272]	@ (8007bb8 <main+0x2cc>)
 8007aa8:	f001 f9de 	bl	8008e68 <iprintf>
				rotation_rate_mag_threshold);


		User_Button_Wait();
 8007aac:	f000 fc10 	bl	80082d0 <User_Button_Wait>

		while (UserButtonPressed == 0)
 8007ab0:	e04e      	b.n	8007b50 <main+0x264>
		{
			result = 0;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_GYRO, &axes) != BSP_ERROR_NONE) result--;
 8007ab6:	f107 0308 	add.w	r3, r7, #8
 8007aba:	461a      	mov	r2, r3
 8007abc:	2101      	movs	r1, #1
 8007abe:	2000      	movs	r0, #0
 8007ac0:	f7f9 fedc 	bl	800187c <BSP_MOTION_SENSOR_GetAxes>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <main+0x1e4>
 8007aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007acc:	3b01      	subs	r3, #1
 8007ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (result < 0){
 8007ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	da03      	bge.n	8007ade <main+0x1f2>
				printf("Sampling Error %i\n", result);
 8007ad6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ad8:	4833      	ldr	r0, [pc, #204]	@ (8007ba8 <main+0x2bc>)
 8007ada:	f001 f9c5 	bl	8008e68 <iprintf>
			}
			msTick = HAL_GetTick();
 8007ade:	f7fc fe33 	bl	8004748 <HAL_GetTick>
 8007ae2:	61f8      	str	r0, [r7, #28]
			gyro_mag = axes.xval*axes.xval + axes.yval*axes.yval + (axes.zval - 1000)*(axes.zval - 1000);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	fb03 f202 	mul.w	r2, r3, r2
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	68f9      	ldr	r1, [r7, #12]
 8007af0:	fb01 f303 	mul.w	r3, r1, r3
 8007af4:	441a      	add	r2, r3
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8007afc:	6939      	ldr	r1, [r7, #16]
 8007afe:	f5a1 717a 	sub.w	r1, r1, #1000	@ 0x3e8
 8007b02:	fb01 f303 	mul.w	r3, r1, r3
 8007b06:	4413      	add	r3, r2
 8007b08:	61bb      	str	r3, [r7, #24]
			gyro_mag = sqrt(gyro_mag);
 8007b0a:	69b8      	ldr	r0, [r7, #24]
 8007b0c:	f7f8 fd0e 	bl	800052c <__aeabi_i2d>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	ec43 2b10 	vmov	d0, r2, r3
 8007b18:	f003 fc9d 	bl	800b456 <sqrt>
 8007b1c:	ec53 2b10 	vmov	r2, r3, d0
 8007b20:	4610      	mov	r0, r2
 8007b22:	4619      	mov	r1, r3
 8007b24:	f7f9 f81c 	bl	8000b60 <__aeabi_d2iz>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	61bb      	str	r3, [r7, #24]

			if (gyro_mag > rotation_rate_mag_threshold){
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	dd0d      	ble.n	8007b50 <main+0x264>
				printf("Angular Velocity (mdeg/sec): Time %i, X = %i, Y = %i, , Z = %i, "
 8007b34:	68b9      	ldr	r1, [r7, #8]
 8007b36:	68f8      	ldr	r0, [r7, #12]
						"|Ang Velocity| = %i\n", msTick, axes.xval, axes.yval, (axes.zval - 1000), gyro_mag);
 8007b38:	693b      	ldr	r3, [r7, #16]
				printf("Angular Velocity (mdeg/sec): Time %i, X = %i, Y = %i, , Z = %i, "
 8007b3a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	9201      	str	r2, [sp, #4]
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	4603      	mov	r3, r0
 8007b46:	460a      	mov	r2, r1
 8007b48:	69f9      	ldr	r1, [r7, #28]
 8007b4a:	481c      	ldr	r0, [pc, #112]	@ (8007bbc <main+0x2d0>)
 8007b4c:	f001 f98c 	bl	8008e68 <iprintf>
		while (UserButtonPressed == 0)
 8007b50:	4b17      	ldr	r3, [pc, #92]	@ (8007bb0 <main+0x2c4>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0ab      	beq.n	8007ab2 <main+0x1c6>
			}

		}

		printf("\n\nGyroscope Event Detection Test Using Offset Correction: Start and Stop with User Button Click\n");
 8007b5a:	4819      	ldr	r0, [pc, #100]	@ (8007bc0 <main+0x2d4>)
 8007b5c:	f001 f9f4 	bl	8008f48 <puts>
		User_Button_Wait();
 8007b60:	f000 fbb6 	bl	80082d0 <User_Button_Wait>

		HAL_Delay(1000);
 8007b64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007b68:	f7fc fdfa 	bl	8004760 <HAL_Delay>

		printf("Place IoT Node at Rest on Table and Maintain Motionless\n");
 8007b6c:	4815      	ldr	r0, [pc, #84]	@ (8007bc4 <main+0x2d8>)
 8007b6e:	f001 f9eb 	bl	8008f48 <puts>

		HAL_Delay(3000);
 8007b72:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8007b76:	f7fc fdf3 	bl	8004760 <HAL_Delay>

		printf("5 Second Zero Offset Measurement Starting\n");
 8007b7a:	4813      	ldr	r0, [pc, #76]	@ (8007bc8 <main+0x2dc>)
 8007b7c:	f001 f9e4 	bl	8008f48 <puts>

		msTickPrev = HAL_GetTick();
 8007b80:	f7fc fde2 	bl	8004748 <HAL_GetTick>
 8007b84:	62b8      	str	r0, [r7, #40]	@ 0x28

		X_Offset = 0;
 8007b86:	2300      	movs	r3, #0
 8007b88:	637b      	str	r3, [r7, #52]	@ 0x34
		Y_Offset = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	633b      	str	r3, [r7, #48]	@ 0x30
		Z_Offset = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		j = 0;
 8007b92:	2300      	movs	r3, #0
 8007b94:	63bb      	str	r3, [r7, #56]	@ 0x38

		while ((HAL_GetTick() - msTickPrev) < 5000){
 8007b96:	e043      	b.n	8007c20 <main+0x334>
 8007b98:	0800b688 	.word	0x0800b688
 8007b9c:	0800b6a4 	.word	0x0800b6a4
 8007ba0:	0800b6f0 	.word	0x0800b6f0
 8007ba4:	0800b70c 	.word	0x0800b70c
 8007ba8:	0800b750 	.word	0x0800b750
 8007bac:	0800b764 	.word	0x0800b764
 8007bb0:	20000ed4 	.word	0x20000ed4
 8007bb4:	0800b79c 	.word	0x0800b79c
 8007bb8:	0800b7e4 	.word	0x0800b7e4
 8007bbc:	0800b830 	.word	0x0800b830
 8007bc0:	0800b888 	.word	0x0800b888
 8007bc4:	0800b8e8 	.word	0x0800b8e8
 8007bc8:	0800b920 	.word	0x0800b920
			HAL_Delay(100);
 8007bcc:	2064      	movs	r0, #100	@ 0x64
 8007bce:	f7fc fdc7 	bl	8004760 <HAL_Delay>
			j = j + 1;
 8007bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
			result = 0;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_GYRO, &axes) != BSP_ERROR_NONE) result--;
 8007bdc:	f107 0308 	add.w	r3, r7, #8
 8007be0:	461a      	mov	r2, r3
 8007be2:	2101      	movs	r1, #1
 8007be4:	2000      	movs	r0, #0
 8007be6:	f7f9 fe49 	bl	800187c <BSP_MOTION_SENSOR_GetAxes>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <main+0x30a>
 8007bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (result < 0){
 8007bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	da03      	bge.n	8007c04 <main+0x318>
				printf("Sampling Error %i\n", result);
 8007bfc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bfe:	488e      	ldr	r0, [pc, #568]	@ (8007e38 <main+0x54c>)
 8007c00:	f001 f932 	bl	8008e68 <iprintf>
			}
			X_Offset = X_Offset + axes.xval;
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c08:	4413      	add	r3, r2
 8007c0a:	637b      	str	r3, [r7, #52]	@ 0x34
			Y_Offset = Y_Offset + axes.yval;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c10:	4413      	add	r3, r2
 8007c12:	633b      	str	r3, [r7, #48]	@ 0x30
			Z_Offset = Z_Offset + (axes.zval - 1000);
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8007c1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c1c:	4413      	add	r3, r2
 8007c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while ((HAL_GetTick() - msTickPrev) < 5000){
 8007c20:	f7fc fd92 	bl	8004748 <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d9cc      	bls.n	8007bcc <main+0x2e0>
		}
		X_Offset = X_Offset/j;
 8007c32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c36:	fb92 f3f3 	sdiv	r3, r2, r3
 8007c3a:	637b      	str	r3, [r7, #52]	@ 0x34
		Y_Offset = Y_Offset/j;
 8007c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c40:	fb92 f3f3 	sdiv	r3, r2, r3
 8007c44:	633b      	str	r3, [r7, #48]	@ 0x30
		Z_Offset = Z_Offset/j;
 8007c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8007c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		printf("Rotation Rate Offsets (milli-deg/s): X_Offset %i, Y_Offset %i, Z_Offset %i\n", X_Offset, Y_Offset, Z_Offset);
 8007c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c54:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007c56:	4879      	ldr	r0, [pc, #484]	@ (8007e3c <main+0x550>)
 8007c58:	f001 f906 	bl	8008e68 <iprintf>

		UserButtonPressed = RESET;
 8007c5c:	4b78      	ldr	r3, [pc, #480]	@ (8007e40 <main+0x554>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	701a      	strb	r2, [r3, #0]

		rotation_rate_mag_threshold = 500;
 8007c62:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8007c66:	623b      	str	r3, [r7, #32]
		printf("Rotation Rate Magnitude Event Detection Threshold: %i (milli-degree/s) \n", rotation_rate_mag_threshold);
 8007c68:	6a39      	ldr	r1, [r7, #32]
 8007c6a:	4876      	ldr	r0, [pc, #472]	@ (8007e44 <main+0x558>)
 8007c6c:	f001 f8fc 	bl	8008e68 <iprintf>


		printf("\nGyroscope Event Detection Test: Start and Stop with User Button Click\n");
 8007c70:	4875      	ldr	r0, [pc, #468]	@ (8007e48 <main+0x55c>)
 8007c72:	f001 f969 	bl	8008f48 <puts>
		User_Button_Wait();
 8007c76:	f000 fb2b 	bl	80082d0 <User_Button_Wait>

		while (UserButtonPressed == 0)
 8007c7a:	e05f      	b.n	8007d3c <main+0x450>
		{
			HAL_Delay(100);
 8007c7c:	2064      	movs	r0, #100	@ 0x64
 8007c7e:	f7fc fd6f 	bl	8004760 <HAL_Delay>
			result = 0;
 8007c82:	2300      	movs	r3, #0
 8007c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_GYRO, &axes) != BSP_ERROR_NONE) result--;
 8007c86:	f107 0308 	add.w	r3, r7, #8
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	2000      	movs	r0, #0
 8007c90:	f7f9 fdf4 	bl	800187c <BSP_MOTION_SENSOR_GetAxes>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <main+0x3b4>
 8007c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (result < 0){
 8007ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	da03      	bge.n	8007cae <main+0x3c2>
				printf("Sampling Error %i\n", result);
 8007ca6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ca8:	4863      	ldr	r0, [pc, #396]	@ (8007e38 <main+0x54c>)
 8007caa:	f001 f8dd 	bl	8008e68 <iprintf>
			}
			axes.xval = axes.xval - X_Offset;
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	60bb      	str	r3, [r7, #8]
			axes.yval = axes.yval - Y_Offset;
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	60fb      	str	r3, [r7, #12]
			axes.zval = axes.zval - 1000 - Z_Offset;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8007cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	613b      	str	r3, [r7, #16]

			msTick = HAL_GetTick();
 8007cca:	f7fc fd3d 	bl	8004748 <HAL_GetTick>
 8007cce:	61f8      	str	r0, [r7, #28]
			gyro_mag = axes.xval*axes.xval + axes.yval*axes.yval + (axes.zval - 1000)*(axes.zval - 1000);
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	fb03 f202 	mul.w	r2, r3, r2
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	68f9      	ldr	r1, [r7, #12]
 8007cdc:	fb01 f303 	mul.w	r3, r1, r3
 8007ce0:	441a      	add	r2, r3
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8007ce8:	6939      	ldr	r1, [r7, #16]
 8007cea:	f5a1 717a 	sub.w	r1, r1, #1000	@ 0x3e8
 8007cee:	fb01 f303 	mul.w	r3, r1, r3
 8007cf2:	4413      	add	r3, r2
 8007cf4:	61bb      	str	r3, [r7, #24]
			gyro_mag = sqrt(gyro_mag);
 8007cf6:	69b8      	ldr	r0, [r7, #24]
 8007cf8:	f7f8 fc18 	bl	800052c <__aeabi_i2d>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	ec43 2b10 	vmov	d0, r2, r3
 8007d04:	f003 fba7 	bl	800b456 <sqrt>
 8007d08:	ec53 2b10 	vmov	r2, r3, d0
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4619      	mov	r1, r3
 8007d10:	f7f8 ff26 	bl	8000b60 <__aeabi_d2iz>
 8007d14:	4603      	mov	r3, r0
 8007d16:	61bb      	str	r3, [r7, #24]

			if (gyro_mag > rotation_rate_mag_threshold){
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	dd0d      	ble.n	8007d3c <main+0x450>
				printf("Event - Angular Velocity (mdeg/sec): Time %i, X = %i, Y = %i, , Z = %i, |Ang Velocity| = %i\n", msTick, axes.xval, axes.yval, (axes.zval - 1000), gyro_mag);
 8007d20:	68b9      	ldr	r1, [r7, #8]
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	9201      	str	r2, [sp, #4]
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	4603      	mov	r3, r0
 8007d32:	460a      	mov	r2, r1
 8007d34:	69f9      	ldr	r1, [r7, #28]
 8007d36:	4845      	ldr	r0, [pc, #276]	@ (8007e4c <main+0x560>)
 8007d38:	f001 f896 	bl	8008e68 <iprintf>
		while (UserButtonPressed == 0)
 8007d3c:	4b40      	ldr	r3, [pc, #256]	@ (8007e40 <main+0x554>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d09a      	beq.n	8007c7c <main+0x390>
			}

		}
		UserButtonPressed = RESET;
 8007d46:	4b3e      	ldr	r3, [pc, #248]	@ (8007e40 <main+0x554>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	701a      	strb	r2, [r3, #0]


		printf("\n\nGyroscope Event Detection Test with Reduced Threshold: Start and Stop with User Button Click\n");
 8007d4c:	4840      	ldr	r0, [pc, #256]	@ (8007e50 <main+0x564>)
 8007d4e:	f001 f8fb 	bl	8008f48 <puts>
		rotation_rate_mag_threshold = 500;
 8007d52:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8007d56:	623b      	str	r3, [r7, #32]
		printf("\nRotation Rate Magnitude Event Detection Threshold: %i (milli-degree/s) \n", rotation_rate_mag_threshold);
 8007d58:	6a39      	ldr	r1, [r7, #32]
 8007d5a:	483e      	ldr	r0, [pc, #248]	@ (8007e54 <main+0x568>)
 8007d5c:	f001 f884 	bl	8008e68 <iprintf>

		User_Button_Wait();
 8007d60:	f000 fab6 	bl	80082d0 <User_Button_Wait>



		while (UserButtonPressed == 0)
 8007d64:	e05f      	b.n	8007e26 <main+0x53a>
		{
			HAL_Delay(100);
 8007d66:	2064      	movs	r0, #100	@ 0x64
 8007d68:	f7fc fcfa 	bl	8004760 <HAL_Delay>
			result = 0;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_GYRO, &axes) != BSP_ERROR_NONE) result--;
 8007d70:	f107 0308 	add.w	r3, r7, #8
 8007d74:	461a      	mov	r2, r3
 8007d76:	2101      	movs	r1, #1
 8007d78:	2000      	movs	r0, #0
 8007d7a:	f7f9 fd7f 	bl	800187c <BSP_MOTION_SENSOR_GetAxes>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <main+0x49e>
 8007d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d86:	3b01      	subs	r3, #1
 8007d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (result < 0){
 8007d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	da03      	bge.n	8007d98 <main+0x4ac>
				printf("Sampling Error %i\n", result);
 8007d90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d92:	4829      	ldr	r0, [pc, #164]	@ (8007e38 <main+0x54c>)
 8007d94:	f001 f868 	bl	8008e68 <iprintf>
			}

			axes.xval = axes.xval - X_Offset;
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	60bb      	str	r3, [r7, #8]
			axes.yval = axes.yval - Y_Offset;
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	60fb      	str	r3, [r7, #12]
			(axes.zval) = axes.zval - 1000 - Z_Offset;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8007dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	613b      	str	r3, [r7, #16]

			msTick = HAL_GetTick();
 8007db4:	f7fc fcc8 	bl	8004748 <HAL_GetTick>
 8007db8:	61f8      	str	r0, [r7, #28]
			gyro_mag = axes.xval*axes.xval + axes.yval*axes.yval + (axes.zval - 1000)*(axes.zval - 1000);
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	fb03 f202 	mul.w	r2, r3, r2
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	68f9      	ldr	r1, [r7, #12]
 8007dc6:	fb01 f303 	mul.w	r3, r1, r3
 8007dca:	441a      	add	r2, r3
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8007dd2:	6939      	ldr	r1, [r7, #16]
 8007dd4:	f5a1 717a 	sub.w	r1, r1, #1000	@ 0x3e8
 8007dd8:	fb01 f303 	mul.w	r3, r1, r3
 8007ddc:	4413      	add	r3, r2
 8007dde:	61bb      	str	r3, [r7, #24]
			gyro_mag = sqrt(gyro_mag);
 8007de0:	69b8      	ldr	r0, [r7, #24]
 8007de2:	f7f8 fba3 	bl	800052c <__aeabi_i2d>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	ec43 2b10 	vmov	d0, r2, r3
 8007dee:	f003 fb32 	bl	800b456 <sqrt>
 8007df2:	ec53 2b10 	vmov	r2, r3, d0
 8007df6:	4610      	mov	r0, r2
 8007df8:	4619      	mov	r1, r3
 8007dfa:	f7f8 feb1 	bl	8000b60 <__aeabi_d2iz>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	61bb      	str	r3, [r7, #24]

			if (gyro_mag > rotation_rate_mag_threshold){
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	dd0d      	ble.n	8007e26 <main+0x53a>
				printf("Event - Angular Velocity (mdeg/sec): Time %i, X = %i, Y = %i, , Z = %i, |Ang Velocity| = %i\n", msTick, axes.xval, axes.yval, (axes.zval - 1000), gyro_mag);
 8007e0a:	68b9      	ldr	r1, [r7, #8]
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	9201      	str	r2, [sp, #4]
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	460a      	mov	r2, r1
 8007e1e:	69f9      	ldr	r1, [r7, #28]
 8007e20:	480a      	ldr	r0, [pc, #40]	@ (8007e4c <main+0x560>)
 8007e22:	f001 f821 	bl	8008e68 <iprintf>
		while (UserButtonPressed == 0)
 8007e26:	4b06      	ldr	r3, [pc, #24]	@ (8007e40 <main+0x554>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d09a      	beq.n	8007d66 <main+0x47a>
			}

		}

		UserButtonPressed = RESET;
 8007e30:	4b03      	ldr	r3, [pc, #12]	@ (8007e40 <main+0x554>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	701a      	strb	r2, [r3, #0]
		printf("\n\nAccelerometer Event Detection Test: Start and Stop with User Button Click\n");
 8007e36:	e572      	b.n	800791e <main+0x32>
 8007e38:	0800b750 	.word	0x0800b750
 8007e3c:	0800b94c 	.word	0x0800b94c
 8007e40:	20000ed4 	.word	0x20000ed4
 8007e44:	0800b7e4 	.word	0x0800b7e4
 8007e48:	0800b998 	.word	0x0800b998
 8007e4c:	0800b9e0 	.word	0x0800b9e0
 8007e50:	0800ba40 	.word	0x0800ba40
 8007e54:	0800baa0 	.word	0x0800baa0

08007e58 <SystemClock_Config>:
 * @retval None
 */


void SystemClock_Config(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b0a0      	sub	sp, #128	@ 0x80
 8007e5c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e5e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	605a      	str	r2, [r3, #4]
 8007e68:	609a      	str	r2, [r3, #8]
 8007e6a:	60da      	str	r2, [r3, #12]
 8007e6c:	611a      	str	r2, [r3, #16]
 8007e6e:	615a      	str	r2, [r3, #20]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e70:	f107 0308 	add.w	r3, r7, #8
 8007e74:	2260      	movs	r2, #96	@ 0x60
 8007e76:	2100      	movs	r1, #0
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f001 f86d 	bl	8008f58 <memset>

	/* Enable voltage range 1 for frequency above 100 Mhz */
	__HAL_RCC_PWR_CLK_ENABLE();
 8007e7e:	4b2e      	ldr	r3, [pc, #184]	@ (8007f38 <SystemClock_Config+0xe0>)
 8007e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e84:	4a2c      	ldr	r2, [pc, #176]	@ (8007f38 <SystemClock_Config+0xe0>)
 8007e86:	f043 0304 	orr.w	r3, r3, #4
 8007e8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8007f38 <SystemClock_Config+0xe0>)
 8007e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e94:	f003 0304 	and.w	r3, r3, #4
 8007e98:	607b      	str	r3, [r7, #4]
 8007e9a:	687b      	ldr	r3, [r7, #4]
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e9c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8007ea0:	f7fe f9a4 	bl	80061ec <HAL_PWREx_ControlVoltageScaling>

	/* Switch to SMPS regulator instead of LDO */
	HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY);
 8007ea4:	2002      	movs	r0, #2
 8007ea6:	f7fe fa23 	bl	80062f0 <HAL_PWREx_ConfigSupply>

	__HAL_RCC_PWR_CLK_DISABLE();
 8007eaa:	4b23      	ldr	r3, [pc, #140]	@ (8007f38 <SystemClock_Config+0xe0>)
 8007eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007eb0:	4a21      	ldr	r2, [pc, #132]	@ (8007f38 <SystemClock_Config+0xe0>)
 8007eb2:	f023 0304 	bic.w	r3, r3, #4
 8007eb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

	/* MSI Oscillator enabled at reset (4Mhz), activate PLL with MSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8007eba:	2310      	movs	r3, #16
 8007ebc:	60bb      	str	r3, [r7, #8]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8007ec2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8007ec8:	2310      	movs	r3, #16
 8007eca:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007ecc:	2302      	movs	r3, #2
 8007ece:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLN = 80;
 8007edc:	2350      	movs	r3, #80	@ 0x50
 8007ede:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = 2;
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLP = 2;
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8007ee8:	2302      	movs	r3, #2
 8007eea:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLFRACN= 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	667b      	str	r3, [r7, #100]	@ 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007ef0:	f107 0308 	add.w	r3, r7, #8
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fe fa4b 	bl	8006390 <HAL_RCC_OscConfig>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d000      	beq.n	8007f02 <SystemClock_Config+0xaa>
	{
		/* Initialization Error */
		while(1);
 8007f00:	e7fe      	b.n	8007f00 <SystemClock_Config+0xa8>
	}

	/* Select PLL as system clock source and configure bus clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8007f02:	231f      	movs	r3, #31
 8007f04:	66bb      	str	r3, [r7, #104]	@ 0x68
			RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_PCLK3);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f06:	2303      	movs	r3, #3
 8007f08:	66fb      	str	r3, [r7, #108]	@ 0x6c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	677b      	str	r3, [r7, #116]	@ 0x74
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f12:	2300      	movs	r3, #0
 8007f14:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8007f16:	2300      	movs	r3, #0
 8007f18:	67fb      	str	r3, [r7, #124]	@ 0x7c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007f1a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8007f1e:	2104      	movs	r1, #4
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7ff f90b 	bl	800713c <HAL_RCC_ClockConfig>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d000      	beq.n	8007f2e <SystemClock_Config+0xd6>
	{
		/* Initialization Error */
		while(1);
 8007f2c:	e7fe      	b.n	8007f2c <SystemClock_Config+0xd4>
	}
}
 8007f2e:	bf00      	nop
 8007f30:	3780      	adds	r7, #128	@ 0x80
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	46020c00 	.word	0x46020c00

08007f3c <CACHE_Enable>:
 * @brief  Enable ICACHE with 1-way set-associative configuration.
 * @param  None
 * @retval None
 */
static void CACHE_Enable(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
	/* Configure ICACHE associativity mode */
	HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY);
 8007f40:	2000      	movs	r0, #0
 8007f42:	f7fe f923 	bl	800618c <HAL_ICACHE_ConfigAssociativityMode>

	/* Enable ICACHE */
	HAL_ICACHE_Enable();
 8007f46:	f7fe f941 	bl	80061cc <HAL_ICACHE_Enable>
}
 8007f4a:	bf00      	nop
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4603      	mov	r3, r0
 8007f58:	71fb      	strb	r3, [r7, #7]
	if (Button == BUTTON_USER)
 8007f5a:	79fb      	ldrb	r3, [r7, #7]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <BSP_PB_Callback+0x16>
	{
		UserButtonPressed = SET;
 8007f60:	4b04      	ldr	r3, [pc, #16]	@ (8007f74 <BSP_PB_Callback+0x24>)
 8007f62:	2201      	movs	r2, #1
 8007f64:	701a      	strb	r2, [r3, #0]
	}
}
 8007f66:	bf00      	nop
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	20000ed4 	.word	0x20000ed4

08007f78 <Ms_Accel_Init>:
	/* De-initialize function */
	if (BSP_MOTION_SENSOR_DeInit(0) != BSP_ERROR_NONE) result--;
}

int32_t  Ms_Accel_Init(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08c      	sub	sp, #48	@ 0x30
 8007f7c:	af00      	add	r7, sp, #0
	int32_t  result  = 0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t fullScale;

	/* Initialize function for Microaccelerometer */

	/* Initialize function */
	if (BSP_MOTION_SENSOR_Init(0, MOTION_ACCELERO) != BSP_ERROR_NONE) result--;
 8007f82:	2102      	movs	r1, #2
 8007f84:	2000      	movs	r0, #0
 8007f86:	f7f9 fb59 	bl	800163c <BSP_MOTION_SENSOR_Init>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d002      	beq.n	8007f96 <Ms_Accel_Init+0x1e>
 8007f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f92:	3b01      	subs	r3, #1
 8007f94:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_GetCapabilities(0, &Capabilities) != BSP_ERROR_NONE) result--;
 8007f96:	f107 0310 	add.w	r3, r7, #16
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	f7f9 fb9d 	bl	80016dc <BSP_MOTION_SENSOR_GetCapabilities>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <Ms_Accel_Init+0x36>
 8007fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007faa:	3b01      	subs	r3, #1
 8007fac:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Read id function */
	if (BSP_MOTION_SENSOR_ReadID(0, &chipId) != BSP_ERROR_NONE) result--;
 8007fae:	f107 030f 	add.w	r3, r7, #15
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	f7f9 fbc9 	bl	800174c <BSP_MOTION_SENSOR_ReadID>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <Ms_Accel_Init+0x4e>
 8007fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Enable function */
	if (BSP_MOTION_SENSOR_Enable(0, MOTION_ACCELERO) != BSP_ERROR_NONE) result--;
 8007fc6:	2102      	movs	r1, #2
 8007fc8:	2000      	movs	r0, #0
 8007fca:	f7f9 fbf7 	bl	80017bc <BSP_MOTION_SENSOR_Enable>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d002      	beq.n	8007fda <Ms_Accel_Init+0x62>
 8007fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetFullScale and SetFullScale functions */
	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 16) != BSP_ERROR_NONE) result--;
 8007fda:	2210      	movs	r2, #16
 8007fdc:	2102      	movs	r1, #2
 8007fde:	2000      	movs	r0, #0
 8007fe0:	f7f9 fe40 	bl	8001c64 <BSP_MOTION_SENSOR_SetFullScale>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <Ms_Accel_Init+0x78>
 8007fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fec:	3b01      	subs	r3, #1
 8007fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 8007ff0:	463b      	mov	r3, r7
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	2102      	movs	r1, #2
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	f7f9 fdd0 	bl	8001b9c <BSP_MOTION_SENSOR_GetFullScale>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <Ms_Accel_Init+0x90>
 8008002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008004:	3b01      	subs	r3, #1
 8008006:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (fullScale != 16) result--;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	2b10      	cmp	r3, #16
 800800c:	d002      	beq.n	8008014 <Ms_Accel_Init+0x9c>
 800800e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008010:	3b01      	subs	r3, #1
 8008012:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 2) != BSP_ERROR_NONE) result--;
 8008014:	2202      	movs	r2, #2
 8008016:	2102      	movs	r1, #2
 8008018:	2000      	movs	r0, #0
 800801a:	f7f9 fe23 	bl	8001c64 <BSP_MOTION_SENSOR_SetFullScale>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <Ms_Accel_Init+0xb2>
 8008024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008026:	3b01      	subs	r3, #1
 8008028:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 800802a:	463b      	mov	r3, r7
 800802c:	461a      	mov	r2, r3
 800802e:	2102      	movs	r1, #2
 8008030:	2000      	movs	r0, #0
 8008032:	f7f9 fdb3 	bl	8001b9c <BSP_MOTION_SENSOR_GetFullScale>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <Ms_Accel_Init+0xca>
 800803c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800803e:	3b01      	subs	r3, #1
 8008040:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (fullScale != 2) result--;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b02      	cmp	r3, #2
 8008046:	d002      	beq.n	800804e <Ms_Accel_Init+0xd6>
 8008048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804a:	3b01      	subs	r3, #1
 800804c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetOutputDataRate and SetOutputDataRate functions */
	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 3333.0f) != BSP_ERROR_NONE) result--;
 800804e:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8008104 <Ms_Accel_Init+0x18c>
 8008052:	2102      	movs	r1, #2
 8008054:	2000      	movs	r0, #0
 8008056:	f7f9 fd3d 	bl	8001ad4 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <Ms_Accel_Init+0xee>
 8008060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008062:	3b01      	subs	r3, #1
 8008064:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 8008066:	1d3b      	adds	r3, r7, #4
 8008068:	461a      	mov	r2, r3
 800806a:	2102      	movs	r1, #2
 800806c:	2000      	movs	r0, #0
 800806e:	f7f9 fccd 	bl	8001a0c <BSP_MOTION_SENSOR_GetOutputDataRate>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <Ms_Accel_Init+0x106>
 8008078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807a:	3b01      	subs	r3, #1
 800807c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (outputDataRate != 3333.0f) result--;
 800807e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008082:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8008104 <Ms_Accel_Init+0x18c>
 8008086:	eef4 7a47 	vcmp.f32	s15, s14
 800808a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800808e:	d002      	beq.n	8008096 <Ms_Accel_Init+0x11e>
 8008090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008092:	3b01      	subs	r3, #1
 8008094:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 208.0f) != BSP_ERROR_NONE) result--;
 8008096:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8008108 <Ms_Accel_Init+0x190>
 800809a:	2102      	movs	r1, #2
 800809c:	2000      	movs	r0, #0
 800809e:	f7f9 fd19 	bl	8001ad4 <BSP_MOTION_SENSOR_SetOutputDataRate>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <Ms_Accel_Init+0x136>
 80080a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080aa:	3b01      	subs	r3, #1
 80080ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 80080ae:	1d3b      	adds	r3, r7, #4
 80080b0:	461a      	mov	r2, r3
 80080b2:	2102      	movs	r1, #2
 80080b4:	2000      	movs	r0, #0
 80080b6:	f7f9 fca9 	bl	8001a0c <BSP_MOTION_SENSOR_GetOutputDataRate>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <Ms_Accel_Init+0x14e>
 80080c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c2:	3b01      	subs	r3, #1
 80080c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (outputDataRate != 208.0f) result--;
 80080c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80080ca:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8008108 <Ms_Accel_Init+0x190>
 80080ce:	eef4 7a47 	vcmp.f32	s15, s14
 80080d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d6:	d002      	beq.n	80080de <Ms_Accel_Init+0x166>
 80080d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080da:	3b01      	subs	r3, #1
 80080dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetSensitivity function */
	if (BSP_MOTION_SENSOR_GetSensitivity(0, MOTION_ACCELERO, &sensitivity) != BSP_ERROR_NONE) result--;
 80080de:	f107 0308 	add.w	r3, r7, #8
 80080e2:	461a      	mov	r2, r3
 80080e4:	2102      	movs	r1, #2
 80080e6:	2000      	movs	r0, #0
 80080e8:	f7f9 fc2c 	bl	8001944 <BSP_MOTION_SENSOR_GetSensitivity>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d002      	beq.n	80080f8 <Ms_Accel_Init+0x180>
 80080f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f4:	3b01      	subs	r3, #1
 80080f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	return result;
 80080f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3730      	adds	r7, #48	@ 0x30
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	45505000 	.word	0x45505000
 8008108:	43500000 	.word	0x43500000

0800810c <Ms_Gyro_Init>:

int32_t Ms_Gyro_Init(void)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08c      	sub	sp, #48	@ 0x30
 8008110:	af00      	add	r7, sp, #0
	int32_t  result  = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Initialize function for Microgyro */

	/* Initialize function */

	if (BSP_MOTION_SENSOR_Init(0, MOTION_GYRO) != BSP_ERROR_NONE) result--;
 8008116:	2101      	movs	r1, #1
 8008118:	2000      	movs	r0, #0
 800811a:	f7f9 fa8f 	bl	800163c <BSP_MOTION_SENSOR_Init>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <Ms_Gyro_Init+0x1e>
 8008124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008126:	3b01      	subs	r3, #1
 8008128:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_GetCapabilities(0, &Capabilities) != BSP_ERROR_NONE) result--;
 800812a:	f107 0310 	add.w	r3, r7, #16
 800812e:	4619      	mov	r1, r3
 8008130:	2000      	movs	r0, #0
 8008132:	f7f9 fad3 	bl	80016dc <BSP_MOTION_SENSOR_GetCapabilities>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <Ms_Gyro_Init+0x36>
 800813c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800813e:	3b01      	subs	r3, #1
 8008140:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Read id function */
	if (BSP_MOTION_SENSOR_ReadID(0, &chipId) != BSP_ERROR_NONE) result--;
 8008142:	f107 030f 	add.w	r3, r7, #15
 8008146:	4619      	mov	r1, r3
 8008148:	2000      	movs	r0, #0
 800814a:	f7f9 faff 	bl	800174c <BSP_MOTION_SENSOR_ReadID>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <Ms_Gyro_Init+0x4e>
 8008154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008156:	3b01      	subs	r3, #1
 8008158:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Enable function */
	if (BSP_MOTION_SENSOR_Enable(0, MOTION_GYRO) != BSP_ERROR_NONE) result--;
 800815a:	2101      	movs	r1, #1
 800815c:	2000      	movs	r0, #0
 800815e:	f7f9 fb2d 	bl	80017bc <BSP_MOTION_SENSOR_Enable>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <Ms_Gyro_Init+0x62>
 8008168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800816a:	3b01      	subs	r3, #1
 800816c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetFullScale and SetFullScale functions */
	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_GYRO, 2000) != BSP_ERROR_NONE) result--;
 800816e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8008172:	2101      	movs	r1, #1
 8008174:	2000      	movs	r0, #0
 8008176:	f7f9 fd75 	bl	8001c64 <BSP_MOTION_SENSOR_SetFullScale>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <Ms_Gyro_Init+0x7a>
 8008180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008182:	3b01      	subs	r3, #1
 8008184:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_GYRO, &fullScale) != BSP_ERROR_NONE) result--;
 8008186:	463b      	mov	r3, r7
 8008188:	461a      	mov	r2, r3
 800818a:	2101      	movs	r1, #1
 800818c:	2000      	movs	r0, #0
 800818e:	f7f9 fd05 	bl	8001b9c <BSP_MOTION_SENSOR_GetFullScale>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <Ms_Gyro_Init+0x92>
 8008198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800819a:	3b01      	subs	r3, #1
 800819c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (fullScale != 2000) result--;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80081a4:	d002      	beq.n	80081ac <Ms_Gyro_Init+0xa0>
 80081a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081a8:	3b01      	subs	r3, #1
 80081aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_GYRO, 500) != BSP_ERROR_NONE) result--;
 80081ac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80081b0:	2101      	movs	r1, #1
 80081b2:	2000      	movs	r0, #0
 80081b4:	f7f9 fd56 	bl	8001c64 <BSP_MOTION_SENSOR_SetFullScale>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <Ms_Gyro_Init+0xb8>
 80081be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c0:	3b01      	subs	r3, #1
 80081c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_GYRO, &fullScale) != BSP_ERROR_NONE) result--;
 80081c4:	463b      	mov	r3, r7
 80081c6:	461a      	mov	r2, r3
 80081c8:	2101      	movs	r1, #1
 80081ca:	2000      	movs	r0, #0
 80081cc:	f7f9 fce6 	bl	8001b9c <BSP_MOTION_SENSOR_GetFullScale>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d002      	beq.n	80081dc <Ms_Gyro_Init+0xd0>
 80081d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d8:	3b01      	subs	r3, #1
 80081da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (fullScale != 500) result--;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80081e2:	d002      	beq.n	80081ea <Ms_Gyro_Init+0xde>
 80081e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e6:	3b01      	subs	r3, #1
 80081e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetOutputDataRate and SetOutputDataRate functions */
	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_GYRO, 3333.0f) != BSP_ERROR_NONE) result--;
 80081ea:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 80082a0 <Ms_Gyro_Init+0x194>
 80081ee:	2101      	movs	r1, #1
 80081f0:	2000      	movs	r0, #0
 80081f2:	f7f9 fc6f 	bl	8001ad4 <BSP_MOTION_SENSOR_SetOutputDataRate>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <Ms_Gyro_Init+0xf6>
 80081fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fe:	3b01      	subs	r3, #1
 8008200:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_GYRO, &outputDataRate) != BSP_ERROR_NONE) result--;
 8008202:	1d3b      	adds	r3, r7, #4
 8008204:	461a      	mov	r2, r3
 8008206:	2101      	movs	r1, #1
 8008208:	2000      	movs	r0, #0
 800820a:	f7f9 fbff 	bl	8001a0c <BSP_MOTION_SENSOR_GetOutputDataRate>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <Ms_Gyro_Init+0x10e>
 8008214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008216:	3b01      	subs	r3, #1
 8008218:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (outputDataRate != 3333.0f) result--;
 800821a:	edd7 7a01 	vldr	s15, [r7, #4]
 800821e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80082a0 <Ms_Gyro_Init+0x194>
 8008222:	eef4 7a47 	vcmp.f32	s15, s14
 8008226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800822a:	d002      	beq.n	8008232 <Ms_Gyro_Init+0x126>
 800822c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822e:	3b01      	subs	r3, #1
 8008230:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_GYRO, 208.0f) != BSP_ERROR_NONE) result--;
 8008232:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 80082a4 <Ms_Gyro_Init+0x198>
 8008236:	2101      	movs	r1, #1
 8008238:	2000      	movs	r0, #0
 800823a:	f7f9 fc4b 	bl	8001ad4 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <Ms_Gyro_Init+0x13e>
 8008244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008246:	3b01      	subs	r3, #1
 8008248:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_GYRO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800824a:	1d3b      	adds	r3, r7, #4
 800824c:	461a      	mov	r2, r3
 800824e:	2101      	movs	r1, #1
 8008250:	2000      	movs	r0, #0
 8008252:	f7f9 fbdb 	bl	8001a0c <BSP_MOTION_SENSOR_GetOutputDataRate>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <Ms_Gyro_Init+0x156>
 800825c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825e:	3b01      	subs	r3, #1
 8008260:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (outputDataRate != 208.0f) result--;
 8008262:	edd7 7a01 	vldr	s15, [r7, #4]
 8008266:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80082a4 <Ms_Gyro_Init+0x198>
 800826a:	eef4 7a47 	vcmp.f32	s15, s14
 800826e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008272:	d002      	beq.n	800827a <Ms_Gyro_Init+0x16e>
 8008274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008276:	3b01      	subs	r3, #1
 8008278:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* GetSensitivity function */
	if (BSP_MOTION_SENSOR_GetSensitivity(0, MOTION_GYRO, &sensitivity) != BSP_ERROR_NONE) result--;
 800827a:	f107 0308 	add.w	r3, r7, #8
 800827e:	461a      	mov	r2, r3
 8008280:	2101      	movs	r1, #1
 8008282:	2000      	movs	r0, #0
 8008284:	f7f9 fb5e 	bl	8001944 <BSP_MOTION_SENSOR_GetSensitivity>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <Ms_Gyro_Init+0x188>
 800828e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008290:	3b01      	subs	r3, #1
 8008292:	62fb      	str	r3, [r7, #44]	@ 0x2c

	return result;
 8008294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

}
 8008296:	4618      	mov	r0, r3
 8008298:	3730      	adds	r7, #48	@ 0x30
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	45505000 	.word	0x45505000
 80082a4:	43500000 	.word	0x43500000

080082a8 <Ms_Button_Init>:

int32_t Ms_Button_Init(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
	int32_t  result  = 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	607b      	str	r3, [r7, #4]
	/* Initialize user button */
	if (BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI) != BSP_ERROR_NONE) result--;
 80082b2:	2101      	movs	r1, #1
 80082b4:	2000      	movs	r0, #0
 80082b6:	f7f8 fc7b 	bl	8000bb0 <BSP_PB_Init>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <Ms_Button_Init+0x1e>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	607b      	str	r3, [r7, #4]
	return result;
 80082c6:	687b      	ldr	r3, [r7, #4]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <User_Button_Wait>:
	UserButtonPressed = RESET;
	printf("\n");
}

void User_Button_Wait()
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0
	printf("\n");
 80082d4:	200a      	movs	r0, #10
 80082d6:	f000 fdd9 	bl	8008e8c <putchar>
	UserButtonPressed = RESET;
 80082da:	4b0a      	ldr	r3, [pc, #40]	@ (8008304 <User_Button_Wait+0x34>)
 80082dc:	2200      	movs	r2, #0
 80082de:	701a      	strb	r2, [r3, #0]
	while (UserButtonPressed == 0)
 80082e0:	e002      	b.n	80082e8 <User_Button_Wait+0x18>
	{
		HAL_Delay(10);
 80082e2:	200a      	movs	r0, #10
 80082e4:	f7fc fa3c 	bl	8004760 <HAL_Delay>
	while (UserButtonPressed == 0)
 80082e8:	4b06      	ldr	r3, [pc, #24]	@ (8008304 <User_Button_Wait+0x34>)
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0f7      	beq.n	80082e2 <User_Button_Wait+0x12>
	}
	UserButtonPressed = RESET;
 80082f2:	4b04      	ldr	r3, [pc, #16]	@ (8008304 <User_Button_Wait+0x34>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	701a      	strb	r2, [r3, #0]
	printf("\n");
 80082f8:	200a      	movs	r0, #10
 80082fa:	f000 fdc7 	bl	8008e8c <putchar>
}
 80082fe:	bf00      	nop
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	20000ed4 	.word	0x20000ed4

08008308 <HAL_MspInit>:
/**
  * @brief  Initialize the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8008308:	b480      	push	{r7}
 800830a:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
}
 800830c:	bf00      	nop
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8008316:	b480      	push	{r7}
 8008318:	af00      	add	r7, sp, #0
}
 800831a:	bf00      	nop
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8008324:	b480      	push	{r7}
 8008326:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8008328:	e7fe      	b.n	8008328 <HardFault_Handler+0x4>

0800832a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800832a:	b480      	push	{r7}
 800832c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800832e:	e7fe      	b.n	800832e <MemManage_Handler+0x4>

08008330 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8008330:	b480      	push	{r7}
 8008332:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8008334:	e7fe      	b.n	8008334 <BusFault_Handler+0x4>

08008336 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8008336:	b480      	push	{r7}
 8008338:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800833a:	e7fe      	b.n	800833a <UsageFault_Handler+0x4>

0800833c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0
}
 8008340:	bf00      	nop
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800834a:	b480      	push	{r7}
 800834c:	af00      	add	r7, sp, #0
  while (1)
 800834e:	e7fe      	b.n	800834e <DebugMon_Handler+0x4>

08008350 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
  while (1)
 8008354:	e7fe      	b.n	8008354 <PendSV_Handler+0x4>

08008356 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800835a:	f7fc f9e1 	bl	8004720 <HAL_IncTick>
}
 800835e:	bf00      	nop
 8008360:	bd80      	pop	{r7, pc}

08008362 <GPDMA1_Channel0_IRQHandler>:
  * @brief  This function handles GPDMA_Channel0 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0, AUDIO_IN_DEVICE_DIGITAL_MIC2);
 8008366:	2102      	movs	r1, #2
 8008368:	2000      	movs	r0, #0
 800836a:	f7f8 fcab 	bl	8000cc4 <BSP_AUDIO_IN_IRQHandler>
}
 800836e:	bf00      	nop
 8008370:	bd80      	pop	{r7, pc}

08008372 <GPDMA1_Channel6_IRQHandler>:
  * @brief  This function handles GPDMA_Channel6 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel6_IRQHandler(void)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0, AUDIO_IN_DEVICE_DIGITAL_MIC1);
 8008376:	2101      	movs	r1, #1
 8008378:	2000      	movs	r0, #0
 800837a:	f7f8 fca3 	bl	8000cc4 <BSP_AUDIO_IN_IRQHandler>
} 
 800837e:	bf00      	nop
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <EXTI13_IRQHandler>:
  * @brief  This function handles EXTI13 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI13_IRQHandler(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&hpb_exti[0]);
 8008388:	4802      	ldr	r0, [pc, #8]	@ (8008394 <EXTI13_IRQHandler+0x10>)
 800838a:	f7fc fda9 	bl	8004ee0 <HAL_EXTI_IRQHandler>
}
 800838e:	bf00      	nop
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	200002a4 	.word	0x200002a4

08008398 <DCMI_PSSI_IRQHandler>:
  * @brief  This function handles DCMI_PSSI interrupt request.
  * @param  None
  * @retval None
  */
void DCMI_PSSI_IRQHandler(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	af00      	add	r7, sp, #0
  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 800839c:	4802      	ldr	r0, [pc, #8]	@ (80083a8 <DCMI_PSSI_IRQHandler+0x10>)
 800839e:	f7fc fb13 	bl	80049c8 <HAL_DCMI_IRQHandler>
}
 80083a2:	bf00      	nop
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20000df4 	.word	0x20000df4

080083ac <GPDMA1_Channel12_IRQHandler>:
  * @brief  This function handles GPDMA_Channel12 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 80083b0:	4b03      	ldr	r3, [pc, #12]	@ (80083c0 <GPDMA1_Channel12_IRQHandler+0x14>)
 80083b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fc fbdf 	bl	8004b78 <HAL_DMA_IRQHandler>
}
 80083ba:	bf00      	nop
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	20000df4 	.word	0x20000df4

080083c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80083cc:	4a14      	ldr	r2, [pc, #80]	@ (8008420 <_sbrk+0x5c>)
 80083ce:	4b15      	ldr	r3, [pc, #84]	@ (8008424 <_sbrk+0x60>)
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80083d8:	4b13      	ldr	r3, [pc, #76]	@ (8008428 <_sbrk+0x64>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d102      	bne.n	80083e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80083e0:	4b11      	ldr	r3, [pc, #68]	@ (8008428 <_sbrk+0x64>)
 80083e2:	4a12      	ldr	r2, [pc, #72]	@ (800842c <_sbrk+0x68>)
 80083e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80083e6:	4b10      	ldr	r3, [pc, #64]	@ (8008428 <_sbrk+0x64>)
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4413      	add	r3, r2
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d207      	bcs.n	8008404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80083f4:	f000 fdbc 	bl	8008f70 <__errno>
 80083f8:	4603      	mov	r3, r0
 80083fa:	220c      	movs	r2, #12
 80083fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80083fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008402:	e009      	b.n	8008418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008404:	4b08      	ldr	r3, [pc, #32]	@ (8008428 <_sbrk+0x64>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800840a:	4b07      	ldr	r3, [pc, #28]	@ (8008428 <_sbrk+0x64>)
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4413      	add	r3, r2
 8008412:	4a05      	ldr	r2, [pc, #20]	@ (8008428 <_sbrk+0x64>)
 8008414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008416:	68fb      	ldr	r3, [r7, #12]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	200c0000 	.word	0x200c0000
 8008424:	00001000 	.word	0x00001000
 8008428:	20000ed8 	.word	0x20000ed8
 800842c:	200010d8 	.word	0x200010d8

08008430 <__cvt>:
 8008430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008434:	ec57 6b10 	vmov	r6, r7, d0
 8008438:	2f00      	cmp	r7, #0
 800843a:	460c      	mov	r4, r1
 800843c:	4619      	mov	r1, r3
 800843e:	463b      	mov	r3, r7
 8008440:	bfb4      	ite	lt
 8008442:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008446:	2300      	movge	r3, #0
 8008448:	4691      	mov	r9, r2
 800844a:	bfbf      	itttt	lt
 800844c:	4632      	movlt	r2, r6
 800844e:	461f      	movlt	r7, r3
 8008450:	232d      	movlt	r3, #45	@ 0x2d
 8008452:	4616      	movlt	r6, r2
 8008454:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008458:	700b      	strb	r3, [r1, #0]
 800845a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800845c:	f023 0820 	bic.w	r8, r3, #32
 8008460:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008464:	d005      	beq.n	8008472 <__cvt+0x42>
 8008466:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800846a:	d100      	bne.n	800846e <__cvt+0x3e>
 800846c:	3401      	adds	r4, #1
 800846e:	2102      	movs	r1, #2
 8008470:	e000      	b.n	8008474 <__cvt+0x44>
 8008472:	2103      	movs	r1, #3
 8008474:	ab03      	add	r3, sp, #12
 8008476:	4622      	mov	r2, r4
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	ab02      	add	r3, sp, #8
 800847c:	ec47 6b10 	vmov	d0, r6, r7
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	4653      	mov	r3, sl
 8008484:	f000 fe68 	bl	8009158 <_dtoa_r>
 8008488:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800848c:	4605      	mov	r5, r0
 800848e:	d119      	bne.n	80084c4 <__cvt+0x94>
 8008490:	f019 0f01 	tst.w	r9, #1
 8008494:	d00e      	beq.n	80084b4 <__cvt+0x84>
 8008496:	eb00 0904 	add.w	r9, r0, r4
 800849a:	2200      	movs	r2, #0
 800849c:	2300      	movs	r3, #0
 800849e:	4630      	mov	r0, r6
 80084a0:	4639      	mov	r1, r7
 80084a2:	f7f8 fb15 	bl	8000ad0 <__aeabi_dcmpeq>
 80084a6:	b108      	cbz	r0, 80084ac <__cvt+0x7c>
 80084a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80084ac:	2230      	movs	r2, #48	@ 0x30
 80084ae:	9b03      	ldr	r3, [sp, #12]
 80084b0:	454b      	cmp	r3, r9
 80084b2:	d31e      	bcc.n	80084f2 <__cvt+0xc2>
 80084b4:	9b03      	ldr	r3, [sp, #12]
 80084b6:	4628      	mov	r0, r5
 80084b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084ba:	1b5b      	subs	r3, r3, r5
 80084bc:	6013      	str	r3, [r2, #0]
 80084be:	b004      	add	sp, #16
 80084c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80084c8:	eb00 0904 	add.w	r9, r0, r4
 80084cc:	d1e5      	bne.n	800849a <__cvt+0x6a>
 80084ce:	7803      	ldrb	r3, [r0, #0]
 80084d0:	2b30      	cmp	r3, #48	@ 0x30
 80084d2:	d10a      	bne.n	80084ea <__cvt+0xba>
 80084d4:	2200      	movs	r2, #0
 80084d6:	2300      	movs	r3, #0
 80084d8:	4630      	mov	r0, r6
 80084da:	4639      	mov	r1, r7
 80084dc:	f7f8 faf8 	bl	8000ad0 <__aeabi_dcmpeq>
 80084e0:	b918      	cbnz	r0, 80084ea <__cvt+0xba>
 80084e2:	f1c4 0401 	rsb	r4, r4, #1
 80084e6:	f8ca 4000 	str.w	r4, [sl]
 80084ea:	f8da 3000 	ldr.w	r3, [sl]
 80084ee:	4499      	add	r9, r3
 80084f0:	e7d3      	b.n	800849a <__cvt+0x6a>
 80084f2:	1c59      	adds	r1, r3, #1
 80084f4:	9103      	str	r1, [sp, #12]
 80084f6:	701a      	strb	r2, [r3, #0]
 80084f8:	e7d9      	b.n	80084ae <__cvt+0x7e>

080084fa <__exponent>:
 80084fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084fc:	2900      	cmp	r1, #0
 80084fe:	7002      	strb	r2, [r0, #0]
 8008500:	bfba      	itte	lt
 8008502:	4249      	neglt	r1, r1
 8008504:	232d      	movlt	r3, #45	@ 0x2d
 8008506:	232b      	movge	r3, #43	@ 0x2b
 8008508:	2909      	cmp	r1, #9
 800850a:	7043      	strb	r3, [r0, #1]
 800850c:	dd28      	ble.n	8008560 <__exponent+0x66>
 800850e:	f10d 0307 	add.w	r3, sp, #7
 8008512:	270a      	movs	r7, #10
 8008514:	461d      	mov	r5, r3
 8008516:	461a      	mov	r2, r3
 8008518:	3b01      	subs	r3, #1
 800851a:	fbb1 f6f7 	udiv	r6, r1, r7
 800851e:	fb07 1416 	mls	r4, r7, r6, r1
 8008522:	3430      	adds	r4, #48	@ 0x30
 8008524:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008528:	460c      	mov	r4, r1
 800852a:	4631      	mov	r1, r6
 800852c:	2c63      	cmp	r4, #99	@ 0x63
 800852e:	dcf2      	bgt.n	8008516 <__exponent+0x1c>
 8008530:	3130      	adds	r1, #48	@ 0x30
 8008532:	1e94      	subs	r4, r2, #2
 8008534:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008538:	1c41      	adds	r1, r0, #1
 800853a:	4623      	mov	r3, r4
 800853c:	42ab      	cmp	r3, r5
 800853e:	d30a      	bcc.n	8008556 <__exponent+0x5c>
 8008540:	f10d 0309 	add.w	r3, sp, #9
 8008544:	1a9b      	subs	r3, r3, r2
 8008546:	42ac      	cmp	r4, r5
 8008548:	bf88      	it	hi
 800854a:	2300      	movhi	r3, #0
 800854c:	3302      	adds	r3, #2
 800854e:	4403      	add	r3, r0
 8008550:	1a18      	subs	r0, r3, r0
 8008552:	b003      	add	sp, #12
 8008554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008556:	f813 6b01 	ldrb.w	r6, [r3], #1
 800855a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800855e:	e7ed      	b.n	800853c <__exponent+0x42>
 8008560:	2330      	movs	r3, #48	@ 0x30
 8008562:	3130      	adds	r1, #48	@ 0x30
 8008564:	7083      	strb	r3, [r0, #2]
 8008566:	1d03      	adds	r3, r0, #4
 8008568:	70c1      	strb	r1, [r0, #3]
 800856a:	e7f1      	b.n	8008550 <__exponent+0x56>

0800856c <_printf_float>:
 800856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008570:	b08d      	sub	sp, #52	@ 0x34
 8008572:	460c      	mov	r4, r1
 8008574:	4616      	mov	r6, r2
 8008576:	461f      	mov	r7, r3
 8008578:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800857c:	4605      	mov	r5, r0
 800857e:	f000 fcf3 	bl	8008f68 <_localeconv_r>
 8008582:	6803      	ldr	r3, [r0, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	9304      	str	r3, [sp, #16]
 8008588:	f7f7 fe76 	bl	8000278 <strlen>
 800858c:	2300      	movs	r3, #0
 800858e:	9005      	str	r0, [sp, #20]
 8008590:	930a      	str	r3, [sp, #40]	@ 0x28
 8008592:	f8d8 3000 	ldr.w	r3, [r8]
 8008596:	f894 a018 	ldrb.w	sl, [r4, #24]
 800859a:	3307      	adds	r3, #7
 800859c:	f8d4 b000 	ldr.w	fp, [r4]
 80085a0:	f023 0307 	bic.w	r3, r3, #7
 80085a4:	f103 0208 	add.w	r2, r3, #8
 80085a8:	f8c8 2000 	str.w	r2, [r8]
 80085ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80085b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80085bc:	9307      	str	r3, [sp, #28]
 80085be:	4b9d      	ldr	r3, [pc, #628]	@ (8008834 <_printf_float+0x2c8>)
 80085c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80085c8:	f7f8 fab4 	bl	8000b34 <__aeabi_dcmpun>
 80085cc:	bb70      	cbnz	r0, 800862c <_printf_float+0xc0>
 80085ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085d2:	4b98      	ldr	r3, [pc, #608]	@ (8008834 <_printf_float+0x2c8>)
 80085d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085d8:	f7f8 fa8e 	bl	8000af8 <__aeabi_dcmple>
 80085dc:	bb30      	cbnz	r0, 800862c <_printf_float+0xc0>
 80085de:	2200      	movs	r2, #0
 80085e0:	2300      	movs	r3, #0
 80085e2:	4640      	mov	r0, r8
 80085e4:	4649      	mov	r1, r9
 80085e6:	f7f8 fa7d 	bl	8000ae4 <__aeabi_dcmplt>
 80085ea:	b110      	cbz	r0, 80085f2 <_printf_float+0x86>
 80085ec:	232d      	movs	r3, #45	@ 0x2d
 80085ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085f2:	4a91      	ldr	r2, [pc, #580]	@ (8008838 <_printf_float+0x2cc>)
 80085f4:	4b91      	ldr	r3, [pc, #580]	@ (800883c <_printf_float+0x2d0>)
 80085f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80085fa:	bf94      	ite	ls
 80085fc:	4690      	movls	r8, r2
 80085fe:	4698      	movhi	r8, r3
 8008600:	2303      	movs	r3, #3
 8008602:	f04f 0900 	mov.w	r9, #0
 8008606:	6123      	str	r3, [r4, #16]
 8008608:	f02b 0304 	bic.w	r3, fp, #4
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	4633      	mov	r3, r6
 8008610:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008612:	4621      	mov	r1, r4
 8008614:	4628      	mov	r0, r5
 8008616:	9700      	str	r7, [sp, #0]
 8008618:	f000 f9d2 	bl	80089c0 <_printf_common>
 800861c:	3001      	adds	r0, #1
 800861e:	f040 808d 	bne.w	800873c <_printf_float+0x1d0>
 8008622:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008626:	b00d      	add	sp, #52	@ 0x34
 8008628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862c:	4642      	mov	r2, r8
 800862e:	464b      	mov	r3, r9
 8008630:	4640      	mov	r0, r8
 8008632:	4649      	mov	r1, r9
 8008634:	f7f8 fa7e 	bl	8000b34 <__aeabi_dcmpun>
 8008638:	b140      	cbz	r0, 800864c <_printf_float+0xe0>
 800863a:	464b      	mov	r3, r9
 800863c:	4a80      	ldr	r2, [pc, #512]	@ (8008840 <_printf_float+0x2d4>)
 800863e:	2b00      	cmp	r3, #0
 8008640:	bfbc      	itt	lt
 8008642:	232d      	movlt	r3, #45	@ 0x2d
 8008644:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008648:	4b7e      	ldr	r3, [pc, #504]	@ (8008844 <_printf_float+0x2d8>)
 800864a:	e7d4      	b.n	80085f6 <_printf_float+0x8a>
 800864c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008650:	6863      	ldr	r3, [r4, #4]
 8008652:	9206      	str	r2, [sp, #24]
 8008654:	1c5a      	adds	r2, r3, #1
 8008656:	d13b      	bne.n	80086d0 <_printf_float+0x164>
 8008658:	2306      	movs	r3, #6
 800865a:	6063      	str	r3, [r4, #4]
 800865c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008660:	2300      	movs	r3, #0
 8008662:	4628      	mov	r0, r5
 8008664:	6022      	str	r2, [r4, #0]
 8008666:	9303      	str	r3, [sp, #12]
 8008668:	ab0a      	add	r3, sp, #40	@ 0x28
 800866a:	e9cd a301 	strd	sl, r3, [sp, #4]
 800866e:	ab09      	add	r3, sp, #36	@ 0x24
 8008670:	ec49 8b10 	vmov	d0, r8, r9
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800867a:	6861      	ldr	r1, [r4, #4]
 800867c:	f7ff fed8 	bl	8008430 <__cvt>
 8008680:	9b06      	ldr	r3, [sp, #24]
 8008682:	4680      	mov	r8, r0
 8008684:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008686:	2b47      	cmp	r3, #71	@ 0x47
 8008688:	d129      	bne.n	80086de <_printf_float+0x172>
 800868a:	1cc8      	adds	r0, r1, #3
 800868c:	db02      	blt.n	8008694 <_printf_float+0x128>
 800868e:	6863      	ldr	r3, [r4, #4]
 8008690:	4299      	cmp	r1, r3
 8008692:	dd41      	ble.n	8008718 <_printf_float+0x1ac>
 8008694:	f1aa 0a02 	sub.w	sl, sl, #2
 8008698:	fa5f fa8a 	uxtb.w	sl, sl
 800869c:	3901      	subs	r1, #1
 800869e:	4652      	mov	r2, sl
 80086a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80086a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80086a6:	f7ff ff28 	bl	80084fa <__exponent>
 80086aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086ac:	4681      	mov	r9, r0
 80086ae:	1813      	adds	r3, r2, r0
 80086b0:	2a01      	cmp	r2, #1
 80086b2:	6123      	str	r3, [r4, #16]
 80086b4:	dc02      	bgt.n	80086bc <_printf_float+0x150>
 80086b6:	6822      	ldr	r2, [r4, #0]
 80086b8:	07d2      	lsls	r2, r2, #31
 80086ba:	d501      	bpl.n	80086c0 <_printf_float+0x154>
 80086bc:	3301      	adds	r3, #1
 80086be:	6123      	str	r3, [r4, #16]
 80086c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d0a2      	beq.n	800860e <_printf_float+0xa2>
 80086c8:	232d      	movs	r3, #45	@ 0x2d
 80086ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086ce:	e79e      	b.n	800860e <_printf_float+0xa2>
 80086d0:	9a06      	ldr	r2, [sp, #24]
 80086d2:	2a47      	cmp	r2, #71	@ 0x47
 80086d4:	d1c2      	bne.n	800865c <_printf_float+0xf0>
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1c0      	bne.n	800865c <_printf_float+0xf0>
 80086da:	2301      	movs	r3, #1
 80086dc:	e7bd      	b.n	800865a <_printf_float+0xee>
 80086de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80086e2:	d9db      	bls.n	800869c <_printf_float+0x130>
 80086e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80086e8:	d118      	bne.n	800871c <_printf_float+0x1b0>
 80086ea:	2900      	cmp	r1, #0
 80086ec:	6863      	ldr	r3, [r4, #4]
 80086ee:	dd0b      	ble.n	8008708 <_printf_float+0x19c>
 80086f0:	6121      	str	r1, [r4, #16]
 80086f2:	b913      	cbnz	r3, 80086fa <_printf_float+0x18e>
 80086f4:	6822      	ldr	r2, [r4, #0]
 80086f6:	07d0      	lsls	r0, r2, #31
 80086f8:	d502      	bpl.n	8008700 <_printf_float+0x194>
 80086fa:	3301      	adds	r3, #1
 80086fc:	440b      	add	r3, r1
 80086fe:	6123      	str	r3, [r4, #16]
 8008700:	f04f 0900 	mov.w	r9, #0
 8008704:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008706:	e7db      	b.n	80086c0 <_printf_float+0x154>
 8008708:	b913      	cbnz	r3, 8008710 <_printf_float+0x1a4>
 800870a:	6822      	ldr	r2, [r4, #0]
 800870c:	07d2      	lsls	r2, r2, #31
 800870e:	d501      	bpl.n	8008714 <_printf_float+0x1a8>
 8008710:	3302      	adds	r3, #2
 8008712:	e7f4      	b.n	80086fe <_printf_float+0x192>
 8008714:	2301      	movs	r3, #1
 8008716:	e7f2      	b.n	80086fe <_printf_float+0x192>
 8008718:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800871c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800871e:	4299      	cmp	r1, r3
 8008720:	db05      	blt.n	800872e <_printf_float+0x1c2>
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	6121      	str	r1, [r4, #16]
 8008726:	07d8      	lsls	r0, r3, #31
 8008728:	d5ea      	bpl.n	8008700 <_printf_float+0x194>
 800872a:	1c4b      	adds	r3, r1, #1
 800872c:	e7e7      	b.n	80086fe <_printf_float+0x192>
 800872e:	2900      	cmp	r1, #0
 8008730:	bfd4      	ite	le
 8008732:	f1c1 0202 	rsble	r2, r1, #2
 8008736:	2201      	movgt	r2, #1
 8008738:	4413      	add	r3, r2
 800873a:	e7e0      	b.n	80086fe <_printf_float+0x192>
 800873c:	6823      	ldr	r3, [r4, #0]
 800873e:	055a      	lsls	r2, r3, #21
 8008740:	d407      	bmi.n	8008752 <_printf_float+0x1e6>
 8008742:	6923      	ldr	r3, [r4, #16]
 8008744:	4642      	mov	r2, r8
 8008746:	4631      	mov	r1, r6
 8008748:	4628      	mov	r0, r5
 800874a:	47b8      	blx	r7
 800874c:	3001      	adds	r0, #1
 800874e:	d12b      	bne.n	80087a8 <_printf_float+0x23c>
 8008750:	e767      	b.n	8008622 <_printf_float+0xb6>
 8008752:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008756:	f240 80dd 	bls.w	8008914 <_printf_float+0x3a8>
 800875a:	2200      	movs	r2, #0
 800875c:	2300      	movs	r3, #0
 800875e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008762:	f7f8 f9b5 	bl	8000ad0 <__aeabi_dcmpeq>
 8008766:	2800      	cmp	r0, #0
 8008768:	d033      	beq.n	80087d2 <_printf_float+0x266>
 800876a:	2301      	movs	r3, #1
 800876c:	4a36      	ldr	r2, [pc, #216]	@ (8008848 <_printf_float+0x2dc>)
 800876e:	4631      	mov	r1, r6
 8008770:	4628      	mov	r0, r5
 8008772:	47b8      	blx	r7
 8008774:	3001      	adds	r0, #1
 8008776:	f43f af54 	beq.w	8008622 <_printf_float+0xb6>
 800877a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800877e:	4543      	cmp	r3, r8
 8008780:	db02      	blt.n	8008788 <_printf_float+0x21c>
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	07d8      	lsls	r0, r3, #31
 8008786:	d50f      	bpl.n	80087a8 <_printf_float+0x23c>
 8008788:	4631      	mov	r1, r6
 800878a:	4628      	mov	r0, r5
 800878c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008790:	47b8      	blx	r7
 8008792:	3001      	adds	r0, #1
 8008794:	f43f af45 	beq.w	8008622 <_printf_float+0xb6>
 8008798:	f04f 0900 	mov.w	r9, #0
 800879c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80087a0:	f104 0a1a 	add.w	sl, r4, #26
 80087a4:	45c8      	cmp	r8, r9
 80087a6:	dc09      	bgt.n	80087bc <_printf_float+0x250>
 80087a8:	6823      	ldr	r3, [r4, #0]
 80087aa:	079b      	lsls	r3, r3, #30
 80087ac:	f100 8103 	bmi.w	80089b6 <_printf_float+0x44a>
 80087b0:	68e0      	ldr	r0, [r4, #12]
 80087b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087b4:	4298      	cmp	r0, r3
 80087b6:	bfb8      	it	lt
 80087b8:	4618      	movlt	r0, r3
 80087ba:	e734      	b.n	8008626 <_printf_float+0xba>
 80087bc:	2301      	movs	r3, #1
 80087be:	4652      	mov	r2, sl
 80087c0:	4631      	mov	r1, r6
 80087c2:	4628      	mov	r0, r5
 80087c4:	47b8      	blx	r7
 80087c6:	3001      	adds	r0, #1
 80087c8:	f43f af2b 	beq.w	8008622 <_printf_float+0xb6>
 80087cc:	f109 0901 	add.w	r9, r9, #1
 80087d0:	e7e8      	b.n	80087a4 <_printf_float+0x238>
 80087d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	dc39      	bgt.n	800884c <_printf_float+0x2e0>
 80087d8:	2301      	movs	r3, #1
 80087da:	4a1b      	ldr	r2, [pc, #108]	@ (8008848 <_printf_float+0x2dc>)
 80087dc:	4631      	mov	r1, r6
 80087de:	4628      	mov	r0, r5
 80087e0:	47b8      	blx	r7
 80087e2:	3001      	adds	r0, #1
 80087e4:	f43f af1d 	beq.w	8008622 <_printf_float+0xb6>
 80087e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80087ec:	ea59 0303 	orrs.w	r3, r9, r3
 80087f0:	d102      	bne.n	80087f8 <_printf_float+0x28c>
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	07d9      	lsls	r1, r3, #31
 80087f6:	d5d7      	bpl.n	80087a8 <_printf_float+0x23c>
 80087f8:	4631      	mov	r1, r6
 80087fa:	4628      	mov	r0, r5
 80087fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008800:	47b8      	blx	r7
 8008802:	3001      	adds	r0, #1
 8008804:	f43f af0d 	beq.w	8008622 <_printf_float+0xb6>
 8008808:	f04f 0a00 	mov.w	sl, #0
 800880c:	f104 0b1a 	add.w	fp, r4, #26
 8008810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008812:	425b      	negs	r3, r3
 8008814:	4553      	cmp	r3, sl
 8008816:	dc01      	bgt.n	800881c <_printf_float+0x2b0>
 8008818:	464b      	mov	r3, r9
 800881a:	e793      	b.n	8008744 <_printf_float+0x1d8>
 800881c:	2301      	movs	r3, #1
 800881e:	465a      	mov	r2, fp
 8008820:	4631      	mov	r1, r6
 8008822:	4628      	mov	r0, r5
 8008824:	47b8      	blx	r7
 8008826:	3001      	adds	r0, #1
 8008828:	f43f aefb 	beq.w	8008622 <_printf_float+0xb6>
 800882c:	f10a 0a01 	add.w	sl, sl, #1
 8008830:	e7ee      	b.n	8008810 <_printf_float+0x2a4>
 8008832:	bf00      	nop
 8008834:	7fefffff 	.word	0x7fefffff
 8008838:	0800bc78 	.word	0x0800bc78
 800883c:	0800bc7c 	.word	0x0800bc7c
 8008840:	0800bc80 	.word	0x0800bc80
 8008844:	0800bc84 	.word	0x0800bc84
 8008848:	0800bc88 	.word	0x0800bc88
 800884c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800884e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008852:	4553      	cmp	r3, sl
 8008854:	bfa8      	it	ge
 8008856:	4653      	movge	r3, sl
 8008858:	2b00      	cmp	r3, #0
 800885a:	4699      	mov	r9, r3
 800885c:	dc36      	bgt.n	80088cc <_printf_float+0x360>
 800885e:	f04f 0b00 	mov.w	fp, #0
 8008862:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008866:	f104 021a 	add.w	r2, r4, #26
 800886a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800886c:	9306      	str	r3, [sp, #24]
 800886e:	eba3 0309 	sub.w	r3, r3, r9
 8008872:	455b      	cmp	r3, fp
 8008874:	dc31      	bgt.n	80088da <_printf_float+0x36e>
 8008876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008878:	459a      	cmp	sl, r3
 800887a:	dc3a      	bgt.n	80088f2 <_printf_float+0x386>
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	07da      	lsls	r2, r3, #31
 8008880:	d437      	bmi.n	80088f2 <_printf_float+0x386>
 8008882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008884:	ebaa 0903 	sub.w	r9, sl, r3
 8008888:	9b06      	ldr	r3, [sp, #24]
 800888a:	ebaa 0303 	sub.w	r3, sl, r3
 800888e:	4599      	cmp	r9, r3
 8008890:	bfa8      	it	ge
 8008892:	4699      	movge	r9, r3
 8008894:	f1b9 0f00 	cmp.w	r9, #0
 8008898:	dc33      	bgt.n	8008902 <_printf_float+0x396>
 800889a:	f04f 0800 	mov.w	r8, #0
 800889e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088a2:	f104 0b1a 	add.w	fp, r4, #26
 80088a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088a8:	ebaa 0303 	sub.w	r3, sl, r3
 80088ac:	eba3 0309 	sub.w	r3, r3, r9
 80088b0:	4543      	cmp	r3, r8
 80088b2:	f77f af79 	ble.w	80087a8 <_printf_float+0x23c>
 80088b6:	2301      	movs	r3, #1
 80088b8:	465a      	mov	r2, fp
 80088ba:	4631      	mov	r1, r6
 80088bc:	4628      	mov	r0, r5
 80088be:	47b8      	blx	r7
 80088c0:	3001      	adds	r0, #1
 80088c2:	f43f aeae 	beq.w	8008622 <_printf_float+0xb6>
 80088c6:	f108 0801 	add.w	r8, r8, #1
 80088ca:	e7ec      	b.n	80088a6 <_printf_float+0x33a>
 80088cc:	4642      	mov	r2, r8
 80088ce:	4631      	mov	r1, r6
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b8      	blx	r7
 80088d4:	3001      	adds	r0, #1
 80088d6:	d1c2      	bne.n	800885e <_printf_float+0x2f2>
 80088d8:	e6a3      	b.n	8008622 <_printf_float+0xb6>
 80088da:	2301      	movs	r3, #1
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	9206      	str	r2, [sp, #24]
 80088e2:	47b8      	blx	r7
 80088e4:	3001      	adds	r0, #1
 80088e6:	f43f ae9c 	beq.w	8008622 <_printf_float+0xb6>
 80088ea:	f10b 0b01 	add.w	fp, fp, #1
 80088ee:	9a06      	ldr	r2, [sp, #24]
 80088f0:	e7bb      	b.n	800886a <_printf_float+0x2fe>
 80088f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088f6:	4631      	mov	r1, r6
 80088f8:	4628      	mov	r0, r5
 80088fa:	47b8      	blx	r7
 80088fc:	3001      	adds	r0, #1
 80088fe:	d1c0      	bne.n	8008882 <_printf_float+0x316>
 8008900:	e68f      	b.n	8008622 <_printf_float+0xb6>
 8008902:	9a06      	ldr	r2, [sp, #24]
 8008904:	464b      	mov	r3, r9
 8008906:	4631      	mov	r1, r6
 8008908:	4628      	mov	r0, r5
 800890a:	4442      	add	r2, r8
 800890c:	47b8      	blx	r7
 800890e:	3001      	adds	r0, #1
 8008910:	d1c3      	bne.n	800889a <_printf_float+0x32e>
 8008912:	e686      	b.n	8008622 <_printf_float+0xb6>
 8008914:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008918:	f1ba 0f01 	cmp.w	sl, #1
 800891c:	dc01      	bgt.n	8008922 <_printf_float+0x3b6>
 800891e:	07db      	lsls	r3, r3, #31
 8008920:	d536      	bpl.n	8008990 <_printf_float+0x424>
 8008922:	2301      	movs	r3, #1
 8008924:	4642      	mov	r2, r8
 8008926:	4631      	mov	r1, r6
 8008928:	4628      	mov	r0, r5
 800892a:	47b8      	blx	r7
 800892c:	3001      	adds	r0, #1
 800892e:	f43f ae78 	beq.w	8008622 <_printf_float+0xb6>
 8008932:	4631      	mov	r1, r6
 8008934:	4628      	mov	r0, r5
 8008936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800893a:	47b8      	blx	r7
 800893c:	3001      	adds	r0, #1
 800893e:	f43f ae70 	beq.w	8008622 <_printf_float+0xb6>
 8008942:	2200      	movs	r2, #0
 8008944:	2300      	movs	r3, #0
 8008946:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800894a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800894e:	f7f8 f8bf 	bl	8000ad0 <__aeabi_dcmpeq>
 8008952:	b9c0      	cbnz	r0, 8008986 <_printf_float+0x41a>
 8008954:	4653      	mov	r3, sl
 8008956:	f108 0201 	add.w	r2, r8, #1
 800895a:	4631      	mov	r1, r6
 800895c:	4628      	mov	r0, r5
 800895e:	47b8      	blx	r7
 8008960:	3001      	adds	r0, #1
 8008962:	d10c      	bne.n	800897e <_printf_float+0x412>
 8008964:	e65d      	b.n	8008622 <_printf_float+0xb6>
 8008966:	2301      	movs	r3, #1
 8008968:	465a      	mov	r2, fp
 800896a:	4631      	mov	r1, r6
 800896c:	4628      	mov	r0, r5
 800896e:	47b8      	blx	r7
 8008970:	3001      	adds	r0, #1
 8008972:	f43f ae56 	beq.w	8008622 <_printf_float+0xb6>
 8008976:	f108 0801 	add.w	r8, r8, #1
 800897a:	45d0      	cmp	r8, sl
 800897c:	dbf3      	blt.n	8008966 <_printf_float+0x3fa>
 800897e:	464b      	mov	r3, r9
 8008980:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008984:	e6df      	b.n	8008746 <_printf_float+0x1da>
 8008986:	f04f 0800 	mov.w	r8, #0
 800898a:	f104 0b1a 	add.w	fp, r4, #26
 800898e:	e7f4      	b.n	800897a <_printf_float+0x40e>
 8008990:	2301      	movs	r3, #1
 8008992:	4642      	mov	r2, r8
 8008994:	e7e1      	b.n	800895a <_printf_float+0x3ee>
 8008996:	2301      	movs	r3, #1
 8008998:	464a      	mov	r2, r9
 800899a:	4631      	mov	r1, r6
 800899c:	4628      	mov	r0, r5
 800899e:	47b8      	blx	r7
 80089a0:	3001      	adds	r0, #1
 80089a2:	f43f ae3e 	beq.w	8008622 <_printf_float+0xb6>
 80089a6:	f108 0801 	add.w	r8, r8, #1
 80089aa:	68e3      	ldr	r3, [r4, #12]
 80089ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80089ae:	1a5b      	subs	r3, r3, r1
 80089b0:	4543      	cmp	r3, r8
 80089b2:	dcf0      	bgt.n	8008996 <_printf_float+0x42a>
 80089b4:	e6fc      	b.n	80087b0 <_printf_float+0x244>
 80089b6:	f04f 0800 	mov.w	r8, #0
 80089ba:	f104 0919 	add.w	r9, r4, #25
 80089be:	e7f4      	b.n	80089aa <_printf_float+0x43e>

080089c0 <_printf_common>:
 80089c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c4:	4616      	mov	r6, r2
 80089c6:	4698      	mov	r8, r3
 80089c8:	688a      	ldr	r2, [r1, #8]
 80089ca:	4607      	mov	r7, r0
 80089cc:	690b      	ldr	r3, [r1, #16]
 80089ce:	460c      	mov	r4, r1
 80089d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089d4:	4293      	cmp	r3, r2
 80089d6:	bfb8      	it	lt
 80089d8:	4613      	movlt	r3, r2
 80089da:	6033      	str	r3, [r6, #0]
 80089dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089e0:	b10a      	cbz	r2, 80089e6 <_printf_common+0x26>
 80089e2:	3301      	adds	r3, #1
 80089e4:	6033      	str	r3, [r6, #0]
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	0699      	lsls	r1, r3, #26
 80089ea:	bf42      	ittt	mi
 80089ec:	6833      	ldrmi	r3, [r6, #0]
 80089ee:	3302      	addmi	r3, #2
 80089f0:	6033      	strmi	r3, [r6, #0]
 80089f2:	6825      	ldr	r5, [r4, #0]
 80089f4:	f015 0506 	ands.w	r5, r5, #6
 80089f8:	d106      	bne.n	8008a08 <_printf_common+0x48>
 80089fa:	f104 0a19 	add.w	sl, r4, #25
 80089fe:	68e3      	ldr	r3, [r4, #12]
 8008a00:	6832      	ldr	r2, [r6, #0]
 8008a02:	1a9b      	subs	r3, r3, r2
 8008a04:	42ab      	cmp	r3, r5
 8008a06:	dc2b      	bgt.n	8008a60 <_printf_common+0xa0>
 8008a08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a0c:	6822      	ldr	r2, [r4, #0]
 8008a0e:	3b00      	subs	r3, #0
 8008a10:	bf18      	it	ne
 8008a12:	2301      	movne	r3, #1
 8008a14:	0692      	lsls	r2, r2, #26
 8008a16:	d430      	bmi.n	8008a7a <_printf_common+0xba>
 8008a18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a1c:	4641      	mov	r1, r8
 8008a1e:	4638      	mov	r0, r7
 8008a20:	47c8      	blx	r9
 8008a22:	3001      	adds	r0, #1
 8008a24:	d023      	beq.n	8008a6e <_printf_common+0xae>
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	341a      	adds	r4, #26
 8008a2a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008a2e:	f003 0306 	and.w	r3, r3, #6
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	bf0a      	itet	eq
 8008a36:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8008a3a:	2500      	movne	r5, #0
 8008a3c:	6833      	ldreq	r3, [r6, #0]
 8008a3e:	f04f 0600 	mov.w	r6, #0
 8008a42:	bf08      	it	eq
 8008a44:	1aed      	subeq	r5, r5, r3
 8008a46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008a4a:	bf08      	it	eq
 8008a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a50:	4293      	cmp	r3, r2
 8008a52:	bfc4      	itt	gt
 8008a54:	1a9b      	subgt	r3, r3, r2
 8008a56:	18ed      	addgt	r5, r5, r3
 8008a58:	42b5      	cmp	r5, r6
 8008a5a:	d11a      	bne.n	8008a92 <_printf_common+0xd2>
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e008      	b.n	8008a72 <_printf_common+0xb2>
 8008a60:	2301      	movs	r3, #1
 8008a62:	4652      	mov	r2, sl
 8008a64:	4641      	mov	r1, r8
 8008a66:	4638      	mov	r0, r7
 8008a68:	47c8      	blx	r9
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	d103      	bne.n	8008a76 <_printf_common+0xb6>
 8008a6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a76:	3501      	adds	r5, #1
 8008a78:	e7c1      	b.n	80089fe <_printf_common+0x3e>
 8008a7a:	18e1      	adds	r1, r4, r3
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	2030      	movs	r0, #48	@ 0x30
 8008a80:	3302      	adds	r3, #2
 8008a82:	4422      	add	r2, r4
 8008a84:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a90:	e7c2      	b.n	8008a18 <_printf_common+0x58>
 8008a92:	2301      	movs	r3, #1
 8008a94:	4622      	mov	r2, r4
 8008a96:	4641      	mov	r1, r8
 8008a98:	4638      	mov	r0, r7
 8008a9a:	47c8      	blx	r9
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d0e6      	beq.n	8008a6e <_printf_common+0xae>
 8008aa0:	3601      	adds	r6, #1
 8008aa2:	e7d9      	b.n	8008a58 <_printf_common+0x98>

08008aa4 <_printf_i>:
 8008aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa8:	7e0f      	ldrb	r7, [r1, #24]
 8008aaa:	4691      	mov	r9, r2
 8008aac:	4680      	mov	r8, r0
 8008aae:	460c      	mov	r4, r1
 8008ab0:	2f78      	cmp	r7, #120	@ 0x78
 8008ab2:	469a      	mov	sl, r3
 8008ab4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ab6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008aba:	d807      	bhi.n	8008acc <_printf_i+0x28>
 8008abc:	2f62      	cmp	r7, #98	@ 0x62
 8008abe:	d80a      	bhi.n	8008ad6 <_printf_i+0x32>
 8008ac0:	2f00      	cmp	r7, #0
 8008ac2:	f000 80d2 	beq.w	8008c6a <_printf_i+0x1c6>
 8008ac6:	2f58      	cmp	r7, #88	@ 0x58
 8008ac8:	f000 80b9 	beq.w	8008c3e <_printf_i+0x19a>
 8008acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ad0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ad4:	e03a      	b.n	8008b4c <_printf_i+0xa8>
 8008ad6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ada:	2b15      	cmp	r3, #21
 8008adc:	d8f6      	bhi.n	8008acc <_printf_i+0x28>
 8008ade:	a101      	add	r1, pc, #4	@ (adr r1, 8008ae4 <_printf_i+0x40>)
 8008ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ae4:	08008b3d 	.word	0x08008b3d
 8008ae8:	08008b51 	.word	0x08008b51
 8008aec:	08008acd 	.word	0x08008acd
 8008af0:	08008acd 	.word	0x08008acd
 8008af4:	08008acd 	.word	0x08008acd
 8008af8:	08008acd 	.word	0x08008acd
 8008afc:	08008b51 	.word	0x08008b51
 8008b00:	08008acd 	.word	0x08008acd
 8008b04:	08008acd 	.word	0x08008acd
 8008b08:	08008acd 	.word	0x08008acd
 8008b0c:	08008acd 	.word	0x08008acd
 8008b10:	08008c51 	.word	0x08008c51
 8008b14:	08008b7b 	.word	0x08008b7b
 8008b18:	08008c0b 	.word	0x08008c0b
 8008b1c:	08008acd 	.word	0x08008acd
 8008b20:	08008acd 	.word	0x08008acd
 8008b24:	08008c73 	.word	0x08008c73
 8008b28:	08008acd 	.word	0x08008acd
 8008b2c:	08008b7b 	.word	0x08008b7b
 8008b30:	08008acd 	.word	0x08008acd
 8008b34:	08008acd 	.word	0x08008acd
 8008b38:	08008c13 	.word	0x08008c13
 8008b3c:	6833      	ldr	r3, [r6, #0]
 8008b3e:	1d1a      	adds	r2, r3, #4
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6032      	str	r2, [r6, #0]
 8008b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e09d      	b.n	8008c8c <_printf_i+0x1e8>
 8008b50:	6833      	ldr	r3, [r6, #0]
 8008b52:	6820      	ldr	r0, [r4, #0]
 8008b54:	1d19      	adds	r1, r3, #4
 8008b56:	6031      	str	r1, [r6, #0]
 8008b58:	0606      	lsls	r6, r0, #24
 8008b5a:	d501      	bpl.n	8008b60 <_printf_i+0xbc>
 8008b5c:	681d      	ldr	r5, [r3, #0]
 8008b5e:	e003      	b.n	8008b68 <_printf_i+0xc4>
 8008b60:	0645      	lsls	r5, r0, #25
 8008b62:	d5fb      	bpl.n	8008b5c <_printf_i+0xb8>
 8008b64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b68:	2d00      	cmp	r5, #0
 8008b6a:	da03      	bge.n	8008b74 <_printf_i+0xd0>
 8008b6c:	232d      	movs	r3, #45	@ 0x2d
 8008b6e:	426d      	negs	r5, r5
 8008b70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b74:	4859      	ldr	r0, [pc, #356]	@ (8008cdc <_printf_i+0x238>)
 8008b76:	230a      	movs	r3, #10
 8008b78:	e011      	b.n	8008b9e <_printf_i+0xfa>
 8008b7a:	6821      	ldr	r1, [r4, #0]
 8008b7c:	6833      	ldr	r3, [r6, #0]
 8008b7e:	0608      	lsls	r0, r1, #24
 8008b80:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b84:	d402      	bmi.n	8008b8c <_printf_i+0xe8>
 8008b86:	0649      	lsls	r1, r1, #25
 8008b88:	bf48      	it	mi
 8008b8a:	b2ad      	uxthmi	r5, r5
 8008b8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b8e:	6033      	str	r3, [r6, #0]
 8008b90:	4852      	ldr	r0, [pc, #328]	@ (8008cdc <_printf_i+0x238>)
 8008b92:	bf14      	ite	ne
 8008b94:	230a      	movne	r3, #10
 8008b96:	2308      	moveq	r3, #8
 8008b98:	2100      	movs	r1, #0
 8008b9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b9e:	6866      	ldr	r6, [r4, #4]
 8008ba0:	2e00      	cmp	r6, #0
 8008ba2:	60a6      	str	r6, [r4, #8]
 8008ba4:	bfa2      	ittt	ge
 8008ba6:	6821      	ldrge	r1, [r4, #0]
 8008ba8:	f021 0104 	bicge.w	r1, r1, #4
 8008bac:	6021      	strge	r1, [r4, #0]
 8008bae:	b90d      	cbnz	r5, 8008bb4 <_printf_i+0x110>
 8008bb0:	2e00      	cmp	r6, #0
 8008bb2:	d04b      	beq.n	8008c4c <_printf_i+0x1a8>
 8008bb4:	4616      	mov	r6, r2
 8008bb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bba:	fb03 5711 	mls	r7, r3, r1, r5
 8008bbe:	5dc7      	ldrb	r7, [r0, r7]
 8008bc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bc4:	462f      	mov	r7, r5
 8008bc6:	460d      	mov	r5, r1
 8008bc8:	42bb      	cmp	r3, r7
 8008bca:	d9f4      	bls.n	8008bb6 <_printf_i+0x112>
 8008bcc:	2b08      	cmp	r3, #8
 8008bce:	d10b      	bne.n	8008be8 <_printf_i+0x144>
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	07df      	lsls	r7, r3, #31
 8008bd4:	d508      	bpl.n	8008be8 <_printf_i+0x144>
 8008bd6:	6923      	ldr	r3, [r4, #16]
 8008bd8:	6861      	ldr	r1, [r4, #4]
 8008bda:	4299      	cmp	r1, r3
 8008bdc:	bfde      	ittt	le
 8008bde:	2330      	movle	r3, #48	@ 0x30
 8008be0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008be4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008be8:	1b92      	subs	r2, r2, r6
 8008bea:	6122      	str	r2, [r4, #16]
 8008bec:	464b      	mov	r3, r9
 8008bee:	aa03      	add	r2, sp, #12
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	4640      	mov	r0, r8
 8008bf4:	f8cd a000 	str.w	sl, [sp]
 8008bf8:	f7ff fee2 	bl	80089c0 <_printf_common>
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	d14a      	bne.n	8008c96 <_printf_i+0x1f2>
 8008c00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c04:	b004      	add	sp, #16
 8008c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	f043 0320 	orr.w	r3, r3, #32
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	2778      	movs	r7, #120	@ 0x78
 8008c14:	4832      	ldr	r0, [pc, #200]	@ (8008ce0 <_printf_i+0x23c>)
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c1c:	061f      	lsls	r7, r3, #24
 8008c1e:	6831      	ldr	r1, [r6, #0]
 8008c20:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c24:	d402      	bmi.n	8008c2c <_printf_i+0x188>
 8008c26:	065f      	lsls	r7, r3, #25
 8008c28:	bf48      	it	mi
 8008c2a:	b2ad      	uxthmi	r5, r5
 8008c2c:	6031      	str	r1, [r6, #0]
 8008c2e:	07d9      	lsls	r1, r3, #31
 8008c30:	bf44      	itt	mi
 8008c32:	f043 0320 	orrmi.w	r3, r3, #32
 8008c36:	6023      	strmi	r3, [r4, #0]
 8008c38:	b11d      	cbz	r5, 8008c42 <_printf_i+0x19e>
 8008c3a:	2310      	movs	r3, #16
 8008c3c:	e7ac      	b.n	8008b98 <_printf_i+0xf4>
 8008c3e:	4827      	ldr	r0, [pc, #156]	@ (8008cdc <_printf_i+0x238>)
 8008c40:	e7e9      	b.n	8008c16 <_printf_i+0x172>
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	f023 0320 	bic.w	r3, r3, #32
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	e7f6      	b.n	8008c3a <_printf_i+0x196>
 8008c4c:	4616      	mov	r6, r2
 8008c4e:	e7bd      	b.n	8008bcc <_printf_i+0x128>
 8008c50:	6833      	ldr	r3, [r6, #0]
 8008c52:	6825      	ldr	r5, [r4, #0]
 8008c54:	1d18      	adds	r0, r3, #4
 8008c56:	6961      	ldr	r1, [r4, #20]
 8008c58:	6030      	str	r0, [r6, #0]
 8008c5a:	062e      	lsls	r6, r5, #24
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	d501      	bpl.n	8008c64 <_printf_i+0x1c0>
 8008c60:	6019      	str	r1, [r3, #0]
 8008c62:	e002      	b.n	8008c6a <_printf_i+0x1c6>
 8008c64:	0668      	lsls	r0, r5, #25
 8008c66:	d5fb      	bpl.n	8008c60 <_printf_i+0x1bc>
 8008c68:	8019      	strh	r1, [r3, #0]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	4616      	mov	r6, r2
 8008c6e:	6123      	str	r3, [r4, #16]
 8008c70:	e7bc      	b.n	8008bec <_printf_i+0x148>
 8008c72:	6833      	ldr	r3, [r6, #0]
 8008c74:	2100      	movs	r1, #0
 8008c76:	1d1a      	adds	r2, r3, #4
 8008c78:	6032      	str	r2, [r6, #0]
 8008c7a:	681e      	ldr	r6, [r3, #0]
 8008c7c:	6862      	ldr	r2, [r4, #4]
 8008c7e:	4630      	mov	r0, r6
 8008c80:	f000 f9a3 	bl	8008fca <memchr>
 8008c84:	b108      	cbz	r0, 8008c8a <_printf_i+0x1e6>
 8008c86:	1b80      	subs	r0, r0, r6
 8008c88:	6060      	str	r0, [r4, #4]
 8008c8a:	6863      	ldr	r3, [r4, #4]
 8008c8c:	6123      	str	r3, [r4, #16]
 8008c8e:	2300      	movs	r3, #0
 8008c90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c94:	e7aa      	b.n	8008bec <_printf_i+0x148>
 8008c96:	6923      	ldr	r3, [r4, #16]
 8008c98:	4632      	mov	r2, r6
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	47d0      	blx	sl
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	d0ad      	beq.n	8008c00 <_printf_i+0x15c>
 8008ca4:	6823      	ldr	r3, [r4, #0]
 8008ca6:	079b      	lsls	r3, r3, #30
 8008ca8:	d413      	bmi.n	8008cd2 <_printf_i+0x22e>
 8008caa:	68e0      	ldr	r0, [r4, #12]
 8008cac:	9b03      	ldr	r3, [sp, #12]
 8008cae:	4298      	cmp	r0, r3
 8008cb0:	bfb8      	it	lt
 8008cb2:	4618      	movlt	r0, r3
 8008cb4:	e7a6      	b.n	8008c04 <_printf_i+0x160>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	4632      	mov	r2, r6
 8008cba:	4649      	mov	r1, r9
 8008cbc:	4640      	mov	r0, r8
 8008cbe:	47d0      	blx	sl
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d09d      	beq.n	8008c00 <_printf_i+0x15c>
 8008cc4:	3501      	adds	r5, #1
 8008cc6:	68e3      	ldr	r3, [r4, #12]
 8008cc8:	9903      	ldr	r1, [sp, #12]
 8008cca:	1a5b      	subs	r3, r3, r1
 8008ccc:	42ab      	cmp	r3, r5
 8008cce:	dcf2      	bgt.n	8008cb6 <_printf_i+0x212>
 8008cd0:	e7eb      	b.n	8008caa <_printf_i+0x206>
 8008cd2:	2500      	movs	r5, #0
 8008cd4:	f104 0619 	add.w	r6, r4, #25
 8008cd8:	e7f5      	b.n	8008cc6 <_printf_i+0x222>
 8008cda:	bf00      	nop
 8008cdc:	0800bc8a 	.word	0x0800bc8a
 8008ce0:	0800bc9b 	.word	0x0800bc9b

08008ce4 <std>:
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	b510      	push	{r4, lr}
 8008ce8:	4604      	mov	r4, r0
 8008cea:	6083      	str	r3, [r0, #8]
 8008cec:	8181      	strh	r1, [r0, #12]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6643      	str	r3, [r0, #100]	@ 0x64
 8008cf2:	81c2      	strh	r2, [r0, #14]
 8008cf4:	2208      	movs	r2, #8
 8008cf6:	6183      	str	r3, [r0, #24]
 8008cf8:	e9c0 3300 	strd	r3, r3, [r0]
 8008cfc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d00:	305c      	adds	r0, #92	@ 0x5c
 8008d02:	f000 f929 	bl	8008f58 <memset>
 8008d06:	4b0d      	ldr	r3, [pc, #52]	@ (8008d3c <std+0x58>)
 8008d08:	6224      	str	r4, [r4, #32]
 8008d0a:	6263      	str	r3, [r4, #36]	@ 0x24
 8008d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8008d40 <std+0x5c>)
 8008d0e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008d10:	4b0c      	ldr	r3, [pc, #48]	@ (8008d44 <std+0x60>)
 8008d12:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008d14:	4b0c      	ldr	r3, [pc, #48]	@ (8008d48 <std+0x64>)
 8008d16:	6323      	str	r3, [r4, #48]	@ 0x30
 8008d18:	4b0c      	ldr	r3, [pc, #48]	@ (8008d4c <std+0x68>)
 8008d1a:	429c      	cmp	r4, r3
 8008d1c:	d006      	beq.n	8008d2c <std+0x48>
 8008d1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008d22:	4294      	cmp	r4, r2
 8008d24:	d002      	beq.n	8008d2c <std+0x48>
 8008d26:	33d0      	adds	r3, #208	@ 0xd0
 8008d28:	429c      	cmp	r4, r3
 8008d2a:	d105      	bne.n	8008d38 <std+0x54>
 8008d2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d34:	f000 b946 	b.w	8008fc4 <__retarget_lock_init_recursive>
 8008d38:	bd10      	pop	{r4, pc}
 8008d3a:	bf00      	nop
 8008d3c:	0800a939 	.word	0x0800a939
 8008d40:	0800a95b 	.word	0x0800a95b
 8008d44:	0800a993 	.word	0x0800a993
 8008d48:	0800a9b7 	.word	0x0800a9b7
 8008d4c:	20000edc 	.word	0x20000edc

08008d50 <stdio_exit_handler>:
 8008d50:	4a02      	ldr	r2, [pc, #8]	@ (8008d5c <stdio_exit_handler+0xc>)
 8008d52:	4903      	ldr	r1, [pc, #12]	@ (8008d60 <stdio_exit_handler+0x10>)
 8008d54:	4803      	ldr	r0, [pc, #12]	@ (8008d64 <stdio_exit_handler+0x14>)
 8008d56:	f000 b869 	b.w	8008e2c <_fwalk_sglue>
 8008d5a:	bf00      	nop
 8008d5c:	200000a4 	.word	0x200000a4
 8008d60:	0800a1c1 	.word	0x0800a1c1
 8008d64:	200000b4 	.word	0x200000b4

08008d68 <cleanup_stdio>:
 8008d68:	6841      	ldr	r1, [r0, #4]
 8008d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008d9c <cleanup_stdio+0x34>)
 8008d6c:	4299      	cmp	r1, r3
 8008d6e:	b510      	push	{r4, lr}
 8008d70:	4604      	mov	r4, r0
 8008d72:	d001      	beq.n	8008d78 <cleanup_stdio+0x10>
 8008d74:	f001 fa24 	bl	800a1c0 <_fflush_r>
 8008d78:	68a1      	ldr	r1, [r4, #8]
 8008d7a:	4b09      	ldr	r3, [pc, #36]	@ (8008da0 <cleanup_stdio+0x38>)
 8008d7c:	4299      	cmp	r1, r3
 8008d7e:	d002      	beq.n	8008d86 <cleanup_stdio+0x1e>
 8008d80:	4620      	mov	r0, r4
 8008d82:	f001 fa1d 	bl	800a1c0 <_fflush_r>
 8008d86:	68e1      	ldr	r1, [r4, #12]
 8008d88:	4b06      	ldr	r3, [pc, #24]	@ (8008da4 <cleanup_stdio+0x3c>)
 8008d8a:	4299      	cmp	r1, r3
 8008d8c:	d004      	beq.n	8008d98 <cleanup_stdio+0x30>
 8008d8e:	4620      	mov	r0, r4
 8008d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d94:	f001 ba14 	b.w	800a1c0 <_fflush_r>
 8008d98:	bd10      	pop	{r4, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000edc 	.word	0x20000edc
 8008da0:	20000f44 	.word	0x20000f44
 8008da4:	20000fac 	.word	0x20000fac

08008da8 <global_stdio_init.part.0>:
 8008da8:	b510      	push	{r4, lr}
 8008daa:	4b0b      	ldr	r3, [pc, #44]	@ (8008dd8 <global_stdio_init.part.0+0x30>)
 8008dac:	2104      	movs	r1, #4
 8008dae:	4c0b      	ldr	r4, [pc, #44]	@ (8008ddc <global_stdio_init.part.0+0x34>)
 8008db0:	4a0b      	ldr	r2, [pc, #44]	@ (8008de0 <global_stdio_init.part.0+0x38>)
 8008db2:	4620      	mov	r0, r4
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f7ff ff94 	bl	8008ce4 <std>
 8008dbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	2109      	movs	r1, #9
 8008dc4:	f7ff ff8e 	bl	8008ce4 <std>
 8008dc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008dcc:	2202      	movs	r2, #2
 8008dce:	2112      	movs	r1, #18
 8008dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd4:	f7ff bf86 	b.w	8008ce4 <std>
 8008dd8:	20001014 	.word	0x20001014
 8008ddc:	20000edc 	.word	0x20000edc
 8008de0:	08008d51 	.word	0x08008d51

08008de4 <__sfp_lock_acquire>:
 8008de4:	4801      	ldr	r0, [pc, #4]	@ (8008dec <__sfp_lock_acquire+0x8>)
 8008de6:	f000 b8ee 	b.w	8008fc6 <__retarget_lock_acquire_recursive>
 8008dea:	bf00      	nop
 8008dec:	20001019 	.word	0x20001019

08008df0 <__sfp_lock_release>:
 8008df0:	4801      	ldr	r0, [pc, #4]	@ (8008df8 <__sfp_lock_release+0x8>)
 8008df2:	f000 b8e9 	b.w	8008fc8 <__retarget_lock_release_recursive>
 8008df6:	bf00      	nop
 8008df8:	20001019 	.word	0x20001019

08008dfc <__sinit>:
 8008dfc:	b510      	push	{r4, lr}
 8008dfe:	4604      	mov	r4, r0
 8008e00:	f7ff fff0 	bl	8008de4 <__sfp_lock_acquire>
 8008e04:	6a23      	ldr	r3, [r4, #32]
 8008e06:	b11b      	cbz	r3, 8008e10 <__sinit+0x14>
 8008e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e0c:	f7ff bff0 	b.w	8008df0 <__sfp_lock_release>
 8008e10:	4b04      	ldr	r3, [pc, #16]	@ (8008e24 <__sinit+0x28>)
 8008e12:	6223      	str	r3, [r4, #32]
 8008e14:	4b04      	ldr	r3, [pc, #16]	@ (8008e28 <__sinit+0x2c>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1f5      	bne.n	8008e08 <__sinit+0xc>
 8008e1c:	f7ff ffc4 	bl	8008da8 <global_stdio_init.part.0>
 8008e20:	e7f2      	b.n	8008e08 <__sinit+0xc>
 8008e22:	bf00      	nop
 8008e24:	08008d69 	.word	0x08008d69
 8008e28:	20001014 	.word	0x20001014

08008e2c <_fwalk_sglue>:
 8008e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e30:	4607      	mov	r7, r0
 8008e32:	4688      	mov	r8, r1
 8008e34:	4614      	mov	r4, r2
 8008e36:	2600      	movs	r6, #0
 8008e38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e3c:	f1b9 0901 	subs.w	r9, r9, #1
 8008e40:	d505      	bpl.n	8008e4e <_fwalk_sglue+0x22>
 8008e42:	6824      	ldr	r4, [r4, #0]
 8008e44:	2c00      	cmp	r4, #0
 8008e46:	d1f7      	bne.n	8008e38 <_fwalk_sglue+0xc>
 8008e48:	4630      	mov	r0, r6
 8008e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e4e:	89ab      	ldrh	r3, [r5, #12]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d907      	bls.n	8008e64 <_fwalk_sglue+0x38>
 8008e54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	d003      	beq.n	8008e64 <_fwalk_sglue+0x38>
 8008e5c:	4629      	mov	r1, r5
 8008e5e:	4638      	mov	r0, r7
 8008e60:	47c0      	blx	r8
 8008e62:	4306      	orrs	r6, r0
 8008e64:	3568      	adds	r5, #104	@ 0x68
 8008e66:	e7e9      	b.n	8008e3c <_fwalk_sglue+0x10>

08008e68 <iprintf>:
 8008e68:	b40f      	push	{r0, r1, r2, r3}
 8008e6a:	b507      	push	{r0, r1, r2, lr}
 8008e6c:	4906      	ldr	r1, [pc, #24]	@ (8008e88 <iprintf+0x20>)
 8008e6e:	ab04      	add	r3, sp, #16
 8008e70:	6808      	ldr	r0, [r1, #0]
 8008e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e76:	6881      	ldr	r1, [r0, #8]
 8008e78:	9301      	str	r3, [sp, #4]
 8008e7a:	f000 ff5b 	bl	8009d34 <_vfiprintf_r>
 8008e7e:	b003      	add	sp, #12
 8008e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e84:	b004      	add	sp, #16
 8008e86:	4770      	bx	lr
 8008e88:	200000b0 	.word	0x200000b0

08008e8c <putchar>:
 8008e8c:	4b02      	ldr	r3, [pc, #8]	@ (8008e98 <putchar+0xc>)
 8008e8e:	4601      	mov	r1, r0
 8008e90:	6818      	ldr	r0, [r3, #0]
 8008e92:	6882      	ldr	r2, [r0, #8]
 8008e94:	f001 be9b 	b.w	800abce <_putc_r>
 8008e98:	200000b0 	.word	0x200000b0

08008e9c <_puts_r>:
 8008e9c:	6a03      	ldr	r3, [r0, #32]
 8008e9e:	b570      	push	{r4, r5, r6, lr}
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	460e      	mov	r6, r1
 8008ea4:	6884      	ldr	r4, [r0, #8]
 8008ea6:	b90b      	cbnz	r3, 8008eac <_puts_r+0x10>
 8008ea8:	f7ff ffa8 	bl	8008dfc <__sinit>
 8008eac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008eae:	07db      	lsls	r3, r3, #31
 8008eb0:	d405      	bmi.n	8008ebe <_puts_r+0x22>
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	0598      	lsls	r0, r3, #22
 8008eb6:	d402      	bmi.n	8008ebe <_puts_r+0x22>
 8008eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008eba:	f000 f884 	bl	8008fc6 <__retarget_lock_acquire_recursive>
 8008ebe:	89a3      	ldrh	r3, [r4, #12]
 8008ec0:	0719      	lsls	r1, r3, #28
 8008ec2:	d502      	bpl.n	8008eca <_puts_r+0x2e>
 8008ec4:	6923      	ldr	r3, [r4, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d135      	bne.n	8008f36 <_puts_r+0x9a>
 8008eca:	4621      	mov	r1, r4
 8008ecc:	4628      	mov	r0, r5
 8008ece:	f001 fdc7 	bl	800aa60 <__swsetup_r>
 8008ed2:	b380      	cbz	r0, 8008f36 <_puts_r+0x9a>
 8008ed4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008ed8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008eda:	07da      	lsls	r2, r3, #31
 8008edc:	d405      	bmi.n	8008eea <_puts_r+0x4e>
 8008ede:	89a3      	ldrh	r3, [r4, #12]
 8008ee0:	059b      	lsls	r3, r3, #22
 8008ee2:	d402      	bmi.n	8008eea <_puts_r+0x4e>
 8008ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ee6:	f000 f86f 	bl	8008fc8 <__retarget_lock_release_recursive>
 8008eea:	4628      	mov	r0, r5
 8008eec:	bd70      	pop	{r4, r5, r6, pc}
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	da04      	bge.n	8008efc <_puts_r+0x60>
 8008ef2:	69a2      	ldr	r2, [r4, #24]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	dc17      	bgt.n	8008f28 <_puts_r+0x8c>
 8008ef8:	290a      	cmp	r1, #10
 8008efa:	d015      	beq.n	8008f28 <_puts_r+0x8c>
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	1c5a      	adds	r2, r3, #1
 8008f00:	6022      	str	r2, [r4, #0]
 8008f02:	7019      	strb	r1, [r3, #0]
 8008f04:	68a3      	ldr	r3, [r4, #8]
 8008f06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	60a3      	str	r3, [r4, #8]
 8008f0e:	2900      	cmp	r1, #0
 8008f10:	d1ed      	bne.n	8008eee <_puts_r+0x52>
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	da11      	bge.n	8008f3a <_puts_r+0x9e>
 8008f16:	4622      	mov	r2, r4
 8008f18:	210a      	movs	r1, #10
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	f001 fd62 	bl	800a9e4 <__swbuf_r>
 8008f20:	3001      	adds	r0, #1
 8008f22:	d0d7      	beq.n	8008ed4 <_puts_r+0x38>
 8008f24:	250a      	movs	r5, #10
 8008f26:	e7d7      	b.n	8008ed8 <_puts_r+0x3c>
 8008f28:	4622      	mov	r2, r4
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	f001 fd5a 	bl	800a9e4 <__swbuf_r>
 8008f30:	3001      	adds	r0, #1
 8008f32:	d1e7      	bne.n	8008f04 <_puts_r+0x68>
 8008f34:	e7ce      	b.n	8008ed4 <_puts_r+0x38>
 8008f36:	3e01      	subs	r6, #1
 8008f38:	e7e4      	b.n	8008f04 <_puts_r+0x68>
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	1c5a      	adds	r2, r3, #1
 8008f3e:	6022      	str	r2, [r4, #0]
 8008f40:	220a      	movs	r2, #10
 8008f42:	701a      	strb	r2, [r3, #0]
 8008f44:	e7ee      	b.n	8008f24 <_puts_r+0x88>
	...

08008f48 <puts>:
 8008f48:	4b02      	ldr	r3, [pc, #8]	@ (8008f54 <puts+0xc>)
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	6818      	ldr	r0, [r3, #0]
 8008f4e:	f7ff bfa5 	b.w	8008e9c <_puts_r>
 8008f52:	bf00      	nop
 8008f54:	200000b0 	.word	0x200000b0

08008f58 <memset>:
 8008f58:	4402      	add	r2, r0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d100      	bne.n	8008f62 <memset+0xa>
 8008f60:	4770      	bx	lr
 8008f62:	f803 1b01 	strb.w	r1, [r3], #1
 8008f66:	e7f9      	b.n	8008f5c <memset+0x4>

08008f68 <_localeconv_r>:
 8008f68:	4800      	ldr	r0, [pc, #0]	@ (8008f6c <_localeconv_r+0x4>)
 8008f6a:	4770      	bx	lr
 8008f6c:	200001f0 	.word	0x200001f0

08008f70 <__errno>:
 8008f70:	4b01      	ldr	r3, [pc, #4]	@ (8008f78 <__errno+0x8>)
 8008f72:	6818      	ldr	r0, [r3, #0]
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	200000b0 	.word	0x200000b0

08008f7c <__libc_init_array>:
 8008f7c:	b570      	push	{r4, r5, r6, lr}
 8008f7e:	4d0d      	ldr	r5, [pc, #52]	@ (8008fb4 <__libc_init_array+0x38>)
 8008f80:	2600      	movs	r6, #0
 8008f82:	4c0d      	ldr	r4, [pc, #52]	@ (8008fb8 <__libc_init_array+0x3c>)
 8008f84:	1b64      	subs	r4, r4, r5
 8008f86:	10a4      	asrs	r4, r4, #2
 8008f88:	42a6      	cmp	r6, r4
 8008f8a:	d109      	bne.n	8008fa0 <__libc_init_array+0x24>
 8008f8c:	4d0b      	ldr	r5, [pc, #44]	@ (8008fbc <__libc_init_array+0x40>)
 8008f8e:	2600      	movs	r6, #0
 8008f90:	4c0b      	ldr	r4, [pc, #44]	@ (8008fc0 <__libc_init_array+0x44>)
 8008f92:	f002 fb6b 	bl	800b66c <_init>
 8008f96:	1b64      	subs	r4, r4, r5
 8008f98:	10a4      	asrs	r4, r4, #2
 8008f9a:	42a6      	cmp	r6, r4
 8008f9c:	d105      	bne.n	8008faa <__libc_init_array+0x2e>
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}
 8008fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fa4:	3601      	adds	r6, #1
 8008fa6:	4798      	blx	r3
 8008fa8:	e7ee      	b.n	8008f88 <__libc_init_array+0xc>
 8008faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fae:	3601      	adds	r6, #1
 8008fb0:	4798      	blx	r3
 8008fb2:	e7f2      	b.n	8008f9a <__libc_init_array+0x1e>
 8008fb4:	0800c010 	.word	0x0800c010
 8008fb8:	0800c010 	.word	0x0800c010
 8008fbc:	0800c010 	.word	0x0800c010
 8008fc0:	0800c014 	.word	0x0800c014

08008fc4 <__retarget_lock_init_recursive>:
 8008fc4:	4770      	bx	lr

08008fc6 <__retarget_lock_acquire_recursive>:
 8008fc6:	4770      	bx	lr

08008fc8 <__retarget_lock_release_recursive>:
 8008fc8:	4770      	bx	lr

08008fca <memchr>:
 8008fca:	b2c9      	uxtb	r1, r1
 8008fcc:	4603      	mov	r3, r0
 8008fce:	4402      	add	r2, r0
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	d101      	bne.n	8008fdc <memchr+0x12>
 8008fd8:	2000      	movs	r0, #0
 8008fda:	e003      	b.n	8008fe4 <memchr+0x1a>
 8008fdc:	7804      	ldrb	r4, [r0, #0]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	428c      	cmp	r4, r1
 8008fe2:	d1f6      	bne.n	8008fd2 <memchr+0x8>
 8008fe4:	bd10      	pop	{r4, pc}

08008fe6 <memcpy>:
 8008fe6:	440a      	add	r2, r1
 8008fe8:	1e43      	subs	r3, r0, #1
 8008fea:	4291      	cmp	r1, r2
 8008fec:	d100      	bne.n	8008ff0 <memcpy+0xa>
 8008fee:	4770      	bx	lr
 8008ff0:	b510      	push	{r4, lr}
 8008ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ff6:	4291      	cmp	r1, r2
 8008ff8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ffc:	d1f9      	bne.n	8008ff2 <memcpy+0xc>
 8008ffe:	bd10      	pop	{r4, pc}

08009000 <__assert_func>:
 8009000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009002:	4614      	mov	r4, r2
 8009004:	461a      	mov	r2, r3
 8009006:	4b09      	ldr	r3, [pc, #36]	@ (800902c <__assert_func+0x2c>)
 8009008:	4605      	mov	r5, r0
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68d8      	ldr	r0, [r3, #12]
 800900e:	b954      	cbnz	r4, 8009026 <__assert_func+0x26>
 8009010:	4b07      	ldr	r3, [pc, #28]	@ (8009030 <__assert_func+0x30>)
 8009012:	461c      	mov	r4, r3
 8009014:	9100      	str	r1, [sp, #0]
 8009016:	4907      	ldr	r1, [pc, #28]	@ (8009034 <__assert_func+0x34>)
 8009018:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800901c:	462b      	mov	r3, r5
 800901e:	f001 fccf 	bl	800a9c0 <fiprintf>
 8009022:	f001 fe81 	bl	800ad28 <abort>
 8009026:	4b04      	ldr	r3, [pc, #16]	@ (8009038 <__assert_func+0x38>)
 8009028:	e7f4      	b.n	8009014 <__assert_func+0x14>
 800902a:	bf00      	nop
 800902c:	200000b0 	.word	0x200000b0
 8009030:	0800bce7 	.word	0x0800bce7
 8009034:	0800bcb9 	.word	0x0800bcb9
 8009038:	0800bcac 	.word	0x0800bcac

0800903c <quorem>:
 800903c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009040:	6903      	ldr	r3, [r0, #16]
 8009042:	4607      	mov	r7, r0
 8009044:	690c      	ldr	r4, [r1, #16]
 8009046:	42a3      	cmp	r3, r4
 8009048:	f2c0 8083 	blt.w	8009152 <quorem+0x116>
 800904c:	3c01      	subs	r4, #1
 800904e:	f100 0514 	add.w	r5, r0, #20
 8009052:	f101 0814 	add.w	r8, r1, #20
 8009056:	00a3      	lsls	r3, r4, #2
 8009058:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800905c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800906c:	3301      	adds	r3, #1
 800906e:	429a      	cmp	r2, r3
 8009070:	fbb2 f6f3 	udiv	r6, r2, r3
 8009074:	d331      	bcc.n	80090da <quorem+0x9e>
 8009076:	f04f 0a00 	mov.w	sl, #0
 800907a:	46c4      	mov	ip, r8
 800907c:	46ae      	mov	lr, r5
 800907e:	46d3      	mov	fp, sl
 8009080:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009084:	b298      	uxth	r0, r3
 8009086:	45e1      	cmp	r9, ip
 8009088:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800908c:	fb06 a000 	mla	r0, r6, r0, sl
 8009090:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8009094:	b280      	uxth	r0, r0
 8009096:	fb06 2303 	mla	r3, r6, r3, r2
 800909a:	f8de 2000 	ldr.w	r2, [lr]
 800909e:	b292      	uxth	r2, r2
 80090a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090a4:	eba2 0200 	sub.w	r2, r2, r0
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	f8de 0000 	ldr.w	r0, [lr]
 80090ae:	445a      	add	r2, fp
 80090b0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80090b4:	b292      	uxth	r2, r2
 80090b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80090ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80090be:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80090c2:	f84e 2b04 	str.w	r2, [lr], #4
 80090c6:	d2db      	bcs.n	8009080 <quorem+0x44>
 80090c8:	9b00      	ldr	r3, [sp, #0]
 80090ca:	58eb      	ldr	r3, [r5, r3]
 80090cc:	b92b      	cbnz	r3, 80090da <quorem+0x9e>
 80090ce:	9b01      	ldr	r3, [sp, #4]
 80090d0:	3b04      	subs	r3, #4
 80090d2:	429d      	cmp	r5, r3
 80090d4:	461a      	mov	r2, r3
 80090d6:	d330      	bcc.n	800913a <quorem+0xfe>
 80090d8:	613c      	str	r4, [r7, #16]
 80090da:	4638      	mov	r0, r7
 80090dc:	f001 fb20 	bl	800a720 <__mcmp>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	db26      	blt.n	8009132 <quorem+0xf6>
 80090e4:	4629      	mov	r1, r5
 80090e6:	2000      	movs	r0, #0
 80090e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80090ec:	f8d1 c000 	ldr.w	ip, [r1]
 80090f0:	fa1f fe82 	uxth.w	lr, r2
 80090f4:	45c1      	cmp	r9, r8
 80090f6:	fa1f f38c 	uxth.w	r3, ip
 80090fa:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80090fe:	eba3 030e 	sub.w	r3, r3, lr
 8009102:	4403      	add	r3, r0
 8009104:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009108:	b29b      	uxth	r3, r3
 800910a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800910e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009112:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009116:	f841 3b04 	str.w	r3, [r1], #4
 800911a:	d2e5      	bcs.n	80090e8 <quorem+0xac>
 800911c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009120:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009124:	b922      	cbnz	r2, 8009130 <quorem+0xf4>
 8009126:	3b04      	subs	r3, #4
 8009128:	429d      	cmp	r5, r3
 800912a:	461a      	mov	r2, r3
 800912c:	d30b      	bcc.n	8009146 <quorem+0x10a>
 800912e:	613c      	str	r4, [r7, #16]
 8009130:	3601      	adds	r6, #1
 8009132:	4630      	mov	r0, r6
 8009134:	b003      	add	sp, #12
 8009136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913a:	6812      	ldr	r2, [r2, #0]
 800913c:	3b04      	subs	r3, #4
 800913e:	2a00      	cmp	r2, #0
 8009140:	d1ca      	bne.n	80090d8 <quorem+0x9c>
 8009142:	3c01      	subs	r4, #1
 8009144:	e7c5      	b.n	80090d2 <quorem+0x96>
 8009146:	6812      	ldr	r2, [r2, #0]
 8009148:	3b04      	subs	r3, #4
 800914a:	2a00      	cmp	r2, #0
 800914c:	d1ef      	bne.n	800912e <quorem+0xf2>
 800914e:	3c01      	subs	r4, #1
 8009150:	e7ea      	b.n	8009128 <quorem+0xec>
 8009152:	2000      	movs	r0, #0
 8009154:	e7ee      	b.n	8009134 <quorem+0xf8>
	...

08009158 <_dtoa_r>:
 8009158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800915c:	69c7      	ldr	r7, [r0, #28]
 800915e:	b099      	sub	sp, #100	@ 0x64
 8009160:	4683      	mov	fp, r0
 8009162:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009164:	9109      	str	r1, [sp, #36]	@ 0x24
 8009166:	920e      	str	r2, [sp, #56]	@ 0x38
 8009168:	9313      	str	r3, [sp, #76]	@ 0x4c
 800916a:	ec55 4b10 	vmov	r4, r5, d0
 800916e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009172:	b97f      	cbnz	r7, 8009194 <_dtoa_r+0x3c>
 8009174:	2010      	movs	r0, #16
 8009176:	f000 fef5 	bl	8009f64 <malloc>
 800917a:	4602      	mov	r2, r0
 800917c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009180:	b920      	cbnz	r0, 800918c <_dtoa_r+0x34>
 8009182:	4ba7      	ldr	r3, [pc, #668]	@ (8009420 <_dtoa_r+0x2c8>)
 8009184:	21ef      	movs	r1, #239	@ 0xef
 8009186:	48a7      	ldr	r0, [pc, #668]	@ (8009424 <_dtoa_r+0x2cc>)
 8009188:	f7ff ff3a 	bl	8009000 <__assert_func>
 800918c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009190:	6007      	str	r7, [r0, #0]
 8009192:	60c7      	str	r7, [r0, #12]
 8009194:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009198:	6819      	ldr	r1, [r3, #0]
 800919a:	b159      	cbz	r1, 80091b4 <_dtoa_r+0x5c>
 800919c:	685a      	ldr	r2, [r3, #4]
 800919e:	2301      	movs	r3, #1
 80091a0:	4658      	mov	r0, fp
 80091a2:	4093      	lsls	r3, r2
 80091a4:	604a      	str	r2, [r1, #4]
 80091a6:	608b      	str	r3, [r1, #8]
 80091a8:	f001 f87e 	bl	800a2a8 <_Bfree>
 80091ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80091b0:	2200      	movs	r2, #0
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	1e2b      	subs	r3, r5, #0
 80091b6:	bfb7      	itett	lt
 80091b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80091bc:	2300      	movge	r3, #0
 80091be:	2201      	movlt	r2, #1
 80091c0:	9303      	strlt	r3, [sp, #12]
 80091c2:	bfa8      	it	ge
 80091c4:	6033      	strge	r3, [r6, #0]
 80091c6:	9f03      	ldr	r7, [sp, #12]
 80091c8:	4b97      	ldr	r3, [pc, #604]	@ (8009428 <_dtoa_r+0x2d0>)
 80091ca:	bfb8      	it	lt
 80091cc:	6032      	strlt	r2, [r6, #0]
 80091ce:	43bb      	bics	r3, r7
 80091d0:	d112      	bne.n	80091f8 <_dtoa_r+0xa0>
 80091d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80091d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80091d8:	6013      	str	r3, [r2, #0]
 80091da:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091de:	4323      	orrs	r3, r4
 80091e0:	f000 854c 	beq.w	8009c7c <_dtoa_r+0xb24>
 80091e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091e6:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800943c <_dtoa_r+0x2e4>
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 854e 	beq.w	8009c8c <_dtoa_r+0xb34>
 80091f0:	f10a 0303 	add.w	r3, sl, #3
 80091f4:	f000 bd48 	b.w	8009c88 <_dtoa_r+0xb30>
 80091f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091fc:	2200      	movs	r2, #0
 80091fe:	2300      	movs	r3, #0
 8009200:	ec51 0b17 	vmov	r0, r1, d7
 8009204:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009208:	f7f7 fc62 	bl	8000ad0 <__aeabi_dcmpeq>
 800920c:	4680      	mov	r8, r0
 800920e:	b158      	cbz	r0, 8009228 <_dtoa_r+0xd0>
 8009210:	2301      	movs	r3, #1
 8009212:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009214:	6013      	str	r3, [r2, #0]
 8009216:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009218:	b113      	cbz	r3, 8009220 <_dtoa_r+0xc8>
 800921a:	4b84      	ldr	r3, [pc, #528]	@ (800942c <_dtoa_r+0x2d4>)
 800921c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800921e:	6013      	str	r3, [r2, #0]
 8009220:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8009440 <_dtoa_r+0x2e8>
 8009224:	f000 bd32 	b.w	8009c8c <_dtoa_r+0xb34>
 8009228:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800922c:	aa16      	add	r2, sp, #88	@ 0x58
 800922e:	a917      	add	r1, sp, #92	@ 0x5c
 8009230:	4658      	mov	r0, fp
 8009232:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009236:	f001 fb27 	bl	800a888 <__d2b>
 800923a:	4681      	mov	r9, r0
 800923c:	2e00      	cmp	r6, #0
 800923e:	d075      	beq.n	800932c <_dtoa_r+0x1d4>
 8009240:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009242:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009246:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800924a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800924e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009252:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009256:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800925a:	4619      	mov	r1, r3
 800925c:	2200      	movs	r2, #0
 800925e:	4b74      	ldr	r3, [pc, #464]	@ (8009430 <_dtoa_r+0x2d8>)
 8009260:	f7f7 f816 	bl	8000290 <__aeabi_dsub>
 8009264:	a368      	add	r3, pc, #416	@ (adr r3, 8009408 <_dtoa_r+0x2b0>)
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	f7f7 f9c9 	bl	8000600 <__aeabi_dmul>
 800926e:	a368      	add	r3, pc, #416	@ (adr r3, 8009410 <_dtoa_r+0x2b8>)
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	f7f7 f80e 	bl	8000294 <__adddf3>
 8009278:	4604      	mov	r4, r0
 800927a:	460d      	mov	r5, r1
 800927c:	4630      	mov	r0, r6
 800927e:	f7f7 f955 	bl	800052c <__aeabi_i2d>
 8009282:	a365      	add	r3, pc, #404	@ (adr r3, 8009418 <_dtoa_r+0x2c0>)
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	f7f7 f9ba 	bl	8000600 <__aeabi_dmul>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4620      	mov	r0, r4
 8009292:	4629      	mov	r1, r5
 8009294:	f7f6 fffe 	bl	8000294 <__adddf3>
 8009298:	4604      	mov	r4, r0
 800929a:	460d      	mov	r5, r1
 800929c:	f7f7 fc60 	bl	8000b60 <__aeabi_d2iz>
 80092a0:	2200      	movs	r2, #0
 80092a2:	4607      	mov	r7, r0
 80092a4:	2300      	movs	r3, #0
 80092a6:	4620      	mov	r0, r4
 80092a8:	4629      	mov	r1, r5
 80092aa:	f7f7 fc1b 	bl	8000ae4 <__aeabi_dcmplt>
 80092ae:	b140      	cbz	r0, 80092c2 <_dtoa_r+0x16a>
 80092b0:	4638      	mov	r0, r7
 80092b2:	f7f7 f93b 	bl	800052c <__aeabi_i2d>
 80092b6:	4622      	mov	r2, r4
 80092b8:	462b      	mov	r3, r5
 80092ba:	f7f7 fc09 	bl	8000ad0 <__aeabi_dcmpeq>
 80092be:	b900      	cbnz	r0, 80092c2 <_dtoa_r+0x16a>
 80092c0:	3f01      	subs	r7, #1
 80092c2:	2f16      	cmp	r7, #22
 80092c4:	d851      	bhi.n	800936a <_dtoa_r+0x212>
 80092c6:	4b5b      	ldr	r3, [pc, #364]	@ (8009434 <_dtoa_r+0x2dc>)
 80092c8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80092cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d4:	f7f7 fc06 	bl	8000ae4 <__aeabi_dcmplt>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d048      	beq.n	800936e <_dtoa_r+0x216>
 80092dc:	3f01      	subs	r7, #1
 80092de:	2300      	movs	r3, #0
 80092e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80092e2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80092e4:	1b9b      	subs	r3, r3, r6
 80092e6:	1e5a      	subs	r2, r3, #1
 80092e8:	bf46      	itte	mi
 80092ea:	f1c3 0801 	rsbmi	r8, r3, #1
 80092ee:	2300      	movmi	r3, #0
 80092f0:	f04f 0800 	movpl.w	r8, #0
 80092f4:	9208      	str	r2, [sp, #32]
 80092f6:	bf48      	it	mi
 80092f8:	9308      	strmi	r3, [sp, #32]
 80092fa:	2f00      	cmp	r7, #0
 80092fc:	db39      	blt.n	8009372 <_dtoa_r+0x21a>
 80092fe:	9b08      	ldr	r3, [sp, #32]
 8009300:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009302:	443b      	add	r3, r7
 8009304:	9308      	str	r3, [sp, #32]
 8009306:	2300      	movs	r3, #0
 8009308:	930a      	str	r3, [sp, #40]	@ 0x28
 800930a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800930c:	2b09      	cmp	r3, #9
 800930e:	d864      	bhi.n	80093da <_dtoa_r+0x282>
 8009310:	2b05      	cmp	r3, #5
 8009312:	bfc5      	ittet	gt
 8009314:	3b04      	subgt	r3, #4
 8009316:	2400      	movgt	r4, #0
 8009318:	2401      	movle	r4, #1
 800931a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800931c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800931e:	3b02      	subs	r3, #2
 8009320:	2b03      	cmp	r3, #3
 8009322:	d865      	bhi.n	80093f0 <_dtoa_r+0x298>
 8009324:	e8df f003 	tbb	[pc, r3]
 8009328:	5737392c 	.word	0x5737392c
 800932c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009330:	441e      	add	r6, r3
 8009332:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009336:	2b20      	cmp	r3, #32
 8009338:	bfc9      	itett	gt
 800933a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800933e:	f1c3 0320 	rsble	r3, r3, #32
 8009342:	409f      	lslgt	r7, r3
 8009344:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009348:	bfd8      	it	le
 800934a:	fa04 f003 	lslle.w	r0, r4, r3
 800934e:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 8009352:	bfc4      	itt	gt
 8009354:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009358:	ea47 0003 	orrgt.w	r0, r7, r3
 800935c:	f7f7 f8d6 	bl	800050c <__aeabi_ui2d>
 8009360:	2201      	movs	r2, #1
 8009362:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009366:	9214      	str	r2, [sp, #80]	@ 0x50
 8009368:	e777      	b.n	800925a <_dtoa_r+0x102>
 800936a:	2301      	movs	r3, #1
 800936c:	e7b8      	b.n	80092e0 <_dtoa_r+0x188>
 800936e:	9012      	str	r0, [sp, #72]	@ 0x48
 8009370:	e7b7      	b.n	80092e2 <_dtoa_r+0x18a>
 8009372:	427b      	negs	r3, r7
 8009374:	eba8 0807 	sub.w	r8, r8, r7
 8009378:	930a      	str	r3, [sp, #40]	@ 0x28
 800937a:	2300      	movs	r3, #0
 800937c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800937e:	e7c4      	b.n	800930a <_dtoa_r+0x1b2>
 8009380:	2300      	movs	r3, #0
 8009382:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009384:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009386:	2b00      	cmp	r3, #0
 8009388:	dc35      	bgt.n	80093f6 <_dtoa_r+0x29e>
 800938a:	2301      	movs	r3, #1
 800938c:	461a      	mov	r2, r3
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	9307      	str	r3, [sp, #28]
 8009392:	920e      	str	r2, [sp, #56]	@ 0x38
 8009394:	e00b      	b.n	80093ae <_dtoa_r+0x256>
 8009396:	2301      	movs	r3, #1
 8009398:	e7f3      	b.n	8009382 <_dtoa_r+0x22a>
 800939a:	2300      	movs	r3, #0
 800939c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800939e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093a0:	18fb      	adds	r3, r7, r3
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	3301      	adds	r3, #1
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	9307      	str	r3, [sp, #28]
 80093aa:	bfb8      	it	lt
 80093ac:	2301      	movlt	r3, #1
 80093ae:	f8db 001c 	ldr.w	r0, [fp, #28]
 80093b2:	2100      	movs	r1, #0
 80093b4:	2204      	movs	r2, #4
 80093b6:	f102 0514 	add.w	r5, r2, #20
 80093ba:	429d      	cmp	r5, r3
 80093bc:	d91f      	bls.n	80093fe <_dtoa_r+0x2a6>
 80093be:	6041      	str	r1, [r0, #4]
 80093c0:	4658      	mov	r0, fp
 80093c2:	f000 ff31 	bl	800a228 <_Balloc>
 80093c6:	4682      	mov	sl, r0
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d13b      	bne.n	8009444 <_dtoa_r+0x2ec>
 80093cc:	4b1a      	ldr	r3, [pc, #104]	@ (8009438 <_dtoa_r+0x2e0>)
 80093ce:	4602      	mov	r2, r0
 80093d0:	f240 11af 	movw	r1, #431	@ 0x1af
 80093d4:	e6d7      	b.n	8009186 <_dtoa_r+0x2e>
 80093d6:	2301      	movs	r3, #1
 80093d8:	e7e0      	b.n	800939c <_dtoa_r+0x244>
 80093da:	2401      	movs	r4, #1
 80093dc:	2300      	movs	r3, #0
 80093de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80093e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093e6:	2200      	movs	r2, #0
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	9307      	str	r3, [sp, #28]
 80093ec:	2312      	movs	r3, #18
 80093ee:	e7d0      	b.n	8009392 <_dtoa_r+0x23a>
 80093f0:	2301      	movs	r3, #1
 80093f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093f4:	e7f5      	b.n	80093e2 <_dtoa_r+0x28a>
 80093f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	9307      	str	r3, [sp, #28]
 80093fc:	e7d7      	b.n	80093ae <_dtoa_r+0x256>
 80093fe:	3101      	adds	r1, #1
 8009400:	0052      	lsls	r2, r2, #1
 8009402:	e7d8      	b.n	80093b6 <_dtoa_r+0x25e>
 8009404:	f3af 8000 	nop.w
 8009408:	636f4361 	.word	0x636f4361
 800940c:	3fd287a7 	.word	0x3fd287a7
 8009410:	8b60c8b3 	.word	0x8b60c8b3
 8009414:	3fc68a28 	.word	0x3fc68a28
 8009418:	509f79fb 	.word	0x509f79fb
 800941c:	3fd34413 	.word	0x3fd34413
 8009420:	0800bcf5 	.word	0x0800bcf5
 8009424:	0800bd0c 	.word	0x0800bd0c
 8009428:	7ff00000 	.word	0x7ff00000
 800942c:	0800bc89 	.word	0x0800bc89
 8009430:	3ff80000 	.word	0x3ff80000
 8009434:	0800be18 	.word	0x0800be18
 8009438:	0800bd64 	.word	0x0800bd64
 800943c:	0800bcf1 	.word	0x0800bcf1
 8009440:	0800bc88 	.word	0x0800bc88
 8009444:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009448:	6018      	str	r0, [r3, #0]
 800944a:	9b07      	ldr	r3, [sp, #28]
 800944c:	2b0e      	cmp	r3, #14
 800944e:	f200 80a4 	bhi.w	800959a <_dtoa_r+0x442>
 8009452:	2c00      	cmp	r4, #0
 8009454:	f000 80a1 	beq.w	800959a <_dtoa_r+0x442>
 8009458:	2f00      	cmp	r7, #0
 800945a:	dd33      	ble.n	80094c4 <_dtoa_r+0x36c>
 800945c:	f007 020f 	and.w	r2, r7, #15
 8009460:	4bac      	ldr	r3, [pc, #688]	@ (8009714 <_dtoa_r+0x5bc>)
 8009462:	05f8      	lsls	r0, r7, #23
 8009464:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009468:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800946c:	ed93 7b00 	vldr	d7, [r3]
 8009470:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009474:	d516      	bpl.n	80094a4 <_dtoa_r+0x34c>
 8009476:	4ba8      	ldr	r3, [pc, #672]	@ (8009718 <_dtoa_r+0x5c0>)
 8009478:	f004 040f 	and.w	r4, r4, #15
 800947c:	2603      	movs	r6, #3
 800947e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009482:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009486:	f7f7 f9e5 	bl	8000854 <__aeabi_ddiv>
 800948a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800948e:	4da2      	ldr	r5, [pc, #648]	@ (8009718 <_dtoa_r+0x5c0>)
 8009490:	b954      	cbnz	r4, 80094a8 <_dtoa_r+0x350>
 8009492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800949a:	f7f7 f9db 	bl	8000854 <__aeabi_ddiv>
 800949e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094a2:	e028      	b.n	80094f6 <_dtoa_r+0x39e>
 80094a4:	2602      	movs	r6, #2
 80094a6:	e7f2      	b.n	800948e <_dtoa_r+0x336>
 80094a8:	07e1      	lsls	r1, r4, #31
 80094aa:	d508      	bpl.n	80094be <_dtoa_r+0x366>
 80094ac:	3601      	adds	r6, #1
 80094ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094b6:	f7f7 f8a3 	bl	8000600 <__aeabi_dmul>
 80094ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094be:	1064      	asrs	r4, r4, #1
 80094c0:	3508      	adds	r5, #8
 80094c2:	e7e5      	b.n	8009490 <_dtoa_r+0x338>
 80094c4:	f000 80d2 	beq.w	800966c <_dtoa_r+0x514>
 80094c8:	427c      	negs	r4, r7
 80094ca:	4b92      	ldr	r3, [pc, #584]	@ (8009714 <_dtoa_r+0x5bc>)
 80094cc:	4d92      	ldr	r5, [pc, #584]	@ (8009718 <_dtoa_r+0x5c0>)
 80094ce:	2602      	movs	r6, #2
 80094d0:	f004 020f 	and.w	r2, r4, #15
 80094d4:	1124      	asrs	r4, r4, #4
 80094d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e2:	f7f7 f88d 	bl	8000600 <__aeabi_dmul>
 80094e6:	2300      	movs	r3, #0
 80094e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094ec:	2c00      	cmp	r4, #0
 80094ee:	f040 80b2 	bne.w	8009656 <_dtoa_r+0x4fe>
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1d3      	bne.n	800949e <_dtoa_r+0x346>
 80094f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80094f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 80b7 	beq.w	8009670 <_dtoa_r+0x518>
 8009502:	2200      	movs	r2, #0
 8009504:	4b85      	ldr	r3, [pc, #532]	@ (800971c <_dtoa_r+0x5c4>)
 8009506:	4620      	mov	r0, r4
 8009508:	4629      	mov	r1, r5
 800950a:	f7f7 faeb 	bl	8000ae4 <__aeabi_dcmplt>
 800950e:	2800      	cmp	r0, #0
 8009510:	f000 80ae 	beq.w	8009670 <_dtoa_r+0x518>
 8009514:	9b07      	ldr	r3, [sp, #28]
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 80aa 	beq.w	8009670 <_dtoa_r+0x518>
 800951c:	9b00      	ldr	r3, [sp, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	dd37      	ble.n	8009592 <_dtoa_r+0x43a>
 8009522:	1e7b      	subs	r3, r7, #1
 8009524:	4620      	mov	r0, r4
 8009526:	2200      	movs	r2, #0
 8009528:	4629      	mov	r1, r5
 800952a:	9304      	str	r3, [sp, #16]
 800952c:	3601      	adds	r6, #1
 800952e:	4b7c      	ldr	r3, [pc, #496]	@ (8009720 <_dtoa_r+0x5c8>)
 8009530:	f7f7 f866 	bl	8000600 <__aeabi_dmul>
 8009534:	9c00      	ldr	r4, [sp, #0]
 8009536:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800953a:	4630      	mov	r0, r6
 800953c:	f7f6 fff6 	bl	800052c <__aeabi_i2d>
 8009540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009544:	f7f7 f85c 	bl	8000600 <__aeabi_dmul>
 8009548:	2200      	movs	r2, #0
 800954a:	4b76      	ldr	r3, [pc, #472]	@ (8009724 <_dtoa_r+0x5cc>)
 800954c:	f7f6 fea2 	bl	8000294 <__adddf3>
 8009550:	4605      	mov	r5, r0
 8009552:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009556:	2c00      	cmp	r4, #0
 8009558:	f040 808d 	bne.w	8009676 <_dtoa_r+0x51e>
 800955c:	2200      	movs	r2, #0
 800955e:	4b72      	ldr	r3, [pc, #456]	@ (8009728 <_dtoa_r+0x5d0>)
 8009560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009564:	f7f6 fe94 	bl	8000290 <__aeabi_dsub>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009570:	462a      	mov	r2, r5
 8009572:	4633      	mov	r3, r6
 8009574:	f7f7 fad4 	bl	8000b20 <__aeabi_dcmpgt>
 8009578:	2800      	cmp	r0, #0
 800957a:	f040 828b 	bne.w	8009a94 <_dtoa_r+0x93c>
 800957e:	462a      	mov	r2, r5
 8009580:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009588:	f7f7 faac 	bl	8000ae4 <__aeabi_dcmplt>
 800958c:	2800      	cmp	r0, #0
 800958e:	f040 8128 	bne.w	80097e2 <_dtoa_r+0x68a>
 8009592:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009596:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800959a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800959c:	2b00      	cmp	r3, #0
 800959e:	f2c0 815a 	blt.w	8009856 <_dtoa_r+0x6fe>
 80095a2:	2f0e      	cmp	r7, #14
 80095a4:	f300 8157 	bgt.w	8009856 <_dtoa_r+0x6fe>
 80095a8:	4b5a      	ldr	r3, [pc, #360]	@ (8009714 <_dtoa_r+0x5bc>)
 80095aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095ae:	ed93 7b00 	vldr	d7, [r3]
 80095b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	ed8d 7b00 	vstr	d7, [sp]
 80095ba:	da03      	bge.n	80095c4 <_dtoa_r+0x46c>
 80095bc:	9b07      	ldr	r3, [sp, #28]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f340 8101 	ble.w	80097c6 <_dtoa_r+0x66e>
 80095c4:	4656      	mov	r6, sl
 80095c6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80095ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095ce:	4620      	mov	r0, r4
 80095d0:	4629      	mov	r1, r5
 80095d2:	f7f7 f93f 	bl	8000854 <__aeabi_ddiv>
 80095d6:	f7f7 fac3 	bl	8000b60 <__aeabi_d2iz>
 80095da:	4680      	mov	r8, r0
 80095dc:	f7f6 ffa6 	bl	800052c <__aeabi_i2d>
 80095e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095e4:	f7f7 f80c 	bl	8000600 <__aeabi_dmul>
 80095e8:	4602      	mov	r2, r0
 80095ea:	4620      	mov	r0, r4
 80095ec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80095f0:	460b      	mov	r3, r1
 80095f2:	4629      	mov	r1, r5
 80095f4:	f7f6 fe4c 	bl	8000290 <__aeabi_dsub>
 80095f8:	9d07      	ldr	r5, [sp, #28]
 80095fa:	f806 4b01 	strb.w	r4, [r6], #1
 80095fe:	eba6 040a 	sub.w	r4, r6, sl
 8009602:	4602      	mov	r2, r0
 8009604:	460b      	mov	r3, r1
 8009606:	42a5      	cmp	r5, r4
 8009608:	f040 8117 	bne.w	800983a <_dtoa_r+0x6e2>
 800960c:	f7f6 fe42 	bl	8000294 <__adddf3>
 8009610:	4604      	mov	r4, r0
 8009612:	460d      	mov	r5, r1
 8009614:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009618:	f7f7 fa82 	bl	8000b20 <__aeabi_dcmpgt>
 800961c:	2800      	cmp	r0, #0
 800961e:	f040 80f9 	bne.w	8009814 <_dtoa_r+0x6bc>
 8009622:	4620      	mov	r0, r4
 8009624:	4629      	mov	r1, r5
 8009626:	e9dd 2300 	ldrd	r2, r3, [sp]
 800962a:	f7f7 fa51 	bl	8000ad0 <__aeabi_dcmpeq>
 800962e:	b118      	cbz	r0, 8009638 <_dtoa_r+0x4e0>
 8009630:	f018 0f01 	tst.w	r8, #1
 8009634:	f040 80ee 	bne.w	8009814 <_dtoa_r+0x6bc>
 8009638:	4649      	mov	r1, r9
 800963a:	4658      	mov	r0, fp
 800963c:	f000 fe34 	bl	800a2a8 <_Bfree>
 8009640:	2300      	movs	r3, #0
 8009642:	3701      	adds	r7, #1
 8009644:	7033      	strb	r3, [r6, #0]
 8009646:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009648:	601f      	str	r7, [r3, #0]
 800964a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 831d 	beq.w	8009c8c <_dtoa_r+0xb34>
 8009652:	601e      	str	r6, [r3, #0]
 8009654:	e31a      	b.n	8009c8c <_dtoa_r+0xb34>
 8009656:	07e2      	lsls	r2, r4, #31
 8009658:	d505      	bpl.n	8009666 <_dtoa_r+0x50e>
 800965a:	3601      	adds	r6, #1
 800965c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009660:	f7f6 ffce 	bl	8000600 <__aeabi_dmul>
 8009664:	2301      	movs	r3, #1
 8009666:	1064      	asrs	r4, r4, #1
 8009668:	3508      	adds	r5, #8
 800966a:	e73f      	b.n	80094ec <_dtoa_r+0x394>
 800966c:	2602      	movs	r6, #2
 800966e:	e742      	b.n	80094f6 <_dtoa_r+0x39e>
 8009670:	9c07      	ldr	r4, [sp, #28]
 8009672:	9704      	str	r7, [sp, #16]
 8009674:	e761      	b.n	800953a <_dtoa_r+0x3e2>
 8009676:	4b27      	ldr	r3, [pc, #156]	@ (8009714 <_dtoa_r+0x5bc>)
 8009678:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800967a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800967e:	4454      	add	r4, sl
 8009680:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009684:	2900      	cmp	r1, #0
 8009686:	d053      	beq.n	8009730 <_dtoa_r+0x5d8>
 8009688:	2000      	movs	r0, #0
 800968a:	4928      	ldr	r1, [pc, #160]	@ (800972c <_dtoa_r+0x5d4>)
 800968c:	f7f7 f8e2 	bl	8000854 <__aeabi_ddiv>
 8009690:	4633      	mov	r3, r6
 8009692:	4656      	mov	r6, sl
 8009694:	462a      	mov	r2, r5
 8009696:	f7f6 fdfb 	bl	8000290 <__aeabi_dsub>
 800969a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800969e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096a2:	f7f7 fa5d 	bl	8000b60 <__aeabi_d2iz>
 80096a6:	4605      	mov	r5, r0
 80096a8:	f7f6 ff40 	bl	800052c <__aeabi_i2d>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	3530      	adds	r5, #48	@ 0x30
 80096b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096b6:	f7f6 fdeb 	bl	8000290 <__aeabi_dsub>
 80096ba:	4602      	mov	r2, r0
 80096bc:	460b      	mov	r3, r1
 80096be:	f806 5b01 	strb.w	r5, [r6], #1
 80096c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096ca:	f7f7 fa0b 	bl	8000ae4 <__aeabi_dcmplt>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d171      	bne.n	80097b6 <_dtoa_r+0x65e>
 80096d2:	2000      	movs	r0, #0
 80096d4:	4911      	ldr	r1, [pc, #68]	@ (800971c <_dtoa_r+0x5c4>)
 80096d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096da:	f7f6 fdd9 	bl	8000290 <__aeabi_dsub>
 80096de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096e2:	f7f7 f9ff 	bl	8000ae4 <__aeabi_dcmplt>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	f040 8095 	bne.w	8009816 <_dtoa_r+0x6be>
 80096ec:	42a6      	cmp	r6, r4
 80096ee:	f43f af50 	beq.w	8009592 <_dtoa_r+0x43a>
 80096f2:	2200      	movs	r2, #0
 80096f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009720 <_dtoa_r+0x5c8>)
 80096f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80096fa:	f7f6 ff81 	bl	8000600 <__aeabi_dmul>
 80096fe:	2200      	movs	r2, #0
 8009700:	4b07      	ldr	r3, [pc, #28]	@ (8009720 <_dtoa_r+0x5c8>)
 8009702:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800970a:	f7f6 ff79 	bl	8000600 <__aeabi_dmul>
 800970e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009712:	e7c4      	b.n	800969e <_dtoa_r+0x546>
 8009714:	0800be18 	.word	0x0800be18
 8009718:	0800bdf0 	.word	0x0800bdf0
 800971c:	3ff00000 	.word	0x3ff00000
 8009720:	40240000 	.word	0x40240000
 8009724:	401c0000 	.word	0x401c0000
 8009728:	40140000 	.word	0x40140000
 800972c:	3fe00000 	.word	0x3fe00000
 8009730:	4631      	mov	r1, r6
 8009732:	4656      	mov	r6, sl
 8009734:	4628      	mov	r0, r5
 8009736:	f7f6 ff63 	bl	8000600 <__aeabi_dmul>
 800973a:	9415      	str	r4, [sp, #84]	@ 0x54
 800973c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009744:	f7f7 fa0c 	bl	8000b60 <__aeabi_d2iz>
 8009748:	4605      	mov	r5, r0
 800974a:	f7f6 feef 	bl	800052c <__aeabi_i2d>
 800974e:	4602      	mov	r2, r0
 8009750:	3530      	adds	r5, #48	@ 0x30
 8009752:	460b      	mov	r3, r1
 8009754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009758:	f7f6 fd9a 	bl	8000290 <__aeabi_dsub>
 800975c:	f806 5b01 	strb.w	r5, [r6], #1
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	42a6      	cmp	r6, r4
 8009766:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800976a:	f04f 0200 	mov.w	r2, #0
 800976e:	d124      	bne.n	80097ba <_dtoa_r+0x662>
 8009770:	4bac      	ldr	r3, [pc, #688]	@ (8009a24 <_dtoa_r+0x8cc>)
 8009772:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009776:	f7f6 fd8d 	bl	8000294 <__adddf3>
 800977a:	4602      	mov	r2, r0
 800977c:	460b      	mov	r3, r1
 800977e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009782:	f7f7 f9cd 	bl	8000b20 <__aeabi_dcmpgt>
 8009786:	2800      	cmp	r0, #0
 8009788:	d145      	bne.n	8009816 <_dtoa_r+0x6be>
 800978a:	2000      	movs	r0, #0
 800978c:	49a5      	ldr	r1, [pc, #660]	@ (8009a24 <_dtoa_r+0x8cc>)
 800978e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009792:	f7f6 fd7d 	bl	8000290 <__aeabi_dsub>
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800979e:	f7f7 f9a1 	bl	8000ae4 <__aeabi_dcmplt>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	f43f aef5 	beq.w	8009592 <_dtoa_r+0x43a>
 80097a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80097aa:	1e73      	subs	r3, r6, #1
 80097ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80097ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80097b2:	2b30      	cmp	r3, #48	@ 0x30
 80097b4:	d0f8      	beq.n	80097a8 <_dtoa_r+0x650>
 80097b6:	9f04      	ldr	r7, [sp, #16]
 80097b8:	e73e      	b.n	8009638 <_dtoa_r+0x4e0>
 80097ba:	4b9b      	ldr	r3, [pc, #620]	@ (8009a28 <_dtoa_r+0x8d0>)
 80097bc:	f7f6 ff20 	bl	8000600 <__aeabi_dmul>
 80097c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097c4:	e7bc      	b.n	8009740 <_dtoa_r+0x5e8>
 80097c6:	d10c      	bne.n	80097e2 <_dtoa_r+0x68a>
 80097c8:	2200      	movs	r2, #0
 80097ca:	4b98      	ldr	r3, [pc, #608]	@ (8009a2c <_dtoa_r+0x8d4>)
 80097cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097d0:	f7f6 ff16 	bl	8000600 <__aeabi_dmul>
 80097d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097d8:	f7f7 f998 	bl	8000b0c <__aeabi_dcmpge>
 80097dc:	2800      	cmp	r0, #0
 80097de:	f000 8157 	beq.w	8009a90 <_dtoa_r+0x938>
 80097e2:	2400      	movs	r4, #0
 80097e4:	4625      	mov	r5, r4
 80097e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097e8:	4656      	mov	r6, sl
 80097ea:	43db      	mvns	r3, r3
 80097ec:	9304      	str	r3, [sp, #16]
 80097ee:	2700      	movs	r7, #0
 80097f0:	4621      	mov	r1, r4
 80097f2:	4658      	mov	r0, fp
 80097f4:	f000 fd58 	bl	800a2a8 <_Bfree>
 80097f8:	2d00      	cmp	r5, #0
 80097fa:	d0dc      	beq.n	80097b6 <_dtoa_r+0x65e>
 80097fc:	b12f      	cbz	r7, 800980a <_dtoa_r+0x6b2>
 80097fe:	42af      	cmp	r7, r5
 8009800:	d003      	beq.n	800980a <_dtoa_r+0x6b2>
 8009802:	4639      	mov	r1, r7
 8009804:	4658      	mov	r0, fp
 8009806:	f000 fd4f 	bl	800a2a8 <_Bfree>
 800980a:	4629      	mov	r1, r5
 800980c:	4658      	mov	r0, fp
 800980e:	f000 fd4b 	bl	800a2a8 <_Bfree>
 8009812:	e7d0      	b.n	80097b6 <_dtoa_r+0x65e>
 8009814:	9704      	str	r7, [sp, #16]
 8009816:	4633      	mov	r3, r6
 8009818:	461e      	mov	r6, r3
 800981a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800981e:	2a39      	cmp	r2, #57	@ 0x39
 8009820:	d107      	bne.n	8009832 <_dtoa_r+0x6da>
 8009822:	459a      	cmp	sl, r3
 8009824:	d1f8      	bne.n	8009818 <_dtoa_r+0x6c0>
 8009826:	9a04      	ldr	r2, [sp, #16]
 8009828:	3201      	adds	r2, #1
 800982a:	9204      	str	r2, [sp, #16]
 800982c:	2230      	movs	r2, #48	@ 0x30
 800982e:	f88a 2000 	strb.w	r2, [sl]
 8009832:	781a      	ldrb	r2, [r3, #0]
 8009834:	3201      	adds	r2, #1
 8009836:	701a      	strb	r2, [r3, #0]
 8009838:	e7bd      	b.n	80097b6 <_dtoa_r+0x65e>
 800983a:	2200      	movs	r2, #0
 800983c:	4b7a      	ldr	r3, [pc, #488]	@ (8009a28 <_dtoa_r+0x8d0>)
 800983e:	f7f6 fedf 	bl	8000600 <__aeabi_dmul>
 8009842:	2200      	movs	r2, #0
 8009844:	2300      	movs	r3, #0
 8009846:	4604      	mov	r4, r0
 8009848:	460d      	mov	r5, r1
 800984a:	f7f7 f941 	bl	8000ad0 <__aeabi_dcmpeq>
 800984e:	2800      	cmp	r0, #0
 8009850:	f43f aebb 	beq.w	80095ca <_dtoa_r+0x472>
 8009854:	e6f0      	b.n	8009638 <_dtoa_r+0x4e0>
 8009856:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009858:	2a00      	cmp	r2, #0
 800985a:	f000 80db 	beq.w	8009a14 <_dtoa_r+0x8bc>
 800985e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009860:	2a01      	cmp	r2, #1
 8009862:	f300 80bf 	bgt.w	80099e4 <_dtoa_r+0x88c>
 8009866:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009868:	2a00      	cmp	r2, #0
 800986a:	f000 80b7 	beq.w	80099dc <_dtoa_r+0x884>
 800986e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009872:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009874:	4646      	mov	r6, r8
 8009876:	9a08      	ldr	r2, [sp, #32]
 8009878:	2101      	movs	r1, #1
 800987a:	4658      	mov	r0, fp
 800987c:	4498      	add	r8, r3
 800987e:	441a      	add	r2, r3
 8009880:	9208      	str	r2, [sp, #32]
 8009882:	f000 fdc7 	bl	800a414 <__i2b>
 8009886:	4605      	mov	r5, r0
 8009888:	b15e      	cbz	r6, 80098a2 <_dtoa_r+0x74a>
 800988a:	9b08      	ldr	r3, [sp, #32]
 800988c:	2b00      	cmp	r3, #0
 800988e:	dd08      	ble.n	80098a2 <_dtoa_r+0x74a>
 8009890:	42b3      	cmp	r3, r6
 8009892:	9a08      	ldr	r2, [sp, #32]
 8009894:	bfa8      	it	ge
 8009896:	4633      	movge	r3, r6
 8009898:	eba8 0803 	sub.w	r8, r8, r3
 800989c:	1af6      	subs	r6, r6, r3
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	9308      	str	r3, [sp, #32]
 80098a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098a4:	b1f3      	cbz	r3, 80098e4 <_dtoa_r+0x78c>
 80098a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 80b7 	beq.w	8009a1c <_dtoa_r+0x8c4>
 80098ae:	b18c      	cbz	r4, 80098d4 <_dtoa_r+0x77c>
 80098b0:	4629      	mov	r1, r5
 80098b2:	4622      	mov	r2, r4
 80098b4:	4658      	mov	r0, fp
 80098b6:	f000 fe6d 	bl	800a594 <__pow5mult>
 80098ba:	464a      	mov	r2, r9
 80098bc:	4601      	mov	r1, r0
 80098be:	4605      	mov	r5, r0
 80098c0:	4658      	mov	r0, fp
 80098c2:	f000 fdbd 	bl	800a440 <__multiply>
 80098c6:	4649      	mov	r1, r9
 80098c8:	9004      	str	r0, [sp, #16]
 80098ca:	4658      	mov	r0, fp
 80098cc:	f000 fcec 	bl	800a2a8 <_Bfree>
 80098d0:	9b04      	ldr	r3, [sp, #16]
 80098d2:	4699      	mov	r9, r3
 80098d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098d6:	1b1a      	subs	r2, r3, r4
 80098d8:	d004      	beq.n	80098e4 <_dtoa_r+0x78c>
 80098da:	4649      	mov	r1, r9
 80098dc:	4658      	mov	r0, fp
 80098de:	f000 fe59 	bl	800a594 <__pow5mult>
 80098e2:	4681      	mov	r9, r0
 80098e4:	2101      	movs	r1, #1
 80098e6:	4658      	mov	r0, fp
 80098e8:	f000 fd94 	bl	800a414 <__i2b>
 80098ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ee:	4604      	mov	r4, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 81cf 	beq.w	8009c94 <_dtoa_r+0xb3c>
 80098f6:	461a      	mov	r2, r3
 80098f8:	4601      	mov	r1, r0
 80098fa:	4658      	mov	r0, fp
 80098fc:	f000 fe4a 	bl	800a594 <__pow5mult>
 8009900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009902:	4604      	mov	r4, r0
 8009904:	2b01      	cmp	r3, #1
 8009906:	f300 8095 	bgt.w	8009a34 <_dtoa_r+0x8dc>
 800990a:	9b02      	ldr	r3, [sp, #8]
 800990c:	2b00      	cmp	r3, #0
 800990e:	f040 8087 	bne.w	8009a20 <_dtoa_r+0x8c8>
 8009912:	9b03      	ldr	r3, [sp, #12]
 8009914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009918:	2b00      	cmp	r3, #0
 800991a:	f040 8089 	bne.w	8009a30 <_dtoa_r+0x8d8>
 800991e:	9b03      	ldr	r3, [sp, #12]
 8009920:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009924:	0d1b      	lsrs	r3, r3, #20
 8009926:	051b      	lsls	r3, r3, #20
 8009928:	b12b      	cbz	r3, 8009936 <_dtoa_r+0x7de>
 800992a:	9b08      	ldr	r3, [sp, #32]
 800992c:	f108 0801 	add.w	r8, r8, #1
 8009930:	3301      	adds	r3, #1
 8009932:	9308      	str	r3, [sp, #32]
 8009934:	2301      	movs	r3, #1
 8009936:	930a      	str	r3, [sp, #40]	@ 0x28
 8009938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 81b0 	beq.w	8009ca0 <_dtoa_r+0xb48>
 8009940:	6923      	ldr	r3, [r4, #16]
 8009942:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009946:	6918      	ldr	r0, [r3, #16]
 8009948:	f000 fd18 	bl	800a37c <__hi0bits>
 800994c:	f1c0 0020 	rsb	r0, r0, #32
 8009950:	9b08      	ldr	r3, [sp, #32]
 8009952:	4418      	add	r0, r3
 8009954:	f010 001f 	ands.w	r0, r0, #31
 8009958:	d077      	beq.n	8009a4a <_dtoa_r+0x8f2>
 800995a:	f1c0 0320 	rsb	r3, r0, #32
 800995e:	2b04      	cmp	r3, #4
 8009960:	dd6b      	ble.n	8009a3a <_dtoa_r+0x8e2>
 8009962:	f1c0 001c 	rsb	r0, r0, #28
 8009966:	9b08      	ldr	r3, [sp, #32]
 8009968:	4480      	add	r8, r0
 800996a:	4403      	add	r3, r0
 800996c:	4406      	add	r6, r0
 800996e:	9308      	str	r3, [sp, #32]
 8009970:	f1b8 0f00 	cmp.w	r8, #0
 8009974:	dd05      	ble.n	8009982 <_dtoa_r+0x82a>
 8009976:	4649      	mov	r1, r9
 8009978:	4642      	mov	r2, r8
 800997a:	4658      	mov	r0, fp
 800997c:	f000 fe64 	bl	800a648 <__lshift>
 8009980:	4681      	mov	r9, r0
 8009982:	9b08      	ldr	r3, [sp, #32]
 8009984:	2b00      	cmp	r3, #0
 8009986:	dd05      	ble.n	8009994 <_dtoa_r+0x83c>
 8009988:	4621      	mov	r1, r4
 800998a:	461a      	mov	r2, r3
 800998c:	4658      	mov	r0, fp
 800998e:	f000 fe5b 	bl	800a648 <__lshift>
 8009992:	4604      	mov	r4, r0
 8009994:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009996:	2b00      	cmp	r3, #0
 8009998:	d059      	beq.n	8009a4e <_dtoa_r+0x8f6>
 800999a:	4621      	mov	r1, r4
 800999c:	4648      	mov	r0, r9
 800999e:	f000 febf 	bl	800a720 <__mcmp>
 80099a2:	2800      	cmp	r0, #0
 80099a4:	da53      	bge.n	8009a4e <_dtoa_r+0x8f6>
 80099a6:	1e7b      	subs	r3, r7, #1
 80099a8:	4649      	mov	r1, r9
 80099aa:	220a      	movs	r2, #10
 80099ac:	4658      	mov	r0, fp
 80099ae:	9304      	str	r3, [sp, #16]
 80099b0:	2300      	movs	r3, #0
 80099b2:	f000 fc9b 	bl	800a2ec <__multadd>
 80099b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099b8:	4681      	mov	r9, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f000 8172 	beq.w	8009ca4 <_dtoa_r+0xb4c>
 80099c0:	2300      	movs	r3, #0
 80099c2:	4629      	mov	r1, r5
 80099c4:	220a      	movs	r2, #10
 80099c6:	4658      	mov	r0, fp
 80099c8:	f000 fc90 	bl	800a2ec <__multadd>
 80099cc:	9b00      	ldr	r3, [sp, #0]
 80099ce:	4605      	mov	r5, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	dc67      	bgt.n	8009aa4 <_dtoa_r+0x94c>
 80099d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	dc41      	bgt.n	8009a5e <_dtoa_r+0x906>
 80099da:	e063      	b.n	8009aa4 <_dtoa_r+0x94c>
 80099dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80099de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80099e2:	e746      	b.n	8009872 <_dtoa_r+0x71a>
 80099e4:	9b07      	ldr	r3, [sp, #28]
 80099e6:	1e5c      	subs	r4, r3, #1
 80099e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ea:	42a3      	cmp	r3, r4
 80099ec:	bfb7      	itett	lt
 80099ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80099f0:	1b1c      	subge	r4, r3, r4
 80099f2:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80099f4:	1ae3      	sublt	r3, r4, r3
 80099f6:	bfbe      	ittt	lt
 80099f8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80099fa:	2400      	movlt	r4, #0
 80099fc:	18d2      	addlt	r2, r2, r3
 80099fe:	9b07      	ldr	r3, [sp, #28]
 8009a00:	bfb8      	it	lt
 8009a02:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	bfb5      	itete	lt
 8009a08:	eba8 0603 	sublt.w	r6, r8, r3
 8009a0c:	4646      	movge	r6, r8
 8009a0e:	2300      	movlt	r3, #0
 8009a10:	9b07      	ldrge	r3, [sp, #28]
 8009a12:	e730      	b.n	8009876 <_dtoa_r+0x71e>
 8009a14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a16:	4646      	mov	r6, r8
 8009a18:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009a1a:	e735      	b.n	8009888 <_dtoa_r+0x730>
 8009a1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a1e:	e75c      	b.n	80098da <_dtoa_r+0x782>
 8009a20:	2300      	movs	r3, #0
 8009a22:	e788      	b.n	8009936 <_dtoa_r+0x7de>
 8009a24:	3fe00000 	.word	0x3fe00000
 8009a28:	40240000 	.word	0x40240000
 8009a2c:	40140000 	.word	0x40140000
 8009a30:	9b02      	ldr	r3, [sp, #8]
 8009a32:	e780      	b.n	8009936 <_dtoa_r+0x7de>
 8009a34:	2300      	movs	r3, #0
 8009a36:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a38:	e782      	b.n	8009940 <_dtoa_r+0x7e8>
 8009a3a:	d099      	beq.n	8009970 <_dtoa_r+0x818>
 8009a3c:	331c      	adds	r3, #28
 8009a3e:	9a08      	ldr	r2, [sp, #32]
 8009a40:	441a      	add	r2, r3
 8009a42:	4498      	add	r8, r3
 8009a44:	441e      	add	r6, r3
 8009a46:	9208      	str	r2, [sp, #32]
 8009a48:	e792      	b.n	8009970 <_dtoa_r+0x818>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	e7f6      	b.n	8009a3c <_dtoa_r+0x8e4>
 8009a4e:	9b07      	ldr	r3, [sp, #28]
 8009a50:	9704      	str	r7, [sp, #16]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	dc20      	bgt.n	8009a98 <_dtoa_r+0x940>
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	dd1e      	ble.n	8009a9c <_dtoa_r+0x944>
 8009a5e:	9b00      	ldr	r3, [sp, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f47f aec0 	bne.w	80097e6 <_dtoa_r+0x68e>
 8009a66:	4621      	mov	r1, r4
 8009a68:	2205      	movs	r2, #5
 8009a6a:	4658      	mov	r0, fp
 8009a6c:	f000 fc3e 	bl	800a2ec <__multadd>
 8009a70:	4601      	mov	r1, r0
 8009a72:	4604      	mov	r4, r0
 8009a74:	4648      	mov	r0, r9
 8009a76:	f000 fe53 	bl	800a720 <__mcmp>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	f77f aeb3 	ble.w	80097e6 <_dtoa_r+0x68e>
 8009a80:	2331      	movs	r3, #49	@ 0x31
 8009a82:	4656      	mov	r6, sl
 8009a84:	f806 3b01 	strb.w	r3, [r6], #1
 8009a88:	9b04      	ldr	r3, [sp, #16]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	9304      	str	r3, [sp, #16]
 8009a8e:	e6ae      	b.n	80097ee <_dtoa_r+0x696>
 8009a90:	9c07      	ldr	r4, [sp, #28]
 8009a92:	9704      	str	r7, [sp, #16]
 8009a94:	4625      	mov	r5, r4
 8009a96:	e7f3      	b.n	8009a80 <_dtoa_r+0x928>
 8009a98:	9b07      	ldr	r3, [sp, #28]
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f000 8104 	beq.w	8009cac <_dtoa_r+0xb54>
 8009aa4:	2e00      	cmp	r6, #0
 8009aa6:	dd05      	ble.n	8009ab4 <_dtoa_r+0x95c>
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	4632      	mov	r2, r6
 8009aac:	4658      	mov	r0, fp
 8009aae:	f000 fdcb 	bl	800a648 <__lshift>
 8009ab2:	4605      	mov	r5, r0
 8009ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d05a      	beq.n	8009b70 <_dtoa_r+0xa18>
 8009aba:	6869      	ldr	r1, [r5, #4]
 8009abc:	4658      	mov	r0, fp
 8009abe:	f000 fbb3 	bl	800a228 <_Balloc>
 8009ac2:	4606      	mov	r6, r0
 8009ac4:	b928      	cbnz	r0, 8009ad2 <_dtoa_r+0x97a>
 8009ac6:	4b84      	ldr	r3, [pc, #528]	@ (8009cd8 <_dtoa_r+0xb80>)
 8009ac8:	4602      	mov	r2, r0
 8009aca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ace:	f7ff bb5a 	b.w	8009186 <_dtoa_r+0x2e>
 8009ad2:	692a      	ldr	r2, [r5, #16]
 8009ad4:	f105 010c 	add.w	r1, r5, #12
 8009ad8:	300c      	adds	r0, #12
 8009ada:	3202      	adds	r2, #2
 8009adc:	0092      	lsls	r2, r2, #2
 8009ade:	f7ff fa82 	bl	8008fe6 <memcpy>
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	4631      	mov	r1, r6
 8009ae6:	4658      	mov	r0, fp
 8009ae8:	f000 fdae 	bl	800a648 <__lshift>
 8009aec:	f10a 0301 	add.w	r3, sl, #1
 8009af0:	462f      	mov	r7, r5
 8009af2:	4605      	mov	r5, r0
 8009af4:	9307      	str	r3, [sp, #28]
 8009af6:	9b00      	ldr	r3, [sp, #0]
 8009af8:	4453      	add	r3, sl
 8009afa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009afc:	9b02      	ldr	r3, [sp, #8]
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b04:	9b07      	ldr	r3, [sp, #28]
 8009b06:	4621      	mov	r1, r4
 8009b08:	4648      	mov	r0, r9
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	f7ff fa95 	bl	800903c <quorem>
 8009b12:	4639      	mov	r1, r7
 8009b14:	9002      	str	r0, [sp, #8]
 8009b16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009b1a:	4648      	mov	r0, r9
 8009b1c:	f000 fe00 	bl	800a720 <__mcmp>
 8009b20:	462a      	mov	r2, r5
 8009b22:	9008      	str	r0, [sp, #32]
 8009b24:	4621      	mov	r1, r4
 8009b26:	4658      	mov	r0, fp
 8009b28:	f000 fe16 	bl	800a758 <__mdiff>
 8009b2c:	68c2      	ldr	r2, [r0, #12]
 8009b2e:	4606      	mov	r6, r0
 8009b30:	bb02      	cbnz	r2, 8009b74 <_dtoa_r+0xa1c>
 8009b32:	4601      	mov	r1, r0
 8009b34:	4648      	mov	r0, r9
 8009b36:	f000 fdf3 	bl	800a720 <__mcmp>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	4631      	mov	r1, r6
 8009b3e:	4658      	mov	r0, fp
 8009b40:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b42:	f000 fbb1 	bl	800a2a8 <_Bfree>
 8009b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b4a:	9e07      	ldr	r6, [sp, #28]
 8009b4c:	ea43 0102 	orr.w	r1, r3, r2
 8009b50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b52:	4319      	orrs	r1, r3
 8009b54:	d110      	bne.n	8009b78 <_dtoa_r+0xa20>
 8009b56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b5a:	d029      	beq.n	8009bb0 <_dtoa_r+0xa58>
 8009b5c:	9b08      	ldr	r3, [sp, #32]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	dd02      	ble.n	8009b68 <_dtoa_r+0xa10>
 8009b62:	9b02      	ldr	r3, [sp, #8]
 8009b64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009b68:	9b00      	ldr	r3, [sp, #0]
 8009b6a:	f883 8000 	strb.w	r8, [r3]
 8009b6e:	e63f      	b.n	80097f0 <_dtoa_r+0x698>
 8009b70:	4628      	mov	r0, r5
 8009b72:	e7bb      	b.n	8009aec <_dtoa_r+0x994>
 8009b74:	2201      	movs	r2, #1
 8009b76:	e7e1      	b.n	8009b3c <_dtoa_r+0x9e4>
 8009b78:	9b08      	ldr	r3, [sp, #32]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	db04      	blt.n	8009b88 <_dtoa_r+0xa30>
 8009b7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b80:	430b      	orrs	r3, r1
 8009b82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b84:	430b      	orrs	r3, r1
 8009b86:	d120      	bne.n	8009bca <_dtoa_r+0xa72>
 8009b88:	2a00      	cmp	r2, #0
 8009b8a:	dded      	ble.n	8009b68 <_dtoa_r+0xa10>
 8009b8c:	4649      	mov	r1, r9
 8009b8e:	2201      	movs	r2, #1
 8009b90:	4658      	mov	r0, fp
 8009b92:	f000 fd59 	bl	800a648 <__lshift>
 8009b96:	4621      	mov	r1, r4
 8009b98:	4681      	mov	r9, r0
 8009b9a:	f000 fdc1 	bl	800a720 <__mcmp>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	dc03      	bgt.n	8009baa <_dtoa_r+0xa52>
 8009ba2:	d1e1      	bne.n	8009b68 <_dtoa_r+0xa10>
 8009ba4:	f018 0f01 	tst.w	r8, #1
 8009ba8:	d0de      	beq.n	8009b68 <_dtoa_r+0xa10>
 8009baa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009bae:	d1d8      	bne.n	8009b62 <_dtoa_r+0xa0a>
 8009bb0:	2339      	movs	r3, #57	@ 0x39
 8009bb2:	9a00      	ldr	r2, [sp, #0]
 8009bb4:	7013      	strb	r3, [r2, #0]
 8009bb6:	4633      	mov	r3, r6
 8009bb8:	461e      	mov	r6, r3
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009bc0:	2a39      	cmp	r2, #57	@ 0x39
 8009bc2:	d052      	beq.n	8009c6a <_dtoa_r+0xb12>
 8009bc4:	3201      	adds	r2, #1
 8009bc6:	701a      	strb	r2, [r3, #0]
 8009bc8:	e612      	b.n	80097f0 <_dtoa_r+0x698>
 8009bca:	2a00      	cmp	r2, #0
 8009bcc:	dd07      	ble.n	8009bde <_dtoa_r+0xa86>
 8009bce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009bd2:	d0ed      	beq.n	8009bb0 <_dtoa_r+0xa58>
 8009bd4:	f108 0301 	add.w	r3, r8, #1
 8009bd8:	9a00      	ldr	r2, [sp, #0]
 8009bda:	7013      	strb	r3, [r2, #0]
 8009bdc:	e608      	b.n	80097f0 <_dtoa_r+0x698>
 8009bde:	9b07      	ldr	r3, [sp, #28]
 8009be0:	9a07      	ldr	r2, [sp, #28]
 8009be2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009be6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d028      	beq.n	8009c3e <_dtoa_r+0xae6>
 8009bec:	4649      	mov	r1, r9
 8009bee:	2300      	movs	r3, #0
 8009bf0:	220a      	movs	r2, #10
 8009bf2:	4658      	mov	r0, fp
 8009bf4:	f000 fb7a 	bl	800a2ec <__multadd>
 8009bf8:	42af      	cmp	r7, r5
 8009bfa:	4681      	mov	r9, r0
 8009bfc:	f04f 0300 	mov.w	r3, #0
 8009c00:	f04f 020a 	mov.w	r2, #10
 8009c04:	4639      	mov	r1, r7
 8009c06:	4658      	mov	r0, fp
 8009c08:	d107      	bne.n	8009c1a <_dtoa_r+0xac2>
 8009c0a:	f000 fb6f 	bl	800a2ec <__multadd>
 8009c0e:	4607      	mov	r7, r0
 8009c10:	4605      	mov	r5, r0
 8009c12:	9b07      	ldr	r3, [sp, #28]
 8009c14:	3301      	adds	r3, #1
 8009c16:	9307      	str	r3, [sp, #28]
 8009c18:	e774      	b.n	8009b04 <_dtoa_r+0x9ac>
 8009c1a:	f000 fb67 	bl	800a2ec <__multadd>
 8009c1e:	4629      	mov	r1, r5
 8009c20:	4607      	mov	r7, r0
 8009c22:	2300      	movs	r3, #0
 8009c24:	220a      	movs	r2, #10
 8009c26:	4658      	mov	r0, fp
 8009c28:	f000 fb60 	bl	800a2ec <__multadd>
 8009c2c:	4605      	mov	r5, r0
 8009c2e:	e7f0      	b.n	8009c12 <_dtoa_r+0xaba>
 8009c30:	9b00      	ldr	r3, [sp, #0]
 8009c32:	2700      	movs	r7, #0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	bfcc      	ite	gt
 8009c38:	461e      	movgt	r6, r3
 8009c3a:	2601      	movle	r6, #1
 8009c3c:	4456      	add	r6, sl
 8009c3e:	4649      	mov	r1, r9
 8009c40:	2201      	movs	r2, #1
 8009c42:	4658      	mov	r0, fp
 8009c44:	f000 fd00 	bl	800a648 <__lshift>
 8009c48:	4621      	mov	r1, r4
 8009c4a:	4681      	mov	r9, r0
 8009c4c:	f000 fd68 	bl	800a720 <__mcmp>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	dcb0      	bgt.n	8009bb6 <_dtoa_r+0xa5e>
 8009c54:	d102      	bne.n	8009c5c <_dtoa_r+0xb04>
 8009c56:	f018 0f01 	tst.w	r8, #1
 8009c5a:	d1ac      	bne.n	8009bb6 <_dtoa_r+0xa5e>
 8009c5c:	4633      	mov	r3, r6
 8009c5e:	461e      	mov	r6, r3
 8009c60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c64:	2a30      	cmp	r2, #48	@ 0x30
 8009c66:	d0fa      	beq.n	8009c5e <_dtoa_r+0xb06>
 8009c68:	e5c2      	b.n	80097f0 <_dtoa_r+0x698>
 8009c6a:	459a      	cmp	sl, r3
 8009c6c:	d1a4      	bne.n	8009bb8 <_dtoa_r+0xa60>
 8009c6e:	9b04      	ldr	r3, [sp, #16]
 8009c70:	3301      	adds	r3, #1
 8009c72:	9304      	str	r3, [sp, #16]
 8009c74:	2331      	movs	r3, #49	@ 0x31
 8009c76:	f88a 3000 	strb.w	r3, [sl]
 8009c7a:	e5b9      	b.n	80097f0 <_dtoa_r+0x698>
 8009c7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009cdc <_dtoa_r+0xb84>
 8009c82:	b11b      	cbz	r3, 8009c8c <_dtoa_r+0xb34>
 8009c84:	f10a 0308 	add.w	r3, sl, #8
 8009c88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009c8a:	6013      	str	r3, [r2, #0]
 8009c8c:	4650      	mov	r0, sl
 8009c8e:	b019      	add	sp, #100	@ 0x64
 8009c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	f77f ae37 	ble.w	800990a <_dtoa_r+0x7b2>
 8009c9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ca0:	2001      	movs	r0, #1
 8009ca2:	e655      	b.n	8009950 <_dtoa_r+0x7f8>
 8009ca4:	9b00      	ldr	r3, [sp, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f77f aed6 	ble.w	8009a58 <_dtoa_r+0x900>
 8009cac:	4656      	mov	r6, sl
 8009cae:	4621      	mov	r1, r4
 8009cb0:	4648      	mov	r0, r9
 8009cb2:	f7ff f9c3 	bl	800903c <quorem>
 8009cb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009cba:	9b00      	ldr	r3, [sp, #0]
 8009cbc:	f806 8b01 	strb.w	r8, [r6], #1
 8009cc0:	eba6 020a 	sub.w	r2, r6, sl
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	ddb3      	ble.n	8009c30 <_dtoa_r+0xad8>
 8009cc8:	4649      	mov	r1, r9
 8009cca:	2300      	movs	r3, #0
 8009ccc:	220a      	movs	r2, #10
 8009cce:	4658      	mov	r0, fp
 8009cd0:	f000 fb0c 	bl	800a2ec <__multadd>
 8009cd4:	4681      	mov	r9, r0
 8009cd6:	e7ea      	b.n	8009cae <_dtoa_r+0xb56>
 8009cd8:	0800bd64 	.word	0x0800bd64
 8009cdc:	0800bce8 	.word	0x0800bce8

08009ce0 <__sfputc_r>:
 8009ce0:	6893      	ldr	r3, [r2, #8]
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	6093      	str	r3, [r2, #8]
 8009ce8:	b410      	push	{r4}
 8009cea:	da08      	bge.n	8009cfe <__sfputc_r+0x1e>
 8009cec:	6994      	ldr	r4, [r2, #24]
 8009cee:	42a3      	cmp	r3, r4
 8009cf0:	db01      	blt.n	8009cf6 <__sfputc_r+0x16>
 8009cf2:	290a      	cmp	r1, #10
 8009cf4:	d103      	bne.n	8009cfe <__sfputc_r+0x1e>
 8009cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cfa:	f000 be73 	b.w	800a9e4 <__swbuf_r>
 8009cfe:	6813      	ldr	r3, [r2, #0]
 8009d00:	1c58      	adds	r0, r3, #1
 8009d02:	6010      	str	r0, [r2, #0]
 8009d04:	4608      	mov	r0, r1
 8009d06:	7019      	strb	r1, [r3, #0]
 8009d08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <__sfputs_r>:
 8009d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d10:	4606      	mov	r6, r0
 8009d12:	460f      	mov	r7, r1
 8009d14:	4614      	mov	r4, r2
 8009d16:	18d5      	adds	r5, r2, r3
 8009d18:	42ac      	cmp	r4, r5
 8009d1a:	d101      	bne.n	8009d20 <__sfputs_r+0x12>
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	e007      	b.n	8009d30 <__sfputs_r+0x22>
 8009d20:	463a      	mov	r2, r7
 8009d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d26:	4630      	mov	r0, r6
 8009d28:	f7ff ffda 	bl	8009ce0 <__sfputc_r>
 8009d2c:	1c43      	adds	r3, r0, #1
 8009d2e:	d1f3      	bne.n	8009d18 <__sfputs_r+0xa>
 8009d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d34 <_vfiprintf_r>:
 8009d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	460d      	mov	r5, r1
 8009d3a:	b09d      	sub	sp, #116	@ 0x74
 8009d3c:	4614      	mov	r4, r2
 8009d3e:	4698      	mov	r8, r3
 8009d40:	4606      	mov	r6, r0
 8009d42:	b118      	cbz	r0, 8009d4c <_vfiprintf_r+0x18>
 8009d44:	6a03      	ldr	r3, [r0, #32]
 8009d46:	b90b      	cbnz	r3, 8009d4c <_vfiprintf_r+0x18>
 8009d48:	f7ff f858 	bl	8008dfc <__sinit>
 8009d4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d4e:	07d9      	lsls	r1, r3, #31
 8009d50:	d405      	bmi.n	8009d5e <_vfiprintf_r+0x2a>
 8009d52:	89ab      	ldrh	r3, [r5, #12]
 8009d54:	059a      	lsls	r2, r3, #22
 8009d56:	d402      	bmi.n	8009d5e <_vfiprintf_r+0x2a>
 8009d58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d5a:	f7ff f934 	bl	8008fc6 <__retarget_lock_acquire_recursive>
 8009d5e:	89ab      	ldrh	r3, [r5, #12]
 8009d60:	071b      	lsls	r3, r3, #28
 8009d62:	d501      	bpl.n	8009d68 <_vfiprintf_r+0x34>
 8009d64:	692b      	ldr	r3, [r5, #16]
 8009d66:	b99b      	cbnz	r3, 8009d90 <_vfiprintf_r+0x5c>
 8009d68:	4629      	mov	r1, r5
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	f000 fe78 	bl	800aa60 <__swsetup_r>
 8009d70:	b170      	cbz	r0, 8009d90 <_vfiprintf_r+0x5c>
 8009d72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d74:	07dc      	lsls	r4, r3, #31
 8009d76:	d504      	bpl.n	8009d82 <_vfiprintf_r+0x4e>
 8009d78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d7c:	b01d      	add	sp, #116	@ 0x74
 8009d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d82:	89ab      	ldrh	r3, [r5, #12]
 8009d84:	0598      	lsls	r0, r3, #22
 8009d86:	d4f7      	bmi.n	8009d78 <_vfiprintf_r+0x44>
 8009d88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d8a:	f7ff f91d 	bl	8008fc8 <__retarget_lock_release_recursive>
 8009d8e:	e7f3      	b.n	8009d78 <_vfiprintf_r+0x44>
 8009d90:	2300      	movs	r3, #0
 8009d92:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d96:	f04f 0901 	mov.w	r9, #1
 8009d9a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8009f50 <_vfiprintf_r+0x21c>
 8009d9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009da0:	2320      	movs	r3, #32
 8009da2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009da6:	2330      	movs	r3, #48	@ 0x30
 8009da8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009dac:	4623      	mov	r3, r4
 8009dae:	469a      	mov	sl, r3
 8009db0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009db4:	b10a      	cbz	r2, 8009dba <_vfiprintf_r+0x86>
 8009db6:	2a25      	cmp	r2, #37	@ 0x25
 8009db8:	d1f9      	bne.n	8009dae <_vfiprintf_r+0x7a>
 8009dba:	ebba 0b04 	subs.w	fp, sl, r4
 8009dbe:	d00b      	beq.n	8009dd8 <_vfiprintf_r+0xa4>
 8009dc0:	465b      	mov	r3, fp
 8009dc2:	4622      	mov	r2, r4
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	f7ff ffa1 	bl	8009d0e <__sfputs_r>
 8009dcc:	3001      	adds	r0, #1
 8009dce:	f000 80a7 	beq.w	8009f20 <_vfiprintf_r+0x1ec>
 8009dd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dd4:	445a      	add	r2, fp
 8009dd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f000 809f 	beq.w	8009f20 <_vfiprintf_r+0x1ec>
 8009de2:	2300      	movs	r3, #0
 8009de4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009de8:	f10a 0a01 	add.w	sl, sl, #1
 8009dec:	9304      	str	r3, [sp, #16]
 8009dee:	9307      	str	r3, [sp, #28]
 8009df0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009df4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009df6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dfa:	4654      	mov	r4, sl
 8009dfc:	2205      	movs	r2, #5
 8009dfe:	4854      	ldr	r0, [pc, #336]	@ (8009f50 <_vfiprintf_r+0x21c>)
 8009e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e04:	f7ff f8e1 	bl	8008fca <memchr>
 8009e08:	9a04      	ldr	r2, [sp, #16]
 8009e0a:	b9d8      	cbnz	r0, 8009e44 <_vfiprintf_r+0x110>
 8009e0c:	06d1      	lsls	r1, r2, #27
 8009e0e:	bf44      	itt	mi
 8009e10:	2320      	movmi	r3, #32
 8009e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e16:	0713      	lsls	r3, r2, #28
 8009e18:	bf44      	itt	mi
 8009e1a:	232b      	movmi	r3, #43	@ 0x2b
 8009e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e20:	f89a 3000 	ldrb.w	r3, [sl]
 8009e24:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e26:	d015      	beq.n	8009e54 <_vfiprintf_r+0x120>
 8009e28:	9a07      	ldr	r2, [sp, #28]
 8009e2a:	4654      	mov	r4, sl
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	f04f 0c0a 	mov.w	ip, #10
 8009e32:	4621      	mov	r1, r4
 8009e34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e38:	3b30      	subs	r3, #48	@ 0x30
 8009e3a:	2b09      	cmp	r3, #9
 8009e3c:	d94b      	bls.n	8009ed6 <_vfiprintf_r+0x1a2>
 8009e3e:	b1b0      	cbz	r0, 8009e6e <_vfiprintf_r+0x13a>
 8009e40:	9207      	str	r2, [sp, #28]
 8009e42:	e014      	b.n	8009e6e <_vfiprintf_r+0x13a>
 8009e44:	eba0 0308 	sub.w	r3, r0, r8
 8009e48:	46a2      	mov	sl, r4
 8009e4a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	9304      	str	r3, [sp, #16]
 8009e52:	e7d2      	b.n	8009dfa <_vfiprintf_r+0xc6>
 8009e54:	9b03      	ldr	r3, [sp, #12]
 8009e56:	1d19      	adds	r1, r3, #4
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	9103      	str	r1, [sp, #12]
 8009e5e:	bfbb      	ittet	lt
 8009e60:	425b      	neglt	r3, r3
 8009e62:	f042 0202 	orrlt.w	r2, r2, #2
 8009e66:	9307      	strge	r3, [sp, #28]
 8009e68:	9307      	strlt	r3, [sp, #28]
 8009e6a:	bfb8      	it	lt
 8009e6c:	9204      	strlt	r2, [sp, #16]
 8009e6e:	7823      	ldrb	r3, [r4, #0]
 8009e70:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e72:	d10a      	bne.n	8009e8a <_vfiprintf_r+0x156>
 8009e74:	7863      	ldrb	r3, [r4, #1]
 8009e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e78:	d132      	bne.n	8009ee0 <_vfiprintf_r+0x1ac>
 8009e7a:	9b03      	ldr	r3, [sp, #12]
 8009e7c:	3402      	adds	r4, #2
 8009e7e:	1d1a      	adds	r2, r3, #4
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e86:	9203      	str	r2, [sp, #12]
 8009e88:	9305      	str	r3, [sp, #20]
 8009e8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009f60 <_vfiprintf_r+0x22c>
 8009e8e:	2203      	movs	r2, #3
 8009e90:	7821      	ldrb	r1, [r4, #0]
 8009e92:	4650      	mov	r0, sl
 8009e94:	f7ff f899 	bl	8008fca <memchr>
 8009e98:	b138      	cbz	r0, 8009eaa <_vfiprintf_r+0x176>
 8009e9a:	eba0 000a 	sub.w	r0, r0, sl
 8009e9e:	2240      	movs	r2, #64	@ 0x40
 8009ea0:	9b04      	ldr	r3, [sp, #16]
 8009ea2:	3401      	adds	r4, #1
 8009ea4:	4082      	lsls	r2, r0
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	9304      	str	r3, [sp, #16]
 8009eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eae:	2206      	movs	r2, #6
 8009eb0:	4828      	ldr	r0, [pc, #160]	@ (8009f54 <_vfiprintf_r+0x220>)
 8009eb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009eb6:	f7ff f888 	bl	8008fca <memchr>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	d03f      	beq.n	8009f3e <_vfiprintf_r+0x20a>
 8009ebe:	4b26      	ldr	r3, [pc, #152]	@ (8009f58 <_vfiprintf_r+0x224>)
 8009ec0:	bb1b      	cbnz	r3, 8009f0a <_vfiprintf_r+0x1d6>
 8009ec2:	9b03      	ldr	r3, [sp, #12]
 8009ec4:	3307      	adds	r3, #7
 8009ec6:	f023 0307 	bic.w	r3, r3, #7
 8009eca:	3308      	adds	r3, #8
 8009ecc:	9303      	str	r3, [sp, #12]
 8009ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ed0:	443b      	add	r3, r7
 8009ed2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ed4:	e76a      	b.n	8009dac <_vfiprintf_r+0x78>
 8009ed6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eda:	460c      	mov	r4, r1
 8009edc:	2001      	movs	r0, #1
 8009ede:	e7a8      	b.n	8009e32 <_vfiprintf_r+0xfe>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	3401      	adds	r4, #1
 8009ee4:	f04f 0c0a 	mov.w	ip, #10
 8009ee8:	4619      	mov	r1, r3
 8009eea:	9305      	str	r3, [sp, #20]
 8009eec:	4620      	mov	r0, r4
 8009eee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ef2:	3a30      	subs	r2, #48	@ 0x30
 8009ef4:	2a09      	cmp	r2, #9
 8009ef6:	d903      	bls.n	8009f00 <_vfiprintf_r+0x1cc>
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d0c6      	beq.n	8009e8a <_vfiprintf_r+0x156>
 8009efc:	9105      	str	r1, [sp, #20]
 8009efe:	e7c4      	b.n	8009e8a <_vfiprintf_r+0x156>
 8009f00:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f04:	4604      	mov	r4, r0
 8009f06:	2301      	movs	r3, #1
 8009f08:	e7f0      	b.n	8009eec <_vfiprintf_r+0x1b8>
 8009f0a:	ab03      	add	r3, sp, #12
 8009f0c:	462a      	mov	r2, r5
 8009f0e:	a904      	add	r1, sp, #16
 8009f10:	4630      	mov	r0, r6
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	4b11      	ldr	r3, [pc, #68]	@ (8009f5c <_vfiprintf_r+0x228>)
 8009f16:	f7fe fb29 	bl	800856c <_printf_float>
 8009f1a:	4607      	mov	r7, r0
 8009f1c:	1c78      	adds	r0, r7, #1
 8009f1e:	d1d6      	bne.n	8009ece <_vfiprintf_r+0x19a>
 8009f20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f22:	07d9      	lsls	r1, r3, #31
 8009f24:	d405      	bmi.n	8009f32 <_vfiprintf_r+0x1fe>
 8009f26:	89ab      	ldrh	r3, [r5, #12]
 8009f28:	059a      	lsls	r2, r3, #22
 8009f2a:	d402      	bmi.n	8009f32 <_vfiprintf_r+0x1fe>
 8009f2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f2e:	f7ff f84b 	bl	8008fc8 <__retarget_lock_release_recursive>
 8009f32:	89ab      	ldrh	r3, [r5, #12]
 8009f34:	065b      	lsls	r3, r3, #25
 8009f36:	f53f af1f 	bmi.w	8009d78 <_vfiprintf_r+0x44>
 8009f3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f3c:	e71e      	b.n	8009d7c <_vfiprintf_r+0x48>
 8009f3e:	ab03      	add	r3, sp, #12
 8009f40:	462a      	mov	r2, r5
 8009f42:	a904      	add	r1, sp, #16
 8009f44:	4630      	mov	r0, r6
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	4b04      	ldr	r3, [pc, #16]	@ (8009f5c <_vfiprintf_r+0x228>)
 8009f4a:	f7fe fdab 	bl	8008aa4 <_printf_i>
 8009f4e:	e7e4      	b.n	8009f1a <_vfiprintf_r+0x1e6>
 8009f50:	0800bd75 	.word	0x0800bd75
 8009f54:	0800bd7f 	.word	0x0800bd7f
 8009f58:	0800856d 	.word	0x0800856d
 8009f5c:	08009d0f 	.word	0x08009d0f
 8009f60:	0800bd7b 	.word	0x0800bd7b

08009f64 <malloc>:
 8009f64:	4b02      	ldr	r3, [pc, #8]	@ (8009f70 <malloc+0xc>)
 8009f66:	4601      	mov	r1, r0
 8009f68:	6818      	ldr	r0, [r3, #0]
 8009f6a:	f000 b825 	b.w	8009fb8 <_malloc_r>
 8009f6e:	bf00      	nop
 8009f70:	200000b0 	.word	0x200000b0

08009f74 <sbrk_aligned>:
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	4e0f      	ldr	r6, [pc, #60]	@ (8009fb4 <sbrk_aligned+0x40>)
 8009f78:	460c      	mov	r4, r1
 8009f7a:	4605      	mov	r5, r0
 8009f7c:	6831      	ldr	r1, [r6, #0]
 8009f7e:	b911      	cbnz	r1, 8009f86 <sbrk_aligned+0x12>
 8009f80:	f000 feb0 	bl	800ace4 <_sbrk_r>
 8009f84:	6030      	str	r0, [r6, #0]
 8009f86:	4621      	mov	r1, r4
 8009f88:	4628      	mov	r0, r5
 8009f8a:	f000 feab 	bl	800ace4 <_sbrk_r>
 8009f8e:	1c43      	adds	r3, r0, #1
 8009f90:	d103      	bne.n	8009f9a <sbrk_aligned+0x26>
 8009f92:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009f96:	4620      	mov	r0, r4
 8009f98:	bd70      	pop	{r4, r5, r6, pc}
 8009f9a:	1cc4      	adds	r4, r0, #3
 8009f9c:	f024 0403 	bic.w	r4, r4, #3
 8009fa0:	42a0      	cmp	r0, r4
 8009fa2:	d0f8      	beq.n	8009f96 <sbrk_aligned+0x22>
 8009fa4:	1a21      	subs	r1, r4, r0
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	f000 fe9c 	bl	800ace4 <_sbrk_r>
 8009fac:	3001      	adds	r0, #1
 8009fae:	d1f2      	bne.n	8009f96 <sbrk_aligned+0x22>
 8009fb0:	e7ef      	b.n	8009f92 <sbrk_aligned+0x1e>
 8009fb2:	bf00      	nop
 8009fb4:	2000101c 	.word	0x2000101c

08009fb8 <_malloc_r>:
 8009fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fbc:	1ccd      	adds	r5, r1, #3
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	f025 0503 	bic.w	r5, r5, #3
 8009fc4:	3508      	adds	r5, #8
 8009fc6:	2d0c      	cmp	r5, #12
 8009fc8:	bf38      	it	cc
 8009fca:	250c      	movcc	r5, #12
 8009fcc:	2d00      	cmp	r5, #0
 8009fce:	db01      	blt.n	8009fd4 <_malloc_r+0x1c>
 8009fd0:	42a9      	cmp	r1, r5
 8009fd2:	d904      	bls.n	8009fde <_malloc_r+0x26>
 8009fd4:	230c      	movs	r3, #12
 8009fd6:	6033      	str	r3, [r6, #0]
 8009fd8:	2000      	movs	r0, #0
 8009fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0b4 <_malloc_r+0xfc>
 8009fe2:	f000 f915 	bl	800a210 <__malloc_lock>
 8009fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8009fea:	461c      	mov	r4, r3
 8009fec:	bb44      	cbnz	r4, 800a040 <_malloc_r+0x88>
 8009fee:	4629      	mov	r1, r5
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	f7ff ffbf 	bl	8009f74 <sbrk_aligned>
 8009ff6:	1c43      	adds	r3, r0, #1
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	d158      	bne.n	800a0ae <_malloc_r+0xf6>
 8009ffc:	f8d8 4000 	ldr.w	r4, [r8]
 800a000:	4627      	mov	r7, r4
 800a002:	2f00      	cmp	r7, #0
 800a004:	d143      	bne.n	800a08e <_malloc_r+0xd6>
 800a006:	2c00      	cmp	r4, #0
 800a008:	d04b      	beq.n	800a0a2 <_malloc_r+0xea>
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	4639      	mov	r1, r7
 800a00e:	4630      	mov	r0, r6
 800a010:	eb04 0903 	add.w	r9, r4, r3
 800a014:	f000 fe66 	bl	800ace4 <_sbrk_r>
 800a018:	4581      	cmp	r9, r0
 800a01a:	d142      	bne.n	800a0a2 <_malloc_r+0xea>
 800a01c:	6821      	ldr	r1, [r4, #0]
 800a01e:	4630      	mov	r0, r6
 800a020:	1a6d      	subs	r5, r5, r1
 800a022:	4629      	mov	r1, r5
 800a024:	f7ff ffa6 	bl	8009f74 <sbrk_aligned>
 800a028:	3001      	adds	r0, #1
 800a02a:	d03a      	beq.n	800a0a2 <_malloc_r+0xea>
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	442b      	add	r3, r5
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	f8d8 3000 	ldr.w	r3, [r8]
 800a036:	685a      	ldr	r2, [r3, #4]
 800a038:	bb62      	cbnz	r2, 800a094 <_malloc_r+0xdc>
 800a03a:	f8c8 7000 	str.w	r7, [r8]
 800a03e:	e00f      	b.n	800a060 <_malloc_r+0xa8>
 800a040:	6822      	ldr	r2, [r4, #0]
 800a042:	1b52      	subs	r2, r2, r5
 800a044:	d420      	bmi.n	800a088 <_malloc_r+0xd0>
 800a046:	2a0b      	cmp	r2, #11
 800a048:	d917      	bls.n	800a07a <_malloc_r+0xc2>
 800a04a:	1961      	adds	r1, r4, r5
 800a04c:	42a3      	cmp	r3, r4
 800a04e:	6025      	str	r5, [r4, #0]
 800a050:	bf18      	it	ne
 800a052:	6059      	strne	r1, [r3, #4]
 800a054:	6863      	ldr	r3, [r4, #4]
 800a056:	bf08      	it	eq
 800a058:	f8c8 1000 	streq.w	r1, [r8]
 800a05c:	5162      	str	r2, [r4, r5]
 800a05e:	604b      	str	r3, [r1, #4]
 800a060:	4630      	mov	r0, r6
 800a062:	f000 f8db 	bl	800a21c <__malloc_unlock>
 800a066:	f104 000b 	add.w	r0, r4, #11
 800a06a:	1d23      	adds	r3, r4, #4
 800a06c:	f020 0007 	bic.w	r0, r0, #7
 800a070:	1ac2      	subs	r2, r0, r3
 800a072:	bf1c      	itt	ne
 800a074:	1a1b      	subne	r3, r3, r0
 800a076:	50a3      	strne	r3, [r4, r2]
 800a078:	e7af      	b.n	8009fda <_malloc_r+0x22>
 800a07a:	6862      	ldr	r2, [r4, #4]
 800a07c:	42a3      	cmp	r3, r4
 800a07e:	bf0c      	ite	eq
 800a080:	f8c8 2000 	streq.w	r2, [r8]
 800a084:	605a      	strne	r2, [r3, #4]
 800a086:	e7eb      	b.n	800a060 <_malloc_r+0xa8>
 800a088:	4623      	mov	r3, r4
 800a08a:	6864      	ldr	r4, [r4, #4]
 800a08c:	e7ae      	b.n	8009fec <_malloc_r+0x34>
 800a08e:	463c      	mov	r4, r7
 800a090:	687f      	ldr	r7, [r7, #4]
 800a092:	e7b6      	b.n	800a002 <_malloc_r+0x4a>
 800a094:	461a      	mov	r2, r3
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	42a3      	cmp	r3, r4
 800a09a:	d1fb      	bne.n	800a094 <_malloc_r+0xdc>
 800a09c:	2300      	movs	r3, #0
 800a09e:	6053      	str	r3, [r2, #4]
 800a0a0:	e7de      	b.n	800a060 <_malloc_r+0xa8>
 800a0a2:	230c      	movs	r3, #12
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	6033      	str	r3, [r6, #0]
 800a0a8:	f000 f8b8 	bl	800a21c <__malloc_unlock>
 800a0ac:	e794      	b.n	8009fd8 <_malloc_r+0x20>
 800a0ae:	6005      	str	r5, [r0, #0]
 800a0b0:	e7d6      	b.n	800a060 <_malloc_r+0xa8>
 800a0b2:	bf00      	nop
 800a0b4:	20001020 	.word	0x20001020

0800a0b8 <__sflush_r>:
 800a0b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c0:	0716      	lsls	r6, r2, #28
 800a0c2:	4605      	mov	r5, r0
 800a0c4:	460c      	mov	r4, r1
 800a0c6:	d454      	bmi.n	800a172 <__sflush_r+0xba>
 800a0c8:	684b      	ldr	r3, [r1, #4]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	dc02      	bgt.n	800a0d4 <__sflush_r+0x1c>
 800a0ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	dd48      	ble.n	800a166 <__sflush_r+0xae>
 800a0d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0d6:	2e00      	cmp	r6, #0
 800a0d8:	d045      	beq.n	800a166 <__sflush_r+0xae>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a0e0:	682f      	ldr	r7, [r5, #0]
 800a0e2:	6a21      	ldr	r1, [r4, #32]
 800a0e4:	602b      	str	r3, [r5, #0]
 800a0e6:	d030      	beq.n	800a14a <__sflush_r+0x92>
 800a0e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a0ea:	89a3      	ldrh	r3, [r4, #12]
 800a0ec:	0759      	lsls	r1, r3, #29
 800a0ee:	d505      	bpl.n	800a0fc <__sflush_r+0x44>
 800a0f0:	6863      	ldr	r3, [r4, #4]
 800a0f2:	1ad2      	subs	r2, r2, r3
 800a0f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a0f6:	b10b      	cbz	r3, 800a0fc <__sflush_r+0x44>
 800a0f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0fa:	1ad2      	subs	r2, r2, r3
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a100:	6a21      	ldr	r1, [r4, #32]
 800a102:	4628      	mov	r0, r5
 800a104:	47b0      	blx	r6
 800a106:	1c43      	adds	r3, r0, #1
 800a108:	89a3      	ldrh	r3, [r4, #12]
 800a10a:	d106      	bne.n	800a11a <__sflush_r+0x62>
 800a10c:	6829      	ldr	r1, [r5, #0]
 800a10e:	291d      	cmp	r1, #29
 800a110:	d82b      	bhi.n	800a16a <__sflush_r+0xb2>
 800a112:	4a2a      	ldr	r2, [pc, #168]	@ (800a1bc <__sflush_r+0x104>)
 800a114:	410a      	asrs	r2, r1
 800a116:	07d6      	lsls	r6, r2, #31
 800a118:	d427      	bmi.n	800a16a <__sflush_r+0xb2>
 800a11a:	2200      	movs	r2, #0
 800a11c:	04d9      	lsls	r1, r3, #19
 800a11e:	6062      	str	r2, [r4, #4]
 800a120:	6922      	ldr	r2, [r4, #16]
 800a122:	6022      	str	r2, [r4, #0]
 800a124:	d504      	bpl.n	800a130 <__sflush_r+0x78>
 800a126:	1c42      	adds	r2, r0, #1
 800a128:	d101      	bne.n	800a12e <__sflush_r+0x76>
 800a12a:	682b      	ldr	r3, [r5, #0]
 800a12c:	b903      	cbnz	r3, 800a130 <__sflush_r+0x78>
 800a12e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a132:	602f      	str	r7, [r5, #0]
 800a134:	b1b9      	cbz	r1, 800a166 <__sflush_r+0xae>
 800a136:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a13a:	4299      	cmp	r1, r3
 800a13c:	d002      	beq.n	800a144 <__sflush_r+0x8c>
 800a13e:	4628      	mov	r0, r5
 800a140:	f000 fe0e 	bl	800ad60 <_free_r>
 800a144:	2300      	movs	r3, #0
 800a146:	6363      	str	r3, [r4, #52]	@ 0x34
 800a148:	e00d      	b.n	800a166 <__sflush_r+0xae>
 800a14a:	2301      	movs	r3, #1
 800a14c:	4628      	mov	r0, r5
 800a14e:	47b0      	blx	r6
 800a150:	4602      	mov	r2, r0
 800a152:	1c50      	adds	r0, r2, #1
 800a154:	d1c9      	bne.n	800a0ea <__sflush_r+0x32>
 800a156:	682b      	ldr	r3, [r5, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d0c6      	beq.n	800a0ea <__sflush_r+0x32>
 800a15c:	2b1d      	cmp	r3, #29
 800a15e:	d001      	beq.n	800a164 <__sflush_r+0xac>
 800a160:	2b16      	cmp	r3, #22
 800a162:	d11d      	bne.n	800a1a0 <__sflush_r+0xe8>
 800a164:	602f      	str	r7, [r5, #0]
 800a166:	2000      	movs	r0, #0
 800a168:	e021      	b.n	800a1ae <__sflush_r+0xf6>
 800a16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a16e:	b21b      	sxth	r3, r3
 800a170:	e01a      	b.n	800a1a8 <__sflush_r+0xf0>
 800a172:	690f      	ldr	r7, [r1, #16]
 800a174:	2f00      	cmp	r7, #0
 800a176:	d0f6      	beq.n	800a166 <__sflush_r+0xae>
 800a178:	0793      	lsls	r3, r2, #30
 800a17a:	680e      	ldr	r6, [r1, #0]
 800a17c:	600f      	str	r7, [r1, #0]
 800a17e:	bf0c      	ite	eq
 800a180:	694b      	ldreq	r3, [r1, #20]
 800a182:	2300      	movne	r3, #0
 800a184:	eba6 0807 	sub.w	r8, r6, r7
 800a188:	608b      	str	r3, [r1, #8]
 800a18a:	f1b8 0f00 	cmp.w	r8, #0
 800a18e:	ddea      	ble.n	800a166 <__sflush_r+0xae>
 800a190:	4643      	mov	r3, r8
 800a192:	463a      	mov	r2, r7
 800a194:	6a21      	ldr	r1, [r4, #32]
 800a196:	4628      	mov	r0, r5
 800a198:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a19a:	47b0      	blx	r6
 800a19c:	2800      	cmp	r0, #0
 800a19e:	dc08      	bgt.n	800a1b2 <__sflush_r+0xfa>
 800a1a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1ac:	81a3      	strh	r3, [r4, #12]
 800a1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1b2:	4407      	add	r7, r0
 800a1b4:	eba8 0800 	sub.w	r8, r8, r0
 800a1b8:	e7e7      	b.n	800a18a <__sflush_r+0xd2>
 800a1ba:	bf00      	nop
 800a1bc:	dfbffffe 	.word	0xdfbffffe

0800a1c0 <_fflush_r>:
 800a1c0:	b538      	push	{r3, r4, r5, lr}
 800a1c2:	690b      	ldr	r3, [r1, #16]
 800a1c4:	4605      	mov	r5, r0
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	b913      	cbnz	r3, 800a1d0 <_fflush_r+0x10>
 800a1ca:	2500      	movs	r5, #0
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	bd38      	pop	{r3, r4, r5, pc}
 800a1d0:	b118      	cbz	r0, 800a1da <_fflush_r+0x1a>
 800a1d2:	6a03      	ldr	r3, [r0, #32]
 800a1d4:	b90b      	cbnz	r3, 800a1da <_fflush_r+0x1a>
 800a1d6:	f7fe fe11 	bl	8008dfc <__sinit>
 800a1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d0f3      	beq.n	800a1ca <_fflush_r+0xa>
 800a1e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a1e4:	07d0      	lsls	r0, r2, #31
 800a1e6:	d404      	bmi.n	800a1f2 <_fflush_r+0x32>
 800a1e8:	0599      	lsls	r1, r3, #22
 800a1ea:	d402      	bmi.n	800a1f2 <_fflush_r+0x32>
 800a1ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1ee:	f7fe feea 	bl	8008fc6 <__retarget_lock_acquire_recursive>
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	f7ff ff5f 	bl	800a0b8 <__sflush_r>
 800a1fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	07da      	lsls	r2, r3, #31
 800a200:	d4e4      	bmi.n	800a1cc <_fflush_r+0xc>
 800a202:	89a3      	ldrh	r3, [r4, #12]
 800a204:	059b      	lsls	r3, r3, #22
 800a206:	d4e1      	bmi.n	800a1cc <_fflush_r+0xc>
 800a208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a20a:	f7fe fedd 	bl	8008fc8 <__retarget_lock_release_recursive>
 800a20e:	e7dd      	b.n	800a1cc <_fflush_r+0xc>

0800a210 <__malloc_lock>:
 800a210:	4801      	ldr	r0, [pc, #4]	@ (800a218 <__malloc_lock+0x8>)
 800a212:	f7fe bed8 	b.w	8008fc6 <__retarget_lock_acquire_recursive>
 800a216:	bf00      	nop
 800a218:	20001018 	.word	0x20001018

0800a21c <__malloc_unlock>:
 800a21c:	4801      	ldr	r0, [pc, #4]	@ (800a224 <__malloc_unlock+0x8>)
 800a21e:	f7fe bed3 	b.w	8008fc8 <__retarget_lock_release_recursive>
 800a222:	bf00      	nop
 800a224:	20001018 	.word	0x20001018

0800a228 <_Balloc>:
 800a228:	b570      	push	{r4, r5, r6, lr}
 800a22a:	69c6      	ldr	r6, [r0, #28]
 800a22c:	4604      	mov	r4, r0
 800a22e:	460d      	mov	r5, r1
 800a230:	b976      	cbnz	r6, 800a250 <_Balloc+0x28>
 800a232:	2010      	movs	r0, #16
 800a234:	f7ff fe96 	bl	8009f64 <malloc>
 800a238:	4602      	mov	r2, r0
 800a23a:	61e0      	str	r0, [r4, #28]
 800a23c:	b920      	cbnz	r0, 800a248 <_Balloc+0x20>
 800a23e:	4b18      	ldr	r3, [pc, #96]	@ (800a2a0 <_Balloc+0x78>)
 800a240:	216b      	movs	r1, #107	@ 0x6b
 800a242:	4818      	ldr	r0, [pc, #96]	@ (800a2a4 <_Balloc+0x7c>)
 800a244:	f7fe fedc 	bl	8009000 <__assert_func>
 800a248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a24c:	6006      	str	r6, [r0, #0]
 800a24e:	60c6      	str	r6, [r0, #12]
 800a250:	69e6      	ldr	r6, [r4, #28]
 800a252:	68f3      	ldr	r3, [r6, #12]
 800a254:	b183      	cbz	r3, 800a278 <_Balloc+0x50>
 800a256:	69e3      	ldr	r3, [r4, #28]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a25e:	b9b8      	cbnz	r0, 800a290 <_Balloc+0x68>
 800a260:	2101      	movs	r1, #1
 800a262:	4620      	mov	r0, r4
 800a264:	fa01 f605 	lsl.w	r6, r1, r5
 800a268:	1d72      	adds	r2, r6, #5
 800a26a:	0092      	lsls	r2, r2, #2
 800a26c:	f000 fd63 	bl	800ad36 <_calloc_r>
 800a270:	b160      	cbz	r0, 800a28c <_Balloc+0x64>
 800a272:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a276:	e00e      	b.n	800a296 <_Balloc+0x6e>
 800a278:	2221      	movs	r2, #33	@ 0x21
 800a27a:	2104      	movs	r1, #4
 800a27c:	4620      	mov	r0, r4
 800a27e:	f000 fd5a 	bl	800ad36 <_calloc_r>
 800a282:	69e3      	ldr	r3, [r4, #28]
 800a284:	60f0      	str	r0, [r6, #12]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1e4      	bne.n	800a256 <_Balloc+0x2e>
 800a28c:	2000      	movs	r0, #0
 800a28e:	bd70      	pop	{r4, r5, r6, pc}
 800a290:	6802      	ldr	r2, [r0, #0]
 800a292:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a296:	2300      	movs	r3, #0
 800a298:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a29c:	e7f7      	b.n	800a28e <_Balloc+0x66>
 800a29e:	bf00      	nop
 800a2a0:	0800bcf5 	.word	0x0800bcf5
 800a2a4:	0800bd86 	.word	0x0800bd86

0800a2a8 <_Bfree>:
 800a2a8:	b570      	push	{r4, r5, r6, lr}
 800a2aa:	69c6      	ldr	r6, [r0, #28]
 800a2ac:	4605      	mov	r5, r0
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	b976      	cbnz	r6, 800a2d0 <_Bfree+0x28>
 800a2b2:	2010      	movs	r0, #16
 800a2b4:	f7ff fe56 	bl	8009f64 <malloc>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	61e8      	str	r0, [r5, #28]
 800a2bc:	b920      	cbnz	r0, 800a2c8 <_Bfree+0x20>
 800a2be:	4b09      	ldr	r3, [pc, #36]	@ (800a2e4 <_Bfree+0x3c>)
 800a2c0:	218f      	movs	r1, #143	@ 0x8f
 800a2c2:	4809      	ldr	r0, [pc, #36]	@ (800a2e8 <_Bfree+0x40>)
 800a2c4:	f7fe fe9c 	bl	8009000 <__assert_func>
 800a2c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2cc:	6006      	str	r6, [r0, #0]
 800a2ce:	60c6      	str	r6, [r0, #12]
 800a2d0:	b13c      	cbz	r4, 800a2e2 <_Bfree+0x3a>
 800a2d2:	69eb      	ldr	r3, [r5, #28]
 800a2d4:	6862      	ldr	r2, [r4, #4]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2dc:	6021      	str	r1, [r4, #0]
 800a2de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2e2:	bd70      	pop	{r4, r5, r6, pc}
 800a2e4:	0800bcf5 	.word	0x0800bcf5
 800a2e8:	0800bd86 	.word	0x0800bd86

0800a2ec <__multadd>:
 800a2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f0:	f101 0c14 	add.w	ip, r1, #20
 800a2f4:	4607      	mov	r7, r0
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	461e      	mov	r6, r3
 800a2fa:	690d      	ldr	r5, [r1, #16]
 800a2fc:	2000      	movs	r0, #0
 800a2fe:	f8dc 3000 	ldr.w	r3, [ip]
 800a302:	3001      	adds	r0, #1
 800a304:	b299      	uxth	r1, r3
 800a306:	4285      	cmp	r5, r0
 800a308:	fb02 6101 	mla	r1, r2, r1, r6
 800a30c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a310:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800a314:	b289      	uxth	r1, r1
 800a316:	fb02 3306 	mla	r3, r2, r6, r3
 800a31a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a31e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a322:	f84c 1b04 	str.w	r1, [ip], #4
 800a326:	dcea      	bgt.n	800a2fe <__multadd+0x12>
 800a328:	b30e      	cbz	r6, 800a36e <__multadd+0x82>
 800a32a:	68a3      	ldr	r3, [r4, #8]
 800a32c:	42ab      	cmp	r3, r5
 800a32e:	dc19      	bgt.n	800a364 <__multadd+0x78>
 800a330:	6861      	ldr	r1, [r4, #4]
 800a332:	4638      	mov	r0, r7
 800a334:	3101      	adds	r1, #1
 800a336:	f7ff ff77 	bl	800a228 <_Balloc>
 800a33a:	4680      	mov	r8, r0
 800a33c:	b928      	cbnz	r0, 800a34a <__multadd+0x5e>
 800a33e:	4602      	mov	r2, r0
 800a340:	4b0c      	ldr	r3, [pc, #48]	@ (800a374 <__multadd+0x88>)
 800a342:	21ba      	movs	r1, #186	@ 0xba
 800a344:	480c      	ldr	r0, [pc, #48]	@ (800a378 <__multadd+0x8c>)
 800a346:	f7fe fe5b 	bl	8009000 <__assert_func>
 800a34a:	6922      	ldr	r2, [r4, #16]
 800a34c:	f104 010c 	add.w	r1, r4, #12
 800a350:	300c      	adds	r0, #12
 800a352:	3202      	adds	r2, #2
 800a354:	0092      	lsls	r2, r2, #2
 800a356:	f7fe fe46 	bl	8008fe6 <memcpy>
 800a35a:	4621      	mov	r1, r4
 800a35c:	4644      	mov	r4, r8
 800a35e:	4638      	mov	r0, r7
 800a360:	f7ff ffa2 	bl	800a2a8 <_Bfree>
 800a364:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a368:	3501      	adds	r5, #1
 800a36a:	615e      	str	r6, [r3, #20]
 800a36c:	6125      	str	r5, [r4, #16]
 800a36e:	4620      	mov	r0, r4
 800a370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a374:	0800bd64 	.word	0x0800bd64
 800a378:	0800bd86 	.word	0x0800bd86

0800a37c <__hi0bits>:
 800a37c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a380:	4603      	mov	r3, r0
 800a382:	bf36      	itet	cc
 800a384:	0403      	lslcc	r3, r0, #16
 800a386:	2000      	movcs	r0, #0
 800a388:	2010      	movcc	r0, #16
 800a38a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a38e:	bf3c      	itt	cc
 800a390:	021b      	lslcc	r3, r3, #8
 800a392:	3008      	addcc	r0, #8
 800a394:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a398:	bf3c      	itt	cc
 800a39a:	011b      	lslcc	r3, r3, #4
 800a39c:	3004      	addcc	r0, #4
 800a39e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3a2:	bf3c      	itt	cc
 800a3a4:	009b      	lslcc	r3, r3, #2
 800a3a6:	3002      	addcc	r0, #2
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	db05      	blt.n	800a3b8 <__hi0bits+0x3c>
 800a3ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a3b0:	f100 0001 	add.w	r0, r0, #1
 800a3b4:	bf08      	it	eq
 800a3b6:	2020      	moveq	r0, #32
 800a3b8:	4770      	bx	lr

0800a3ba <__lo0bits>:
 800a3ba:	6803      	ldr	r3, [r0, #0]
 800a3bc:	4602      	mov	r2, r0
 800a3be:	f013 0007 	ands.w	r0, r3, #7
 800a3c2:	d00b      	beq.n	800a3dc <__lo0bits+0x22>
 800a3c4:	07d9      	lsls	r1, r3, #31
 800a3c6:	d421      	bmi.n	800a40c <__lo0bits+0x52>
 800a3c8:	0798      	lsls	r0, r3, #30
 800a3ca:	bf47      	ittee	mi
 800a3cc:	085b      	lsrmi	r3, r3, #1
 800a3ce:	2001      	movmi	r0, #1
 800a3d0:	089b      	lsrpl	r3, r3, #2
 800a3d2:	2002      	movpl	r0, #2
 800a3d4:	bf4c      	ite	mi
 800a3d6:	6013      	strmi	r3, [r2, #0]
 800a3d8:	6013      	strpl	r3, [r2, #0]
 800a3da:	4770      	bx	lr
 800a3dc:	b299      	uxth	r1, r3
 800a3de:	b909      	cbnz	r1, 800a3e4 <__lo0bits+0x2a>
 800a3e0:	0c1b      	lsrs	r3, r3, #16
 800a3e2:	2010      	movs	r0, #16
 800a3e4:	b2d9      	uxtb	r1, r3
 800a3e6:	b909      	cbnz	r1, 800a3ec <__lo0bits+0x32>
 800a3e8:	3008      	adds	r0, #8
 800a3ea:	0a1b      	lsrs	r3, r3, #8
 800a3ec:	0719      	lsls	r1, r3, #28
 800a3ee:	bf04      	itt	eq
 800a3f0:	091b      	lsreq	r3, r3, #4
 800a3f2:	3004      	addeq	r0, #4
 800a3f4:	0799      	lsls	r1, r3, #30
 800a3f6:	bf04      	itt	eq
 800a3f8:	089b      	lsreq	r3, r3, #2
 800a3fa:	3002      	addeq	r0, #2
 800a3fc:	07d9      	lsls	r1, r3, #31
 800a3fe:	d403      	bmi.n	800a408 <__lo0bits+0x4e>
 800a400:	085b      	lsrs	r3, r3, #1
 800a402:	f100 0001 	add.w	r0, r0, #1
 800a406:	d003      	beq.n	800a410 <__lo0bits+0x56>
 800a408:	6013      	str	r3, [r2, #0]
 800a40a:	4770      	bx	lr
 800a40c:	2000      	movs	r0, #0
 800a40e:	4770      	bx	lr
 800a410:	2020      	movs	r0, #32
 800a412:	4770      	bx	lr

0800a414 <__i2b>:
 800a414:	b510      	push	{r4, lr}
 800a416:	460c      	mov	r4, r1
 800a418:	2101      	movs	r1, #1
 800a41a:	f7ff ff05 	bl	800a228 <_Balloc>
 800a41e:	4602      	mov	r2, r0
 800a420:	b928      	cbnz	r0, 800a42e <__i2b+0x1a>
 800a422:	4b05      	ldr	r3, [pc, #20]	@ (800a438 <__i2b+0x24>)
 800a424:	f240 1145 	movw	r1, #325	@ 0x145
 800a428:	4804      	ldr	r0, [pc, #16]	@ (800a43c <__i2b+0x28>)
 800a42a:	f7fe fde9 	bl	8009000 <__assert_func>
 800a42e:	2301      	movs	r3, #1
 800a430:	6144      	str	r4, [r0, #20]
 800a432:	6103      	str	r3, [r0, #16]
 800a434:	bd10      	pop	{r4, pc}
 800a436:	bf00      	nop
 800a438:	0800bd64 	.word	0x0800bd64
 800a43c:	0800bd86 	.word	0x0800bd86

0800a440 <__multiply>:
 800a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	4614      	mov	r4, r2
 800a446:	690a      	ldr	r2, [r1, #16]
 800a448:	460f      	mov	r7, r1
 800a44a:	b085      	sub	sp, #20
 800a44c:	6923      	ldr	r3, [r4, #16]
 800a44e:	429a      	cmp	r2, r3
 800a450:	bfa2      	ittt	ge
 800a452:	4623      	movge	r3, r4
 800a454:	460c      	movge	r4, r1
 800a456:	461f      	movge	r7, r3
 800a458:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a45c:	68a3      	ldr	r3, [r4, #8]
 800a45e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a462:	6861      	ldr	r1, [r4, #4]
 800a464:	eb0a 0609 	add.w	r6, sl, r9
 800a468:	42b3      	cmp	r3, r6
 800a46a:	bfb8      	it	lt
 800a46c:	3101      	addlt	r1, #1
 800a46e:	f7ff fedb 	bl	800a228 <_Balloc>
 800a472:	b930      	cbnz	r0, 800a482 <__multiply+0x42>
 800a474:	4602      	mov	r2, r0
 800a476:	4b45      	ldr	r3, [pc, #276]	@ (800a58c <__multiply+0x14c>)
 800a478:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a47c:	4844      	ldr	r0, [pc, #272]	@ (800a590 <__multiply+0x150>)
 800a47e:	f7fe fdbf 	bl	8009000 <__assert_func>
 800a482:	f100 0514 	add.w	r5, r0, #20
 800a486:	2200      	movs	r2, #0
 800a488:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a48c:	462b      	mov	r3, r5
 800a48e:	4543      	cmp	r3, r8
 800a490:	d321      	bcc.n	800a4d6 <__multiply+0x96>
 800a492:	f107 0114 	add.w	r1, r7, #20
 800a496:	f104 0214 	add.w	r2, r4, #20
 800a49a:	f104 0715 	add.w	r7, r4, #21
 800a49e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a4a2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a4a6:	9302      	str	r3, [sp, #8]
 800a4a8:	1b13      	subs	r3, r2, r4
 800a4aa:	3b15      	subs	r3, #21
 800a4ac:	f023 0303 	bic.w	r3, r3, #3
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	42ba      	cmp	r2, r7
 800a4b4:	bf38      	it	cc
 800a4b6:	2304      	movcc	r3, #4
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	9b02      	ldr	r3, [sp, #8]
 800a4bc:	9103      	str	r1, [sp, #12]
 800a4be:	428b      	cmp	r3, r1
 800a4c0:	d80c      	bhi.n	800a4dc <__multiply+0x9c>
 800a4c2:	2e00      	cmp	r6, #0
 800a4c4:	dd03      	ble.n	800a4ce <__multiply+0x8e>
 800a4c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d05b      	beq.n	800a586 <__multiply+0x146>
 800a4ce:	6106      	str	r6, [r0, #16]
 800a4d0:	b005      	add	sp, #20
 800a4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d6:	f843 2b04 	str.w	r2, [r3], #4
 800a4da:	e7d8      	b.n	800a48e <__multiply+0x4e>
 800a4dc:	f8b1 a000 	ldrh.w	sl, [r1]
 800a4e0:	f1ba 0f00 	cmp.w	sl, #0
 800a4e4:	d024      	beq.n	800a530 <__multiply+0xf0>
 800a4e6:	f104 0e14 	add.w	lr, r4, #20
 800a4ea:	46a9      	mov	r9, r5
 800a4ec:	f04f 0c00 	mov.w	ip, #0
 800a4f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a4f4:	f8d9 3000 	ldr.w	r3, [r9]
 800a4f8:	fa1f fb87 	uxth.w	fp, r7
 800a4fc:	4572      	cmp	r2, lr
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	fb0a 330b 	mla	r3, sl, fp, r3
 800a504:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a508:	f8d9 7000 	ldr.w	r7, [r9]
 800a50c:	4463      	add	r3, ip
 800a50e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a512:	fb0a c70b 	mla	r7, sl, fp, ip
 800a516:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a520:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a524:	f849 3b04 	str.w	r3, [r9], #4
 800a528:	d8e2      	bhi.n	800a4f0 <__multiply+0xb0>
 800a52a:	9b01      	ldr	r3, [sp, #4]
 800a52c:	f845 c003 	str.w	ip, [r5, r3]
 800a530:	9b03      	ldr	r3, [sp, #12]
 800a532:	3104      	adds	r1, #4
 800a534:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a538:	f1b9 0f00 	cmp.w	r9, #0
 800a53c:	d021      	beq.n	800a582 <__multiply+0x142>
 800a53e:	682b      	ldr	r3, [r5, #0]
 800a540:	f104 0c14 	add.w	ip, r4, #20
 800a544:	46ae      	mov	lr, r5
 800a546:	f04f 0a00 	mov.w	sl, #0
 800a54a:	f8bc b000 	ldrh.w	fp, [ip]
 800a54e:	b29b      	uxth	r3, r3
 800a550:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a554:	fb09 770b 	mla	r7, r9, fp, r7
 800a558:	4457      	add	r7, sl
 800a55a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a55e:	f84e 3b04 	str.w	r3, [lr], #4
 800a562:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a566:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a56a:	f8be 3000 	ldrh.w	r3, [lr]
 800a56e:	4562      	cmp	r2, ip
 800a570:	fb09 330a 	mla	r3, r9, sl, r3
 800a574:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a578:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a57c:	d8e5      	bhi.n	800a54a <__multiply+0x10a>
 800a57e:	9f01      	ldr	r7, [sp, #4]
 800a580:	51eb      	str	r3, [r5, r7]
 800a582:	3504      	adds	r5, #4
 800a584:	e799      	b.n	800a4ba <__multiply+0x7a>
 800a586:	3e01      	subs	r6, #1
 800a588:	e79b      	b.n	800a4c2 <__multiply+0x82>
 800a58a:	bf00      	nop
 800a58c:	0800bd64 	.word	0x0800bd64
 800a590:	0800bd86 	.word	0x0800bd86

0800a594 <__pow5mult>:
 800a594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a598:	4615      	mov	r5, r2
 800a59a:	f012 0203 	ands.w	r2, r2, #3
 800a59e:	4607      	mov	r7, r0
 800a5a0:	460e      	mov	r6, r1
 800a5a2:	d007      	beq.n	800a5b4 <__pow5mult+0x20>
 800a5a4:	3a01      	subs	r2, #1
 800a5a6:	4c25      	ldr	r4, [pc, #148]	@ (800a63c <__pow5mult+0xa8>)
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5ae:	f7ff fe9d 	bl	800a2ec <__multadd>
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	10ad      	asrs	r5, r5, #2
 800a5b6:	d03d      	beq.n	800a634 <__pow5mult+0xa0>
 800a5b8:	69fc      	ldr	r4, [r7, #28]
 800a5ba:	b97c      	cbnz	r4, 800a5dc <__pow5mult+0x48>
 800a5bc:	2010      	movs	r0, #16
 800a5be:	f7ff fcd1 	bl	8009f64 <malloc>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	61f8      	str	r0, [r7, #28]
 800a5c6:	b928      	cbnz	r0, 800a5d4 <__pow5mult+0x40>
 800a5c8:	4b1d      	ldr	r3, [pc, #116]	@ (800a640 <__pow5mult+0xac>)
 800a5ca:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a5ce:	481d      	ldr	r0, [pc, #116]	@ (800a644 <__pow5mult+0xb0>)
 800a5d0:	f7fe fd16 	bl	8009000 <__assert_func>
 800a5d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5d8:	6004      	str	r4, [r0, #0]
 800a5da:	60c4      	str	r4, [r0, #12]
 800a5dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a5e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5e4:	b94c      	cbnz	r4, 800a5fa <__pow5mult+0x66>
 800a5e6:	f240 2171 	movw	r1, #625	@ 0x271
 800a5ea:	4638      	mov	r0, r7
 800a5ec:	f7ff ff12 	bl	800a414 <__i2b>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5f8:	6003      	str	r3, [r0, #0]
 800a5fa:	f04f 0900 	mov.w	r9, #0
 800a5fe:	07eb      	lsls	r3, r5, #31
 800a600:	d50a      	bpl.n	800a618 <__pow5mult+0x84>
 800a602:	4631      	mov	r1, r6
 800a604:	4622      	mov	r2, r4
 800a606:	4638      	mov	r0, r7
 800a608:	f7ff ff1a 	bl	800a440 <__multiply>
 800a60c:	4680      	mov	r8, r0
 800a60e:	4631      	mov	r1, r6
 800a610:	4638      	mov	r0, r7
 800a612:	4646      	mov	r6, r8
 800a614:	f7ff fe48 	bl	800a2a8 <_Bfree>
 800a618:	106d      	asrs	r5, r5, #1
 800a61a:	d00b      	beq.n	800a634 <__pow5mult+0xa0>
 800a61c:	6820      	ldr	r0, [r4, #0]
 800a61e:	b938      	cbnz	r0, 800a630 <__pow5mult+0x9c>
 800a620:	4622      	mov	r2, r4
 800a622:	4621      	mov	r1, r4
 800a624:	4638      	mov	r0, r7
 800a626:	f7ff ff0b 	bl	800a440 <__multiply>
 800a62a:	6020      	str	r0, [r4, #0]
 800a62c:	f8c0 9000 	str.w	r9, [r0]
 800a630:	4604      	mov	r4, r0
 800a632:	e7e4      	b.n	800a5fe <__pow5mult+0x6a>
 800a634:	4630      	mov	r0, r6
 800a636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a63a:	bf00      	nop
 800a63c:	0800bde0 	.word	0x0800bde0
 800a640:	0800bcf5 	.word	0x0800bcf5
 800a644:	0800bd86 	.word	0x0800bd86

0800a648 <__lshift>:
 800a648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a64c:	460c      	mov	r4, r1
 800a64e:	4607      	mov	r7, r0
 800a650:	4691      	mov	r9, r2
 800a652:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a656:	6923      	ldr	r3, [r4, #16]
 800a658:	6849      	ldr	r1, [r1, #4]
 800a65a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a65e:	68a3      	ldr	r3, [r4, #8]
 800a660:	f108 0601 	add.w	r6, r8, #1
 800a664:	42b3      	cmp	r3, r6
 800a666:	db0b      	blt.n	800a680 <__lshift+0x38>
 800a668:	4638      	mov	r0, r7
 800a66a:	f7ff fddd 	bl	800a228 <_Balloc>
 800a66e:	4605      	mov	r5, r0
 800a670:	b948      	cbnz	r0, 800a686 <__lshift+0x3e>
 800a672:	4602      	mov	r2, r0
 800a674:	4b28      	ldr	r3, [pc, #160]	@ (800a718 <__lshift+0xd0>)
 800a676:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a67a:	4828      	ldr	r0, [pc, #160]	@ (800a71c <__lshift+0xd4>)
 800a67c:	f7fe fcc0 	bl	8009000 <__assert_func>
 800a680:	3101      	adds	r1, #1
 800a682:	005b      	lsls	r3, r3, #1
 800a684:	e7ee      	b.n	800a664 <__lshift+0x1c>
 800a686:	2300      	movs	r3, #0
 800a688:	f100 0114 	add.w	r1, r0, #20
 800a68c:	f100 0210 	add.w	r2, r0, #16
 800a690:	4618      	mov	r0, r3
 800a692:	4553      	cmp	r3, sl
 800a694:	db33      	blt.n	800a6fe <__lshift+0xb6>
 800a696:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a69a:	f104 0314 	add.w	r3, r4, #20
 800a69e:	6920      	ldr	r0, [r4, #16]
 800a6a0:	f019 091f 	ands.w	r9, r9, #31
 800a6a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a6ac:	d02b      	beq.n	800a706 <__lshift+0xbe>
 800a6ae:	f1c9 0e20 	rsb	lr, r9, #32
 800a6b2:	468a      	mov	sl, r1
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	6818      	ldr	r0, [r3, #0]
 800a6b8:	fa00 f009 	lsl.w	r0, r0, r9
 800a6bc:	4310      	orrs	r0, r2
 800a6be:	f84a 0b04 	str.w	r0, [sl], #4
 800a6c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6c6:	459c      	cmp	ip, r3
 800a6c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a6cc:	d8f3      	bhi.n	800a6b6 <__lshift+0x6e>
 800a6ce:	ebac 0304 	sub.w	r3, ip, r4
 800a6d2:	f104 0015 	add.w	r0, r4, #21
 800a6d6:	3b15      	subs	r3, #21
 800a6d8:	f023 0303 	bic.w	r3, r3, #3
 800a6dc:	3304      	adds	r3, #4
 800a6de:	4584      	cmp	ip, r0
 800a6e0:	bf38      	it	cc
 800a6e2:	2304      	movcc	r3, #4
 800a6e4:	50ca      	str	r2, [r1, r3]
 800a6e6:	b10a      	cbz	r2, 800a6ec <__lshift+0xa4>
 800a6e8:	f108 0602 	add.w	r6, r8, #2
 800a6ec:	3e01      	subs	r6, #1
 800a6ee:	4638      	mov	r0, r7
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	612e      	str	r6, [r5, #16]
 800a6f4:	f7ff fdd8 	bl	800a2a8 <_Bfree>
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6fe:	3301      	adds	r3, #1
 800a700:	f842 0f04 	str.w	r0, [r2, #4]!
 800a704:	e7c5      	b.n	800a692 <__lshift+0x4a>
 800a706:	3904      	subs	r1, #4
 800a708:	f853 2b04 	ldr.w	r2, [r3], #4
 800a70c:	459c      	cmp	ip, r3
 800a70e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a712:	d8f9      	bhi.n	800a708 <__lshift+0xc0>
 800a714:	e7ea      	b.n	800a6ec <__lshift+0xa4>
 800a716:	bf00      	nop
 800a718:	0800bd64 	.word	0x0800bd64
 800a71c:	0800bd86 	.word	0x0800bd86

0800a720 <__mcmp>:
 800a720:	4603      	mov	r3, r0
 800a722:	690a      	ldr	r2, [r1, #16]
 800a724:	6900      	ldr	r0, [r0, #16]
 800a726:	1a80      	subs	r0, r0, r2
 800a728:	b530      	push	{r4, r5, lr}
 800a72a:	d10e      	bne.n	800a74a <__mcmp+0x2a>
 800a72c:	3314      	adds	r3, #20
 800a72e:	3114      	adds	r1, #20
 800a730:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a734:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a738:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a73c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a740:	4295      	cmp	r5, r2
 800a742:	d003      	beq.n	800a74c <__mcmp+0x2c>
 800a744:	d205      	bcs.n	800a752 <__mcmp+0x32>
 800a746:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a74a:	bd30      	pop	{r4, r5, pc}
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	d3f3      	bcc.n	800a738 <__mcmp+0x18>
 800a750:	e7fb      	b.n	800a74a <__mcmp+0x2a>
 800a752:	2001      	movs	r0, #1
 800a754:	e7f9      	b.n	800a74a <__mcmp+0x2a>
	...

0800a758 <__mdiff>:
 800a758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75c:	4689      	mov	r9, r1
 800a75e:	4606      	mov	r6, r0
 800a760:	4611      	mov	r1, r2
 800a762:	4614      	mov	r4, r2
 800a764:	4648      	mov	r0, r9
 800a766:	f7ff ffdb 	bl	800a720 <__mcmp>
 800a76a:	1e05      	subs	r5, r0, #0
 800a76c:	d112      	bne.n	800a794 <__mdiff+0x3c>
 800a76e:	4629      	mov	r1, r5
 800a770:	4630      	mov	r0, r6
 800a772:	f7ff fd59 	bl	800a228 <_Balloc>
 800a776:	4602      	mov	r2, r0
 800a778:	b928      	cbnz	r0, 800a786 <__mdiff+0x2e>
 800a77a:	4b41      	ldr	r3, [pc, #260]	@ (800a880 <__mdiff+0x128>)
 800a77c:	f240 2137 	movw	r1, #567	@ 0x237
 800a780:	4840      	ldr	r0, [pc, #256]	@ (800a884 <__mdiff+0x12c>)
 800a782:	f7fe fc3d 	bl	8009000 <__assert_func>
 800a786:	2301      	movs	r3, #1
 800a788:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a78c:	4610      	mov	r0, r2
 800a78e:	b003      	add	sp, #12
 800a790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a794:	bfbc      	itt	lt
 800a796:	464b      	movlt	r3, r9
 800a798:	46a1      	movlt	r9, r4
 800a79a:	4630      	mov	r0, r6
 800a79c:	bfb8      	it	lt
 800a79e:	2501      	movlt	r5, #1
 800a7a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a7a4:	bfb4      	ite	lt
 800a7a6:	461c      	movlt	r4, r3
 800a7a8:	2500      	movge	r5, #0
 800a7aa:	f7ff fd3d 	bl	800a228 <_Balloc>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	b918      	cbnz	r0, 800a7ba <__mdiff+0x62>
 800a7b2:	4b33      	ldr	r3, [pc, #204]	@ (800a880 <__mdiff+0x128>)
 800a7b4:	f240 2145 	movw	r1, #581	@ 0x245
 800a7b8:	e7e2      	b.n	800a780 <__mdiff+0x28>
 800a7ba:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a7be:	f104 0e14 	add.w	lr, r4, #20
 800a7c2:	6926      	ldr	r6, [r4, #16]
 800a7c4:	f100 0b14 	add.w	fp, r0, #20
 800a7c8:	60c5      	str	r5, [r0, #12]
 800a7ca:	f109 0514 	add.w	r5, r9, #20
 800a7ce:	f109 0310 	add.w	r3, r9, #16
 800a7d2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a7d6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a7da:	46d9      	mov	r9, fp
 800a7dc:	f04f 0c00 	mov.w	ip, #0
 800a7e0:	9301      	str	r3, [sp, #4]
 800a7e2:	9b01      	ldr	r3, [sp, #4]
 800a7e4:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a7e8:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a7ec:	4576      	cmp	r6, lr
 800a7ee:	9301      	str	r3, [sp, #4]
 800a7f0:	fa1f f38a 	uxth.w	r3, sl
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	b283      	uxth	r3, r0
 800a7f8:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800a7fc:	eba1 0303 	sub.w	r3, r1, r3
 800a800:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a804:	4463      	add	r3, ip
 800a806:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a810:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a814:	f849 3b04 	str.w	r3, [r9], #4
 800a818:	d8e3      	bhi.n	800a7e2 <__mdiff+0x8a>
 800a81a:	1b33      	subs	r3, r6, r4
 800a81c:	3415      	adds	r4, #21
 800a81e:	3b15      	subs	r3, #21
 800a820:	f023 0303 	bic.w	r3, r3, #3
 800a824:	3304      	adds	r3, #4
 800a826:	42a6      	cmp	r6, r4
 800a828:	bf38      	it	cc
 800a82a:	2304      	movcc	r3, #4
 800a82c:	441d      	add	r5, r3
 800a82e:	445b      	add	r3, fp
 800a830:	462c      	mov	r4, r5
 800a832:	461e      	mov	r6, r3
 800a834:	4544      	cmp	r4, r8
 800a836:	d30e      	bcc.n	800a856 <__mdiff+0xfe>
 800a838:	f108 0103 	add.w	r1, r8, #3
 800a83c:	1b49      	subs	r1, r1, r5
 800a83e:	3d03      	subs	r5, #3
 800a840:	f021 0103 	bic.w	r1, r1, #3
 800a844:	45a8      	cmp	r8, r5
 800a846:	bf38      	it	cc
 800a848:	2100      	movcc	r1, #0
 800a84a:	440b      	add	r3, r1
 800a84c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a850:	b199      	cbz	r1, 800a87a <__mdiff+0x122>
 800a852:	6117      	str	r7, [r2, #16]
 800a854:	e79a      	b.n	800a78c <__mdiff+0x34>
 800a856:	f854 1b04 	ldr.w	r1, [r4], #4
 800a85a:	46e6      	mov	lr, ip
 800a85c:	fa1f fc81 	uxth.w	ip, r1
 800a860:	0c08      	lsrs	r0, r1, #16
 800a862:	4471      	add	r1, lr
 800a864:	44f4      	add	ip, lr
 800a866:	b289      	uxth	r1, r1
 800a868:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a86c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a870:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a874:	f846 1b04 	str.w	r1, [r6], #4
 800a878:	e7dc      	b.n	800a834 <__mdiff+0xdc>
 800a87a:	3f01      	subs	r7, #1
 800a87c:	e7e6      	b.n	800a84c <__mdiff+0xf4>
 800a87e:	bf00      	nop
 800a880:	0800bd64 	.word	0x0800bd64
 800a884:	0800bd86 	.word	0x0800bd86

0800a888 <__d2b>:
 800a888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a88c:	460f      	mov	r7, r1
 800a88e:	2101      	movs	r1, #1
 800a890:	4616      	mov	r6, r2
 800a892:	ec59 8b10 	vmov	r8, r9, d0
 800a896:	f7ff fcc7 	bl	800a228 <_Balloc>
 800a89a:	4604      	mov	r4, r0
 800a89c:	b930      	cbnz	r0, 800a8ac <__d2b+0x24>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	4b23      	ldr	r3, [pc, #140]	@ (800a930 <__d2b+0xa8>)
 800a8a2:	f240 310f 	movw	r1, #783	@ 0x30f
 800a8a6:	4823      	ldr	r0, [pc, #140]	@ (800a934 <__d2b+0xac>)
 800a8a8:	f7fe fbaa 	bl	8009000 <__assert_func>
 800a8ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8b4:	b10d      	cbz	r5, 800a8ba <__d2b+0x32>
 800a8b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8ba:	9301      	str	r3, [sp, #4]
 800a8bc:	f1b8 0300 	subs.w	r3, r8, #0
 800a8c0:	d023      	beq.n	800a90a <__d2b+0x82>
 800a8c2:	4668      	mov	r0, sp
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	f7ff fd78 	bl	800a3ba <__lo0bits>
 800a8ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a8ce:	b1d0      	cbz	r0, 800a906 <__d2b+0x7e>
 800a8d0:	f1c0 0320 	rsb	r3, r0, #32
 800a8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a8d8:	40c2      	lsrs	r2, r0
 800a8da:	430b      	orrs	r3, r1
 800a8dc:	9201      	str	r2, [sp, #4]
 800a8de:	6163      	str	r3, [r4, #20]
 800a8e0:	9b01      	ldr	r3, [sp, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	61a3      	str	r3, [r4, #24]
 800a8e6:	bf0c      	ite	eq
 800a8e8:	2201      	moveq	r2, #1
 800a8ea:	2202      	movne	r2, #2
 800a8ec:	6122      	str	r2, [r4, #16]
 800a8ee:	b1a5      	cbz	r5, 800a91a <__d2b+0x92>
 800a8f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a8f4:	4405      	add	r5, r0
 800a8f6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a8fa:	603d      	str	r5, [r7, #0]
 800a8fc:	6030      	str	r0, [r6, #0]
 800a8fe:	4620      	mov	r0, r4
 800a900:	b003      	add	sp, #12
 800a902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a906:	6161      	str	r1, [r4, #20]
 800a908:	e7ea      	b.n	800a8e0 <__d2b+0x58>
 800a90a:	a801      	add	r0, sp, #4
 800a90c:	f7ff fd55 	bl	800a3ba <__lo0bits>
 800a910:	9b01      	ldr	r3, [sp, #4]
 800a912:	3020      	adds	r0, #32
 800a914:	2201      	movs	r2, #1
 800a916:	6163      	str	r3, [r4, #20]
 800a918:	e7e8      	b.n	800a8ec <__d2b+0x64>
 800a91a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a91e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a922:	6038      	str	r0, [r7, #0]
 800a924:	6918      	ldr	r0, [r3, #16]
 800a926:	f7ff fd29 	bl	800a37c <__hi0bits>
 800a92a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a92e:	e7e5      	b.n	800a8fc <__d2b+0x74>
 800a930:	0800bd64 	.word	0x0800bd64
 800a934:	0800bd86 	.word	0x0800bd86

0800a938 <__sread>:
 800a938:	b510      	push	{r4, lr}
 800a93a:	460c      	mov	r4, r1
 800a93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a940:	f000 f9be 	bl	800acc0 <_read_r>
 800a944:	2800      	cmp	r0, #0
 800a946:	bfab      	itete	ge
 800a948:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a94a:	89a3      	ldrhlt	r3, [r4, #12]
 800a94c:	181b      	addge	r3, r3, r0
 800a94e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a952:	bfac      	ite	ge
 800a954:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a956:	81a3      	strhlt	r3, [r4, #12]
 800a958:	bd10      	pop	{r4, pc}

0800a95a <__swrite>:
 800a95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a95e:	461f      	mov	r7, r3
 800a960:	898b      	ldrh	r3, [r1, #12]
 800a962:	4605      	mov	r5, r0
 800a964:	460c      	mov	r4, r1
 800a966:	05db      	lsls	r3, r3, #23
 800a968:	4616      	mov	r6, r2
 800a96a:	d505      	bpl.n	800a978 <__swrite+0x1e>
 800a96c:	2302      	movs	r3, #2
 800a96e:	2200      	movs	r2, #0
 800a970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a974:	f000 f992 	bl	800ac9c <_lseek_r>
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	4632      	mov	r2, r6
 800a97c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a980:	4628      	mov	r0, r5
 800a982:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a986:	81a3      	strh	r3, [r4, #12]
 800a988:	463b      	mov	r3, r7
 800a98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a98e:	f000 b9b9 	b.w	800ad04 <_write_r>

0800a992 <__sseek>:
 800a992:	b510      	push	{r4, lr}
 800a994:	460c      	mov	r4, r1
 800a996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a99a:	f000 f97f 	bl	800ac9c <_lseek_r>
 800a99e:	1c43      	adds	r3, r0, #1
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	bf15      	itete	ne
 800a9a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a9a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a9aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a9ae:	81a3      	strheq	r3, [r4, #12]
 800a9b0:	bf18      	it	ne
 800a9b2:	81a3      	strhne	r3, [r4, #12]
 800a9b4:	bd10      	pop	{r4, pc}

0800a9b6 <__sclose>:
 800a9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ba:	f000 b93d 	b.w	800ac38 <_close_r>
	...

0800a9c0 <fiprintf>:
 800a9c0:	b40e      	push	{r1, r2, r3}
 800a9c2:	b503      	push	{r0, r1, lr}
 800a9c4:	ab03      	add	r3, sp, #12
 800a9c6:	4601      	mov	r1, r0
 800a9c8:	4805      	ldr	r0, [pc, #20]	@ (800a9e0 <fiprintf+0x20>)
 800a9ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ce:	6800      	ldr	r0, [r0, #0]
 800a9d0:	9301      	str	r3, [sp, #4]
 800a9d2:	f7ff f9af 	bl	8009d34 <_vfiprintf_r>
 800a9d6:	b002      	add	sp, #8
 800a9d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9dc:	b003      	add	sp, #12
 800a9de:	4770      	bx	lr
 800a9e0:	200000b0 	.word	0x200000b0

0800a9e4 <__swbuf_r>:
 800a9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e6:	460e      	mov	r6, r1
 800a9e8:	4614      	mov	r4, r2
 800a9ea:	4605      	mov	r5, r0
 800a9ec:	b118      	cbz	r0, 800a9f6 <__swbuf_r+0x12>
 800a9ee:	6a03      	ldr	r3, [r0, #32]
 800a9f0:	b90b      	cbnz	r3, 800a9f6 <__swbuf_r+0x12>
 800a9f2:	f7fe fa03 	bl	8008dfc <__sinit>
 800a9f6:	69a3      	ldr	r3, [r4, #24]
 800a9f8:	60a3      	str	r3, [r4, #8]
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	071a      	lsls	r2, r3, #28
 800a9fe:	d501      	bpl.n	800aa04 <__swbuf_r+0x20>
 800aa00:	6923      	ldr	r3, [r4, #16]
 800aa02:	b943      	cbnz	r3, 800aa16 <__swbuf_r+0x32>
 800aa04:	4621      	mov	r1, r4
 800aa06:	4628      	mov	r0, r5
 800aa08:	f000 f82a 	bl	800aa60 <__swsetup_r>
 800aa0c:	b118      	cbz	r0, 800aa16 <__swbuf_r+0x32>
 800aa0e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800aa12:	4638      	mov	r0, r7
 800aa14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa16:	6823      	ldr	r3, [r4, #0]
 800aa18:	b2f6      	uxtb	r6, r6
 800aa1a:	6922      	ldr	r2, [r4, #16]
 800aa1c:	4637      	mov	r7, r6
 800aa1e:	1a98      	subs	r0, r3, r2
 800aa20:	6963      	ldr	r3, [r4, #20]
 800aa22:	4283      	cmp	r3, r0
 800aa24:	dc05      	bgt.n	800aa32 <__swbuf_r+0x4e>
 800aa26:	4621      	mov	r1, r4
 800aa28:	4628      	mov	r0, r5
 800aa2a:	f7ff fbc9 	bl	800a1c0 <_fflush_r>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d1ed      	bne.n	800aa0e <__swbuf_r+0x2a>
 800aa32:	68a3      	ldr	r3, [r4, #8]
 800aa34:	3b01      	subs	r3, #1
 800aa36:	60a3      	str	r3, [r4, #8]
 800aa38:	6823      	ldr	r3, [r4, #0]
 800aa3a:	1c5a      	adds	r2, r3, #1
 800aa3c:	6022      	str	r2, [r4, #0]
 800aa3e:	701e      	strb	r6, [r3, #0]
 800aa40:	1c43      	adds	r3, r0, #1
 800aa42:	6962      	ldr	r2, [r4, #20]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d004      	beq.n	800aa52 <__swbuf_r+0x6e>
 800aa48:	89a3      	ldrh	r3, [r4, #12]
 800aa4a:	07db      	lsls	r3, r3, #31
 800aa4c:	d5e1      	bpl.n	800aa12 <__swbuf_r+0x2e>
 800aa4e:	2e0a      	cmp	r6, #10
 800aa50:	d1df      	bne.n	800aa12 <__swbuf_r+0x2e>
 800aa52:	4621      	mov	r1, r4
 800aa54:	4628      	mov	r0, r5
 800aa56:	f7ff fbb3 	bl	800a1c0 <_fflush_r>
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	d0d9      	beq.n	800aa12 <__swbuf_r+0x2e>
 800aa5e:	e7d6      	b.n	800aa0e <__swbuf_r+0x2a>

0800aa60 <__swsetup_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	4b29      	ldr	r3, [pc, #164]	@ (800ab08 <__swsetup_r+0xa8>)
 800aa64:	4605      	mov	r5, r0
 800aa66:	460c      	mov	r4, r1
 800aa68:	6818      	ldr	r0, [r3, #0]
 800aa6a:	b118      	cbz	r0, 800aa74 <__swsetup_r+0x14>
 800aa6c:	6a03      	ldr	r3, [r0, #32]
 800aa6e:	b90b      	cbnz	r3, 800aa74 <__swsetup_r+0x14>
 800aa70:	f7fe f9c4 	bl	8008dfc <__sinit>
 800aa74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa78:	0719      	lsls	r1, r3, #28
 800aa7a:	d422      	bmi.n	800aac2 <__swsetup_r+0x62>
 800aa7c:	06da      	lsls	r2, r3, #27
 800aa7e:	d407      	bmi.n	800aa90 <__swsetup_r+0x30>
 800aa80:	2209      	movs	r2, #9
 800aa82:	602a      	str	r2, [r5, #0]
 800aa84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa8c:	81a3      	strh	r3, [r4, #12]
 800aa8e:	e033      	b.n	800aaf8 <__swsetup_r+0x98>
 800aa90:	0758      	lsls	r0, r3, #29
 800aa92:	d512      	bpl.n	800aaba <__swsetup_r+0x5a>
 800aa94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa96:	b141      	cbz	r1, 800aaaa <__swsetup_r+0x4a>
 800aa98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa9c:	4299      	cmp	r1, r3
 800aa9e:	d002      	beq.n	800aaa6 <__swsetup_r+0x46>
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	f000 f95d 	bl	800ad60 <_free_r>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	6363      	str	r3, [r4, #52]	@ 0x34
 800aaaa:	89a3      	ldrh	r3, [r4, #12]
 800aaac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aab0:	81a3      	strh	r3, [r4, #12]
 800aab2:	2300      	movs	r3, #0
 800aab4:	6063      	str	r3, [r4, #4]
 800aab6:	6923      	ldr	r3, [r4, #16]
 800aab8:	6023      	str	r3, [r4, #0]
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	f043 0308 	orr.w	r3, r3, #8
 800aac0:	81a3      	strh	r3, [r4, #12]
 800aac2:	6923      	ldr	r3, [r4, #16]
 800aac4:	b94b      	cbnz	r3, 800aada <__swsetup_r+0x7a>
 800aac6:	89a3      	ldrh	r3, [r4, #12]
 800aac8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aacc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aad0:	d003      	beq.n	800aada <__swsetup_r+0x7a>
 800aad2:	4621      	mov	r1, r4
 800aad4:	4628      	mov	r0, r5
 800aad6:	f000 f83e 	bl	800ab56 <__smakebuf_r>
 800aada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aade:	f013 0201 	ands.w	r2, r3, #1
 800aae2:	d00a      	beq.n	800aafa <__swsetup_r+0x9a>
 800aae4:	2200      	movs	r2, #0
 800aae6:	60a2      	str	r2, [r4, #8]
 800aae8:	6962      	ldr	r2, [r4, #20]
 800aaea:	4252      	negs	r2, r2
 800aaec:	61a2      	str	r2, [r4, #24]
 800aaee:	6922      	ldr	r2, [r4, #16]
 800aaf0:	b942      	cbnz	r2, 800ab04 <__swsetup_r+0xa4>
 800aaf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aaf6:	d1c5      	bne.n	800aa84 <__swsetup_r+0x24>
 800aaf8:	bd38      	pop	{r3, r4, r5, pc}
 800aafa:	0799      	lsls	r1, r3, #30
 800aafc:	bf58      	it	pl
 800aafe:	6962      	ldrpl	r2, [r4, #20]
 800ab00:	60a2      	str	r2, [r4, #8]
 800ab02:	e7f4      	b.n	800aaee <__swsetup_r+0x8e>
 800ab04:	2000      	movs	r0, #0
 800ab06:	e7f7      	b.n	800aaf8 <__swsetup_r+0x98>
 800ab08:	200000b0 	.word	0x200000b0

0800ab0c <__swhatbuf_r>:
 800ab0c:	b570      	push	{r4, r5, r6, lr}
 800ab0e:	460c      	mov	r4, r1
 800ab10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab14:	b096      	sub	sp, #88	@ 0x58
 800ab16:	4615      	mov	r5, r2
 800ab18:	2900      	cmp	r1, #0
 800ab1a:	461e      	mov	r6, r3
 800ab1c:	da0c      	bge.n	800ab38 <__swhatbuf_r+0x2c>
 800ab1e:	89a3      	ldrh	r3, [r4, #12]
 800ab20:	2100      	movs	r1, #0
 800ab22:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab26:	bf14      	ite	ne
 800ab28:	2340      	movne	r3, #64	@ 0x40
 800ab2a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ab2e:	2000      	movs	r0, #0
 800ab30:	6031      	str	r1, [r6, #0]
 800ab32:	602b      	str	r3, [r5, #0]
 800ab34:	b016      	add	sp, #88	@ 0x58
 800ab36:	bd70      	pop	{r4, r5, r6, pc}
 800ab38:	466a      	mov	r2, sp
 800ab3a:	f000 f88d 	bl	800ac58 <_fstat_r>
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	dbed      	blt.n	800ab1e <__swhatbuf_r+0x12>
 800ab42:	9901      	ldr	r1, [sp, #4]
 800ab44:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ab48:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ab4c:	4259      	negs	r1, r3
 800ab4e:	4159      	adcs	r1, r3
 800ab50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab54:	e7eb      	b.n	800ab2e <__swhatbuf_r+0x22>

0800ab56 <__smakebuf_r>:
 800ab56:	898b      	ldrh	r3, [r1, #12]
 800ab58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab5a:	079d      	lsls	r5, r3, #30
 800ab5c:	4606      	mov	r6, r0
 800ab5e:	460c      	mov	r4, r1
 800ab60:	d507      	bpl.n	800ab72 <__smakebuf_r+0x1c>
 800ab62:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ab66:	6023      	str	r3, [r4, #0]
 800ab68:	6123      	str	r3, [r4, #16]
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	6163      	str	r3, [r4, #20]
 800ab6e:	b003      	add	sp, #12
 800ab70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab72:	ab01      	add	r3, sp, #4
 800ab74:	466a      	mov	r2, sp
 800ab76:	f7ff ffc9 	bl	800ab0c <__swhatbuf_r>
 800ab7a:	9f00      	ldr	r7, [sp, #0]
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	4630      	mov	r0, r6
 800ab80:	4639      	mov	r1, r7
 800ab82:	f7ff fa19 	bl	8009fb8 <_malloc_r>
 800ab86:	b948      	cbnz	r0, 800ab9c <__smakebuf_r+0x46>
 800ab88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab8c:	059a      	lsls	r2, r3, #22
 800ab8e:	d4ee      	bmi.n	800ab6e <__smakebuf_r+0x18>
 800ab90:	f023 0303 	bic.w	r3, r3, #3
 800ab94:	f043 0302 	orr.w	r3, r3, #2
 800ab98:	81a3      	strh	r3, [r4, #12]
 800ab9a:	e7e2      	b.n	800ab62 <__smakebuf_r+0xc>
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	6020      	str	r0, [r4, #0]
 800aba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aba4:	81a3      	strh	r3, [r4, #12]
 800aba6:	9b01      	ldr	r3, [sp, #4]
 800aba8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800abac:	b15b      	cbz	r3, 800abc6 <__smakebuf_r+0x70>
 800abae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abb2:	4630      	mov	r0, r6
 800abb4:	f000 f862 	bl	800ac7c <_isatty_r>
 800abb8:	b128      	cbz	r0, 800abc6 <__smakebuf_r+0x70>
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	f023 0303 	bic.w	r3, r3, #3
 800abc0:	f043 0301 	orr.w	r3, r3, #1
 800abc4:	81a3      	strh	r3, [r4, #12]
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	431d      	orrs	r5, r3
 800abca:	81a5      	strh	r5, [r4, #12]
 800abcc:	e7cf      	b.n	800ab6e <__smakebuf_r+0x18>

0800abce <_putc_r>:
 800abce:	b570      	push	{r4, r5, r6, lr}
 800abd0:	460d      	mov	r5, r1
 800abd2:	4614      	mov	r4, r2
 800abd4:	4606      	mov	r6, r0
 800abd6:	b118      	cbz	r0, 800abe0 <_putc_r+0x12>
 800abd8:	6a03      	ldr	r3, [r0, #32]
 800abda:	b90b      	cbnz	r3, 800abe0 <_putc_r+0x12>
 800abdc:	f7fe f90e 	bl	8008dfc <__sinit>
 800abe0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abe2:	07d8      	lsls	r0, r3, #31
 800abe4:	d405      	bmi.n	800abf2 <_putc_r+0x24>
 800abe6:	89a3      	ldrh	r3, [r4, #12]
 800abe8:	0599      	lsls	r1, r3, #22
 800abea:	d402      	bmi.n	800abf2 <_putc_r+0x24>
 800abec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abee:	f7fe f9ea 	bl	8008fc6 <__retarget_lock_acquire_recursive>
 800abf2:	68a3      	ldr	r3, [r4, #8]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	60a3      	str	r3, [r4, #8]
 800abfa:	da05      	bge.n	800ac08 <_putc_r+0x3a>
 800abfc:	69a2      	ldr	r2, [r4, #24]
 800abfe:	4293      	cmp	r3, r2
 800ac00:	db12      	blt.n	800ac28 <_putc_r+0x5a>
 800ac02:	b2eb      	uxtb	r3, r5
 800ac04:	2b0a      	cmp	r3, #10
 800ac06:	d00f      	beq.n	800ac28 <_putc_r+0x5a>
 800ac08:	6823      	ldr	r3, [r4, #0]
 800ac0a:	1c5a      	adds	r2, r3, #1
 800ac0c:	6022      	str	r2, [r4, #0]
 800ac0e:	701d      	strb	r5, [r3, #0]
 800ac10:	b2ed      	uxtb	r5, r5
 800ac12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac14:	07da      	lsls	r2, r3, #31
 800ac16:	d405      	bmi.n	800ac24 <_putc_r+0x56>
 800ac18:	89a3      	ldrh	r3, [r4, #12]
 800ac1a:	059b      	lsls	r3, r3, #22
 800ac1c:	d402      	bmi.n	800ac24 <_putc_r+0x56>
 800ac1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac20:	f7fe f9d2 	bl	8008fc8 <__retarget_lock_release_recursive>
 800ac24:	4628      	mov	r0, r5
 800ac26:	bd70      	pop	{r4, r5, r6, pc}
 800ac28:	4629      	mov	r1, r5
 800ac2a:	4622      	mov	r2, r4
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	f7ff fed9 	bl	800a9e4 <__swbuf_r>
 800ac32:	4605      	mov	r5, r0
 800ac34:	e7ed      	b.n	800ac12 <_putc_r+0x44>
	...

0800ac38 <_close_r>:
 800ac38:	b538      	push	{r3, r4, r5, lr}
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	4d05      	ldr	r5, [pc, #20]	@ (800ac54 <_close_r+0x1c>)
 800ac3e:	4604      	mov	r4, r0
 800ac40:	4608      	mov	r0, r1
 800ac42:	602b      	str	r3, [r5, #0]
 800ac44:	f000 fa36 	bl	800b0b4 <_close>
 800ac48:	1c43      	adds	r3, r0, #1
 800ac4a:	d102      	bne.n	800ac52 <_close_r+0x1a>
 800ac4c:	682b      	ldr	r3, [r5, #0]
 800ac4e:	b103      	cbz	r3, 800ac52 <_close_r+0x1a>
 800ac50:	6023      	str	r3, [r4, #0]
 800ac52:	bd38      	pop	{r3, r4, r5, pc}
 800ac54:	20001024 	.word	0x20001024

0800ac58 <_fstat_r>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	4d06      	ldr	r5, [pc, #24]	@ (800ac78 <_fstat_r+0x20>)
 800ac5e:	4604      	mov	r4, r0
 800ac60:	4608      	mov	r0, r1
 800ac62:	4611      	mov	r1, r2
 800ac64:	602b      	str	r3, [r5, #0]
 800ac66:	f000 fa6a 	bl	800b13e <_fstat>
 800ac6a:	1c43      	adds	r3, r0, #1
 800ac6c:	d102      	bne.n	800ac74 <_fstat_r+0x1c>
 800ac6e:	682b      	ldr	r3, [r5, #0]
 800ac70:	b103      	cbz	r3, 800ac74 <_fstat_r+0x1c>
 800ac72:	6023      	str	r3, [r4, #0]
 800ac74:	bd38      	pop	{r3, r4, r5, pc}
 800ac76:	bf00      	nop
 800ac78:	20001024 	.word	0x20001024

0800ac7c <_isatty_r>:
 800ac7c:	b538      	push	{r3, r4, r5, lr}
 800ac7e:	2300      	movs	r3, #0
 800ac80:	4d05      	ldr	r5, [pc, #20]	@ (800ac98 <_isatty_r+0x1c>)
 800ac82:	4604      	mov	r4, r0
 800ac84:	4608      	mov	r0, r1
 800ac86:	602b      	str	r3, [r5, #0]
 800ac88:	f000 fbc8 	bl	800b41c <_isatty>
 800ac8c:	1c43      	adds	r3, r0, #1
 800ac8e:	d102      	bne.n	800ac96 <_isatty_r+0x1a>
 800ac90:	682b      	ldr	r3, [r5, #0]
 800ac92:	b103      	cbz	r3, 800ac96 <_isatty_r+0x1a>
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	bd38      	pop	{r3, r4, r5, pc}
 800ac98:	20001024 	.word	0x20001024

0800ac9c <_lseek_r>:
 800ac9c:	b538      	push	{r3, r4, r5, lr}
 800ac9e:	4604      	mov	r4, r0
 800aca0:	4d06      	ldr	r5, [pc, #24]	@ (800acbc <_lseek_r+0x20>)
 800aca2:	4608      	mov	r0, r1
 800aca4:	4611      	mov	r1, r2
 800aca6:	2200      	movs	r2, #0
 800aca8:	602a      	str	r2, [r5, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	f000 f9c3 	bl	800b036 <_lseek>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d102      	bne.n	800acba <_lseek_r+0x1e>
 800acb4:	682b      	ldr	r3, [r5, #0]
 800acb6:	b103      	cbz	r3, 800acba <_lseek_r+0x1e>
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	bd38      	pop	{r3, r4, r5, pc}
 800acbc:	20001024 	.word	0x20001024

0800acc0 <_read_r>:
 800acc0:	b538      	push	{r3, r4, r5, lr}
 800acc2:	4604      	mov	r4, r0
 800acc4:	4d06      	ldr	r5, [pc, #24]	@ (800ace0 <_read_r+0x20>)
 800acc6:	4608      	mov	r0, r1
 800acc8:	4611      	mov	r1, r2
 800acca:	2200      	movs	r2, #0
 800accc:	602a      	str	r2, [r5, #0]
 800acce:	461a      	mov	r2, r3
 800acd0:	f000 f95b 	bl	800af8a <_read>
 800acd4:	1c43      	adds	r3, r0, #1
 800acd6:	d102      	bne.n	800acde <_read_r+0x1e>
 800acd8:	682b      	ldr	r3, [r5, #0]
 800acda:	b103      	cbz	r3, 800acde <_read_r+0x1e>
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	bd38      	pop	{r3, r4, r5, pc}
 800ace0:	20001024 	.word	0x20001024

0800ace4 <_sbrk_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	2300      	movs	r3, #0
 800ace8:	4d05      	ldr	r5, [pc, #20]	@ (800ad00 <_sbrk_r+0x1c>)
 800acea:	4604      	mov	r4, r0
 800acec:	4608      	mov	r0, r1
 800acee:	602b      	str	r3, [r5, #0]
 800acf0:	f7fd fb68 	bl	80083c4 <_sbrk>
 800acf4:	1c43      	adds	r3, r0, #1
 800acf6:	d102      	bne.n	800acfe <_sbrk_r+0x1a>
 800acf8:	682b      	ldr	r3, [r5, #0]
 800acfa:	b103      	cbz	r3, 800acfe <_sbrk_r+0x1a>
 800acfc:	6023      	str	r3, [r4, #0]
 800acfe:	bd38      	pop	{r3, r4, r5, pc}
 800ad00:	20001024 	.word	0x20001024

0800ad04 <_write_r>:
 800ad04:	b538      	push	{r3, r4, r5, lr}
 800ad06:	4604      	mov	r4, r0
 800ad08:	4d06      	ldr	r5, [pc, #24]	@ (800ad24 <_write_r+0x20>)
 800ad0a:	4608      	mov	r0, r1
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	2200      	movs	r2, #0
 800ad10:	602a      	str	r2, [r5, #0]
 800ad12:	461a      	mov	r2, r3
 800ad14:	f000 f9a1 	bl	800b05a <_write>
 800ad18:	1c43      	adds	r3, r0, #1
 800ad1a:	d102      	bne.n	800ad22 <_write_r+0x1e>
 800ad1c:	682b      	ldr	r3, [r5, #0]
 800ad1e:	b103      	cbz	r3, 800ad22 <_write_r+0x1e>
 800ad20:	6023      	str	r3, [r4, #0]
 800ad22:	bd38      	pop	{r3, r4, r5, pc}
 800ad24:	20001024 	.word	0x20001024

0800ad28 <abort>:
 800ad28:	2006      	movs	r0, #6
 800ad2a:	b508      	push	{r3, lr}
 800ad2c:	f000 f8aa 	bl	800ae84 <raise>
 800ad30:	2001      	movs	r0, #1
 800ad32:	f000 f8c3 	bl	800aebc <_exit>

0800ad36 <_calloc_r>:
 800ad36:	b570      	push	{r4, r5, r6, lr}
 800ad38:	fba1 5402 	umull	r5, r4, r1, r2
 800ad3c:	b93c      	cbnz	r4, 800ad4e <_calloc_r+0x18>
 800ad3e:	4629      	mov	r1, r5
 800ad40:	f7ff f93a 	bl	8009fb8 <_malloc_r>
 800ad44:	4606      	mov	r6, r0
 800ad46:	b928      	cbnz	r0, 800ad54 <_calloc_r+0x1e>
 800ad48:	2600      	movs	r6, #0
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	bd70      	pop	{r4, r5, r6, pc}
 800ad4e:	220c      	movs	r2, #12
 800ad50:	6002      	str	r2, [r0, #0]
 800ad52:	e7f9      	b.n	800ad48 <_calloc_r+0x12>
 800ad54:	462a      	mov	r2, r5
 800ad56:	4621      	mov	r1, r4
 800ad58:	f7fe f8fe 	bl	8008f58 <memset>
 800ad5c:	e7f5      	b.n	800ad4a <_calloc_r+0x14>
	...

0800ad60 <_free_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4605      	mov	r5, r0
 800ad64:	2900      	cmp	r1, #0
 800ad66:	d041      	beq.n	800adec <_free_r+0x8c>
 800ad68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad6c:	1f0c      	subs	r4, r1, #4
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	bfb8      	it	lt
 800ad72:	18e4      	addlt	r4, r4, r3
 800ad74:	f7ff fa4c 	bl	800a210 <__malloc_lock>
 800ad78:	4a1d      	ldr	r2, [pc, #116]	@ (800adf0 <_free_r+0x90>)
 800ad7a:	6813      	ldr	r3, [r2, #0]
 800ad7c:	b933      	cbnz	r3, 800ad8c <_free_r+0x2c>
 800ad7e:	6063      	str	r3, [r4, #4]
 800ad80:	6014      	str	r4, [r2, #0]
 800ad82:	4628      	mov	r0, r5
 800ad84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad88:	f7ff ba48 	b.w	800a21c <__malloc_unlock>
 800ad8c:	42a3      	cmp	r3, r4
 800ad8e:	d908      	bls.n	800ada2 <_free_r+0x42>
 800ad90:	6820      	ldr	r0, [r4, #0]
 800ad92:	1821      	adds	r1, r4, r0
 800ad94:	428b      	cmp	r3, r1
 800ad96:	bf01      	itttt	eq
 800ad98:	6819      	ldreq	r1, [r3, #0]
 800ad9a:	685b      	ldreq	r3, [r3, #4]
 800ad9c:	1809      	addeq	r1, r1, r0
 800ad9e:	6021      	streq	r1, [r4, #0]
 800ada0:	e7ed      	b.n	800ad7e <_free_r+0x1e>
 800ada2:	461a      	mov	r2, r3
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	b10b      	cbz	r3, 800adac <_free_r+0x4c>
 800ada8:	42a3      	cmp	r3, r4
 800adaa:	d9fa      	bls.n	800ada2 <_free_r+0x42>
 800adac:	6811      	ldr	r1, [r2, #0]
 800adae:	1850      	adds	r0, r2, r1
 800adb0:	42a0      	cmp	r0, r4
 800adb2:	d10b      	bne.n	800adcc <_free_r+0x6c>
 800adb4:	6820      	ldr	r0, [r4, #0]
 800adb6:	4401      	add	r1, r0
 800adb8:	1850      	adds	r0, r2, r1
 800adba:	6011      	str	r1, [r2, #0]
 800adbc:	4283      	cmp	r3, r0
 800adbe:	d1e0      	bne.n	800ad82 <_free_r+0x22>
 800adc0:	6818      	ldr	r0, [r3, #0]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	4408      	add	r0, r1
 800adc6:	6053      	str	r3, [r2, #4]
 800adc8:	6010      	str	r0, [r2, #0]
 800adca:	e7da      	b.n	800ad82 <_free_r+0x22>
 800adcc:	d902      	bls.n	800add4 <_free_r+0x74>
 800adce:	230c      	movs	r3, #12
 800add0:	602b      	str	r3, [r5, #0]
 800add2:	e7d6      	b.n	800ad82 <_free_r+0x22>
 800add4:	6820      	ldr	r0, [r4, #0]
 800add6:	1821      	adds	r1, r4, r0
 800add8:	428b      	cmp	r3, r1
 800adda:	bf02      	ittt	eq
 800addc:	6819      	ldreq	r1, [r3, #0]
 800adde:	685b      	ldreq	r3, [r3, #4]
 800ade0:	1809      	addeq	r1, r1, r0
 800ade2:	6063      	str	r3, [r4, #4]
 800ade4:	bf08      	it	eq
 800ade6:	6021      	streq	r1, [r4, #0]
 800ade8:	6054      	str	r4, [r2, #4]
 800adea:	e7ca      	b.n	800ad82 <_free_r+0x22>
 800adec:	bd38      	pop	{r3, r4, r5, pc}
 800adee:	bf00      	nop
 800adf0:	20001020 	.word	0x20001020

0800adf4 <__ascii_mbtowc>:
 800adf4:	b082      	sub	sp, #8
 800adf6:	b901      	cbnz	r1, 800adfa <__ascii_mbtowc+0x6>
 800adf8:	a901      	add	r1, sp, #4
 800adfa:	b142      	cbz	r2, 800ae0e <__ascii_mbtowc+0x1a>
 800adfc:	b14b      	cbz	r3, 800ae12 <__ascii_mbtowc+0x1e>
 800adfe:	7813      	ldrb	r3, [r2, #0]
 800ae00:	600b      	str	r3, [r1, #0]
 800ae02:	7812      	ldrb	r2, [r2, #0]
 800ae04:	1e10      	subs	r0, r2, #0
 800ae06:	bf18      	it	ne
 800ae08:	2001      	movne	r0, #1
 800ae0a:	b002      	add	sp, #8
 800ae0c:	4770      	bx	lr
 800ae0e:	4610      	mov	r0, r2
 800ae10:	e7fb      	b.n	800ae0a <__ascii_mbtowc+0x16>
 800ae12:	f06f 0001 	mvn.w	r0, #1
 800ae16:	e7f8      	b.n	800ae0a <__ascii_mbtowc+0x16>

0800ae18 <__ascii_wctomb>:
 800ae18:	4603      	mov	r3, r0
 800ae1a:	4608      	mov	r0, r1
 800ae1c:	b141      	cbz	r1, 800ae30 <__ascii_wctomb+0x18>
 800ae1e:	2aff      	cmp	r2, #255	@ 0xff
 800ae20:	d904      	bls.n	800ae2c <__ascii_wctomb+0x14>
 800ae22:	228a      	movs	r2, #138	@ 0x8a
 800ae24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae28:	601a      	str	r2, [r3, #0]
 800ae2a:	4770      	bx	lr
 800ae2c:	2001      	movs	r0, #1
 800ae2e:	700a      	strb	r2, [r1, #0]
 800ae30:	4770      	bx	lr

0800ae32 <_raise_r>:
 800ae32:	291f      	cmp	r1, #31
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	4605      	mov	r5, r0
 800ae38:	460c      	mov	r4, r1
 800ae3a:	d904      	bls.n	800ae46 <_raise_r+0x14>
 800ae3c:	2316      	movs	r3, #22
 800ae3e:	6003      	str	r3, [r0, #0]
 800ae40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae44:	bd38      	pop	{r3, r4, r5, pc}
 800ae46:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae48:	b112      	cbz	r2, 800ae50 <_raise_r+0x1e>
 800ae4a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae4e:	b94b      	cbnz	r3, 800ae64 <_raise_r+0x32>
 800ae50:	4628      	mov	r0, r5
 800ae52:	f000 f831 	bl	800aeb8 <_getpid_r>
 800ae56:	4622      	mov	r2, r4
 800ae58:	4601      	mov	r1, r0
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae60:	f000 b818 	b.w	800ae94 <_kill_r>
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d00a      	beq.n	800ae7e <_raise_r+0x4c>
 800ae68:	1c59      	adds	r1, r3, #1
 800ae6a:	d103      	bne.n	800ae74 <_raise_r+0x42>
 800ae6c:	2316      	movs	r3, #22
 800ae6e:	6003      	str	r3, [r0, #0]
 800ae70:	2001      	movs	r0, #1
 800ae72:	e7e7      	b.n	800ae44 <_raise_r+0x12>
 800ae74:	2100      	movs	r1, #0
 800ae76:	4620      	mov	r0, r4
 800ae78:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae7c:	4798      	blx	r3
 800ae7e:	2000      	movs	r0, #0
 800ae80:	e7e0      	b.n	800ae44 <_raise_r+0x12>
	...

0800ae84 <raise>:
 800ae84:	4b02      	ldr	r3, [pc, #8]	@ (800ae90 <raise+0xc>)
 800ae86:	4601      	mov	r1, r0
 800ae88:	6818      	ldr	r0, [r3, #0]
 800ae8a:	f7ff bfd2 	b.w	800ae32 <_raise_r>
 800ae8e:	bf00      	nop
 800ae90:	200000b0 	.word	0x200000b0

0800ae94 <_kill_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	2300      	movs	r3, #0
 800ae98:	4d06      	ldr	r5, [pc, #24]	@ (800aeb4 <_kill_r+0x20>)
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	4608      	mov	r0, r1
 800ae9e:	4611      	mov	r1, r2
 800aea0:	602b      	str	r3, [r5, #0]
 800aea2:	f000 f829 	bl	800aef8 <_kill>
 800aea6:	1c43      	adds	r3, r0, #1
 800aea8:	d102      	bne.n	800aeb0 <_kill_r+0x1c>
 800aeaa:	682b      	ldr	r3, [r5, #0]
 800aeac:	b103      	cbz	r3, 800aeb0 <_kill_r+0x1c>
 800aeae:	6023      	str	r3, [r4, #0]
 800aeb0:	bd38      	pop	{r3, r4, r5, pc}
 800aeb2:	bf00      	nop
 800aeb4:	20001024 	.word	0x20001024

0800aeb8 <_getpid_r>:
 800aeb8:	f000 b91e 	b.w	800b0f8 <_getpid>

0800aebc <_exit>:
 800aebc:	4601      	mov	r1, r0
 800aebe:	4a03      	ldr	r2, [pc, #12]	@ (800aecc <_exit+0x10>)
 800aec0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aec4:	b508      	push	{r3, lr}
 800aec6:	f000 f803 	bl	800aed0 <_kill_shared>
 800aeca:	bf00      	nop
 800aecc:	00020026 	.word	0x00020026

0800aed0 <_kill_shared>:
 800aed0:	b507      	push	{r0, r1, r2, lr}
 800aed2:	e9cd 2100 	strd	r2, r1, [sp]
 800aed6:	f000 fa29 	bl	800b32c <_has_ext_exit_extended>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	bf0c      	ite	eq
 800aede:	2418      	moveq	r4, #24
 800aee0:	2420      	movne	r4, #32
 800aee2:	f000 fa23 	bl	800b32c <_has_ext_exit_extended>
 800aee6:	b120      	cbz	r0, 800aef2 <_kill_shared+0x22>
 800aee8:	466d      	mov	r5, sp
 800aeea:	4620      	mov	r0, r4
 800aeec:	4629      	mov	r1, r5
 800aeee:	beab      	bkpt	0x00ab
 800aef0:	4604      	mov	r4, r0
 800aef2:	9d00      	ldr	r5, [sp, #0]
 800aef4:	e7f9      	b.n	800aeea <_kill_shared+0x1a>
	...

0800aef8 <_kill>:
 800aef8:	2906      	cmp	r1, #6
 800aefa:	b508      	push	{r3, lr}
 800aefc:	bf0c      	ite	eq
 800aefe:	4a02      	ldreq	r2, [pc, #8]	@ (800af08 <_kill+0x10>)
 800af00:	4a02      	ldrne	r2, [pc, #8]	@ (800af0c <_kill+0x14>)
 800af02:	f7ff ffe5 	bl	800aed0 <_kill_shared>
 800af06:	bf00      	nop
 800af08:	00020023 	.word	0x00020023
 800af0c:	00020026 	.word	0x00020026

0800af10 <findslot>:
 800af10:	4b0a      	ldr	r3, [pc, #40]	@ (800af3c <findslot+0x2c>)
 800af12:	b510      	push	{r4, lr}
 800af14:	4604      	mov	r4, r0
 800af16:	6818      	ldr	r0, [r3, #0]
 800af18:	b118      	cbz	r0, 800af22 <findslot+0x12>
 800af1a:	6a03      	ldr	r3, [r0, #32]
 800af1c:	b90b      	cbnz	r3, 800af22 <findslot+0x12>
 800af1e:	f7fd ff6d 	bl	8008dfc <__sinit>
 800af22:	2c13      	cmp	r4, #19
 800af24:	d807      	bhi.n	800af36 <findslot+0x26>
 800af26:	4806      	ldr	r0, [pc, #24]	@ (800af40 <findslot+0x30>)
 800af28:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800af2c:	3201      	adds	r2, #1
 800af2e:	d002      	beq.n	800af36 <findslot+0x26>
 800af30:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800af34:	bd10      	pop	{r4, pc}
 800af36:	2000      	movs	r0, #0
 800af38:	e7fc      	b.n	800af34 <findslot+0x24>
 800af3a:	bf00      	nop
 800af3c:	200000b0 	.word	0x200000b0
 800af40:	20001034 	.word	0x20001034

0800af44 <error>:
 800af44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af46:	4604      	mov	r4, r0
 800af48:	2613      	movs	r6, #19
 800af4a:	f7fe f811 	bl	8008f70 <__errno>
 800af4e:	2700      	movs	r7, #0
 800af50:	4605      	mov	r5, r0
 800af52:	4630      	mov	r0, r6
 800af54:	4639      	mov	r1, r7
 800af56:	beab      	bkpt	0x00ab
 800af58:	4606      	mov	r6, r0
 800af5a:	4620      	mov	r0, r4
 800af5c:	602e      	str	r6, [r5, #0]
 800af5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af60 <checkerror>:
 800af60:	1c43      	adds	r3, r0, #1
 800af62:	d101      	bne.n	800af68 <checkerror+0x8>
 800af64:	f7ff bfee 	b.w	800af44 <error>
 800af68:	4770      	bx	lr

0800af6a <_swiread>:
 800af6a:	b530      	push	{r4, r5, lr}
 800af6c:	b085      	sub	sp, #20
 800af6e:	2406      	movs	r4, #6
 800af70:	ad01      	add	r5, sp, #4
 800af72:	9203      	str	r2, [sp, #12]
 800af74:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800af78:	4620      	mov	r0, r4
 800af7a:	4629      	mov	r1, r5
 800af7c:	beab      	bkpt	0x00ab
 800af7e:	4604      	mov	r4, r0
 800af80:	4620      	mov	r0, r4
 800af82:	f7ff ffed 	bl	800af60 <checkerror>
 800af86:	b005      	add	sp, #20
 800af88:	bd30      	pop	{r4, r5, pc}

0800af8a <_read>:
 800af8a:	b570      	push	{r4, r5, r6, lr}
 800af8c:	460e      	mov	r6, r1
 800af8e:	4614      	mov	r4, r2
 800af90:	f7ff ffbe 	bl	800af10 <findslot>
 800af94:	4605      	mov	r5, r0
 800af96:	b930      	cbnz	r0, 800afa6 <_read+0x1c>
 800af98:	f7fd ffea 	bl	8008f70 <__errno>
 800af9c:	2309      	movs	r3, #9
 800af9e:	6003      	str	r3, [r0, #0]
 800afa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800afa4:	bd70      	pop	{r4, r5, r6, pc}
 800afa6:	4622      	mov	r2, r4
 800afa8:	4631      	mov	r1, r6
 800afaa:	6800      	ldr	r0, [r0, #0]
 800afac:	f7ff ffdd 	bl	800af6a <_swiread>
 800afb0:	1c43      	adds	r3, r0, #1
 800afb2:	d0f5      	beq.n	800afa0 <_read+0x16>
 800afb4:	686b      	ldr	r3, [r5, #4]
 800afb6:	1a20      	subs	r0, r4, r0
 800afb8:	4403      	add	r3, r0
 800afba:	606b      	str	r3, [r5, #4]
 800afbc:	e7f2      	b.n	800afa4 <_read+0x1a>

0800afbe <_swilseek>:
 800afbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afc0:	460c      	mov	r4, r1
 800afc2:	4616      	mov	r6, r2
 800afc4:	f7ff ffa4 	bl	800af10 <findslot>
 800afc8:	4605      	mov	r5, r0
 800afca:	b940      	cbnz	r0, 800afde <_swilseek+0x20>
 800afcc:	f7fd ffd0 	bl	8008f70 <__errno>
 800afd0:	2309      	movs	r3, #9
 800afd2:	6003      	str	r3, [r0, #0]
 800afd4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800afd8:	4620      	mov	r0, r4
 800afda:	b003      	add	sp, #12
 800afdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afde:	2e02      	cmp	r6, #2
 800afe0:	d903      	bls.n	800afea <_swilseek+0x2c>
 800afe2:	f7fd ffc5 	bl	8008f70 <__errno>
 800afe6:	2316      	movs	r3, #22
 800afe8:	e7f3      	b.n	800afd2 <_swilseek+0x14>
 800afea:	2e01      	cmp	r6, #1
 800afec:	d112      	bne.n	800b014 <_swilseek+0x56>
 800afee:	6843      	ldr	r3, [r0, #4]
 800aff0:	18e4      	adds	r4, r4, r3
 800aff2:	d4f6      	bmi.n	800afe2 <_swilseek+0x24>
 800aff4:	682b      	ldr	r3, [r5, #0]
 800aff6:	260a      	movs	r6, #10
 800aff8:	466f      	mov	r7, sp
 800affa:	e9cd 3400 	strd	r3, r4, [sp]
 800affe:	4630      	mov	r0, r6
 800b000:	4639      	mov	r1, r7
 800b002:	beab      	bkpt	0x00ab
 800b004:	4606      	mov	r6, r0
 800b006:	4630      	mov	r0, r6
 800b008:	f7ff ffaa 	bl	800af60 <checkerror>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	dbe1      	blt.n	800afd4 <_swilseek+0x16>
 800b010:	606c      	str	r4, [r5, #4]
 800b012:	e7e1      	b.n	800afd8 <_swilseek+0x1a>
 800b014:	2e02      	cmp	r6, #2
 800b016:	6803      	ldr	r3, [r0, #0]
 800b018:	d1ec      	bne.n	800aff4 <_swilseek+0x36>
 800b01a:	260c      	movs	r6, #12
 800b01c:	466f      	mov	r7, sp
 800b01e:	9300      	str	r3, [sp, #0]
 800b020:	4630      	mov	r0, r6
 800b022:	4639      	mov	r1, r7
 800b024:	beab      	bkpt	0x00ab
 800b026:	4606      	mov	r6, r0
 800b028:	4630      	mov	r0, r6
 800b02a:	f7ff ff99 	bl	800af60 <checkerror>
 800b02e:	1c43      	adds	r3, r0, #1
 800b030:	d0d0      	beq.n	800afd4 <_swilseek+0x16>
 800b032:	4404      	add	r4, r0
 800b034:	e7de      	b.n	800aff4 <_swilseek+0x36>

0800b036 <_lseek>:
 800b036:	f7ff bfc2 	b.w	800afbe <_swilseek>

0800b03a <_swiwrite>:
 800b03a:	b530      	push	{r4, r5, lr}
 800b03c:	b085      	sub	sp, #20
 800b03e:	2405      	movs	r4, #5
 800b040:	ad01      	add	r5, sp, #4
 800b042:	9203      	str	r2, [sp, #12]
 800b044:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800b048:	4620      	mov	r0, r4
 800b04a:	4629      	mov	r1, r5
 800b04c:	beab      	bkpt	0x00ab
 800b04e:	4604      	mov	r4, r0
 800b050:	4620      	mov	r0, r4
 800b052:	f7ff ff85 	bl	800af60 <checkerror>
 800b056:	b005      	add	sp, #20
 800b058:	bd30      	pop	{r4, r5, pc}

0800b05a <_write>:
 800b05a:	b570      	push	{r4, r5, r6, lr}
 800b05c:	460e      	mov	r6, r1
 800b05e:	4615      	mov	r5, r2
 800b060:	f7ff ff56 	bl	800af10 <findslot>
 800b064:	4604      	mov	r4, r0
 800b066:	b930      	cbnz	r0, 800b076 <_write+0x1c>
 800b068:	f7fd ff82 	bl	8008f70 <__errno>
 800b06c:	2309      	movs	r3, #9
 800b06e:	6003      	str	r3, [r0, #0]
 800b070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b074:	bd70      	pop	{r4, r5, r6, pc}
 800b076:	462a      	mov	r2, r5
 800b078:	4631      	mov	r1, r6
 800b07a:	6800      	ldr	r0, [r0, #0]
 800b07c:	f7ff ffdd 	bl	800b03a <_swiwrite>
 800b080:	1e03      	subs	r3, r0, #0
 800b082:	dbf5      	blt.n	800b070 <_write+0x16>
 800b084:	6862      	ldr	r2, [r4, #4]
 800b086:	1ae8      	subs	r0, r5, r3
 800b088:	42ab      	cmp	r3, r5
 800b08a:	4402      	add	r2, r0
 800b08c:	6062      	str	r2, [r4, #4]
 800b08e:	d1f1      	bne.n	800b074 <_write+0x1a>
 800b090:	2000      	movs	r0, #0
 800b092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b096:	f7ff bf55 	b.w	800af44 <error>

0800b09a <_swiclose>:
 800b09a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b09c:	2402      	movs	r4, #2
 800b09e:	ad01      	add	r5, sp, #4
 800b0a0:	9001      	str	r0, [sp, #4]
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	beab      	bkpt	0x00ab
 800b0a8:	4604      	mov	r4, r0
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f7ff ff58 	bl	800af60 <checkerror>
 800b0b0:	b003      	add	sp, #12
 800b0b2:	bd30      	pop	{r4, r5, pc}

0800b0b4 <_close>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	4605      	mov	r5, r0
 800b0b8:	f7ff ff2a 	bl	800af10 <findslot>
 800b0bc:	4604      	mov	r4, r0
 800b0be:	b930      	cbnz	r0, 800b0ce <_close+0x1a>
 800b0c0:	f7fd ff56 	bl	8008f70 <__errno>
 800b0c4:	2309      	movs	r3, #9
 800b0c6:	6003      	str	r3, [r0, #0]
 800b0c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0cc:	bd38      	pop	{r3, r4, r5, pc}
 800b0ce:	3d01      	subs	r5, #1
 800b0d0:	2d01      	cmp	r5, #1
 800b0d2:	d809      	bhi.n	800b0e8 <_close+0x34>
 800b0d4:	4b07      	ldr	r3, [pc, #28]	@ (800b0f4 <_close+0x40>)
 800b0d6:	689a      	ldr	r2, [r3, #8]
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d104      	bne.n	800b0e8 <_close+0x34>
 800b0de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	6023      	str	r3, [r4, #0]
 800b0e6:	e7f1      	b.n	800b0cc <_close+0x18>
 800b0e8:	6820      	ldr	r0, [r4, #0]
 800b0ea:	f7ff ffd6 	bl	800b09a <_swiclose>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	d0f5      	beq.n	800b0de <_close+0x2a>
 800b0f2:	e7eb      	b.n	800b0cc <_close+0x18>
 800b0f4:	20001034 	.word	0x20001034

0800b0f8 <_getpid>:
 800b0f8:	2001      	movs	r0, #1
 800b0fa:	4770      	bx	lr

0800b0fc <_swistat>:
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	460c      	mov	r4, r1
 800b100:	f7ff ff06 	bl	800af10 <findslot>
 800b104:	4605      	mov	r5, r0
 800b106:	b930      	cbnz	r0, 800b116 <_swistat+0x1a>
 800b108:	f7fd ff32 	bl	8008f70 <__errno>
 800b10c:	2309      	movs	r3, #9
 800b10e:	6003      	str	r3, [r0, #0]
 800b110:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b114:	bd70      	pop	{r4, r5, r6, pc}
 800b116:	6863      	ldr	r3, [r4, #4]
 800b118:	260c      	movs	r6, #12
 800b11a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b11e:	6063      	str	r3, [r4, #4]
 800b120:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b124:	64a3      	str	r3, [r4, #72]	@ 0x48
 800b126:	4630      	mov	r0, r6
 800b128:	4629      	mov	r1, r5
 800b12a:	beab      	bkpt	0x00ab
 800b12c:	4605      	mov	r5, r0
 800b12e:	4628      	mov	r0, r5
 800b130:	f7ff ff16 	bl	800af60 <checkerror>
 800b134:	1c43      	adds	r3, r0, #1
 800b136:	d0eb      	beq.n	800b110 <_swistat+0x14>
 800b138:	6120      	str	r0, [r4, #16]
 800b13a:	2000      	movs	r0, #0
 800b13c:	e7ea      	b.n	800b114 <_swistat+0x18>

0800b13e <_fstat>:
 800b13e:	460b      	mov	r3, r1
 800b140:	2258      	movs	r2, #88	@ 0x58
 800b142:	2100      	movs	r1, #0
 800b144:	b510      	push	{r4, lr}
 800b146:	4604      	mov	r4, r0
 800b148:	4618      	mov	r0, r3
 800b14a:	f7fd ff05 	bl	8008f58 <memset>
 800b14e:	4601      	mov	r1, r0
 800b150:	4620      	mov	r0, r4
 800b152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b156:	f7ff bfd1 	b.w	800b0fc <_swistat>

0800b15a <_stat>:
 800b15a:	b538      	push	{r3, r4, r5, lr}
 800b15c:	460d      	mov	r5, r1
 800b15e:	4604      	mov	r4, r0
 800b160:	2258      	movs	r2, #88	@ 0x58
 800b162:	2100      	movs	r1, #0
 800b164:	4628      	mov	r0, r5
 800b166:	f7fd fef7 	bl	8008f58 <memset>
 800b16a:	4620      	mov	r0, r4
 800b16c:	2100      	movs	r1, #0
 800b16e:	f000 f811 	bl	800b194 <_swiopen>
 800b172:	1c43      	adds	r3, r0, #1
 800b174:	4604      	mov	r4, r0
 800b176:	d00b      	beq.n	800b190 <_stat+0x36>
 800b178:	686b      	ldr	r3, [r5, #4]
 800b17a:	4629      	mov	r1, r5
 800b17c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b180:	606b      	str	r3, [r5, #4]
 800b182:	f7ff ffbb 	bl	800b0fc <_swistat>
 800b186:	4605      	mov	r5, r0
 800b188:	4620      	mov	r0, r4
 800b18a:	462c      	mov	r4, r5
 800b18c:	f7ff ff92 	bl	800b0b4 <_close>
 800b190:	4620      	mov	r0, r4
 800b192:	bd38      	pop	{r3, r4, r5, pc}

0800b194 <_swiopen>:
 800b194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b198:	4682      	mov	sl, r0
 800b19a:	b096      	sub	sp, #88	@ 0x58
 800b19c:	460e      	mov	r6, r1
 800b19e:	2400      	movs	r4, #0
 800b1a0:	4f27      	ldr	r7, [pc, #156]	@ (800b240 <_swiopen+0xac>)
 800b1a2:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800b1a6:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	d00c      	beq.n	800b1c8 <_swiopen+0x34>
 800b1ae:	3401      	adds	r4, #1
 800b1b0:	2c14      	cmp	r4, #20
 800b1b2:	d1f6      	bne.n	800b1a2 <_swiopen+0xe>
 800b1b4:	f7fd fedc 	bl	8008f70 <__errno>
 800b1b8:	2318      	movs	r3, #24
 800b1ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b1be:	6003      	str	r3, [r0, #0]
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	b016      	add	sp, #88	@ 0x58
 800b1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c8:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800b1cc:	46e9      	mov	r9, sp
 800b1ce:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b1d2:	d109      	bne.n	800b1e8 <_swiopen+0x54>
 800b1d4:	4649      	mov	r1, r9
 800b1d6:	4650      	mov	r0, sl
 800b1d8:	f7ff ffbf 	bl	800b15a <_stat>
 800b1dc:	3001      	adds	r0, #1
 800b1de:	d003      	beq.n	800b1e8 <_swiopen+0x54>
 800b1e0:	f7fd fec6 	bl	8008f70 <__errno>
 800b1e4:	2311      	movs	r3, #17
 800b1e6:	e7e8      	b.n	800b1ba <_swiopen+0x26>
 800b1e8:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800b1ec:	f240 6301 	movw	r3, #1537	@ 0x601
 800b1f0:	07b2      	lsls	r2, r6, #30
 800b1f2:	4650      	mov	r0, sl
 800b1f4:	f8cd a000 	str.w	sl, [sp]
 800b1f8:	bf48      	it	mi
 800b1fa:	f045 0502 	orrmi.w	r5, r5, #2
 800b1fe:	421e      	tst	r6, r3
 800b200:	bf18      	it	ne
 800b202:	f045 0504 	orrne.w	r5, r5, #4
 800b206:	0733      	lsls	r3, r6, #28
 800b208:	bf44      	itt	mi
 800b20a:	f025 0504 	bicmi.w	r5, r5, #4
 800b20e:	f045 0508 	orrmi.w	r5, r5, #8
 800b212:	f7f5 f831 	bl	8000278 <strlen>
 800b216:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800b21a:	2501      	movs	r5, #1
 800b21c:	4628      	mov	r0, r5
 800b21e:	4649      	mov	r1, r9
 800b220:	beab      	bkpt	0x00ab
 800b222:	4605      	mov	r5, r0
 800b224:	2d00      	cmp	r5, #0
 800b226:	db05      	blt.n	800b234 <_swiopen+0xa0>
 800b228:	2300      	movs	r3, #0
 800b22a:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800b22e:	4447      	add	r7, r8
 800b230:	607b      	str	r3, [r7, #4]
 800b232:	e7c5      	b.n	800b1c0 <_swiopen+0x2c>
 800b234:	4628      	mov	r0, r5
 800b236:	f7ff fe85 	bl	800af44 <error>
 800b23a:	4604      	mov	r4, r0
 800b23c:	e7c0      	b.n	800b1c0 <_swiopen+0x2c>
 800b23e:	bf00      	nop
 800b240:	20001034 	.word	0x20001034

0800b244 <_get_semihosting_exts>:
 800b244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b248:	4606      	mov	r6, r0
 800b24a:	4615      	mov	r5, r2
 800b24c:	460f      	mov	r7, r1
 800b24e:	4829      	ldr	r0, [pc, #164]	@ (800b2f4 <_get_semihosting_exts+0xb0>)
 800b250:	2100      	movs	r1, #0
 800b252:	f7ff ff9f 	bl	800b194 <_swiopen>
 800b256:	4604      	mov	r4, r0
 800b258:	462a      	mov	r2, r5
 800b25a:	2100      	movs	r1, #0
 800b25c:	4630      	mov	r0, r6
 800b25e:	f7fd fe7b 	bl	8008f58 <memset>
 800b262:	1c63      	adds	r3, r4, #1
 800b264:	d014      	beq.n	800b290 <_get_semihosting_exts+0x4c>
 800b266:	4620      	mov	r0, r4
 800b268:	f04f 080c 	mov.w	r8, #12
 800b26c:	f7ff fe50 	bl	800af10 <findslot>
 800b270:	4681      	mov	r9, r0
 800b272:	4640      	mov	r0, r8
 800b274:	4649      	mov	r1, r9
 800b276:	beab      	bkpt	0x00ab
 800b278:	4680      	mov	r8, r0
 800b27a:	4640      	mov	r0, r8
 800b27c:	f7ff fe70 	bl	800af60 <checkerror>
 800b280:	2803      	cmp	r0, #3
 800b282:	dd02      	ble.n	800b28a <_get_semihosting_exts+0x46>
 800b284:	1ec3      	subs	r3, r0, #3
 800b286:	42ab      	cmp	r3, r5
 800b288:	dc07      	bgt.n	800b29a <_get_semihosting_exts+0x56>
 800b28a:	4620      	mov	r0, r4
 800b28c:	f7ff ff12 	bl	800b0b4 <_close>
 800b290:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b294:	b003      	add	sp, #12
 800b296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b29a:	2204      	movs	r2, #4
 800b29c:	4620      	mov	r0, r4
 800b29e:	eb0d 0102 	add.w	r1, sp, r2
 800b2a2:	f7ff fe72 	bl	800af8a <_read>
 800b2a6:	2803      	cmp	r0, #3
 800b2a8:	ddef      	ble.n	800b28a <_get_semihosting_exts+0x46>
 800b2aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b2ae:	2b53      	cmp	r3, #83	@ 0x53
 800b2b0:	d1eb      	bne.n	800b28a <_get_semihosting_exts+0x46>
 800b2b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b2b6:	2b48      	cmp	r3, #72	@ 0x48
 800b2b8:	d1e7      	bne.n	800b28a <_get_semihosting_exts+0x46>
 800b2ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b2be:	2b46      	cmp	r3, #70	@ 0x46
 800b2c0:	d1e3      	bne.n	800b28a <_get_semihosting_exts+0x46>
 800b2c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b2c6:	2b42      	cmp	r3, #66	@ 0x42
 800b2c8:	d1df      	bne.n	800b28a <_get_semihosting_exts+0x46>
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	4639      	mov	r1, r7
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f7ff fe75 	bl	800afbe <_swilseek>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	dbd8      	blt.n	800b28a <_get_semihosting_exts+0x46>
 800b2d8:	462a      	mov	r2, r5
 800b2da:	4631      	mov	r1, r6
 800b2dc:	4620      	mov	r0, r4
 800b2de:	f7ff fe54 	bl	800af8a <_read>
 800b2e2:	4605      	mov	r5, r0
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f7ff fee5 	bl	800b0b4 <_close>
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	f7ff fe38 	bl	800af60 <checkerror>
 800b2f0:	e7d0      	b.n	800b294 <_get_semihosting_exts+0x50>
 800b2f2:	bf00      	nop
 800b2f4:	0800bfeb 	.word	0x0800bfeb

0800b2f8 <initialise_semihosting_exts>:
 800b2f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	4d09      	ldr	r5, [pc, #36]	@ (800b324 <initialise_semihosting_exts+0x2c>)
 800b300:	a801      	add	r0, sp, #4
 800b302:	4c09      	ldr	r4, [pc, #36]	@ (800b328 <initialise_semihosting_exts+0x30>)
 800b304:	6029      	str	r1, [r5, #0]
 800b306:	6022      	str	r2, [r4, #0]
 800b308:	f7ff ff9c 	bl	800b244 <_get_semihosting_exts>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	dd07      	ble.n	800b320 <initialise_semihosting_exts+0x28>
 800b310:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b314:	f003 0201 	and.w	r2, r3, #1
 800b318:	f003 0302 	and.w	r3, r3, #2
 800b31c:	602a      	str	r2, [r5, #0]
 800b31e:	6023      	str	r3, [r4, #0]
 800b320:	b003      	add	sp, #12
 800b322:	bd30      	pop	{r4, r5, pc}
 800b324:	20000270 	.word	0x20000270
 800b328:	2000026c 	.word	0x2000026c

0800b32c <_has_ext_exit_extended>:
 800b32c:	b510      	push	{r4, lr}
 800b32e:	4c04      	ldr	r4, [pc, #16]	@ (800b340 <_has_ext_exit_extended+0x14>)
 800b330:	6823      	ldr	r3, [r4, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	da01      	bge.n	800b33a <_has_ext_exit_extended+0xe>
 800b336:	f7ff ffdf 	bl	800b2f8 <initialise_semihosting_exts>
 800b33a:	6820      	ldr	r0, [r4, #0]
 800b33c:	bd10      	pop	{r4, pc}
 800b33e:	bf00      	nop
 800b340:	20000270 	.word	0x20000270

0800b344 <_has_ext_stdout_stderr>:
 800b344:	b510      	push	{r4, lr}
 800b346:	4c04      	ldr	r4, [pc, #16]	@ (800b358 <_has_ext_stdout_stderr+0x14>)
 800b348:	6823      	ldr	r3, [r4, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	da01      	bge.n	800b352 <_has_ext_stdout_stderr+0xe>
 800b34e:	f7ff ffd3 	bl	800b2f8 <initialise_semihosting_exts>
 800b352:	6820      	ldr	r0, [r4, #0]
 800b354:	bd10      	pop	{r4, pc}
 800b356:	bf00      	nop
 800b358:	2000026c 	.word	0x2000026c

0800b35c <initialise_monitor_handles>:
 800b35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b360:	2303      	movs	r3, #3
 800b362:	b085      	sub	sp, #20
 800b364:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 800b414 <initialise_monitor_handles+0xb8>
 800b368:	2400      	movs	r4, #0
 800b36a:	af01      	add	r7, sp, #4
 800b36c:	2501      	movs	r5, #1
 800b36e:	f8cd 9004 	str.w	r9, [sp, #4]
 800b372:	9303      	str	r3, [sp, #12]
 800b374:	9402      	str	r4, [sp, #8]
 800b376:	4628      	mov	r0, r5
 800b378:	4639      	mov	r1, r7
 800b37a:	beab      	bkpt	0x00ab
 800b37c:	4605      	mov	r5, r0
 800b37e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800b418 <initialise_monitor_handles+0xbc>
 800b382:	4623      	mov	r3, r4
 800b384:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b388:	4c1f      	ldr	r4, [pc, #124]	@ (800b408 <initialise_monitor_handles+0xac>)
 800b38a:	f8c8 5000 	str.w	r5, [r8]
 800b38e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800b392:	3301      	adds	r3, #1
 800b394:	2b14      	cmp	r3, #20
 800b396:	d1fa      	bne.n	800b38e <initialise_monitor_handles+0x32>
 800b398:	4d1c      	ldr	r5, [pc, #112]	@ (800b40c <initialise_monitor_handles+0xb0>)
 800b39a:	f7ff ffd3 	bl	800b344 <_has_ext_stdout_stderr>
 800b39e:	b1d0      	cbz	r0, 800b3d6 <initialise_monitor_handles+0x7a>
 800b3a0:	f04f 0a03 	mov.w	sl, #3
 800b3a4:	2304      	movs	r3, #4
 800b3a6:	f8cd 9004 	str.w	r9, [sp, #4]
 800b3aa:	2601      	movs	r6, #1
 800b3ac:	f8cd a00c 	str.w	sl, [sp, #12]
 800b3b0:	9302      	str	r3, [sp, #8]
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	4639      	mov	r1, r7
 800b3b6:	beab      	bkpt	0x00ab
 800b3b8:	4683      	mov	fp, r0
 800b3ba:	4b15      	ldr	r3, [pc, #84]	@ (800b410 <initialise_monitor_handles+0xb4>)
 800b3bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800b3c0:	f8c3 b000 	str.w	fp, [r3]
 800b3c4:	2308      	movs	r3, #8
 800b3c6:	f8cd a00c 	str.w	sl, [sp, #12]
 800b3ca:	9302      	str	r3, [sp, #8]
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	4639      	mov	r1, r7
 800b3d0:	beab      	bkpt	0x00ab
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	602e      	str	r6, [r5, #0]
 800b3d6:	682b      	ldr	r3, [r5, #0]
 800b3d8:	2600      	movs	r6, #0
 800b3da:	3301      	adds	r3, #1
 800b3dc:	6066      	str	r6, [r4, #4]
 800b3de:	bf02      	ittt	eq
 800b3e0:	4b0b      	ldreq	r3, [pc, #44]	@ (800b410 <initialise_monitor_handles+0xb4>)
 800b3e2:	681b      	ldreq	r3, [r3, #0]
 800b3e4:	602b      	streq	r3, [r5, #0]
 800b3e6:	f8d8 3000 	ldr.w	r3, [r8]
 800b3ea:	6023      	str	r3, [r4, #0]
 800b3ec:	f7ff ffaa 	bl	800b344 <_has_ext_stdout_stderr>
 800b3f0:	b130      	cbz	r0, 800b400 <initialise_monitor_handles+0xa4>
 800b3f2:	4b07      	ldr	r3, [pc, #28]	@ (800b410 <initialise_monitor_handles+0xb4>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800b3fa:	682b      	ldr	r3, [r5, #0]
 800b3fc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800b400:	b005      	add	sp, #20
 800b402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b406:	bf00      	nop
 800b408:	20001034 	.word	0x20001034
 800b40c:	20001028 	.word	0x20001028
 800b410:	2000102c 	.word	0x2000102c
 800b414:	0800c001 	.word	0x0800c001
 800b418:	20001030 	.word	0x20001030

0800b41c <_isatty>:
 800b41c:	b570      	push	{r4, r5, r6, lr}
 800b41e:	f7ff fd77 	bl	800af10 <findslot>
 800b422:	2409      	movs	r4, #9
 800b424:	4605      	mov	r5, r0
 800b426:	b920      	cbnz	r0, 800b432 <_isatty+0x16>
 800b428:	f7fd fda2 	bl	8008f70 <__errno>
 800b42c:	6004      	str	r4, [r0, #0]
 800b42e:	2000      	movs	r0, #0
 800b430:	bd70      	pop	{r4, r5, r6, pc}
 800b432:	4620      	mov	r0, r4
 800b434:	4629      	mov	r1, r5
 800b436:	beab      	bkpt	0x00ab
 800b438:	4604      	mov	r4, r0
 800b43a:	2c01      	cmp	r4, #1
 800b43c:	4620      	mov	r0, r4
 800b43e:	d0f7      	beq.n	800b430 <_isatty+0x14>
 800b440:	f7fd fd96 	bl	8008f70 <__errno>
 800b444:	2513      	movs	r5, #19
 800b446:	4604      	mov	r4, r0
 800b448:	2600      	movs	r6, #0
 800b44a:	4628      	mov	r0, r5
 800b44c:	4631      	mov	r1, r6
 800b44e:	beab      	bkpt	0x00ab
 800b450:	4605      	mov	r5, r0
 800b452:	6025      	str	r5, [r4, #0]
 800b454:	e7eb      	b.n	800b42e <_isatty+0x12>

0800b456 <sqrt>:
 800b456:	b538      	push	{r3, r4, r5, lr}
 800b458:	ec55 4b10 	vmov	r4, r5, d0
 800b45c:	ed2d 8b02 	vpush	{d8}
 800b460:	f000 f826 	bl	800b4b0 <__ieee754_sqrt>
 800b464:	4622      	mov	r2, r4
 800b466:	462b      	mov	r3, r5
 800b468:	4620      	mov	r0, r4
 800b46a:	4629      	mov	r1, r5
 800b46c:	eeb0 8a40 	vmov.f32	s16, s0
 800b470:	eef0 8a60 	vmov.f32	s17, s1
 800b474:	f7f5 fb5e 	bl	8000b34 <__aeabi_dcmpun>
 800b478:	b990      	cbnz	r0, 800b4a0 <sqrt+0x4a>
 800b47a:	2200      	movs	r2, #0
 800b47c:	2300      	movs	r3, #0
 800b47e:	4620      	mov	r0, r4
 800b480:	4629      	mov	r1, r5
 800b482:	f7f5 fb2f 	bl	8000ae4 <__aeabi_dcmplt>
 800b486:	b158      	cbz	r0, 800b4a0 <sqrt+0x4a>
 800b488:	f7fd fd72 	bl	8008f70 <__errno>
 800b48c:	2321      	movs	r3, #33	@ 0x21
 800b48e:	2200      	movs	r2, #0
 800b490:	6003      	str	r3, [r0, #0]
 800b492:	2300      	movs	r3, #0
 800b494:	4610      	mov	r0, r2
 800b496:	4619      	mov	r1, r3
 800b498:	f7f5 f9dc 	bl	8000854 <__aeabi_ddiv>
 800b49c:	ec41 0b18 	vmov	d8, r0, r1
 800b4a0:	eeb0 0a48 	vmov.f32	s0, s16
 800b4a4:	eef0 0a68 	vmov.f32	s1, s17
 800b4a8:	ecbd 8b02 	vpop	{d8}
 800b4ac:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b4b0 <__ieee754_sqrt>:
 800b4b0:	4a6b      	ldr	r2, [pc, #428]	@ (800b660 <__ieee754_sqrt+0x1b0>)
 800b4b2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b6:	ec55 4b10 	vmov	r4, r5, d0
 800b4ba:	43aa      	bics	r2, r5
 800b4bc:	462b      	mov	r3, r5
 800b4be:	4621      	mov	r1, r4
 800b4c0:	d110      	bne.n	800b4e4 <__ieee754_sqrt+0x34>
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	f7f5 f89a 	bl	8000600 <__aeabi_dmul>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	4629      	mov	r1, r5
 800b4d4:	f7f4 fede 	bl	8000294 <__adddf3>
 800b4d8:	4604      	mov	r4, r0
 800b4da:	460d      	mov	r5, r1
 800b4dc:	ec45 4b10 	vmov	d0, r4, r5
 800b4e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e4:	2d00      	cmp	r5, #0
 800b4e6:	dc0e      	bgt.n	800b506 <__ieee754_sqrt+0x56>
 800b4e8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b4ec:	4322      	orrs	r2, r4
 800b4ee:	d0f5      	beq.n	800b4dc <__ieee754_sqrt+0x2c>
 800b4f0:	b19d      	cbz	r5, 800b51a <__ieee754_sqrt+0x6a>
 800b4f2:	4622      	mov	r2, r4
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	f7f4 feca 	bl	8000290 <__aeabi_dsub>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	f7f5 f9a8 	bl	8000854 <__aeabi_ddiv>
 800b504:	e7e8      	b.n	800b4d8 <__ieee754_sqrt+0x28>
 800b506:	152a      	asrs	r2, r5, #20
 800b508:	d115      	bne.n	800b536 <__ieee754_sqrt+0x86>
 800b50a:	2000      	movs	r0, #0
 800b50c:	e009      	b.n	800b522 <__ieee754_sqrt+0x72>
 800b50e:	0acb      	lsrs	r3, r1, #11
 800b510:	3a15      	subs	r2, #21
 800b512:	0549      	lsls	r1, r1, #21
 800b514:	2b00      	cmp	r3, #0
 800b516:	d0fa      	beq.n	800b50e <__ieee754_sqrt+0x5e>
 800b518:	e7f7      	b.n	800b50a <__ieee754_sqrt+0x5a>
 800b51a:	462a      	mov	r2, r5
 800b51c:	e7fa      	b.n	800b514 <__ieee754_sqrt+0x64>
 800b51e:	005b      	lsls	r3, r3, #1
 800b520:	3001      	adds	r0, #1
 800b522:	02dc      	lsls	r4, r3, #11
 800b524:	d5fb      	bpl.n	800b51e <__ieee754_sqrt+0x6e>
 800b526:	1e44      	subs	r4, r0, #1
 800b528:	1b12      	subs	r2, r2, r4
 800b52a:	f1c0 0420 	rsb	r4, r0, #32
 800b52e:	fa21 f404 	lsr.w	r4, r1, r4
 800b532:	4081      	lsls	r1, r0
 800b534:	4323      	orrs	r3, r4
 800b536:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b53a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b53e:	07d2      	lsls	r2, r2, #31
 800b540:	f04f 0600 	mov.w	r6, #0
 800b544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b548:	ea4f 0565 	mov.w	r5, r5, asr #1
 800b54c:	f04f 0016 	mov.w	r0, #22
 800b550:	4632      	mov	r2, r6
 800b552:	bf58      	it	pl
 800b554:	005b      	lslpl	r3, r3, #1
 800b556:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b55a:	bf5c      	itt	pl
 800b55c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b560:	0049      	lslpl	r1, r1, #1
 800b562:	005b      	lsls	r3, r3, #1
 800b564:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b568:	0049      	lsls	r1, r1, #1
 800b56a:	1917      	adds	r7, r2, r4
 800b56c:	429f      	cmp	r7, r3
 800b56e:	bfde      	ittt	le
 800b570:	193a      	addle	r2, r7, r4
 800b572:	1bdb      	suble	r3, r3, r7
 800b574:	1936      	addle	r6, r6, r4
 800b576:	0fcf      	lsrs	r7, r1, #31
 800b578:	3801      	subs	r0, #1
 800b57a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b57e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b582:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b586:	d1f0      	bne.n	800b56a <__ieee754_sqrt+0xba>
 800b588:	4604      	mov	r4, r0
 800b58a:	2720      	movs	r7, #32
 800b58c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b590:	429a      	cmp	r2, r3
 800b592:	eb00 0e0c 	add.w	lr, r0, ip
 800b596:	db02      	blt.n	800b59e <__ieee754_sqrt+0xee>
 800b598:	d113      	bne.n	800b5c2 <__ieee754_sqrt+0x112>
 800b59a:	458e      	cmp	lr, r1
 800b59c:	d811      	bhi.n	800b5c2 <__ieee754_sqrt+0x112>
 800b59e:	f1be 0f00 	cmp.w	lr, #0
 800b5a2:	eb0e 000c 	add.w	r0, lr, ip
 800b5a6:	da43      	bge.n	800b630 <__ieee754_sqrt+0x180>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	db41      	blt.n	800b630 <__ieee754_sqrt+0x180>
 800b5ac:	f102 0801 	add.w	r8, r2, #1
 800b5b0:	1a9b      	subs	r3, r3, r2
 800b5b2:	458e      	cmp	lr, r1
 800b5b4:	4464      	add	r4, ip
 800b5b6:	eba1 010e 	sub.w	r1, r1, lr
 800b5ba:	bf88      	it	hi
 800b5bc:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800b5c0:	4642      	mov	r2, r8
 800b5c2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b5c6:	3f01      	subs	r7, #1
 800b5c8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b5cc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b5d0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b5d4:	d1dc      	bne.n	800b590 <__ieee754_sqrt+0xe0>
 800b5d6:	4319      	orrs	r1, r3
 800b5d8:	d01b      	beq.n	800b612 <__ieee754_sqrt+0x162>
 800b5da:	f8df a088 	ldr.w	sl, [pc, #136]	@ 800b664 <__ieee754_sqrt+0x1b4>
 800b5de:	f8df b088 	ldr.w	fp, [pc, #136]	@ 800b668 <__ieee754_sqrt+0x1b8>
 800b5e2:	e9da 0100 	ldrd	r0, r1, [sl]
 800b5e6:	e9db 2300 	ldrd	r2, r3, [fp]
 800b5ea:	e9da 8900 	ldrd	r8, r9, [sl]
 800b5ee:	f7f4 fe4f 	bl	8000290 <__aeabi_dsub>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4640      	mov	r0, r8
 800b5f8:	4649      	mov	r1, r9
 800b5fa:	f7f5 fa7d 	bl	8000af8 <__aeabi_dcmple>
 800b5fe:	b140      	cbz	r0, 800b612 <__ieee754_sqrt+0x162>
 800b600:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800b604:	e9da 0100 	ldrd	r0, r1, [sl]
 800b608:	e9db 2300 	ldrd	r2, r3, [fp]
 800b60c:	d112      	bne.n	800b634 <__ieee754_sqrt+0x184>
 800b60e:	3601      	adds	r6, #1
 800b610:	463c      	mov	r4, r7
 800b612:	1072      	asrs	r2, r6, #1
 800b614:	07f1      	lsls	r1, r6, #31
 800b616:	ea4f 0354 	mov.w	r3, r4, lsr #1
 800b61a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b61e:	bf48      	it	mi
 800b620:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b624:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b628:	4618      	mov	r0, r3
 800b62a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b62e:	e753      	b.n	800b4d8 <__ieee754_sqrt+0x28>
 800b630:	4690      	mov	r8, r2
 800b632:	e7bd      	b.n	800b5b0 <__ieee754_sqrt+0x100>
 800b634:	e9da 8900 	ldrd	r8, r9, [sl]
 800b638:	f7f4 fe2c 	bl	8000294 <__adddf3>
 800b63c:	4602      	mov	r2, r0
 800b63e:	460b      	mov	r3, r1
 800b640:	4640      	mov	r0, r8
 800b642:	4649      	mov	r1, r9
 800b644:	f7f5 fa4e 	bl	8000ae4 <__aeabi_dcmplt>
 800b648:	b128      	cbz	r0, 800b656 <__ieee754_sqrt+0x1a6>
 800b64a:	1ca0      	adds	r0, r4, #2
 800b64c:	f104 0402 	add.w	r4, r4, #2
 800b650:	bf08      	it	eq
 800b652:	3601      	addeq	r6, #1
 800b654:	e7dd      	b.n	800b612 <__ieee754_sqrt+0x162>
 800b656:	1c63      	adds	r3, r4, #1
 800b658:	f023 0401 	bic.w	r4, r3, #1
 800b65c:	e7d9      	b.n	800b612 <__ieee754_sqrt+0x162>
 800b65e:	bf00      	nop
 800b660:	7ff00000 	.word	0x7ff00000
 800b664:	20000280 	.word	0x20000280
 800b668:	20000278 	.word	0x20000278

0800b66c <_init>:
 800b66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66e:	bf00      	nop
 800b670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b672:	bc08      	pop	{r3}
 800b674:	469e      	mov	lr, r3
 800b676:	4770      	bx	lr

0800b678 <_fini>:
 800b678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b67a:	bf00      	nop
 800b67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b67e:	bc08      	pop	{r3}
 800b680:	469e      	mov	lr, r3
 800b682:	4770      	bx	lr
 800b684:	0000      	movs	r0, r0
	...
