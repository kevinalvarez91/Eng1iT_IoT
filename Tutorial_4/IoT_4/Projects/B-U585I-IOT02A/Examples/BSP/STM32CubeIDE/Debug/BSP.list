
BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d08  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  08007f40  08007f40  00008f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085e0  080085e0  0000a1e8  2**0
                  CONTENTS
  4 .ARM          00000008  080085e0  080085e0  000095e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085e8  080085e8  0000a1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080085e8  080085e8  000095e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080085f0  080085f0  000095f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080085f8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200001e8  080087e0  0000a1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00001200  20000558  080087e0  0000a558  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e33  00000000  00000000  0000a21e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c5  00000000  00000000  0001b051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0001da18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a12  00000000  00000000  0001e798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000432c3  00000000  00000000  0001f1aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a141  00000000  00000000  0006246d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b7720  00000000  00000000  0007c5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00233cce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b74  00000000  00000000  00233d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  00238888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001e8 	.word	0x200001e8
 8000254:	00000000 	.word	0x00000000
 8000258:	08007f28 	.word	0x08007f28

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001ec 	.word	0x200001ec
 8000274:	08007f28 	.word	0x08007f28

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	460a      	mov	r2, r1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback,};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY,};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE,};

  if (Button != BUTTON_USER)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <BSP_PB_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c6a:	f06f 0301 	mvn.w	r3, #1
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c70:	e05c      	b.n	8000d2c <BSP_PB_Init+0xdc>
  }
  else
  {
    /* Enable the BUTTON clock*/
    BUTTON_USER_GPIO_CLK_ENABLE();
 8000c72:	4b31      	ldr	r3, [pc, #196]	@ (8000d38 <BSP_PB_Init+0xe8>)
 8000c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c78:	4a2f      	ldr	r2, [pc, #188]	@ (8000d38 <BSP_PB_Init+0xe8>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c82:	4b2d      	ldr	r3, [pc, #180]	@ (8000d38 <BSP_PB_Init+0xe8>)
 8000c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]

    gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000c90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c94:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000c96:	2302      	movs	r3, #2
 8000c98:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61fb      	str	r3, [r7, #28]

    if (ButtonMode == BUTTON_MODE_GPIO)
 8000c9e:	79bb      	ldrb	r3, [r7, #6]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10c      	bne.n	8000cbe <BSP_PB_Init+0x6e>
    {
      /* Configure Button pin as input */
      gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
      HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	4a24      	ldr	r2, [pc, #144]	@ (8000d3c <BSP_PB_Init+0xec>)
 8000cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb0:	f107 0210 	add.w	r2, r7, #16
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 fd86 	bl	80017c8 <HAL_GPIO_Init>
 8000cbc:	e036      	b.n	8000d2c <BSP_PB_Init+0xdc>
    }
    else /* (ButtonMode == BUTTON_MODE_EXTI) */
    {
      /* Configure Button pin as input with External interrupt */
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000cbe:	4b20      	ldr	r3, [pc, #128]	@ (8000d40 <BSP_PB_Init+0xf0>)
 8000cc0:	617b      	str	r3, [r7, #20]

      HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d3c <BSP_PB_Init+0xec>)
 8000cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cca:	f107 0210 	add.w	r2, r7, #16
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fd79 	bl	80017c8 <HAL_GPIO_Init>

      (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000cd6:	79fa      	ldrb	r2, [r7, #7]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4a18      	ldr	r2, [pc, #96]	@ (8000d44 <BSP_PB_Init+0xf4>)
 8000ce2:	441a      	add	r2, r3
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	4918      	ldr	r1, [pc, #96]	@ (8000d48 <BSP_PB_Init+0xf8>)
 8000ce8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cec:	4619      	mov	r1, r3
 8000cee:	4610      	mov	r0, r2
 8000cf0:	f000 fd0e 	bl	8001710 <HAL_EXTI_GetHandle>
      (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000cf4:	79fa      	ldrb	r2, [r7, #7]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4a11      	ldr	r2, [pc, #68]	@ (8000d44 <BSP_PB_Init+0xf4>)
 8000d00:	1898      	adds	r0, r3, r2
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4a11      	ldr	r2, [pc, #68]	@ (8000d4c <BSP_PB_Init+0xfc>)
 8000d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f000 fcd3 	bl	80016b8 <HAL_EXTI_RegisterCallback>

      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000d12:	2018      	movs	r0, #24
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	4a0e      	ldr	r2, [pc, #56]	@ (8000d50 <BSP_PB_Init+0x100>)
 8000d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f000 fa49 	bl	80011b6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000d24:	2318      	movs	r3, #24
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 fa5f 	bl	80011ea <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3728      	adds	r7, #40	@ 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	46020c00 	.word	0x46020c00
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	10110000 	.word	0x10110000
 8000d44:	20000204 	.word	0x20000204
 8000d48:	08008124 	.word	0x08008124
 8000d4c:	20000004 	.word	0x20000004
 8000d50:	20000008 	.word	0x20000008

08000d54 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f003 ff8d 	bl	8004c78 <BSP_PB_Callback>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <BSP_AUDIO_IN_IRQHandler>:
  * @param  Instance Audio in instance.
  * @param  Device Device of the audio in stream.
  * @retval None.
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t Device)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  if (Instance == 0U)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d109      	bne.n	8000d88 <BSP_AUDIO_IN_IRQHandler+0x24>
  {
    if (Device == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d103      	bne.n	8000d82 <BSP_AUDIO_IN_IRQHandler+0x1e>
    {
      HAL_DMA_IRQHandler(&haudio_mdf[0]);
 8000d7a:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 8000d7c:	f000 fb28 	bl	80013d0 <HAL_DMA_IRQHandler>
    else /* Device == AUDIO_IN_DEVICE_DIGITAL_MIC2 */
    {
      HAL_DMA_IRQHandler(&haudio_mdf[1]);
    }
  }
}
 8000d80:	e002      	b.n	8000d88 <BSP_AUDIO_IN_IRQHandler+0x24>
      HAL_DMA_IRQHandler(&haudio_mdf[1]);
 8000d82:	4804      	ldr	r0, [pc, #16]	@ (8000d94 <BSP_AUDIO_IN_IRQHandler+0x30>)
 8000d84:	f000 fb24 	bl	80013d0 <HAL_DMA_IRQHandler>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000210 	.word	0x20000210
 8000d94:	20000288 	.word	0x20000288

08000d98 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <BSP_CAMERA_FrameEventCallback>:
  * @brief  Frame Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_FrameEventCallback(uint32_t Instance)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff ffd1 	bl	8000d98 <BSP_CAMERA_LineEventCallback>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff ffd0 	bl	8000dac <BSP_CAMERA_FrameEventCallback>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff ffcf 	bl	8000dc0 <BSP_CAMERA_VsyncEventCallback>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff ffce 	bl	8000dd4 <BSP_CAMERA_ErrorCallback>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e44:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <SystemInit+0x68>)
 8000e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e4a:	4a17      	ldr	r2, [pc, #92]	@ (8000ea8 <SystemInit+0x68>)
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000e54:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <SystemInit+0x6c>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000e5a:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <SystemInit+0x6c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <SystemInit+0x6c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <SystemInit+0x6c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <SystemInit+0x6c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0e      	ldr	r2, [pc, #56]	@ (8000eac <SystemInit+0x6c>)
 8000e72:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000e76:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000e7a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <SystemInit+0x6c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000e82:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <SystemInit+0x6c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a09      	ldr	r2, [pc, #36]	@ (8000eac <SystemInit+0x6c>)
 8000e88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <SystemInit+0x6c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e94:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <SystemInit+0x68>)
 8000e96:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e9a:	609a      	str	r2, [r3, #8]
  #endif
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00
 8000eac:	46020c00 	.word	0x46020c00

08000eb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <HAL_Init+0x4c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a10      	ldr	r2, [pc, #64]	@ (8000efc <HAL_Init+0x4c>)
 8000eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f96d 	bl	80011a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000ec6:	f002 f821 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <HAL_Init+0x50>)
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	f003 030f 	and.w	r3, r3, #15
 8000ed4:	490b      	ldr	r1, [pc, #44]	@ (8000f04 <HAL_Init+0x54>)
 8000ed6:	5ccb      	ldrb	r3, [r1, r3]
 8000ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8000edc:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <HAL_Init+0x58>)
 8000ede:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee0:	200f      	movs	r0, #15
 8000ee2:	f000 f813 	bl	8000f0c <HAL_InitTick>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e002      	b.n	8000ef6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef0:	f003 ff06 	bl	8004d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40022000 	.word	0x40022000
 8000f00:	46020c00 	.word	0x46020c00
 8000f04:	08008128 	.word	0x08008128
 8000f08:	2000000c 	.word	0x2000000c

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000f14:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <HAL_InitTick+0x60>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e021      	b.n	8000f64 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <HAL_InitTick+0x64>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <HAL_InitTick+0x60>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f965 	bl	8001206 <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00e      	b.n	8000f64 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d80a      	bhi.n	8000f62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f54:	f000 f92f 	bl	80011b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4a06      	ldr	r2, [pc, #24]	@ (8000f74 <HAL_InitTick+0x68>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000014 	.word	0x20000014
 8000f70:	2000000c 	.word	0x2000000c
 8000f74:	20000010 	.word	0x20000010

08000f78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000014 	.word	0x20000014
 8000f9c:	20000350 	.word	0x20000350

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000350 	.word	0x20000350

08000fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc0:	f7ff ffee 	bl	8000fa0 <HAL_GetTick>
 8000fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fd0:	d005      	beq.n	8000fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <HAL_Delay+0x44>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fde:	bf00      	nop
 8000fe0:	f7ff ffde 	bl	8000fa0 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d8f7      	bhi.n	8000fe0 <HAL_Delay+0x28>
  {
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000014 	.word	0x20000014

08001000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001028:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800102c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001032:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	60d3      	str	r3, [r2, #12]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db0b      	blt.n	800108e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f003 021f 	and.w	r2, r3, #31
 800107c:	4907      	ldr	r1, [pc, #28]	@ (800109c <__NVIC_EnableIRQ+0x38>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	2001      	movs	r0, #1
 8001086:	fa00 f202 	lsl.w	r2, r0, r2
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100

080010a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	@ (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	@ (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
         );
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	@ 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800116c:	d301      	bcc.n	8001172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116e:	2301      	movs	r3, #1
 8001170:	e00f      	b.n	8001192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <SysTick_Config+0x40>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117a:	210f      	movs	r1, #15
 800117c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001180:	f7ff ff8e 	bl	80010a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <SysTick_Config+0x40>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	4b04      	ldr	r3, [pc, #16]	@ (800119c <SysTick_Config+0x40>)
 800118c:	2207      	movs	r2, #7
 800118e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	e000e010 	.word	0xe000e010

080011a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff29 	bl	8001000 <__NVIC_SetPriorityGrouping>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
 80011c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011c4:	f7ff ff40 	bl	8001048 <__NVIC_GetPriorityGrouping>
 80011c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	6978      	ldr	r0, [r7, #20]
 80011d0:	f7ff ff90 	bl	80010f4 <NVIC_EncodePriority>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff5f 	bl	80010a0 <__NVIC_SetPriority>
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff33 	bl	8001064 <__NVIC_EnableIRQ>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ffa4 	bl	800115c <SysTick_Config>
 8001214:	4603      	mov	r3, r0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	2b00      	cmp	r3, #0
 8001238:	d01e      	beq.n	8001278 <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2204      	movs	r2, #4
 8001240:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f043 0202 	orr.w	r2, r3, #2
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2204      	movs	r2, #4
 8001252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800125a:	4a39      	ldr	r2, [pc, #228]	@ (8001340 <HAL_DCMI_IRQHandler+0x120>)
 800125c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f88b 	bl	800137e <HAL_DMA_Abort_IT>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d004      	beq.n	8001278 <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f866 	bl	8001344 <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d01e      	beq.n	80012c0 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2202      	movs	r2, #2
 8001288:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	f043 0201 	orr.w	r2, r3, #1
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2204      	movs	r2, #4
 800129a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012a2:	4a27      	ldr	r2, [pc, #156]	@ (8001340 <HAL_DCMI_IRQHandler+0x120>)
 80012a4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f867 	bl	800137e <HAL_DMA_Abort_IT>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d004      	beq.n	80012c0 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f842 	bl	8001344 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2210      	movs	r2, #16
 80012d0:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fd88 	bl	8000de8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d006      	beq.n	80012f0 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2208      	movs	r2, #8
 80012e8:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fd92 	bl	8000e14 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d01d      	beq.n	8001336 <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b02      	cmp	r3, #2
 8001306:	d107      	bne.n	8001318 <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 021e 	bic.w	r2, r2, #30
 8001316:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2201      	movs	r2, #1
 800132e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fd64 	bl	8000dfe <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	08001345 	.word	0x08001345

08001344 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001350:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_ULE)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001358:	2b02      	cmp	r3, #2
 800135a:	d009      	beq.n	8001370 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001368:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f7ff fd5a 	bl	8000e2a <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e019      	b.n	80013c4 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d004      	beq.n	80013a6 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2220      	movs	r2, #32
 80013a0:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2204      	movs	r2, #4
 80013aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80013e0:	f023 030f 	bic.w	r3, r3, #15
 80013e4:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ee:	3b50      	subs	r3, #80	@ 0x50
 80013f0:	09db      	lsrs	r3, r3, #7
 80013f2:	f003 031f 	and.w	r3, r3, #31
 80013f6:	2201      	movs	r2, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	4013      	ands	r3, r2
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 8150 	beq.w	80016ac <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001416:	2b00      	cmp	r3, #0
 8001418:	d011      	beq.n	800143e <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00a      	beq.n	800143e <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001430:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001436:	f043 0201 	orr.w	r2, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001448:	2b00      	cmp	r3, #0
 800144a:	d011      	beq.n	8001470 <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00a      	beq.n	8001470 <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001462:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001468:	f043 0202 	orr.w	r2, r3, #2
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d011      	beq.n	80014a2 <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00a      	beq.n	80014a2 <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001494:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149a:	f043 0204 	orr.w	r2, r3, #4
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d011      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00a      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014c6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014cc:	f043 0208 	orr.w	r2, r3, #8
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d013      	beq.n	800150a <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00c      	beq.n	800150a <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014f8:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d055      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d04e      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800152e:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b04      	cmp	r3, #4
 800153a:	d137      	bne.n	80015ac <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	695a      	ldr	r2, [r3, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800154a:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0202 	orr.w	r2, r2, #2
 800155a:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d004      	beq.n	8001574 <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2203      	movs	r2, #3
 800156e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001572:	e003      	b.n	800157c <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800158c:	2201      	movs	r2, #1
 800158e:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 8087 	beq.w	80016b0 <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	4798      	blx	r3
        }

        return;
 80015aa:	e081      	b.n	80016b0 <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2205      	movs	r2, #5
 80015b0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d039      	beq.n	8001646 <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d032      	beq.n	8001646 <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d012      	beq.n	8001612 <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d116      	bne.n	8001624 <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d111      	bne.n	8001624 <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800160c:	2201      	movs	r2, #1
 800160e:	731a      	strb	r2, [r3, #12]
 8001610:	e008      	b.n	8001624 <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001618:	2b00      	cmp	r3, #0
 800161a:	d103      	bne.n	8001624 <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800162c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164a:	2b00      	cmp	r3, #0
 800164c:	d031      	beq.n	80016b2 <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	695a      	ldr	r2, [r3, #20]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 0202 	orr.w	r2, r2, #2
 800165c:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d004      	beq.n	8001676 <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2203      	movs	r2, #3
 8001670:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001674:	e003      	b.n	800167e <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800168e:	2201      	movs	r2, #1
 8001690:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d007      	beq.n	80016b2 <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	4798      	blx	r3
 80016aa:	e002      	b.n	80016b2 <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80016ac:	bf00      	nop
 80016ae:	e000      	b.n	80016b2 <HAL_DMA_IRQHandler+0x2e2>
        return;
 80016b0:	bf00      	nop
    }
  }
}
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	460b      	mov	r3, r1
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80016ca:	7afb      	ldrb	r3, [r7, #11]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d011      	beq.n	80016f4 <HAL_EXTI_RegisterCallback+0x3c>
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	dc13      	bgt.n	80016fc <HAL_EXTI_RegisterCallback+0x44>
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <HAL_EXTI_RegisterCallback+0x26>
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d007      	beq.n	80016ec <HAL_EXTI_RegisterCallback+0x34>
 80016dc:	e00e      	b.n	80016fc <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	609a      	str	r2, [r3, #8]
      break;
 80016ea:	e00a      	b.n	8001702 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	605a      	str	r2, [r3, #4]
      break;
 80016f2:	e006      	b.n	8001702 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	609a      	str	r2, [r3, #8]
      break;
 80016fa:	e002      	b.n	8001702 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	75fb      	strb	r3, [r7, #23]
      break;
 8001700:	bf00      	nop
  }

  return status;
 8001702:	7dfb      	ldrb	r3, [r7, #23]
}
 8001704:	4618      	mov	r0, r3
 8001706:	371c      	adds	r7, #28
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e003      	b.n	800172c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800172a:	2300      	movs	r3, #0
  }
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	0c1b      	lsrs	r3, r3, #16
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	2201      	movs	r2, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	015a      	lsls	r2, r3, #5
 8001760:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <HAL_EXTI_IRQHandler+0x88>)
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	015a      	lsls	r2, r3, #5
 800178e:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <HAL_EXTI_IRQHandler+0x8c>)
 8001790:	4413      	add	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d009      	beq.n	80017b8 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	4798      	blx	r3
    }
  }
}
 80017b8:	bf00      	nop
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	4602200c 	.word	0x4602200c
 80017c4:	46022010 	.word	0x46022010

080017c8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	@ 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80017da:	e1ba      	b.n	8001b52 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2101      	movs	r1, #1
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	4013      	ands	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 81aa 	beq.w	8001b4c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a55      	ldr	r2, [pc, #340]	@ (8001950 <HAL_GPIO_Init+0x188>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d15d      	bne.n	80018bc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001806:	2201      	movs	r2, #1
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	4013      	ands	r3, r2
 8001814:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0201 	and.w	r2, r3, #1
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	4313      	orrs	r3, r2
 8001828:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001830:	4a48      	ldr	r2, [pc, #288]	@ (8001954 <HAL_GPIO_Init+0x18c>)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001838:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800183a:	4a46      	ldr	r2, [pc, #280]	@ (8001954 <HAL_GPIO_Init+0x18c>)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4413      	add	r3, r2
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	08da      	lsrs	r2, r3, #3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	3208      	adds	r2, #8
 800184e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001852:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	220f      	movs	r2, #15
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	4013      	ands	r3, r2
 8001868:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220b      	movs	r2, #11
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69fa      	ldr	r2, [r7, #28]
 800187a:	4313      	orrs	r3, r2
 800187c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	08da      	lsrs	r2, r3, #3
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	3208      	adds	r2, #8
 8001886:	69f9      	ldr	r1, [r7, #28]
 8001888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2202      	movs	r2, #2
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	e067      	b.n	800198c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x104>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b12      	cmp	r3, #18
 80018ca:	d145      	bne.n	8001958 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	08da      	lsrs	r2, r3, #3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3208      	adds	r2, #8
 80018d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	220f      	movs	r2, #15
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	f003 020f 	and.w	r2, r3, #15
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	4313      	orrs	r3, r2
 8001908:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	69f9      	ldr	r1, [r7, #28]
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	4013      	ands	r3, r2
 800192e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	4313      	orrs	r3, r2
 8001944:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e01e      	b.n	800198c <HAL_GPIO_Init+0x1c4>
 800194e:	bf00      	nop
 8001950:	46020000 	.word	0x46020000
 8001954:	08008178 	.word	0x08008178
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	2203      	movs	r2, #3
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	4013      	ands	r3, r2
 800196e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0203 	and.w	r2, r3, #3
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	4313      	orrs	r3, r2
 8001984:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d00b      	beq.n	80019ac <HAL_GPIO_Init+0x1e4>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d007      	beq.n	80019ac <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019a0:	2b11      	cmp	r3, #17
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b12      	cmp	r3, #18
 80019aa:	d130      	bne.n	8001a0e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80019e2:	2201      	movs	r2, #1
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	f003 0201 	and.w	r2, r3, #1
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d017      	beq.n	8001a46 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	2203      	movs	r2, #3
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69fa      	ldr	r2, [r7, #28]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d07c      	beq.n	8001b4c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001a52:	4a47      	ldr	r2, [pc, #284]	@ (8001b70 <HAL_GPIO_Init+0x3a8>)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3318      	adds	r3, #24
 8001a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	220f      	movs	r2, #15
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69fa      	ldr	r2, [r7, #28]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	0a9a      	lsrs	r2, r3, #10
 8001a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b74 <HAL_GPIO_Init+0x3ac>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	f002 0203 	and.w	r2, r2, #3
 8001a84:	00d2      	lsls	r2, r2, #3
 8001a86:	4093      	lsls	r3, r2
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001a8e:	4938      	ldr	r1, [pc, #224]	@ (8001b70 <HAL_GPIO_Init+0x3a8>)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	3318      	adds	r3, #24
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001a9c:	4b34      	ldr	r3, [pc, #208]	@ (8001b70 <HAL_GPIO_Init+0x3a8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001ab8:	69fa      	ldr	r2, [r7, #28]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8001b70 <HAL_GPIO_Init+0x3a8>)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b70 <HAL_GPIO_Init+0x3a8>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001aea:	4a21      	ldr	r2, [pc, #132]	@ (8001b70 <HAL_GPIO_Init+0x3a8>)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001af0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <HAL_GPIO_Init+0x3a8>)
 8001af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001af6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69fa      	ldr	r2, [r7, #28]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001b16:	4a16      	ldr	r2, [pc, #88]	@ (8001b70 <HAL_GPIO_Init+0x3a8>)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001b1e:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <HAL_GPIO_Init+0x3a8>)
 8001b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b24:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001b44:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <HAL_GPIO_Init+0x3a8>)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f47f ae3d 	bne.w	80017dc <HAL_GPIO_Init+0x14>
  }
}
 8001b62:	bf00      	nop
 8001b64:	bf00      	nop
 8001b66:	3724      	adds	r7, #36	@ 0x24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	46022000 	.word	0x46022000
 8001b74:	002f7f7f 	.word	0x002f7f7f

08001b78 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	e007      	b.n	8001ba6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001b96:	4b07      	ldr	r3, [pc, #28]	@ (8001bb4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 0204 	bic.w	r2, r3, #4
 8001b9e:	4905      	ldr	r1, [pc, #20]	@ (8001bb4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40030400 	.word	0x40030400

08001bb8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001bbc:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <HAL_ICACHE_Enable+0x1c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a04      	ldr	r2, [pc, #16]	@ (8001bd4 <HAL_ICACHE_Enable+0x1c>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40030400 	.word	0x40030400

08001bd8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001be0:	4b34      	ldr	r3, [pc, #208]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001be8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d101      	bne.n	8001bf6 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e057      	b.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bfc:	d90a      	bls.n	8001c14 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	4a2a      	ldr	r2, [pc, #168]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c10:	60d3      	str	r3, [r2, #12]
 8001c12:	e007      	b.n	8001c24 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001c14:	4b27      	ldr	r3, [pc, #156]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001c1c:	4925      	ldr	r1, [pc, #148]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001c24:	4b24      	ldr	r3, [pc, #144]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a24      	ldr	r2, [pc, #144]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	099b      	lsrs	r3, r3, #6
 8001c30:	2232      	movs	r2, #50	@ 0x32
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	4a21      	ldr	r2, [pc, #132]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	099b      	lsrs	r3, r3, #6
 8001c3e:	3301      	adds	r3, #1
 8001c40:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001c42:	e002      	b.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d102      	bne.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0x84>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f3      	bne.n	8001c44 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d01b      	beq.n	8001c9a <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001c62:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a15      	ldr	r2, [pc, #84]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001c68:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	2232      	movs	r2, #50	@ 0x32
 8001c70:	fb02 f303 	mul.w	r3, r2, r3
 8001c74:	4a11      	ldr	r2, [pc, #68]	@ (8001cbc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	099b      	lsrs	r3, r3, #6
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001c80:	e002      	b.n	8001c88 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001c88:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <HAL_PWREx_ControlVoltageScaling+0xc2>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f3      	bne.n	8001c82 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e000      	b.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	46020800 	.word	0x46020800
 8001cb8:	2000000c 	.word	0x2000000c
 8001cbc:	10624dd3 	.word	0x10624dd3

08001cc0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001cc4:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	46020800 	.word	0x46020800

08001cdc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001ce4:	4b22      	ldr	r3, [pc, #136]	@ (8001d70 <HAL_PWREx_ConfigSupply+0x94>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a22      	ldr	r2, [pc, #136]	@ (8001d74 <HAL_PWREx_ConfigSupply+0x98>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	099b      	lsrs	r3, r3, #6
 8001cf0:	2232      	movs	r2, #50	@ 0x32
 8001cf2:	fb02 f303 	mul.w	r3, r2, r3
 8001cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8001d74 <HAL_PWREx_ConfigSupply+0x98>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	3301      	adds	r3, #1
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d113      	bne.n	8001d30 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001d08:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <HAL_PWREx_ConfigSupply+0x9c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001d78 <HAL_PWREx_ConfigSupply+0x9c>)
 8001d0e:	f023 0302 	bic.w	r3, r3, #2
 8001d12:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001d14:	e002      	b.n	8001d1c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001d1c:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <HAL_PWREx_ConfigSupply+0x9c>)
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d116      	bne.n	8001d56 <HAL_PWREx_ConfigSupply+0x7a>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f3      	bne.n	8001d16 <HAL_PWREx_ConfigSupply+0x3a>
 8001d2e:	e012      	b.n	8001d56 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <HAL_PWREx_ConfigSupply+0x9c>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4a10      	ldr	r2, [pc, #64]	@ (8001d78 <HAL_PWREx_ConfigSupply+0x9c>)
 8001d36:	f043 0302 	orr.w	r3, r3, #2
 8001d3a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001d3c:	e002      	b.n	8001d44 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <HAL_PWREx_ConfigSupply+0x9c>)
 8001d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <HAL_PWREx_ConfigSupply+0x7a>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f3      	bne.n	8001d3e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	2000000c 	.word	0x2000000c
 8001d74:	10624dd3 	.word	0x10624dd3
 8001d78:	46020800 	.word	0x46020800

08001d7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08e      	sub	sp, #56	@ 0x38
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	f000 bec3 	b.w	8002b1c <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d96:	4b9c      	ldr	r3, [pc, #624]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da0:	4b99      	ldr	r3, [pc, #612]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8172 	beq.w	800209c <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_RCC_OscConfig+0x52>
 8001dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc0:	2b0c      	cmp	r3, #12
 8001dc2:	f040 80e4 	bne.w	8001f8e <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	f040 80e0 	bne.w	8001f8e <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dce:	4b8e      	ldr	r3, [pc, #568]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d006      	beq.n	8001de8 <HAL_RCC_OscConfig+0x6c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	f000 be9a 	b.w	8002b1c <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dec:	4b86      	ldr	r3, [pc, #536]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d004      	beq.n	8001e02 <HAL_RCC_OscConfig+0x86>
 8001df8:	4b83      	ldr	r3, [pc, #524]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001e00:	e005      	b.n	8001e0e <HAL_RCC_OscConfig+0x92>
 8001e02:	4b81      	ldr	r3, [pc, #516]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e08:	041b      	lsls	r3, r3, #16
 8001e0a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d255      	bcs.n	8001ebe <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10a      	bne.n	8001e2e <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f001 f997 	bl	8003150 <RCC_SetFlashLatencyFromMSIRange>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f000 be77 	b.w	8002b1c <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001e2e:	4b76      	ldr	r3, [pc, #472]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4a75      	ldr	r2, [pc, #468]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001e34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e38:	6093      	str	r3, [r2, #8]
 8001e3a:	4b73      	ldr	r3, [pc, #460]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e46:	4970      	ldr	r1, [pc, #448]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e50:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001e54:	d309      	bcc.n	8001e6a <HAL_RCC_OscConfig+0xee>
 8001e56:	4b6c      	ldr	r3, [pc, #432]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f023 021f 	bic.w	r2, r3, #31
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4969      	ldr	r1, [pc, #420]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	60cb      	str	r3, [r1, #12]
 8001e68:	e07e      	b.n	8001f68 <HAL_RCC_OscConfig+0x1ec>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	da0a      	bge.n	8001e88 <HAL_RCC_OscConfig+0x10c>
 8001e72:	4b65      	ldr	r3, [pc, #404]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	015b      	lsls	r3, r3, #5
 8001e80:	4961      	ldr	r1, [pc, #388]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60cb      	str	r3, [r1, #12]
 8001e86:	e06f      	b.n	8001f68 <HAL_RCC_OscConfig+0x1ec>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e90:	d30a      	bcc.n	8001ea8 <HAL_RCC_OscConfig+0x12c>
 8001e92:	4b5d      	ldr	r3, [pc, #372]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	029b      	lsls	r3, r3, #10
 8001ea0:	4959      	ldr	r1, [pc, #356]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60cb      	str	r3, [r1, #12]
 8001ea6:	e05f      	b.n	8001f68 <HAL_RCC_OscConfig+0x1ec>
 8001ea8:	4b57      	ldr	r3, [pc, #348]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	03db      	lsls	r3, r3, #15
 8001eb6:	4954      	ldr	r1, [pc, #336]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60cb      	str	r3, [r1, #12]
 8001ebc:	e054      	b.n	8001f68 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001ebe:	4b52      	ldr	r3, [pc, #328]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	4a51      	ldr	r2, [pc, #324]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001ec4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ec8:	6093      	str	r3, [r2, #8]
 8001eca:	4b4f      	ldr	r3, [pc, #316]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	494c      	ldr	r1, [pc, #304]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001ee4:	d309      	bcc.n	8001efa <HAL_RCC_OscConfig+0x17e>
 8001ee6:	4b48      	ldr	r3, [pc, #288]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f023 021f 	bic.w	r2, r3, #31
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4945      	ldr	r1, [pc, #276]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60cb      	str	r3, [r1, #12]
 8001ef8:	e028      	b.n	8001f4c <HAL_RCC_OscConfig+0x1d0>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	da0a      	bge.n	8001f18 <HAL_RCC_OscConfig+0x19c>
 8001f02:	4b41      	ldr	r3, [pc, #260]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	015b      	lsls	r3, r3, #5
 8001f10:	493d      	ldr	r1, [pc, #244]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60cb      	str	r3, [r1, #12]
 8001f16:	e019      	b.n	8001f4c <HAL_RCC_OscConfig+0x1d0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f20:	d30a      	bcc.n	8001f38 <HAL_RCC_OscConfig+0x1bc>
 8001f22:	4b39      	ldr	r3, [pc, #228]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	029b      	lsls	r3, r3, #10
 8001f30:	4935      	ldr	r1, [pc, #212]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60cb      	str	r3, [r1, #12]
 8001f36:	e009      	b.n	8001f4c <HAL_RCC_OscConfig+0x1d0>
 8001f38:	4b33      	ldr	r3, [pc, #204]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	03db      	lsls	r3, r3, #15
 8001f46:	4930      	ldr	r1, [pc, #192]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10a      	bne.n	8001f68 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	4618      	mov	r0, r3
 8001f58:	f001 f8fa 	bl	8003150 <RCC_SetFlashLatencyFromMSIRange>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	f000 bdda 	b.w	8002b1c <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001f68:	f001 f8d8 	bl	800311c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f6c:	4b27      	ldr	r3, [pc, #156]	@ (800200c <HAL_RCC_OscConfig+0x290>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe ffcb 	bl	8000f0c <HAL_InitTick>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8001f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 808a 	beq.w	800209a <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8001f86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f8a:	f000 bdc7 	b.w	8002b1c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d066      	beq.n	8002064 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001f96:	4b1c      	ldr	r3, [pc, #112]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001fa2:	f7fe fffd 	bl	8000fa0 <HAL_GetTick>
 8001fa6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001fa8:	e009      	b.n	8001fbe <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001faa:	f7fe fff9 	bl	8000fa0 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d902      	bls.n	8001fbe <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	f000 bdaf 	b.w	8002b1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001fbe:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0ef      	beq.n	8001faa <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001fca:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	4a0e      	ldr	r2, [pc, #56]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001fd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fd4:	6093      	str	r3, [r2, #8]
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe2:	4909      	ldr	r1, [pc, #36]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001ff0:	d30e      	bcc.n	8002010 <HAL_RCC_OscConfig+0x294>
 8001ff2:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f023 021f 	bic.w	r2, r3, #31
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4902      	ldr	r1, [pc, #8]	@ (8002008 <HAL_RCC_OscConfig+0x28c>)
 8002000:	4313      	orrs	r3, r2
 8002002:	60cb      	str	r3, [r1, #12]
 8002004:	e04a      	b.n	800209c <HAL_RCC_OscConfig+0x320>
 8002006:	bf00      	nop
 8002008:	46020c00 	.word	0x46020c00
 800200c:	20000010 	.word	0x20000010
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	2b00      	cmp	r3, #0
 8002016:	da0a      	bge.n	800202e <HAL_RCC_OscConfig+0x2b2>
 8002018:	4b9b      	ldr	r3, [pc, #620]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	015b      	lsls	r3, r3, #5
 8002026:	4998      	ldr	r1, [pc, #608]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002028:	4313      	orrs	r3, r2
 800202a:	60cb      	str	r3, [r1, #12]
 800202c:	e036      	b.n	800209c <HAL_RCC_OscConfig+0x320>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002036:	d30a      	bcc.n	800204e <HAL_RCC_OscConfig+0x2d2>
 8002038:	4b93      	ldr	r3, [pc, #588]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	029b      	lsls	r3, r3, #10
 8002046:	4990      	ldr	r1, [pc, #576]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002048:	4313      	orrs	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
 800204c:	e026      	b.n	800209c <HAL_RCC_OscConfig+0x320>
 800204e:	4b8e      	ldr	r3, [pc, #568]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	03db      	lsls	r3, r3, #15
 800205c:	498a      	ldr	r1, [pc, #552]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800205e:	4313      	orrs	r3, r2
 8002060:	60cb      	str	r3, [r1, #12]
 8002062:	e01b      	b.n	800209c <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002064:	4b88      	ldr	r3, [pc, #544]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a87      	ldr	r2, [pc, #540]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002070:	f7fe ff96 	bl	8000fa0 <HAL_GetTick>
 8002074:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002076:	e009      	b.n	800208c <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002078:	f7fe ff92 	bl	8000fa0 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d902      	bls.n	800208c <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	f000 bd48 	b.w	8002b1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800208c:	4b7e      	ldr	r3, [pc, #504]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ef      	bne.n	8002078 <HAL_RCC_OscConfig+0x2fc>
 8002098:	e000      	b.n	800209c <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800209a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8094 	beq.w	80021d2 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80020aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_OscConfig+0x340>
 80020b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b2:	2b0c      	cmp	r3, #12
 80020b4:	d110      	bne.n	80020d8 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d10d      	bne.n	80020d8 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020bc:	4b72      	ldr	r3, [pc, #456]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 8083 	beq.w	80021d0 <HAL_RCC_OscConfig+0x454>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d17e      	bne.n	80021d0 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	f000 bd22 	b.w	8002b1c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020e0:	d106      	bne.n	80020f0 <HAL_RCC_OscConfig+0x374>
 80020e2:	4b69      	ldr	r3, [pc, #420]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a68      	ldr	r2, [pc, #416]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 80020e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	e041      	b.n	8002174 <HAL_RCC_OscConfig+0x3f8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020f8:	d112      	bne.n	8002120 <HAL_RCC_OscConfig+0x3a4>
 80020fa:	4b63      	ldr	r3, [pc, #396]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a62      	ldr	r2, [pc, #392]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b60      	ldr	r3, [pc, #384]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a5f      	ldr	r2, [pc, #380]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800210c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b5d      	ldr	r3, [pc, #372]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a5c      	ldr	r2, [pc, #368]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e029      	b.n	8002174 <HAL_RCC_OscConfig+0x3f8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002128:	d112      	bne.n	8002150 <HAL_RCC_OscConfig+0x3d4>
 800212a:	4b57      	ldr	r3, [pc, #348]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a56      	ldr	r2, [pc, #344]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b54      	ldr	r3, [pc, #336]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a53      	ldr	r2, [pc, #332]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800213c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b51      	ldr	r3, [pc, #324]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a50      	ldr	r2, [pc, #320]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e011      	b.n	8002174 <HAL_RCC_OscConfig+0x3f8>
 8002150:	4b4d      	ldr	r3, [pc, #308]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a4c      	ldr	r2, [pc, #304]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b4a      	ldr	r3, [pc, #296]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a49      	ldr	r2, [pc, #292]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002162:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b47      	ldr	r3, [pc, #284]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a46      	ldr	r2, [pc, #280]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800216e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d014      	beq.n	80021a6 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800217c:	f7fe ff10 	bl	8000fa0 <HAL_GetTick>
 8002180:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002182:	e009      	b.n	8002198 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7fe ff0c 	bl	8000fa0 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	@ 0x64
 8002190:	d902      	bls.n	8002198 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	f000 bcc2 	b.w	8002b1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002198:	4b3b      	ldr	r3, [pc, #236]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0ef      	beq.n	8002184 <HAL_RCC_OscConfig+0x408>
 80021a4:	e015      	b.n	80021d2 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80021a6:	f7fe fefb 	bl	8000fa0 <HAL_GetTick>
 80021aa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ac:	e009      	b.n	80021c2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ae:	f7fe fef7 	bl	8000fa0 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b64      	cmp	r3, #100	@ 0x64
 80021ba:	d902      	bls.n	80021c2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	f000 bcad 	b.w	8002b1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021c2:	4b31      	ldr	r3, [pc, #196]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1ef      	bne.n	80021ae <HAL_RCC_OscConfig+0x432>
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d066      	beq.n	80022ac <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80021de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_OscConfig+0x474>
 80021e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	d11a      	bne.n	8002220 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d117      	bne.n	8002220 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f0:	4b25      	ldr	r3, [pc, #148]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d006      	beq.n	800220a <HAL_RCC_OscConfig+0x48e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d102      	bne.n	800220a <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	f000 bc89 	b.w	8002b1c <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800220a:	4b1f      	ldr	r3, [pc, #124]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	041b      	lsls	r3, r3, #16
 8002218:	491b      	ldr	r1, [pc, #108]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800221a:	4313      	orrs	r3, r2
 800221c:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800221e:	e045      	b.n	80022ac <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d024      	beq.n	8002272 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002228:	4b17      	ldr	r3, [pc, #92]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a16      	ldr	r2, [pc, #88]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800222e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002232:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002234:	f7fe feb4 	bl	8000fa0 <HAL_GetTick>
 8002238:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800223a:	e009      	b.n	8002250 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223c:	f7fe feb0 	bl	8000fa0 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d902      	bls.n	8002250 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	f000 bc66 	b.w	8002b1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002250:	4b0d      	ldr	r3, [pc, #52]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0ef      	beq.n	800223c <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800225c:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	4907      	ldr	r1, [pc, #28]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 800226c:	4313      	orrs	r3, r2
 800226e:	610b      	str	r3, [r1, #16]
 8002270:	e01c      	b.n	80022ac <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002272:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <HAL_RCC_OscConfig+0x50c>)
 8002278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800227c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800227e:	f7fe fe8f 	bl	8000fa0 <HAL_GetTick>
 8002282:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002284:	e00c      	b.n	80022a0 <HAL_RCC_OscConfig+0x524>
 8002286:	bf00      	nop
 8002288:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228c:	f7fe fe88 	bl	8000fa0 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d902      	bls.n	80022a0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	f000 bc3e 	b.w	8002b1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a0:	4baf      	ldr	r3, [pc, #700]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1ef      	bne.n	800228c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80c7 	beq.w	8002448 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c0:	4ba7      	ldr	r3, [pc, #668]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 80022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d111      	bne.n	80022f2 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	4ba4      	ldr	r3, [pc, #656]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 80022d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d4:	4aa2      	ldr	r2, [pc, #648]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80022de:	4ba0      	ldr	r3, [pc, #640]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 80022e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80022f2:	4b9c      	ldr	r3, [pc, #624]	@ (8002564 <HAL_RCC_OscConfig+0x7e8>)
 80022f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d118      	bne.n	8002330 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80022fe:	4b99      	ldr	r3, [pc, #612]	@ (8002564 <HAL_RCC_OscConfig+0x7e8>)
 8002300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002302:	4a98      	ldr	r2, [pc, #608]	@ (8002564 <HAL_RCC_OscConfig+0x7e8>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230a:	f7fe fe49 	bl	8000fa0 <HAL_GetTick>
 800230e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002312:	f7fe fe45 	bl	8000fa0 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e3fb      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002324:	4b8f      	ldr	r3, [pc, #572]	@ (8002564 <HAL_RCC_OscConfig+0x7e8>)
 8002326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d05f      	beq.n	80023f8 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002338:	4b89      	ldr	r3, [pc, #548]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 800233a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800233e:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699a      	ldr	r2, [r3, #24]
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234a:	429a      	cmp	r2, r3
 800234c:	d037      	beq.n	80023be <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e3da      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01b      	beq.n	80023a8 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8002370:	4b7b      	ldr	r3, [pc, #492]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 8002372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002376:	4a7a      	ldr	r2, [pc, #488]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 8002378:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800237c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8002380:	f7fe fe0e 	bl	8000fa0 <HAL_GetTick>
 8002384:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002388:	f7fe fe0a 	bl	8000fa0 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e3c0      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800239a:	4b71      	ldr	r3, [pc, #452]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 800239c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1ef      	bne.n	8002388 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80023a8:	4b6d      	ldr	r3, [pc, #436]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 80023aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023ae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	496a      	ldr	r1, [pc, #424]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80023be:	4b68      	ldr	r3, [pc, #416]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 80023c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023c4:	4a66      	ldr	r2, [pc, #408]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 80023c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80023ce:	f7fe fde7 	bl	8000fa0 <HAL_GetTick>
 80023d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d6:	f7fe fde3 	bl	8000fa0 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e399      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80023e8:	4b5d      	ldr	r3, [pc, #372]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 80023ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0ef      	beq.n	80023d6 <HAL_RCC_OscConfig+0x65a>
 80023f6:	e01b      	b.n	8002430 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80023f8:	4b59      	ldr	r3, [pc, #356]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 80023fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023fe:	4a58      	ldr	r2, [pc, #352]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 8002400:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002404:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002408:	f7fe fdca 	bl	8000fa0 <HAL_GetTick>
 800240c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002410:	f7fe fdc6 	bl	8000fa0 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e37c      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002422:	4b4f      	ldr	r3, [pc, #316]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 8002424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002428:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ef      	bne.n	8002410 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002430:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002434:	2b01      	cmp	r3, #1
 8002436:	d107      	bne.n	8002448 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002438:	4b49      	ldr	r3, [pc, #292]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 800243a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800243e:	4a48      	ldr	r2, [pc, #288]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 8002440:	f023 0304 	bic.w	r3, r3, #4
 8002444:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8112 	beq.w	800267a <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245c:	4b40      	ldr	r3, [pc, #256]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 800245e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b00      	cmp	r3, #0
 8002468:	d111      	bne.n	800248e <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	4b3d      	ldr	r3, [pc, #244]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 800246c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002470:	4a3b      	ldr	r2, [pc, #236]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 8002472:	f043 0304 	orr.w	r3, r3, #4
 8002476:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800247a:	4b39      	ldr	r3, [pc, #228]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 800247c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002488:	2301      	movs	r3, #1
 800248a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800248e:	4b35      	ldr	r3, [pc, #212]	@ (8002564 <HAL_RCC_OscConfig+0x7e8>)
 8002490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d118      	bne.n	80024cc <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800249a:	4b32      	ldr	r3, [pc, #200]	@ (8002564 <HAL_RCC_OscConfig+0x7e8>)
 800249c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249e:	4a31      	ldr	r2, [pc, #196]	@ (8002564 <HAL_RCC_OscConfig+0x7e8>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a6:	f7fe fd7b 	bl	8000fa0 <HAL_GetTick>
 80024aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ae:	f7fe fd77 	bl	8000fa0 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e32d      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80024c0:	4b28      	ldr	r3, [pc, #160]	@ (8002564 <HAL_RCC_OscConfig+0x7e8>)
 80024c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01f      	beq.n	8002518 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d010      	beq.n	8002506 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80024e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 80024e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80024f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 80024f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024fa:	4a19      	ldr	r2, [pc, #100]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002504:	e018      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002506:	4b16      	ldr	r3, [pc, #88]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 8002508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800250c:	4a14      	ldr	r2, [pc, #80]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002516:	e00f      	b.n	8002538 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 800251a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800251e:	4a10      	ldr	r2, [pc, #64]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002528:	4b0d      	ldr	r3, [pc, #52]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 800252a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800252e:	4a0c      	ldr	r2, [pc, #48]	@ (8002560 <HAL_RCC_OscConfig+0x7e4>)
 8002530:	f023 0304 	bic.w	r3, r3, #4
 8002534:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d058      	beq.n	80025f2 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8002540:	f7fe fd2e 	bl	8000fa0 <HAL_GetTick>
 8002544:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002546:	e00f      	b.n	8002568 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002548:	f7fe fd2a 	bl	8000fa0 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d906      	bls.n	8002568 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e2de      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
 800255e:	bf00      	nop
 8002560:	46020c00 	.word	0x46020c00
 8002564:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002568:	4b9c      	ldr	r3, [pc, #624]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 800256a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0e8      	beq.n	8002548 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800257e:	2b00      	cmp	r3, #0
 8002580:	d01b      	beq.n	80025ba <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002582:	4b96      	ldr	r3, [pc, #600]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 8002584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002588:	4a94      	ldr	r2, [pc, #592]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 800258a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800258e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002592:	e00a      	b.n	80025aa <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002594:	f7fe fd04 	bl	8000fa0 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e2b8      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80025aa:	4b8c      	ldr	r3, [pc, #560]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 80025ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0ed      	beq.n	8002594 <HAL_RCC_OscConfig+0x818>
 80025b8:	e053      	b.n	8002662 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80025ba:	4b88      	ldr	r3, [pc, #544]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 80025bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025c0:	4a86      	ldr	r2, [pc, #536]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 80025c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80025ca:	e00a      	b.n	80025e2 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025cc:	f7fe fce8 	bl	8000fa0 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e29c      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80025e2:	4b7e      	ldr	r3, [pc, #504]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 80025e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ed      	bne.n	80025cc <HAL_RCC_OscConfig+0x850>
 80025f0:	e037      	b.n	8002662 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80025f2:	f7fe fcd5 	bl	8000fa0 <HAL_GetTick>
 80025f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7fe fcd1 	bl	8000fa0 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e285      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002610:	4b72      	ldr	r3, [pc, #456]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 8002612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1ed      	bne.n	80025fa <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800261e:	4b6f      	ldr	r3, [pc, #444]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 8002620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01a      	beq.n	8002662 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800262c:	4b6b      	ldr	r3, [pc, #428]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 800262e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002632:	4a6a      	ldr	r2, [pc, #424]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 8002634:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002638:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800263c:	e00a      	b.n	8002654 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263e:	f7fe fcaf 	bl	8000fa0 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264c:	4293      	cmp	r3, r2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e263      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002654:	4b61      	ldr	r3, [pc, #388]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 8002656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800265a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ed      	bne.n	800263e <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002662:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002666:	2b01      	cmp	r3, #1
 8002668:	d107      	bne.n	800267a <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266a:	4b5c      	ldr	r3, [pc, #368]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 800266c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002670:	4a5a      	ldr	r2, [pc, #360]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 8002672:	f023 0304 	bic.w	r3, r3, #4
 8002676:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b00      	cmp	r3, #0
 8002684:	d036      	beq.n	80026f4 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d019      	beq.n	80026c2 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800268e:	4b53      	ldr	r3, [pc, #332]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a52      	ldr	r2, [pc, #328]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 8002694:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002698:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800269a:	f7fe fc81 	bl	8000fa0 <HAL_GetTick>
 800269e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026a2:	f7fe fc7d 	bl	8000fa0 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e233      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80026b4:	4b49      	ldr	r3, [pc, #292]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x926>
 80026c0:	e018      	b.n	80026f4 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80026c2:	4b46      	ldr	r3, [pc, #280]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a45      	ldr	r2, [pc, #276]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 80026c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026cc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80026ce:	f7fe fc67 	bl	8000fa0 <HAL_GetTick>
 80026d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026d6:	f7fe fc63 	bl	8000fa0 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e219      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80026e8:	4b3c      	ldr	r3, [pc, #240]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d036      	beq.n	800276e <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	2b00      	cmp	r3, #0
 8002706:	d019      	beq.n	800273c <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002708:	4b34      	ldr	r3, [pc, #208]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a33      	ldr	r2, [pc, #204]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 800270e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002712:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002714:	f7fe fc44 	bl	8000fa0 <HAL_GetTick>
 8002718:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800271c:	f7fe fc40 	bl	8000fa0 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e1f6      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800272e:	4b2b      	ldr	r3, [pc, #172]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x9a0>
 800273a:	e018      	b.n	800276e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800273c:	4b27      	ldr	r3, [pc, #156]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a26      	ldr	r2, [pc, #152]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 8002742:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002746:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002748:	f7fe fc2a 	bl	8000fa0 <HAL_GetTick>
 800274c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002750:	f7fe fc26 	bl	8000fa0 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1dc      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002762:	4b1e      	ldr	r3, [pc, #120]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d07f      	beq.n	800287a <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277e:	2b00      	cmp	r3, #0
 8002780:	d062      	beq.n	8002848 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002782:	4b16      	ldr	r3, [pc, #88]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	4a15      	ldr	r2, [pc, #84]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 8002788:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800278c:	6093      	str	r3, [r2, #8]
 800278e:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279a:	4910      	ldr	r1, [pc, #64]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 800279c:	4313      	orrs	r3, r2
 800279e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80027a8:	d309      	bcc.n	80027be <HAL_RCC_OscConfig+0xa42>
 80027aa:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f023 021f 	bic.w	r2, r3, #31
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	4909      	ldr	r1, [pc, #36]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60cb      	str	r3, [r1, #12]
 80027bc:	e02a      	b.n	8002814 <HAL_RCC_OscConfig+0xa98>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	da0c      	bge.n	80027e0 <HAL_RCC_OscConfig+0xa64>
 80027c6:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	015b      	lsls	r3, r3, #5
 80027d4:	4901      	ldr	r1, [pc, #4]	@ (80027dc <HAL_RCC_OscConfig+0xa60>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60cb      	str	r3, [r1, #12]
 80027da:	e01b      	b.n	8002814 <HAL_RCC_OscConfig+0xa98>
 80027dc:	46020c00 	.word	0x46020c00
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027e8:	d30a      	bcc.n	8002800 <HAL_RCC_OscConfig+0xa84>
 80027ea:	4ba5      	ldr	r3, [pc, #660]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	029b      	lsls	r3, r3, #10
 80027f8:	49a1      	ldr	r1, [pc, #644]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60cb      	str	r3, [r1, #12]
 80027fe:	e009      	b.n	8002814 <HAL_RCC_OscConfig+0xa98>
 8002800:	4b9f      	ldr	r3, [pc, #636]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	03db      	lsls	r3, r3, #15
 800280e:	499c      	ldr	r1, [pc, #624]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 8002810:	4313      	orrs	r3, r2
 8002812:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002814:	4b9a      	ldr	r3, [pc, #616]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a99      	ldr	r2, [pc, #612]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 800281a:	f043 0310 	orr.w	r3, r3, #16
 800281e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002820:	f7fe fbbe 	bl	8000fa0 <HAL_GetTick>
 8002824:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002828:	f7fe fbba 	bl	8000fa0 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e170      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800283a:	4b91      	ldr	r3, [pc, #580]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0xaac>
 8002846:	e018      	b.n	800287a <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002848:	4b8d      	ldr	r3, [pc, #564]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a8c      	ldr	r2, [pc, #560]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 800284e:	f023 0310 	bic.w	r3, r3, #16
 8002852:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002854:	f7fe fba4 	bl	8000fa0 <HAL_GetTick>
 8002858:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800285c:	f7fe fba0 	bl	8000fa0 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e156      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800286e:	4b84      	ldr	r3, [pc, #528]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 814b 	beq.w	8002b1a <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002884:	2300      	movs	r3, #0
 8002886:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800288a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b0c      	cmp	r3, #12
 8002894:	f000 80fa 	beq.w	8002a8c <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289c:	2b02      	cmp	r3, #2
 800289e:	f040 80cc 	bne.w	8002a3a <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80028a2:	4b77      	ldr	r3, [pc, #476]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a76      	ldr	r2, [pc, #472]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 80028a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028ac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80028ae:	f7fe fb77 	bl	8000fa0 <HAL_GetTick>
 80028b2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b6:	f7fe fb73 	bl	8000fa0 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e129      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80028c8:	4b6d      	ldr	r3, [pc, #436]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f0      	bne.n	80028b6 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 80028d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d111      	bne.n	8002906 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80028e2:	4b67      	ldr	r3, [pc, #412]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 80028e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028e8:	4a65      	ldr	r2, [pc, #404]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80028f2:	4b63      	ldr	r3, [pc, #396]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 80028f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002900:	2301      	movs	r3, #1
 8002902:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002906:	4b5f      	ldr	r3, [pc, #380]	@ (8002a84 <HAL_RCC_OscConfig+0xd08>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800290e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002912:	d102      	bne.n	800291a <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8002914:	2301      	movs	r3, #1
 8002916:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800291a:	4b5a      	ldr	r3, [pc, #360]	@ (8002a84 <HAL_RCC_OscConfig+0xd08>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	4a59      	ldr	r2, [pc, #356]	@ (8002a84 <HAL_RCC_OscConfig+0xd08>)
 8002920:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002924:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002926:	4b56      	ldr	r3, [pc, #344]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 8002928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800292e:	f023 0303 	bic.w	r3, r3, #3
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800293a:	3a01      	subs	r2, #1
 800293c:	0212      	lsls	r2, r2, #8
 800293e:	4311      	orrs	r1, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002944:	430a      	orrs	r2, r1
 8002946:	494e      	ldr	r1, [pc, #312]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 8002948:	4313      	orrs	r3, r2
 800294a:	628b      	str	r3, [r1, #40]	@ 0x28
 800294c:	4b4c      	ldr	r3, [pc, #304]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 800294e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002950:	4b4d      	ldr	r3, [pc, #308]	@ (8002a88 <HAL_RCC_OscConfig+0xd0c>)
 8002952:	4013      	ands	r3, r2
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002958:	3a01      	subs	r2, #1
 800295a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002962:	3a01      	subs	r2, #1
 8002964:	0252      	lsls	r2, r2, #9
 8002966:	b292      	uxth	r2, r2
 8002968:	4311      	orrs	r1, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800296e:	3a01      	subs	r2, #1
 8002970:	0412      	lsls	r2, r2, #16
 8002972:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002976:	4311      	orrs	r1, r2
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800297c:	3a01      	subs	r2, #1
 800297e:	0612      	lsls	r2, r2, #24
 8002980:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002984:	430a      	orrs	r2, r1
 8002986:	493e      	ldr	r1, [pc, #248]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 8002988:	4313      	orrs	r3, r2
 800298a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800298c:	4b3c      	ldr	r3, [pc, #240]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 800298e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002990:	4a3b      	ldr	r2, [pc, #236]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 8002992:	f023 0310 	bic.w	r3, r3, #16
 8002996:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002998:	4b39      	ldr	r3, [pc, #228]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 800299a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800299c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029a0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029a8:	00d2      	lsls	r2, r2, #3
 80029aa:	4935      	ldr	r1, [pc, #212]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	638b      	str	r3, [r1, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80029b0:	4b33      	ldr	r3, [pc, #204]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 80029b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b4:	4a32      	ldr	r2, [pc, #200]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 80029b6:	f043 0310 	orr.w	r3, r3, #16
 80029ba:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80029bc:	4b30      	ldr	r3, [pc, #192]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 80029be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c0:	f023 020c 	bic.w	r2, r3, #12
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c8:	492d      	ldr	r1, [pc, #180]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80029ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d105      	bne.n	80029e2 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80029d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002a84 <HAL_RCC_OscConfig+0xd08>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	4a2a      	ldr	r2, [pc, #168]	@ (8002a84 <HAL_RCC_OscConfig+0xd08>)
 80029dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e0:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80029e2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d107      	bne.n	80029fa <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80029ea:	4b25      	ldr	r3, [pc, #148]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 80029ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029f0:	4a23      	ldr	r2, [pc, #140]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 80029f2:	f023 0304 	bic.w	r3, r3, #4
 80029f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029fa:	4b21      	ldr	r3, [pc, #132]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 80029fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fe:	4a20      	ldr	r2, [pc, #128]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 8002a00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a04:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002a06:	4b1e      	ldr	r3, [pc, #120]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 8002a0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a10:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002a12:	f7fe fac5 	bl	8000fa0 <HAL_GetTick>
 8002a16:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1a:	f7fe fac1 	bl	8000fa0 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e077      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002a2c:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0xc9e>
 8002a38:	e06f      	b.n	8002b1a <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002a3a:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a10      	ldr	r2, [pc, #64]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 8002a40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a44:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002a46:	f7fe faab 	bl	8000fa0 <HAL_GetTick>
 8002a4a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4e:	f7fe faa7 	bl	8000fa0 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e05d      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a60:	4b07      	ldr	r3, [pc, #28]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f0      	bne.n	8002a4e <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002a6c:	4b04      	ldr	r3, [pc, #16]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a70:	4a03      	ldr	r2, [pc, #12]	@ (8002a80 <HAL_RCC_OscConfig+0xd04>)
 8002a72:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002a76:	f023 0303 	bic.w	r3, r3, #3
 8002a7a:	6293      	str	r3, [r2, #40]	@ 0x28
 8002a7c:	e04d      	b.n	8002b1a <HAL_RCC_OscConfig+0xd9e>
 8002a7e:	bf00      	nop
 8002a80:	46020c00 	.word	0x46020c00
 8002a84:	46020800 	.word	0x46020800
 8002a88:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002a8c:	4b25      	ldr	r3, [pc, #148]	@ (8002b24 <HAL_RCC_OscConfig+0xda8>)
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a90:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a92:	4b24      	ldr	r3, [pc, #144]	@ (8002b24 <HAL_RCC_OscConfig+0xda8>)
 8002a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a96:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d03a      	beq.n	8002b16 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0203 	and.w	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d133      	bne.n	8002b16 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	0a1b      	lsrs	r3, r3, #8
 8002ab2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d12a      	bne.n	8002b16 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	0b1b      	lsrs	r3, r3, #12
 8002ac4:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d122      	bne.n	8002b16 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ada:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d11a      	bne.n	8002b16 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	0a5b      	lsrs	r3, r3, #9
 8002ae4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aec:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d111      	bne.n	8002b16 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	0c1b      	lsrs	r3, r3, #16
 8002af6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002afe:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d108      	bne.n	8002b16 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	0e1b      	lsrs	r3, r3, #24
 8002b08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b10:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3738      	adds	r7, #56	@ 0x38
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	46020c00 	.word	0x46020c00

08002b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e1d9      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b9b      	ldr	r3, [pc, #620]	@ (8002dac <HAL_RCC_ClockConfig+0x284>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d910      	bls.n	8002b6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b98      	ldr	r3, [pc, #608]	@ (8002dac <HAL_RCC_ClockConfig+0x284>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 020f 	bic.w	r2, r3, #15
 8002b52:	4996      	ldr	r1, [pc, #600]	@ (8002dac <HAL_RCC_ClockConfig+0x284>)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b94      	ldr	r3, [pc, #592]	@ (8002dac <HAL_RCC_ClockConfig+0x284>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e1c1      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d010      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	4b8c      	ldr	r3, [pc, #560]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d908      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002b88:	4b89      	ldr	r3, [pc, #548]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	4986      	ldr	r1, [pc, #536]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d012      	beq.n	8002bcc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	4b81      	ldr	r3, [pc, #516]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d909      	bls.n	8002bcc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002bb8:	4b7d      	ldr	r3, [pc, #500]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	497a      	ldr	r1, [pc, #488]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d010      	beq.n	8002bfa <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	4b74      	ldr	r3, [pc, #464]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d908      	bls.n	8002bfa <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002be8:	4b71      	ldr	r3, [pc, #452]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	496e      	ldr	r1, [pc, #440]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d010      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	4b69      	ldr	r3, [pc, #420]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d908      	bls.n	8002c28 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002c16:	4b66      	ldr	r3, [pc, #408]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	f023 020f 	bic.w	r2, r3, #15
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	4963      	ldr	r1, [pc, #396]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80d2 	beq.w	8002dda <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d143      	bne.n	8002cca <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c42:	4b5b      	ldr	r3, [pc, #364]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d110      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002c50:	4b57      	ldr	r3, [pc, #348]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c56:	4a56      	ldr	r2, [pc, #344]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002c60:	4b53      	ldr	r3, [pc, #332]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002c72:	f7fe f995 	bl	8000fa0 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002c78:	4b4e      	ldr	r3, [pc, #312]	@ (8002db4 <HAL_RCC_ClockConfig+0x28c>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00f      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002c86:	f7fe f98b 	bl	8000fa0 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e12b      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002c98:	4b46      	ldr	r3, [pc, #280]	@ (8002db4 <HAL_RCC_ClockConfig+0x28c>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002caa:	4b41      	ldr	r3, [pc, #260]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb0:	4a3f      	ldr	r2, [pc, #252]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002cb2:	f023 0304 	bic.w	r3, r3, #4
 8002cb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002cba:	4b3d      	ldr	r3, [pc, #244]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d121      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e112      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd2:	4b37      	ldr	r3, [pc, #220]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d115      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e106      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002cea:	4b31      	ldr	r3, [pc, #196]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0fa      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0f2      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002d0a:	4b29      	ldr	r3, [pc, #164]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f023 0203 	bic.w	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4926      	ldr	r1, [pc, #152]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002d1c:	f7fe f940 	bl	8000fa0 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d112      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2c:	f7fe f938 	bl	8000fa0 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0d6      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d42:	4b1b      	ldr	r3, [pc, #108]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	d1ee      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x204>
 8002d4e:	e044      	b.n	8002dda <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d112      	bne.n	8002d7e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d58:	e00a      	b.n	8002d70 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5a:	f7fe f921 	bl	8000fa0 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e0bf      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d70:	4b0f      	ldr	r3, [pc, #60]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d1ee      	bne.n	8002d5a <HAL_RCC_ClockConfig+0x232>
 8002d7c:	e02d      	b.n	8002dda <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d123      	bne.n	8002dce <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d86:	e00a      	b.n	8002d9e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d88:	f7fe f90a 	bl	8000fa0 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e0a8      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d9e:	4b04      	ldr	r3, [pc, #16]	@ (8002db0 <HAL_RCC_ClockConfig+0x288>)
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1ee      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x260>
 8002daa:	e016      	b.n	8002dda <HAL_RCC_ClockConfig+0x2b2>
 8002dac:	40022000 	.word	0x40022000
 8002db0:	46020c00 	.word	0x46020c00
 8002db4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db8:	f7fe f8f2 	bl	8000fa0 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e090      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dce:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef8 <HAL_RCC_ClockConfig+0x3d0>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d1ee      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d010      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	4b43      	ldr	r3, [pc, #268]	@ (8002ef8 <HAL_RCC_ClockConfig+0x3d0>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d208      	bcs.n	8002e08 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002df6:	4b40      	ldr	r3, [pc, #256]	@ (8002ef8 <HAL_RCC_ClockConfig+0x3d0>)
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	f023 020f 	bic.w	r2, r3, #15
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	493d      	ldr	r1, [pc, #244]	@ (8002ef8 <HAL_RCC_ClockConfig+0x3d0>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e08:	4b3c      	ldr	r3, [pc, #240]	@ (8002efc <HAL_RCC_ClockConfig+0x3d4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d210      	bcs.n	8002e38 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e16:	4b39      	ldr	r3, [pc, #228]	@ (8002efc <HAL_RCC_ClockConfig+0x3d4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 020f 	bic.w	r2, r3, #15
 8002e1e:	4937      	ldr	r1, [pc, #220]	@ (8002efc <HAL_RCC_ClockConfig+0x3d4>)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b35      	ldr	r3, [pc, #212]	@ (8002efc <HAL_RCC_ClockConfig+0x3d4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e05b      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d010      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef8 <HAL_RCC_ClockConfig+0x3d0>)
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d208      	bcs.n	8002e66 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002e54:	4b28      	ldr	r3, [pc, #160]	@ (8002ef8 <HAL_RCC_ClockConfig+0x3d0>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4925      	ldr	r1, [pc, #148]	@ (8002ef8 <HAL_RCC_ClockConfig+0x3d0>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d012      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <HAL_RCC_ClockConfig+0x3d0>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d209      	bcs.n	8002e98 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002e84:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef8 <HAL_RCC_ClockConfig+0x3d0>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	4919      	ldr	r1, [pc, #100]	@ (8002ef8 <HAL_RCC_ClockConfig+0x3d0>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d010      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	4b13      	ldr	r3, [pc, #76]	@ (8002ef8 <HAL_RCC_ClockConfig+0x3d0>)
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d208      	bcs.n	8002ec6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002eb4:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <HAL_RCC_ClockConfig+0x3d0>)
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	490d      	ldr	r1, [pc, #52]	@ (8002ef8 <HAL_RCC_ClockConfig+0x3d0>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002ec6:	f000 f821 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <HAL_RCC_ClockConfig+0x3d0>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	490a      	ldr	r1, [pc, #40]	@ (8002f00 <HAL_RCC_ClockConfig+0x3d8>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8002edc:	4a09      	ldr	r2, [pc, #36]	@ (8002f04 <HAL_RCC_ClockConfig+0x3dc>)
 8002ede:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ee0:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <HAL_RCC_ClockConfig+0x3e0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe f811 	bl	8000f0c <HAL_InitTick>
 8002eea:	4603      	mov	r3, r0
 8002eec:	73fb      	strb	r3, [r7, #15]

  return status;
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	46020c00 	.word	0x46020c00
 8002efc:	40022000 	.word	0x40022000
 8002f00:	08008128 	.word	0x08008128
 8002f04:	2000000c 	.word	0x2000000c
 8002f08:	20000010 	.word	0x20000010

08002f0c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b08b      	sub	sp, #44	@ 0x2c
 8002f10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1a:	4b7b      	ldr	r3, [pc, #492]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f24:	4b78      	ldr	r3, [pc, #480]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x34>
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d121      	bne.n	8002f7e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d11e      	bne.n	8002f7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002f40:	4b71      	ldr	r3, [pc, #452]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002f4c:	4b6e      	ldr	r3, [pc, #440]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f52:	0b1b      	lsrs	r3, r3, #12
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f5a:	e005      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	0f1b      	lsrs	r3, r3, #28
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f68:	4a68      	ldr	r2, [pc, #416]	@ (800310c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f70:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d110      	bne.n	8002f9a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f7c:	e00d      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f7e:	4b62      	ldr	r3, [pc, #392]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d102      	bne.n	8002f90 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f8a:	4b61      	ldr	r3, [pc, #388]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f8c:	623b      	str	r3, [r7, #32]
 8002f8e:	e004      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f96:	4b5e      	ldr	r3, [pc, #376]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f98:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b0c      	cmp	r3, #12
 8002f9e:	f040 80ac 	bne.w	80030fa <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002fa2:	4b59      	ldr	r3, [pc, #356]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002fac:	4b56      	ldr	r3, [pc, #344]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb0:	0a1b      	lsrs	r3, r3, #8
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002fba:	4b53      	ldr	r3, [pc, #332]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002fc6:	4b50      	ldr	r3, [pc, #320]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fca:	08db      	lsrs	r3, r3, #3
 8002fcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fde:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8086 	beq.w	80030f6 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d003      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xec>
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d022      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x130>
 8002ff6:	e043      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003002:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8003114 <HAL_RCC_GetSysClockFreq+0x208>
 8003006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800300a:	4b3f      	ldr	r3, [pc, #252]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800300c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800300e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003012:	ee07 3a90 	vmov	s15, r3
 8003016:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800301a:	ed97 6a01 	vldr	s12, [r7, #4]
 800301e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003118 <HAL_RCC_GetSysClockFreq+0x20c>
 8003022:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003026:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800302a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800302e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003036:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800303a:	e046      	b.n	80030ca <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	ee07 3a90 	vmov	s15, r3
 8003042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003046:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8003114 <HAL_RCC_GetSysClockFreq+0x208>
 800304a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800304e:	4b2e      	ldr	r3, [pc, #184]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800305e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003062:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003118 <HAL_RCC_GetSysClockFreq+0x20c>
 8003066:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800306a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800306e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003072:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800307e:	e024      	b.n	80030ca <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	ee07 3a90 	vmov	s15, r3
 8003090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003098:	4b1b      	ldr	r3, [pc, #108]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800309a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a0:	ee07 3a90 	vmov	s15, r3
 80030a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80030a8:	ed97 6a01 	vldr	s12, [r7, #4]
 80030ac:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8003118 <HAL_RCC_GetSysClockFreq+0x20c>
 80030b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80030b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c4:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80030c8:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80030ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80030cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ce:	0e1b      	lsrs	r3, r3, #24
 80030d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030d4:	3301      	adds	r3, #1
 80030d6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	ee07 3a90 	vmov	s15, r3
 80030de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80030e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030ee:	ee17 3a90 	vmov	r3, s15
 80030f2:	623b      	str	r3, [r7, #32]
 80030f4:	e001      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80030fa:	6a3b      	ldr	r3, [r7, #32]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	372c      	adds	r7, #44	@ 0x2c
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	46020c00 	.word	0x46020c00
 800310c:	08008138 	.word	0x08008138
 8003110:	00f42400 	.word	0x00f42400
 8003114:	4b742400 	.word	0x4b742400
 8003118:	46000000 	.word	0x46000000

0800311c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003120:	f7ff fef4 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8003124:	4602      	mov	r2, r0
 8003126:	4b07      	ldr	r3, [pc, #28]	@ (8003144 <HAL_RCC_GetHCLKFreq+0x28>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	4906      	ldr	r1, [pc, #24]	@ (8003148 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003130:	5ccb      	ldrb	r3, [r1, r3]
 8003132:	fa22 f303 	lsr.w	r3, r2, r3
 8003136:	4a05      	ldr	r2, [pc, #20]	@ (800314c <HAL_RCC_GetHCLKFreq+0x30>)
 8003138:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800313a:	4b04      	ldr	r3, [pc, #16]	@ (800314c <HAL_RCC_GetHCLKFreq+0x30>)
 800313c:	681b      	ldr	r3, [r3, #0]
}
 800313e:	4618      	mov	r0, r3
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	46020c00 	.word	0x46020c00
 8003148:	08008128 	.word	0x08008128
 800314c:	2000000c 	.word	0x2000000c

08003150 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003158:	4b3e      	ldr	r3, [pc, #248]	@ (8003254 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800315a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003166:	f7fe fdab 	bl	8001cc0 <HAL_PWREx_GetVoltageRange>
 800316a:	6178      	str	r0, [r7, #20]
 800316c:	e019      	b.n	80031a2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800316e:	4b39      	ldr	r3, [pc, #228]	@ (8003254 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003170:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003174:	4a37      	ldr	r2, [pc, #220]	@ (8003254 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003176:	f043 0304 	orr.w	r3, r3, #4
 800317a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800317e:	4b35      	ldr	r3, [pc, #212]	@ (8003254 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003180:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800318c:	f7fe fd98 	bl	8001cc0 <HAL_PWREx_GetVoltageRange>
 8003190:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003192:	4b30      	ldr	r3, [pc, #192]	@ (8003254 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003198:	4a2e      	ldr	r2, [pc, #184]	@ (8003254 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800319a:	f023 0304 	bic.w	r3, r3, #4
 800319e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80031a8:	d003      	beq.n	80031b2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031b0:	d109      	bne.n	80031c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031b8:	d202      	bcs.n	80031c0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80031ba:	2301      	movs	r3, #1
 80031bc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80031be:	e033      	b.n	8003228 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80031c4:	e030      	b.n	8003228 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031cc:	d208      	bcs.n	80031e0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d4:	d102      	bne.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80031d6:	2303      	movs	r3, #3
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	e025      	b.n	8003228 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e035      	b.n	800324c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031e6:	d90f      	bls.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031f4:	d902      	bls.n	80031fc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	e015      	b.n	8003228 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80031fc:	2301      	movs	r3, #1
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	e012      	b.n	8003228 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	e00f      	b.n	8003228 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800320e:	d109      	bne.n	8003224 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003216:	d102      	bne.n	800321e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003218:	2301      	movs	r3, #1
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	e004      	b.n	8003228 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800321e:	2302      	movs	r3, #2
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	e001      	b.n	8003228 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003224:	2301      	movs	r3, #1
 8003226:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003228:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f023 020f 	bic.w	r2, r3, #15
 8003230:	4909      	ldr	r1, [pc, #36]	@ (8003258 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003238:	4b07      	ldr	r3, [pc, #28]	@ (8003258 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	429a      	cmp	r2, r3
 8003244:	d001      	beq.n	800324a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	46020c00 	.word	0x46020c00
 8003258:	40022000 	.word	0x40022000

0800325c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800325c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003294 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003260:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003262:	e003      	b.n	800326c <LoopCopyDataInit>

08003264 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003264:	4b0c      	ldr	r3, [pc, #48]	@ (8003298 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003266:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003268:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800326a:	3104      	adds	r1, #4

0800326c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800326c:	480b      	ldr	r0, [pc, #44]	@ (800329c <LoopForever+0xa>)
	ldr	r3, =_edata
 800326e:	4b0c      	ldr	r3, [pc, #48]	@ (80032a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003270:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003272:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003274:	d3f6      	bcc.n	8003264 <CopyDataInit>
	ldr	r2, =_sbss
 8003276:	4a0b      	ldr	r2, [pc, #44]	@ (80032a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003278:	e002      	b.n	8003280 <LoopFillZerobss>

0800327a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800327a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800327c:	f842 3b04 	str.w	r3, [r2], #4

08003280 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003280:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <LoopForever+0x16>)
	cmp	r2, r3
 8003282:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003284:	d3f9      	bcc.n	800327a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003286:	f7fd fddb 	bl	8000e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800328a:	f002 fbdf 	bl	8005a4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800328e:	f001 f927 	bl	80044e0 <main>

08003292 <LoopForever>:

LoopForever:
    b LoopForever
 8003292:	e7fe      	b.n	8003292 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003294:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8003298:	080085f8 	.word	0x080085f8
	ldr	r0, =_sdata
 800329c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80032a0:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 80032a4:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 80032a8:	20000558 	.word	0x20000558

080032ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032ac:	e7fe      	b.n	80032ac <ADC1_IRQHandler>
	...

080032b0 <generate_xorand>:
*/

#include "main.h"


void generate_xorand(float *x, float *y, int k) {
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]

	switch (k) {
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b07      	cmp	r3, #7
 80032c0:	f200 80d4 	bhi.w	800346c <generate_xorand+0x1bc>
 80032c4:	a201      	add	r2, pc, #4	@ (adr r2, 80032cc <generate_xorand+0x1c>)
 80032c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ca:	bf00      	nop
 80032cc:	080032ed 	.word	0x080032ed
 80032d0:	0800331d 	.word	0x0800331d
 80032d4:	0800334d 	.word	0x0800334d
 80032d8:	0800337d 	.word	0x0800337d
 80032dc:	080033ad 	.word	0x080033ad
 80032e0:	080033dd 	.word	0x080033dd
 80032e4:	0800340d 	.word	0x0800340d
 80032e8:	0800343d 	.word	0x0800343d

	case 0:
		x[0] = 0.0;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
		x[1] = 0.0;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3304      	adds	r3, #4
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
		x[2] = 0.0;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3308      	adds	r3, #8
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
		y[0] = 0.0;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
		y[1] = 0.0;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	3304      	adds	r3, #4
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
		break;
 800331a:	e0a7      	b.n	800346c <generate_xorand+0x1bc>
	case 1:
		x[0] = 0.0;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
		x[1] = 0.0;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	3304      	adds	r3, #4
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
		x[2] = 1.0;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3308      	adds	r3, #8
 8003332:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003336:	601a      	str	r2, [r3, #0]
		y[0] = 0.0;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
		y[1] = 1.0;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	3304      	adds	r3, #4
 8003344:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003348:	601a      	str	r2, [r3, #0]
		break;
 800334a:	e08f      	b.n	800346c <generate_xorand+0x1bc>
	case 2:
		x[0] = 0.0;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
		x[1] = 1.0;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	3304      	adds	r3, #4
 8003358:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800335c:	601a      	str	r2, [r3, #0]
		x[2] = 0.0;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3308      	adds	r3, #8
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
		y[0] = 1.0;
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800336e:	601a      	str	r2, [r3, #0]
		y[1] = 1.0;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	3304      	adds	r3, #4
 8003374:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003378:	601a      	str	r2, [r3, #0]
		break;
 800337a:	e077      	b.n	800346c <generate_xorand+0x1bc>
	case 3:
		x[0] = 0.0;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
		x[1] = 1.0;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3304      	adds	r3, #4
 8003388:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800338c:	601a      	str	r2, [r3, #0]
		x[2] = 1.0;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3308      	adds	r3, #8
 8003392:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003396:	601a      	str	r2, [r3, #0]
		y[0] = 1.0;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800339e:	601a      	str	r2, [r3, #0]
		y[1] = 0.0;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	3304      	adds	r3, #4
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
		break;
 80033aa:	e05f      	b.n	800346c <generate_xorand+0x1bc>
	case 4:
		x[0] = 1.0;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033b2:	601a      	str	r2, [r3, #0]
		x[1] = 0.0;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3304      	adds	r3, #4
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
		x[2] = 0.0;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3308      	adds	r3, #8
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
		y[0] = 1.0;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033ce:	601a      	str	r2, [r3, #0]
		y[1] = 0.0;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	3304      	adds	r3, #4
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
		break;
 80033da:	e047      	b.n	800346c <generate_xorand+0x1bc>
	case 5:
		x[0] = 1.0;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033e2:	601a      	str	r2, [r3, #0]
		x[1] = 0.0;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	3304      	adds	r3, #4
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
		x[2] = 1.0;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3308      	adds	r3, #8
 80033f2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033f6:	601a      	str	r2, [r3, #0]
		y[0] = 1.0;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033fe:	601a      	str	r2, [r3, #0]
		y[1] = 1.0;
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	3304      	adds	r3, #4
 8003404:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003408:	601a      	str	r2, [r3, #0]
		break;
 800340a:	e02f      	b.n	800346c <generate_xorand+0x1bc>
	case 6:
		x[0] = 1.0;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003412:	601a      	str	r2, [r3, #0]
		x[1] = 1.0;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3304      	adds	r3, #4
 8003418:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800341c:	601a      	str	r2, [r3, #0]
		x[2] = 0.0;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	3308      	adds	r3, #8
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
		y[0] = 0.0;
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
		y[1] = 1.0;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	3304      	adds	r3, #4
 8003434:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003438:	601a      	str	r2, [r3, #0]
		break;
 800343a:	e017      	b.n	800346c <generate_xorand+0x1bc>
	case 7:
		x[0] = 1.0;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003442:	601a      	str	r2, [r3, #0]
		x[1] = 1.0;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3304      	adds	r3, #4
 8003448:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800344c:	601a      	str	r2, [r3, #0]
		x[2] = 1.0;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	3308      	adds	r3, #8
 8003452:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003456:	601a      	str	r2, [r3, #0]
		y[0] = 0.0;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
		y[1] = 0.0;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	3304      	adds	r3, #4
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
		break;
 800346a:	bf00      	nop
	 * Since 6 input neurons form the neural network, the
	 * remaining four Ground Truth values are set to zero.
	 *
	 */

	y[2] = 0.0;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	3308      	adds	r3, #8
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
	y[3] = 0.0;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	330c      	adds	r3, #12
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
	y[4] = 0.0;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	3310      	adds	r3, #16
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
	y[5] = 0.0;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	3314      	adds	r3, #20
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <Output_Error>:


void Output_Error(int size, ANN *net, float * ground_truth, float *error) {
 80034a0:	b5b0      	push	{r4, r5, r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
	/*
	 * Compute error as mean squared difference between
	 * output and Ground Truth
	 */

	*error = 0;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < size; i++) {
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	e02a      	b.n	8003512 <Output_Error+0x72>
		*error = *error
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	ed93 7a00 	vldr	s14, [r3]
				+ (net->output[i] - ground_truth[i]) * (net->output[i] - ground_truth[i]);
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	edd3 6a00 	vldr	s13, [r3]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4413      	add	r3, r2
 80034d8:	edd3 7a00 	vldr	s15, [r3]
 80034dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	69da      	ldr	r2, [r3, #28]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	ed93 6a00 	vldr	s12, [r3]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	edd3 7a00 	vldr	s15, [r3]
 80034fa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80034fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003502:	ee77 7a27 	vadd.f32	s15, s14, s15
		*error = *error
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < size; i++) {
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	3301      	adds	r3, #1
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	429a      	cmp	r2, r3
 8003518:	dbd0      	blt.n	80034bc <Output_Error+0x1c>
	}
	*error = *error / size;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	edd3 6a00 	vldr	s13, [r3]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800352a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	edc3 7a00 	vstr	s15, [r3]

	printf("%0.3f\t%0.3f\t", ground_truth[0], ground_truth[1]);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7fd f809 	bl	8000550 <__aeabi_f2d>
 800353e:	4604      	mov	r4, r0
 8003540:	460d      	mov	r5, r1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3304      	adds	r3, #4
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fd f801 	bl	8000550 <__aeabi_f2d>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	e9cd 2300 	strd	r2, r3, [sp]
 8003556:	4622      	mov	r2, r4
 8003558:	462b      	mov	r3, r5
 800355a:	480f      	ldr	r0, [pc, #60]	@ (8003598 <Output_Error+0xf8>)
 800355c:	f002 f9ec 	bl	8005938 <iprintf>
	printf("%0.3f\t%0.3f\n", net->output[0], net->output[1]);
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fc fff2 	bl	8000550 <__aeabi_f2d>
 800356c:	4604      	mov	r4, r0
 800356e:	460d      	mov	r5, r1
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	3304      	adds	r3, #4
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7fc ffe9 	bl	8000550 <__aeabi_f2d>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	e9cd 2300 	strd	r2, r3, [sp]
 8003586:	4622      	mov	r2, r4
 8003588:	462b      	mov	r3, r5
 800358a:	4804      	ldr	r0, [pc, #16]	@ (800359c <Output_Error+0xfc>)
 800358c:	f002 f9d4 	bl	8005938 <iprintf>
}
 8003590:	bf00      	nop
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bdb0      	pop	{r4, r5, r7, pc}
 8003598:	08007f40 	.word	0x08007f40
 800359c:	08007f50 	.word	0x08007f50

080035a0 <BP_ANN>:


//-----ANN-----


void BP_ANN(ANN *net, float *input, float *output, float *weights, float *velocity, float *bias, float *delta, int depth){
 80035a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035a4:	ed2d 8b02 	vpush	{d8}
 80035a8:	b0af      	sub	sp, #188	@ 0xbc
 80035aa:	af04      	add	r7, sp, #16
 80035ac:	6578      	str	r0, [r7, #84]	@ 0x54
 80035ae:	6539      	str	r1, [r7, #80]	@ 0x50
 80035b0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80035b2:	64bb      	str	r3, [r7, #72]	@ 0x48
	unsigned int i,j;
	unsigned int DIM[2] = {net->topology[net->n_layers - depth], net->topology[net->n_layers - depth - 1]};
 80035b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b6:	68d9      	ldr	r1, [r3, #12]
 80035b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035cc:	68d9      	ldr	r1, [r3, #12]
 80035ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035dc:	3b01      	subs	r3, #1
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	663b      	str	r3, [r7, #96]	@ 0x60

	if(depth == 1){
 80035e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	f040 8185 	bne.w	80038fa <BP_ANN+0x35a>
 80035f0:	466b      	mov	r3, sp
 80035f2:	461d      	mov	r5, r3
		for(i = 0; i < DIM[0]; i++){
 80035f4:	2300      	movs	r3, #0
 80035f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80035fa:	e0c4      	b.n	8003786 <BP_ANN+0x1e6>
			net->output[i] = 0.0;
 80035fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
			for(j = 0; j < DIM[1]; j++){
 800360e:	2300      	movs	r3, #0
 8003610:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003614:	e02c      	b.n	8003670 <BP_ANN+0xd0>
				net->output[i] += weights[(DIM[1]*i)+j]*input[j];
 8003616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003618:	69da      	ldr	r2, [r3, #28]
 800361a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	ed93 7a00 	vldr	s14, [r3]
 8003626:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003628:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800362c:	fb03 f202 	mul.w	r2, r3, r2
 8003630:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800363a:	4413      	add	r3, r2
 800363c:	edd3 6a00 	vldr	s13, [r3]
 8003640:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003648:	4413      	add	r3, r2
 800364a:	edd3 7a00 	vldr	s15, [r3]
 800364e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003662:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM[1]; j++){
 8003666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800366a:	3301      	adds	r3, #1
 800366c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003670:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003672:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003676:	429a      	cmp	r2, r3
 8003678:	d3cd      	bcc.n	8003616 <BP_ANN+0x76>
			}
			net->output[i] = net->output[i] + bias[i];
 800367a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	ed93 7a00 	vldr	s14, [r3]
 800368a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003694:	4413      	add	r3, r2
 8003696:	edd3 7a00 	vldr	s15, [r3]
 800369a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369c:	69da      	ldr	r2, [r3, #28]
 800369e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036aa:	edc3 7a00 	vstr	s15, [r3]
			delta[i] = (output[i]-net->output_activation_function(net->output[i])) * net->output_activation_derivative(net->output[i]);
 80036ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036b6:	4413      	add	r3, r2
 80036b8:	ed93 8a00 	vldr	s16, [r3]
 80036bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036c2:	69d1      	ldr	r1, [r2, #28]
 80036c4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80036c8:	0092      	lsls	r2, r2, #2
 80036ca:	440a      	add	r2, r1
 80036cc:	edd2 7a00 	vldr	s15, [r2]
 80036d0:	eeb0 0a67 	vmov.f32	s0, s15
 80036d4:	4798      	blx	r3
 80036d6:	eef0 7a40 	vmov.f32	s15, s0
 80036da:	ee38 8a67 	vsub.f32	s16, s16, s15
 80036de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036e4:	69d1      	ldr	r1, [r2, #28]
 80036e6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80036ea:	0092      	lsls	r2, r2, #2
 80036ec:	440a      	add	r2, r1
 80036ee:	edd2 7a00 	vldr	s15, [r2]
 80036f2:	eeb0 0a67 	vmov.f32	s0, s15
 80036f6:	4798      	blx	r3
 80036f8:	eef0 7a40 	vmov.f32	s15, s0
 80036fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003706:	4413      	add	r3, r2
 8003708:	ee68 7a27 	vmul.f32	s15, s16, s15
 800370c:	edc3 7a00 	vstr	s15, [r3]
			net->output[i] = net->output_activation_function(net->output[i]);
 8003710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003716:	69d1      	ldr	r1, [r2, #28]
 8003718:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800371c:	0092      	lsls	r2, r2, #2
 800371e:	440a      	add	r2, r1
 8003720:	edd2 7a00 	vldr	s15, [r2]
 8003724:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003726:	69d1      	ldr	r1, [r2, #28]
 8003728:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800372c:	0092      	lsls	r2, r2, #2
 800372e:	188c      	adds	r4, r1, r2
 8003730:	eeb0 0a67 	vmov.f32	s0, s15
 8003734:	4798      	blx	r3
 8003736:	eef0 7a40 	vmov.f32	s15, s0
 800373a:	edc4 7a00 	vstr	s15, [r4]
			bias[i] = bias[i] + delta[i]*net->beta;
 800373e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003748:	4413      	add	r3, r2
 800374a:	ed93 7a00 	vldr	s14, [r3]
 800374e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003758:	4413      	add	r3, r2
 800375a:	edd3 6a00 	vldr	s13, [r3]
 800375e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003760:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003768:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003772:	4413      	add	r3, r2
 8003774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003778:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]; i++){
 800377c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003780:	3301      	adds	r3, #1
 8003782:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003788:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800378c:	429a      	cmp	r2, r3
 800378e:	f4ff af35 	bcc.w	80035fc <BP_ANN+0x5c>
		}

		float dEdW[DIM[0]*DIM[1]];
 8003792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003794:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003796:	fb02 f103 	mul.w	r1, r2, r3
 800379a:	460b      	mov	r3, r1
 800379c:	3b01      	subs	r3, #1
 800379e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037a0:	2300      	movs	r3, #0
 80037a2:	468a      	mov	sl, r1
 80037a4:	469b      	mov	fp, r3
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80037b2:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80037b6:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80037ba:	2300      	movs	r3, #0
 80037bc:	4688      	mov	r8, r1
 80037be:	4699      	mov	r9, r3
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80037cc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80037d0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80037d4:	008b      	lsls	r3, r1, #2
 80037d6:	3307      	adds	r3, #7
 80037d8:	08db      	lsrs	r3, r3, #3
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	ebad 0d03 	sub.w	sp, sp, r3
 80037e0:	ab04      	add	r3, sp, #16
 80037e2:	3303      	adds	r3, #3
 80037e4:	089b      	lsrs	r3, r3, #2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	667b      	str	r3, [r7, #100]	@ 0x64
		for(i = 0; i < DIM[0]; i++){
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80037f0:	e030      	b.n	8003854 <BP_ANN+0x2b4>
			for(j = 0; j < DIM[1]; j++){
 80037f2:	2300      	movs	r3, #0
 80037f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037f8:	e022      	b.n	8003840 <BP_ANN+0x2a0>
				dEdW[(DIM[1]*i)+j] = delta[i]*input[j];
 80037fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003804:	4413      	add	r3, r2
 8003806:	ed93 7a00 	vldr	s14, [r3]
 800380a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003812:	4413      	add	r3, r2
 8003814:	edd3 7a00 	vldr	s15, [r3]
 8003818:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800381a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800381e:	fb03 f202 	mul.w	r2, r3, r2
 8003822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003826:	4413      	add	r3, r2
 8003828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM[1]; j++){
 8003836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800383a:	3301      	adds	r3, #1
 800383c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003840:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003842:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003846:	429a      	cmp	r2, r3
 8003848:	d3d7      	bcc.n	80037fa <BP_ANN+0x25a>
		for(i = 0; i < DIM[0]; i++){
 800384a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800384e:	3301      	adds	r3, #1
 8003850:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003854:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003856:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800385a:	429a      	cmp	r2, r3
 800385c:	d3c9      	bcc.n	80037f2 <BP_ANN+0x252>
			}
		}
		for(i = 0; i < DIM[0]*DIM[1]; i++){
 800385e:	2300      	movs	r3, #0
 8003860:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003864:	e03f      	b.n	80038e6 <BP_ANN+0x346>
			velocity[i] = dEdW[i]*net->eta - velocity[i]*net->alpha;
 8003866:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003868:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	ed93 7a00 	vldr	s14, [r3]
 8003874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003876:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800387a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800387e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8003888:	4413      	add	r3, r2
 800388a:	edd3 6a00 	vldr	s13, [r3]
 800388e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003890:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003898:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80038a2:	4413      	add	r3, r2
 80038a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038a8:	edc3 7a00 	vstr	s15, [r3]
			weights[i] = weights[i] + velocity[i];
 80038ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038b4:	4413      	add	r3, r2
 80038b6:	ed93 7a00 	vldr	s14, [r3]
 80038ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80038c4:	4413      	add	r3, r2
 80038c6:	edd3 7a00 	vldr	s15, [r3]
 80038ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038d2:	4413      	add	r3, r2
 80038d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038d8:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]*DIM[1]; i++){
 80038dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038e0:	3301      	adds	r3, #1
 80038e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80038e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
 80038ee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d3b7      	bcc.n	8003866 <BP_ANN+0x2c6>
 80038f6:	46ad      	mov	sp, r5
 80038f8:	e305      	b.n	8003f06 <BP_ANN+0x966>
		}
		return;
	}
	else{
 80038fa:	466b      	mov	r3, sp
 80038fc:	461e      	mov	r6, r3
		float a[DIM[0]];
 80038fe:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003900:	460b      	mov	r3, r1
 8003902:	3b01      	subs	r3, #1
 8003904:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003908:	2300      	movs	r3, #0
 800390a:	460c      	mov	r4, r1
 800390c:	461d      	mov	r5, r3
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	016b      	lsls	r3, r5, #5
 8003918:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800391c:	0162      	lsls	r2, r4, #5
 800391e:	2300      	movs	r3, #0
 8003920:	6439      	str	r1, [r7, #64]	@ 0x40
 8003922:	647b      	str	r3, [r7, #68]	@ 0x44
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8003930:	4628      	mov	r0, r5
 8003932:	0143      	lsls	r3, r0, #5
 8003934:	4620      	mov	r0, r4
 8003936:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800393a:	4620      	mov	r0, r4
 800393c:	0142      	lsls	r2, r0, #5
 800393e:	008b      	lsls	r3, r1, #2
 8003940:	3307      	adds	r3, #7
 8003942:	08db      	lsrs	r3, r3, #3
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	ebad 0d03 	sub.w	sp, sp, r3
 800394a:	ab04      	add	r3, sp, #16
 800394c:	3303      	adds	r3, #3
 800394e:	089b      	lsrs	r3, r3, #2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		float d[DIM[0]];
 8003956:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003958:	460b      	mov	r3, r1
 800395a:	3b01      	subs	r3, #1
 800395c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003960:	2300      	movs	r3, #0
 8003962:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003972:	4628      	mov	r0, r5
 8003974:	0143      	lsls	r3, r0, #5
 8003976:	4620      	mov	r0, r4
 8003978:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800397c:	4620      	mov	r0, r4
 800397e:	0142      	lsls	r2, r0, #5
 8003980:	2300      	movs	r3, #0
 8003982:	6339      	str	r1, [r7, #48]	@ 0x30
 8003984:	637b      	str	r3, [r7, #52]	@ 0x34
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003992:	4628      	mov	r0, r5
 8003994:	0143      	lsls	r3, r0, #5
 8003996:	4620      	mov	r0, r4
 8003998:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800399c:	4620      	mov	r0, r4
 800399e:	0142      	lsls	r2, r0, #5
 80039a0:	008b      	lsls	r3, r1, #2
 80039a2:	3307      	adds	r3, #7
 80039a4:	08db      	lsrs	r3, r3, #3
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	ebad 0d03 	sub.w	sp, sp, r3
 80039ac:	ab04      	add	r3, sp, #16
 80039ae:	3303      	adds	r3, #3
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

		for(i = 0; i < DIM[0]; i++){
 80039b8:	2300      	movs	r3, #0
 80039ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80039be:	e08b      	b.n	8003ad8 <BP_ANN+0x538>
			a[i] = 0.0;
 80039c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	441a      	add	r2, r3
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	6013      	str	r3, [r2, #0]
			for(j = 0; j < DIM[1]; j++){
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80039d8:	e02c      	b.n	8003a34 <BP_ANN+0x494>
				a[i] += weights[(DIM[1]*i)+j]*input[j];
 80039da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	ed93 7a00 	vldr	s14, [r3]
 80039ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80039ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80039f0:	fb03 f202 	mul.w	r2, r3, r2
 80039f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039f8:	4413      	add	r3, r2
 80039fa:	009a      	lsls	r2, r3, #2
 80039fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039fe:	4413      	add	r3, r2
 8003a00:	edd3 6a00 	vldr	s13, [r3]
 8003a04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a08:	009a      	lsls	r2, r3, #2
 8003a0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a0c:	4413      	add	r3, r2
 8003a0e:	edd3 7a00 	vldr	s15, [r3]
 8003a12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM[1]; j++){
 8003a2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a2e:	3301      	adds	r3, #1
 8003a30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d3cd      	bcc.n	80039da <BP_ANN+0x43a>
			}
			a[i] += bias[i];
 8003a3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	ed93 7a00 	vldr	s14, [r3]
 8003a4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a52:	009a      	lsls	r2, r3, #2
 8003a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a58:	4413      	add	r3, r2
 8003a5a:	edd3 7a00 	vldr	s15, [r3]
 8003a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	edc3 7a00 	vstr	s15, [r3]
			d[i] = net->hidden_activation_derivative(a[i]);
 8003a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	edd3 7a00 	vldr	s15, [r3]
 8003a86:	eeb0 0a67 	vmov.f32	s0, s15
 8003a8a:	4788      	blx	r1
 8003a8c:	eef0 7a40 	vmov.f32	s15, s0
 8003a90:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003a94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	edc3 7a00 	vstr	s15, [r3]
			a[i] = net->hidden_activation_function(a[i]);
 8003aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aa2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003aa4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003aa8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	edd3 7a00 	vldr	s15, [r3]
 8003ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab8:	4788      	blx	r1
 8003aba:	eef0 7a40 	vmov.f32	s15, s0
 8003abe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ac2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]; i++){
 8003ace:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ad8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003ada:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	f4ff af6e 	bcc.w	80039c0 <BP_ANN+0x420>
		}

		unsigned int DIM1 = net->topology[net->n_layers - depth + 1];
 8003ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ae6:	68d9      	ldr	r1, [r3, #12]
 8003ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	3301      	adds	r3, #1
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

		float prev_delta[DIM1];
 8003afe:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003b02:	460b      	mov	r3, r1
 8003b04:	3b01      	subs	r3, #1
 8003b06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	0143      	lsls	r3, r0, #5
 8003b20:	4620      	mov	r0, r4
 8003b22:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b26:	4620      	mov	r0, r4
 8003b28:	0142      	lsls	r2, r0, #5
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	6239      	str	r1, [r7, #32]
 8003b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	0143      	lsls	r3, r0, #5
 8003b40:	4620      	mov	r0, r4
 8003b42:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b46:	4620      	mov	r0, r4
 8003b48:	0142      	lsls	r2, r0, #5
 8003b4a:	008b      	lsls	r3, r1, #2
 8003b4c:	3307      	adds	r3, #7
 8003b4e:	08db      	lsrs	r3, r3, #3
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	ebad 0d03 	sub.w	sp, sp, r3
 8003b56:	ab04      	add	r3, sp, #16
 8003b58:	3303      	adds	r3, #3
 8003b5a:	089b      	lsrs	r3, r3, #2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		unsigned int weight_iter = DIM[0] * DIM[1];
 8003b62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	67fb      	str	r3, [r7, #124]	@ 0x7c

		float next_weights_T[DIM[0]*DIM1];
 8003b6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003b72:	fb02 f103 	mul.w	r1, r2, r3
 8003b76:	460b      	mov	r3, r1
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61b9      	str	r1, [r7, #24]
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003b8e:	4628      	mov	r0, r5
 8003b90:	0143      	lsls	r3, r0, #5
 8003b92:	4620      	mov	r0, r4
 8003b94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b98:	4620      	mov	r0, r4
 8003b9a:	0142      	lsls	r2, r0, #5
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	6139      	str	r1, [r7, #16]
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003bae:	4628      	mov	r0, r5
 8003bb0:	0143      	lsls	r3, r0, #5
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bb8:	4620      	mov	r0, r4
 8003bba:	0142      	lsls	r2, r0, #5
 8003bbc:	008b      	lsls	r3, r1, #2
 8003bbe:	3307      	adds	r3, #7
 8003bc0:	08db      	lsrs	r3, r3, #3
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	ebad 0d03 	sub.w	sp, sp, r3
 8003bc8:	ab04      	add	r3, sp, #16
 8003bca:	3303      	adds	r3, #3
 8003bcc:	089b      	lsrs	r3, r3, #2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	677b      	str	r3, [r7, #116]	@ 0x74
		unsigned int iter = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for(i = 0; i < DIM[0]; i++){
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003bde:	e02c      	b.n	8003c3a <BP_ANN+0x69a>
			for(j = 0; j < DIM1; j++){
 8003be0:	2300      	movs	r3, #0
 8003be2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003be6:	e01d      	b.n	8003c24 <BP_ANN+0x684>
				next_weights_T[iter] = weights[(DIM[0]*j)+i+weight_iter];
 8003be8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bea:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003bee:	fb03 f202 	mul.w	r2, r3, r2
 8003bf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003bf6:	441a      	add	r2, r3
 8003bf8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c00:	4413      	add	r3, r2
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003c06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	601a      	str	r2, [r3, #0]
				iter++;
 8003c10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c14:	3301      	adds	r3, #1
 8003c16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			for(j = 0; j < DIM1; j++){
 8003c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c1e:	3301      	adds	r3, #1
 8003c20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c24:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d3db      	bcc.n	8003be8 <BP_ANN+0x648>
		for(i = 0; i < DIM[0]; i++){
 8003c30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c34:	3301      	adds	r3, #1
 8003c36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003c3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c3c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d3cd      	bcc.n	8003be0 <BP_ANN+0x640>
			}
		}

		BP_ANN(net, a, output, &weights[weight_iter], &velocity[weight_iter], &bias[DIM[0]], prev_delta, depth-1);
 8003c44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c4a:	18d0      	adds	r0, r2, r3
 8003c4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8003c54:	4413      	add	r3, r2
 8003c56:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003c58:	0092      	lsls	r2, r2, #2
 8003c5a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8003c5e:	440a      	add	r2, r1
 8003c60:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8003c64:	3901      	subs	r1, #1
 8003c66:	9103      	str	r1, [sp, #12]
 8003c68:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003c6c:	9102      	str	r1, [sp, #8]
 8003c6e:	9201      	str	r2, [sp, #4]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	4603      	mov	r3, r0
 8003c74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c76:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003c7a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003c7c:	f7ff fc90 	bl	80035a0 <BP_ANN>

		for(i = 0; i < DIM[0]; i++){
 8003c80:	2300      	movs	r3, #0
 8003c82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003c86:	e07f      	b.n	8003d88 <BP_ANN+0x7e8>
			delta[i] = 0;
 8003c88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003c92:	4413      	add	r3, r2
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
			for(j = 0; j < DIM1; j++){
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ca0:	e02e      	b.n	8003d00 <BP_ANN+0x760>
				delta[i] += next_weights_T[(DIM1*i)+j]*prev_delta[j];
 8003ca2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003cac:	4413      	add	r3, r2
 8003cae:	ed93 7a00 	vldr	s14, [r3]
 8003cb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cb6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003cba:	fb03 f202 	mul.w	r2, r3, r2
 8003cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cc2:	4413      	add	r3, r2
 8003cc4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	edd3 6a00 	vldr	s13, [r3]
 8003cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	edd3 7a00 	vldr	s15, [r3]
 8003cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ce2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003cec:	4413      	add	r3, r2
 8003cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cf2:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM1; j++){
 8003cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d00:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d3ca      	bcc.n	8003ca2 <BP_ANN+0x702>
			}
			delta[i] = delta[i]*d[i];
 8003d0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003d16:	4413      	add	r3, r2
 8003d18:	ed93 7a00 	vldr	s14, [r3]
 8003d1c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003d20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	edd3 7a00 	vldr	s15, [r3]
 8003d2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003d36:	4413      	add	r3, r2
 8003d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3c:	edc3 7a00 	vstr	s15, [r3]
			bias[i] = bias[i] + delta[i]*net->beta;
 8003d40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003d4a:	4413      	add	r3, r2
 8003d4c:	ed93 7a00 	vldr	s14, [r3]
 8003d50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003d5a:	4413      	add	r3, r2
 8003d5c:	edd3 6a00 	vldr	s13, [r3]
 8003d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d62:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003d66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003d74:	4413      	add	r3, r2
 8003d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d7a:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]; i++){
 8003d7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d82:	3301      	adds	r3, #1
 8003d84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003d88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d8a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	f4ff af7a 	bcc.w	8003c88 <BP_ANN+0x6e8>
		}
		float dEdW[DIM[0]*DIM[1]];
 8003d94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d98:	fb02 f103 	mul.w	r1, r2, r3
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003da2:	2300      	movs	r3, #0
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003db4:	4628      	mov	r0, r5
 8003db6:	0143      	lsls	r3, r0, #5
 8003db8:	4620      	mov	r0, r4
 8003dba:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	0142      	lsls	r2, r0, #5
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	6039      	str	r1, [r7, #0]
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	0143      	lsls	r3, r0, #5
 8003dd8:	4620      	mov	r0, r4
 8003dda:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003dde:	4620      	mov	r0, r4
 8003de0:	0142      	lsls	r2, r0, #5
 8003de2:	008b      	lsls	r3, r1, #2
 8003de4:	3307      	adds	r3, #7
 8003de6:	08db      	lsrs	r3, r3, #3
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	ebad 0d03 	sub.w	sp, sp, r3
 8003dee:	ab04      	add	r3, sp, #16
 8003df0:	3303      	adds	r3, #3
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	66fb      	str	r3, [r7, #108]	@ 0x6c
		for(i = 0; i < DIM[0]; i++){
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003dfe:	e030      	b.n	8003e62 <BP_ANN+0x8c2>
			for(j = 0; j < DIM[1]; j++){
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e06:	e022      	b.n	8003e4e <BP_ANN+0x8ae>
				dEdW[(DIM[1]*i)+j] = delta[i]*input[j];
 8003e08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003e12:	4413      	add	r3, r2
 8003e14:	ed93 7a00 	vldr	s14, [r3]
 8003e18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003e20:	4413      	add	r3, r2
 8003e22:	edd3 7a00 	vldr	s15, [r3]
 8003e26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e28:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003e2c:	fb03 f202 	mul.w	r2, r3, r2
 8003e30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e34:	4413      	add	r3, r2
 8003e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM[1]; j++){
 8003e44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e48:	3301      	adds	r3, #1
 8003e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e50:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d3d7      	bcc.n	8003e08 <BP_ANN+0x868>
		for(i = 0; i < DIM[0]; i++){
 8003e58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e64:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d3c9      	bcc.n	8003e00 <BP_ANN+0x860>
			}
		}
		for(i = 0; i < DIM[0]*DIM[1]; i++){
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e72:	e03f      	b.n	8003ef4 <BP_ANN+0x954>
			velocity[i] = dEdW[i]*net->eta - velocity[i]*net->alpha;
 8003e74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	ed93 7a00 	vldr	s14, [r3]
 8003e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e84:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003e88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8003e96:	4413      	add	r3, r2
 8003e98:	edd3 6a00 	vldr	s13, [r3]
 8003e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003ea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ea6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8003eb0:	4413      	add	r3, r2
 8003eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eb6:	edc3 7a00 	vstr	s15, [r3]
			weights[i] = weights[i] + velocity[i];
 8003eba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ec2:	4413      	add	r3, r2
 8003ec4:	ed93 7a00 	vldr	s14, [r3]
 8003ec8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8003ed2:	4413      	add	r3, r2
 8003ed4:	edd3 7a00 	vldr	s15, [r3]
 8003ed8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ee0:	4413      	add	r3, r2
 8003ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ee6:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]*DIM[1]; i++){
 8003eea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003eee:	3301      	adds	r3, #1
 8003ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ef4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ef6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ef8:	fb02 f303 	mul.w	r3, r2, r3
 8003efc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d3b7      	bcc.n	8003e74 <BP_ANN+0x8d4>
 8003f04:	46b5      	mov	sp, r6
		}
		return;
	}
}
 8003f06:	37ac      	adds	r7, #172	@ 0xac
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	ecbd 8b02 	vpop	{d8}
 8003f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003f12 <train_ann>:


void train_ann(ANN *net, float *input, float *output){
 8003f12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f16:	b08b      	sub	sp, #44	@ 0x2c
 8003f18:	af04      	add	r7, sp, #16
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	466b      	mov	r3, sp
 8003f22:	461e      	mov	r6, r3
	float delta[net->topology[1]];
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	6819      	ldr	r1, [r3, #0]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	2300      	movs	r3, #0
 8003f34:	4688      	mov	r8, r1
 8003f36:	4699      	mov	r9, r3
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003f44:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003f48:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	460c      	mov	r4, r1
 8003f50:	461d      	mov	r5, r3
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	016b      	lsls	r3, r5, #5
 8003f5c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003f60:	0162      	lsls	r2, r4, #5
 8003f62:	008b      	lsls	r3, r1, #2
 8003f64:	3307      	adds	r3, #7
 8003f66:	08db      	lsrs	r3, r3, #3
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	ebad 0d03 	sub.w	sp, sp, r3
 8003f6e:	ab04      	add	r3, sp, #16
 8003f70:	3303      	adds	r3, #3
 8003f72:	089b      	lsrs	r3, r3, #2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	613b      	str	r3, [r7, #16]
	BP_ANN(net, input, output, net->weights, net->dedw, net->bias, delta, net->n_layers-1);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	6892      	ldr	r2, [r2, #8]
 8003f84:	68f9      	ldr	r1, [r7, #12]
 8003f86:	6909      	ldr	r1, [r1, #16]
 8003f88:	3901      	subs	r1, #1
 8003f8a:	9103      	str	r1, [sp, #12]
 8003f8c:	6939      	ldr	r1, [r7, #16]
 8003f8e:	9102      	str	r1, [sp, #8]
 8003f90:	9201      	str	r2, [sp, #4]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	4603      	mov	r3, r0
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f7ff fb00 	bl	80035a0 <BP_ANN>
 8003fa0:	46b5      	mov	sp, r6
}
 8003fa2:	bf00      	nop
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003fac <FP_ANN>:

void FP_ANN(ANN *net, float *input, unsigned int depth, float *weights){
 8003fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fb0:	b08b      	sub	sp, #44	@ 0x2c
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	607a      	str	r2, [r7, #4]
 8003fba:	603b      	str	r3, [r7, #0]
	unsigned int DIM[2] = {net->topology[net->n_layers - depth], net->topology[net->n_layers - depth - 1]};
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6919      	ldr	r1, [r3, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	1acb      	subs	r3, r1, r3
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6919      	ldr	r1, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	1acb      	subs	r3, r1, r3
 8003fdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	617b      	str	r3, [r7, #20]
	unsigned int i,k;

	if(depth == 1){
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d15d      	bne.n	80040ac <FP_ANN+0x100>
		for(i = 0; i < DIM[0]; i++){
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff4:	e055      	b.n	80040a2 <FP_ANN+0xf6>
			net->output[i] = 0.0;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	69da      	ldr	r2, [r3, #28]
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
			for(k = 0; k < DIM[1]; k++){
 8004006:	2300      	movs	r3, #0
 8004008:	623b      	str	r3, [r7, #32]
 800400a:	e025      	b.n	8004058 <FP_ANN+0xac>
				net->output[i] += weights[(DIM[1]*i)+k]*input[k];
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	ed93 7a00 	vldr	s14, [r3]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800401e:	fb03 f202 	mul.w	r2, r3, r2
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	4413      	add	r3, r2
 800402c:	edd3 6a00 	vldr	s13, [r3]
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	4413      	add	r3, r2
 8004038:	edd3 7a00 	vldr	s15, [r3]
 800403c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800404e:	edc3 7a00 	vstr	s15, [r3]
			for(k = 0; k < DIM[1]; k++){
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	3301      	adds	r3, #1
 8004056:	623b      	str	r3, [r7, #32]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	6a3a      	ldr	r2, [r7, #32]
 800405c:	429a      	cmp	r2, r3
 800405e:	d3d5      	bcc.n	800400c <FP_ANN+0x60>
			}
			net->output[i] = net->output_activation_function(net->output[i] + net->bias[i]);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	69d1      	ldr	r1, [r2, #28]
 8004068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406a:	0092      	lsls	r2, r2, #2
 800406c:	440a      	add	r2, r1
 800406e:	ed92 7a00 	vldr	s14, [r2]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	6891      	ldr	r1, [r2, #8]
 8004076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004078:	0092      	lsls	r2, r2, #2
 800407a:	440a      	add	r2, r1
 800407c:	edd2 7a00 	vldr	s15, [r2]
 8004080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	69d1      	ldr	r1, [r2, #28]
 8004088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800408a:	0092      	lsls	r2, r2, #2
 800408c:	188c      	adds	r4, r1, r2
 800408e:	eeb0 0a67 	vmov.f32	s0, s15
 8004092:	4798      	blx	r3
 8004094:	eef0 7a40 	vmov.f32	s15, s0
 8004098:	edc4 7a00 	vstr	s15, [r4]
		for(i = 0; i < DIM[0]; i++){
 800409c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409e:	3301      	adds	r3, #1
 80040a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d3a5      	bcc.n	8003ff6 <FP_ANN+0x4a>
		}
		return;
 80040aa:	e090      	b.n	80041ce <FP_ANN+0x222>
	}
	else{
 80040ac:	466b      	mov	r3, sp
 80040ae:	461e      	mov	r6, r3
		float a[DIM[0]];
 80040b0:	6939      	ldr	r1, [r7, #16]
 80040b2:	460b      	mov	r3, r1
 80040b4:	3b01      	subs	r3, #1
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	2300      	movs	r3, #0
 80040ba:	4688      	mov	r8, r1
 80040bc:	4699      	mov	r9, r3
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80040ca:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80040ce:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80040d2:	2300      	movs	r3, #0
 80040d4:	460c      	mov	r4, r1
 80040d6:	461d      	mov	r5, r3
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	016b      	lsls	r3, r5, #5
 80040e2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80040e6:	0162      	lsls	r2, r4, #5
 80040e8:	008b      	lsls	r3, r1, #2
 80040ea:	3307      	adds	r3, #7
 80040ec:	08db      	lsrs	r3, r3, #3
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	ebad 0d03 	sub.w	sp, sp, r3
 80040f4:	466b      	mov	r3, sp
 80040f6:	3303      	adds	r3, #3
 80040f8:	089b      	lsrs	r3, r3, #2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	61bb      	str	r3, [r7, #24]
		for(i = 0; i < DIM[0]; i++){
 80040fe:	2300      	movs	r3, #0
 8004100:	627b      	str	r3, [r7, #36]	@ 0x24
 8004102:	e050      	b.n	80041a6 <FP_ANN+0x1fa>
			a[i] = 0.0;
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
			for(k = 0; k < DIM[1]; k++){
 8004112:	2300      	movs	r3, #0
 8004114:	623b      	str	r3, [r7, #32]
 8004116:	e023      	b.n	8004160 <FP_ANN+0x1b4>
				a[i] += weights[(DIM[1]*i)+k]*input[k];
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	ed93 7a00 	vldr	s14, [r3]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004128:	fb03 f202 	mul.w	r2, r3, r2
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	4413      	add	r3, r2
 8004136:	edd3 6a00 	vldr	s13, [r3]
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	4413      	add	r3, r2
 8004142:	edd3 7a00 	vldr	s15, [r3]
 8004146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800414a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	edc3 7a00 	vstr	s15, [r3]
			for(k = 0; k < DIM[1]; k++){
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	3301      	adds	r3, #1
 800415e:	623b      	str	r3, [r7, #32]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	6a3a      	ldr	r2, [r7, #32]
 8004164:	429a      	cmp	r2, r3
 8004166:	d3d7      	bcc.n	8004118 <FP_ANN+0x16c>
			}
			a[i] = net->hidden_activation_function(a[i] + net->bias[i]);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	69b9      	ldr	r1, [r7, #24]
 800416e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004170:	0092      	lsls	r2, r2, #2
 8004172:	440a      	add	r2, r1
 8004174:	ed92 7a00 	vldr	s14, [r2]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	6891      	ldr	r1, [r2, #8]
 800417c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417e:	0092      	lsls	r2, r2, #2
 8004180:	440a      	add	r2, r1
 8004182:	edd2 7a00 	vldr	s15, [r2]
 8004186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800418a:	eeb0 0a67 	vmov.f32	s0, s15
 800418e:	4798      	blx	r3
 8004190:	eef0 7a40 	vmov.f32	s15, s0
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]; i++){
 80041a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a2:	3301      	adds	r3, #1
 80041a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d3aa      	bcc.n	8004104 <FP_ANN+0x158>
			//if(depth == 2) printf("%f,", a[i]);
		}
		//if(depth == 2) printf("0\n");
		FP_ANN(net, a, depth-1, &weights[DIM[0]*DIM[1]]);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	1e59      	subs	r1, r3, #1
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	4413      	add	r3, r2
 80041c0:	460a      	mov	r2, r1
 80041c2:	69b9      	ldr	r1, [r7, #24]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f7ff fef1 	bl	8003fac <FP_ANN>
 80041ca:	46b5      	mov	sp, r6
	}
	return;
 80041cc:	bf00      	nop
}
 80041ce:	372c      	adds	r7, #44	@ 0x2c
 80041d0:	46bd      	mov	sp, r7
 80041d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080041d6 <run_ann>:

void run_ann(ANN *net, float *input){
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]
	FP_ANN(net, input, net->n_layers-1, net->weights);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	1e5a      	subs	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6839      	ldr	r1, [r7, #0]
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff fedd 	bl	8003fac <FP_ANN>
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <init_ann>:

void init_ann(ANN *net){
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
	fill_number(net->bias, net->n_bias, 0.1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8004274 <init_ann+0x78>
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f000 f855 	bl	80042c2 <fill_number>
	fill_zeros(net->dedw, net->n_weights);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	4619      	mov	r1, r3
 8004222:	4610      	mov	r0, r2
 8004224:	f000 f830 	bl	8004288 <fill_zeros>

	if(net->output_activation_function == &relu) net->output_activation_derivative = &relu_derivative;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	4a12      	ldr	r2, [pc, #72]	@ (8004278 <init_ann+0x7c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d103      	bne.n	800423a <init_ann+0x3e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a11      	ldr	r2, [pc, #68]	@ (800427c <init_ann+0x80>)
 8004236:	625a      	str	r2, [r3, #36]	@ 0x24
 8004238:	e007      	b.n	800424a <init_ann+0x4e>
	else if(net->output_activation_function == &relu2) net->output_activation_derivative = &relu2_derivative;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	4a10      	ldr	r2, [pc, #64]	@ (8004280 <init_ann+0x84>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d102      	bne.n	800424a <init_ann+0x4e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a0f      	ldr	r2, [pc, #60]	@ (8004284 <init_ann+0x88>)
 8004248:	625a      	str	r2, [r3, #36]	@ 0x24

	if(net->hidden_activation_function == &relu) net->hidden_activation_derivative = &relu_derivative;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424e:	4a0a      	ldr	r2, [pc, #40]	@ (8004278 <init_ann+0x7c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d103      	bne.n	800425c <init_ann+0x60>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a09      	ldr	r2, [pc, #36]	@ (800427c <init_ann+0x80>)
 8004258:	62da      	str	r2, [r3, #44]	@ 0x2c
	else if(net->hidden_activation_function == &relu2) net->hidden_activation_derivative = &relu2_derivative;
}
 800425a:	e007      	b.n	800426c <init_ann+0x70>
	else if(net->hidden_activation_function == &relu2) net->hidden_activation_derivative = &relu2_derivative;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004260:	4a07      	ldr	r2, [pc, #28]	@ (8004280 <init_ann+0x84>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d102      	bne.n	800426c <init_ann+0x70>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a06      	ldr	r2, [pc, #24]	@ (8004284 <init_ann+0x88>)
 800426a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800426c:	bf00      	nop
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	3dcccccd 	.word	0x3dcccccd
 8004278:	08004301 	.word	0x08004301
 800427c:	08004441 	.word	0x08004441
 8004280:	08004389 	.word	0x08004389
 8004284:	08004491 	.word	0x08004491

08004288 <fill_zeros>:
	if(net->hidden_activation_function == &relu) net->hidden_activation_derivative = &relu_derivative;
	else if(net->hidden_activation_function == &relu2) net->hidden_activation_derivative = &relu2_derivative;
}

//-----Utility-----
void fill_zeros(float *v, unsigned int size){
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0; i < size; i++){ v[i] = 0.0; }
 8004292:	2300      	movs	r3, #0
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	e009      	b.n	80042ac <fill_zeros+0x24>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	4413      	add	r3, r2
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3301      	adds	r3, #1
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d8f1      	bhi.n	8004298 <fill_zeros+0x10>
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <fill_number>:
void fill_number(float *v, unsigned int size, float number){
 80042c2:	b480      	push	{r7}
 80042c4:	b087      	sub	sp, #28
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	ed87 0a01 	vstr	s0, [r7, #4]
	int i;
	for(i = 0; i < size; i++){ v[i] = number; }
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	e008      	b.n	80042e8 <fill_number+0x26>
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4413      	add	r3, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	3301      	adds	r3, #1
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d8f2      	bhi.n	80042d6 <fill_number+0x14>
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	371c      	adds	r7, #28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <relu>:

//-----Activation Functions-----
float relu(float x){
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < 0.0) return 0.0;
 800430a:	edd7 7a01 	vldr	s15, [r7, #4]
 800430e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004316:	d502      	bpl.n	800431e <relu+0x1e>
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	e022      	b.n	8004364 <relu+0x64>
	else if(x > 1.0) return 0.1*x+0.93;
 800431e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004322:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800432a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432e:	dd18      	ble.n	8004362 <relu+0x62>
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7fc f90d 	bl	8000550 <__aeabi_f2d>
 8004336:	a310      	add	r3, pc, #64	@ (adr r3, 8004378 <relu+0x78>)
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	f7fc f960 	bl	8000600 <__aeabi_dmul>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4610      	mov	r0, r2
 8004346:	4619      	mov	r1, r3
 8004348:	a30d      	add	r3, pc, #52	@ (adr r3, 8004380 <relu+0x80>)
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	f7fb ffa1 	bl	8000294 <__adddf3>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4610      	mov	r0, r2
 8004358:	4619      	mov	r1, r3
 800435a:	f7fc fc29 	bl	8000bb0 <__aeabi_d2f>
 800435e:	4603      	mov	r3, r0
 8004360:	e000      	b.n	8004364 <relu+0x64>
	return x;
 8004362:	687b      	ldr	r3, [r7, #4]
}
 8004364:	ee07 3a90 	vmov	s15, r3
 8004368:	eeb0 0a67 	vmov.f32	s0, s15
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	f3af 8000 	nop.w
 8004378:	9999999a 	.word	0x9999999a
 800437c:	3fb99999 	.word	0x3fb99999
 8004380:	5c28f5c3 	.word	0x5c28f5c3
 8004384:	3fedc28f 	.word	0x3fedc28f

08004388 <relu2>:

//Similar to Tanh
float relu2(float x){
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < -1.0)     return 0.1*x-0.93;
 8004392:	edd7 7a01 	vldr	s15, [r7, #4]
 8004396:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800439a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a2:	d518      	bpl.n	80043d6 <relu2+0x4e>
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7fc f8d3 	bl	8000550 <__aeabi_f2d>
 80043aa:	a321      	add	r3, pc, #132	@ (adr r3, 8004430 <relu2+0xa8>)
 80043ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b0:	f7fc f926 	bl	8000600 <__aeabi_dmul>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	a31e      	add	r3, pc, #120	@ (adr r3, 8004438 <relu2+0xb0>)
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	f7fb ff65 	bl	8000290 <__aeabi_dsub>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	f7fc fbef 	bl	8000bb0 <__aeabi_d2f>
 80043d2:	4603      	mov	r3, r0
 80043d4:	e022      	b.n	800441c <relu2+0x94>
	else if(x > 1.0) return 0.1*x+0.93;
 80043d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80043da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e6:	dd18      	ble.n	800441a <relu2+0x92>
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7fc f8b1 	bl	8000550 <__aeabi_f2d>
 80043ee:	a310      	add	r3, pc, #64	@ (adr r3, 8004430 <relu2+0xa8>)
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	f7fc f904 	bl	8000600 <__aeabi_dmul>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4610      	mov	r0, r2
 80043fe:	4619      	mov	r1, r3
 8004400:	a30d      	add	r3, pc, #52	@ (adr r3, 8004438 <relu2+0xb0>)
 8004402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004406:	f7fb ff45 	bl	8000294 <__adddf3>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4610      	mov	r0, r2
 8004410:	4619      	mov	r1, r3
 8004412:	f7fc fbcd 	bl	8000bb0 <__aeabi_d2f>
 8004416:	4603      	mov	r3, r0
 8004418:	e000      	b.n	800441c <relu2+0x94>
	return x;
 800441a:	687b      	ldr	r3, [r7, #4]
}
 800441c:	ee07 3a90 	vmov	s15, r3
 8004420:	eeb0 0a67 	vmov.f32	s0, s15
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	f3af 8000 	nop.w
 8004430:	9999999a 	.word	0x9999999a
 8004434:	3fb99999 	.word	0x3fb99999
 8004438:	5c28f5c3 	.word	0x5c28f5c3
 800443c:	3fedc28f 	.word	0x3fedc28f

08004440 <relu_derivative>:

//-----Derivative Functions-----
float relu_derivative(float x){
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < 0.0) return 0.0;
 800444a:	edd7 7a01 	vldr	s15, [r7, #4]
 800444e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004456:	d502      	bpl.n	800445e <relu_derivative+0x1e>
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	e00c      	b.n	8004478 <relu_derivative+0x38>
	else if(x > 1.0) return 0.1;
 800445e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004462:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800446a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446e:	dd01      	ble.n	8004474 <relu_derivative+0x34>
 8004470:	4b06      	ldr	r3, [pc, #24]	@ (800448c <relu_derivative+0x4c>)
 8004472:	e001      	b.n	8004478 <relu_derivative+0x38>
	return 1.0;
 8004474:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 8004478:	ee07 3a90 	vmov	s15, r3
 800447c:	eeb0 0a67 	vmov.f32	s0, s15
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	3dcccccd 	.word	0x3dcccccd

08004490 <relu2_derivative>:
float relu2_derivative(float x){
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < -1.0) return 0.1;
 800449a:	edd7 7a01 	vldr	s15, [r7, #4]
 800449e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80044a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044aa:	d501      	bpl.n	80044b0 <relu2_derivative+0x20>
 80044ac:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <relu2_derivative+0x4c>)
 80044ae:	e00c      	b.n	80044ca <relu2_derivative+0x3a>
	else if(x > 1.0) return 0.1;
 80044b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80044b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c0:	dd01      	ble.n	80044c6 <relu2_derivative+0x36>
 80044c2:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <relu2_derivative+0x4c>)
 80044c4:	e001      	b.n	80044ca <relu2_derivative+0x3a>
	return 1.0;
 80044c6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
}
 80044ca:	ee07 3a90 	vmov	s15, r3
 80044ce:	eeb0 0a67 	vmov.f32	s0, s15
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	3dcccccd 	.word	0x3dcccccd

080044e0 <main>:
 * @param  None
 * @retval None
 */

int main(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 80044e6:	af00      	add	r7, sp, #0
	int32_t  result = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8

	initialise_monitor_handles();	/*rtt*/
 80044ee:	f003 fc9d 	bl	8007e2c <initialise_monitor_handles>
       - Configure the Flash prefetch
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 3
       - Low Level Initialization
	 */
	HAL_Init();
 80044f2:	f7fc fcdd 	bl	8000eb0 <HAL_Init>
	/* Enable the Instruction Cache */
	CACHE_Enable();
 80044f6:	f000 fbb5 	bl	8004c64 <CACHE_Enable>

	/* Configure the System clock to have a frequency of 160 MHz */
	SystemClock_Config();
 80044fa:	f000 fb41 	bl	8004b80 <SystemClock_Config>

	/* Initialize User Button */

	result = Ms_Button_Init();
 80044fe:	f000 fbcf 	bl	8004ca0 <Ms_Button_Init>
 8004502:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
	if (result < 0){
 8004506:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 800450a:	2b00      	cmp	r3, #0
 800450c:	da04      	bge.n	8004518 <main+0x38>
		printf("Initialization Error %i\n", result);
 800450e:	f8d7 13b8 	ldr.w	r1, [r7, #952]	@ 0x3b8
 8004512:	48bf      	ldr	r0, [pc, #764]	@ (8004810 <main+0x330>)
 8004514:	f001 fa10 	bl	8005938 <iprintf>
	float error, net_error;

	int32_t number_weights;
	float dedw[81];
	float bias[15];
	unsigned int network_topology[3] = { 3, 9, 6 };
 8004518:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800451c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004520:	4abc      	ldr	r2, [pc, #752]	@ (8004814 <main+0x334>)
 8004522:	ca07      	ldmia	r2, {r0, r1, r2}
 8004524:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	       - Configure the Flash prefetch
	       - Configure the Systick to generate an interrupt each 1 msec
	       - Set NVIC Group Priority to 3
	       - Low Level Initialization
	 */
	initialise_monitor_handles();	/*rtt*/
 8004528:	f003 fc80 	bl	8007e2c <initialise_monitor_handles>

	HAL_Init();
 800452c:	f7fc fcc0 	bl	8000eb0 <HAL_Init>

	/* Enable the Instruction Cache */
	CACHE_Enable();
 8004530:	f000 fb98 	bl	8004c64 <CACHE_Enable>

	/* Configure the System clock to have a frequency of 160 MHz */
	SystemClock_Config();
 8004534:	f000 fb24 	bl	8004b80 <SystemClock_Config>

	/*
	 * Initialize User Button
	 */

	result = Ms_Button_Init();
 8004538:	f000 fbb2 	bl	8004ca0 <Ms_Button_Init>
 800453c:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
	if (result < 0){
 8004540:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8004544:	2b00      	cmp	r3, #0
 8004546:	da04      	bge.n	8004552 <main+0x72>
		printf("Initialization Error %i\n", result);
 8004548:	f8d7 13b8 	ldr.w	r1, [r7, #952]	@ 0x3b8
 800454c:	48b0      	ldr	r0, [pc, #704]	@ (8004810 <main+0x330>)
 800454e:	f001 f9f3 	bl	8005938 <iprintf>
	}

	printf("\n");
 8004552:	200a      	movs	r0, #10
 8004554:	f001 fa02 	bl	800595c <putchar>
	printf("Embedded ML XOR-AND Press User Button to Start\n");
 8004558:	48af      	ldr	r0, [pc, #700]	@ (8004818 <main+0x338>)
 800455a:	f001 fa5d 	bl	8005a18 <puts>


	number_weights = network_topology[0]*network_topology[1] + network_topology[1]*network_topology[2];
 800455e:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8004562:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800456c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	4413      	add	r3, r2
 8004574:	f507 7272 	add.w	r2, r7, #968	@ 0x3c8
 8004578:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 800457c:	6852      	ldr	r2, [r2, #4]
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
	 * XOR-AND Input Values corresponding to output Ground Truth values
	 * The neural network includes 3 input neurons
	 *
	 */

	float x0[3] = { 0.0, 0.0, 0.0 };  // Corresponds to output 0 0
 8004586:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800458a:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8004598:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	605a      	str	r2, [r3, #4]
 80045a2:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80045a6:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	609a      	str	r2, [r3, #8]
	float x1[3] = { 0.0, 0.0, 1.0 };  // Corresponds to output 0 0
 80045b0:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80045b4:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80045c2:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	605a      	str	r2, [r3, #4]
 80045cc:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80045d0:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 80045d4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80045d8:	609a      	str	r2, [r3, #8]
	float x2[3] = { 0.0, 1.0, 0.0 };  // Corresponds to output 1 0
 80045da:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80045de:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80045ec:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80045f0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80045fa:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	609a      	str	r2, [r3, #8]
	float x3[3] = { 0.0, 1.0, 1.0 };  // Corresponds to output 1 1
 8004604:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8004608:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 800460c:	4a83      	ldr	r2, [pc, #524]	@ (800481c <main+0x33c>)
 800460e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004610:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float x4[3] = { 1.0, 0.0, 0.0 };  // Corresponds to output 1 0
 8004614:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8004618:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 800461c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8004626:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	605a      	str	r2, [r3, #4]
 8004630:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8004634:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	609a      	str	r2, [r3, #8]
	float x5[3] = { 1.0, 0.0, 1.0 };  // Corresponds to output 1 0
 800463e:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8004642:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8004646:	4a76      	ldr	r2, [pc, #472]	@ (8004820 <main+0x340>)
 8004648:	ca07      	ldmia	r2, {r0, r1, r2}
 800464a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float x6[3] = { 1.0, 1.0, 0.0 };  // Corresponds to output 0 0
 800464e:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8004652:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8004656:	4a73      	ldr	r2, [pc, #460]	@ (8004824 <main+0x344>)
 8004658:	ca07      	ldmia	r2, {r0, r1, r2}
 800465a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float x7[3] = { 1.0, 1.0, 1.0 };  // Corresponds to output 0 1
 800465e:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8004662:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8004666:	4a70      	ldr	r2, [pc, #448]	@ (8004828 <main+0x348>)
 8004668:	ca07      	ldmia	r2, {r0, r1, r2}
 800466a:	e883 0007 	stmia.w	r3, {r0, r1, r2}


	User_Button_Wait();
 800466e:	f000 fb2b 	bl	8004cc8 <User_Button_Wait>


	/* Initialize random values for weights */

	srand(1);
 8004672:	2001      	movs	r0, #1
 8004674:	f001 f832 	bl	80056dc <srand>

	for (i = 0; i < number_weights; i++){
 8004678:	2300      	movs	r3, #0
 800467a:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 800467e:	e018      	b.n	80046b2 <main+0x1d2>
		weights_initial[i] = (float)rand()/RAND_MAX;
 8004680:	f001 f85a 	bl	8005738 <rand>
 8004684:	ee07 0a90 	vmov	s15, r0
 8004688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800468c:	eddf 6a67 	vldr	s13, [pc, #412]	@ 800482c <main+0x34c>
 8004690:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004694:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8004698:	f5a3 724b 	sub.w	r2, r3, #812	@ 0x32c
 800469c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < number_weights; i++){
 80046a8:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 80046ac:	3301      	adds	r3, #1
 80046ae:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 80046b2:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 80046b6:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 80046ba:	429a      	cmp	r2, r3
 80046bc:	dbe0      	blt.n	8004680 <main+0x1a0>
	}


	for (i = 0; i < 15; i++){
 80046be:	2300      	movs	r3, #0
 80046c0:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 80046c4:	e00f      	b.n	80046e6 <main+0x206>
		bias[i] = 0.5;
 80046c6:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80046ca:	f5a3 72d0 	sub.w	r2, r3, #416	@ 0x1a0
 80046ce:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80046da:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 15; i++){
 80046dc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 80046e0:	3301      	adds	r3, #1
 80046e2:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 80046e6:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 80046ea:	2b0e      	cmp	r3, #14
 80046ec:	ddeb      	ble.n	80046c6 <main+0x1e6>
	}
	for (i = 0; i < 6; i++){
 80046ee:	2300      	movs	r3, #0
 80046f0:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 80046f4:	e00f      	b.n	8004716 <main+0x236>
		output[i] = 0.0;
 80046f6:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80046fa:	f5a3 72e2 	sub.w	r2, r3, #452	@ 0x1c4
 80046fe:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 6; i++){
 800470c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8004710:	3301      	adds	r3, #1
 8004712:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8004716:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 800471a:	2b05      	cmp	r3, #5
 800471c:	ddeb      	ble.n	80046f6 <main+0x216>
	}
	for (i = 0; i < 81; i++){
 800471e:	2300      	movs	r3, #0
 8004720:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8004724:	e00f      	b.n	8004746 <main+0x266>
		dedw[i] = 0.0;
 8004726:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800472a:	f5a3 72b2 	sub.w	r2, r3, #356	@ 0x164
 800472e:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 81; i++){
 800473c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8004740:	3301      	adds	r3, #1
 8004742:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8004746:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 800474a:	2b50      	cmp	r3, #80	@ 0x50
 800474c:	ddeb      	ble.n	8004726 <main+0x246>
	}

	ANN net;
	net.weights = weights_initial;
 800474e:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8004752:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8004756:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 800475a:	601a      	str	r2, [r3, #0]
	net.dedw = dedw;
 800475c:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8004760:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8004764:	f507 7219 	add.w	r2, r7, #612	@ 0x264
 8004768:	605a      	str	r2, [r3, #4]
	net.bias = bias;
 800476a:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800476e:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8004772:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8004776:	609a      	str	r2, [r3, #8]
	net.topology = network_topology;
 8004778:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800477c:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8004780:	f507 7207 	add.w	r2, r7, #540	@ 0x21c
 8004784:	60da      	str	r2, [r3, #12]
	net.n_layers = 3;
 8004786:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800478a:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 800478e:	2203      	movs	r2, #3
 8004790:	611a      	str	r2, [r3, #16]
	net.n_weights = number_weights;
 8004792:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 8004796:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800479a:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 800479e:	615a      	str	r2, [r3, #20]
	net.n_bias = 15;
 80047a0:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80047a4:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80047a8:	220f      	movs	r2, #15
 80047aa:	619a      	str	r2, [r3, #24]
	net.output = output;
 80047ac:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80047b0:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80047b4:	f507 7201 	add.w	r2, r7, #516	@ 0x204
 80047b8:	61da      	str	r2, [r3, #28]


	net.eta = 0.2;     						//Learning Rate
 80047ba:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80047be:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80047c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004830 <main+0x350>)
 80047c4:	631a      	str	r2, [r3, #48]	@ 0x30
	net.beta = 0.005;    					//Bias Learning Rate
 80047c6:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80047ca:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80047ce:	4a19      	ldr	r2, [pc, #100]	@ (8004834 <main+0x354>)
 80047d0:	635a      	str	r2, [r3, #52]	@ 0x34
	net.alpha = 0.25;   					//Momentum Coefficient
 80047d2:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80047d6:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80047da:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 80047de:	639a      	str	r2, [r3, #56]	@ 0x38
	net.output_activation_function = &relu;
 80047e0:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80047e4:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80047e8:	4a13      	ldr	r2, [pc, #76]	@ (8004838 <main+0x358>)
 80047ea:	621a      	str	r2, [r3, #32]
	net.hidden_activation_function = &relu;
 80047ec:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80047f0:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80047f4:	4a10      	ldr	r2, [pc, #64]	@ (8004838 <main+0x358>)
 80047f6:	629a      	str	r2, [r3, #40]	@ 0x28

		/*
		 * Initialize neural network data structure
		 */

		init_ann(&net);
 80047f8:	463b      	mov	r3, r7
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fcfe 	bl	80041fc <init_ann>

		/*
		 * Initiate train and test cycles
		 */

		i = 0;
 8004800:	2300      	movs	r3, #0
 8004802:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
		k = 0;
 8004806:	2300      	movs	r3, #0
 8004808:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
		while (i < N_EPOCH_XOR_AND && UserButtonPressed == 0) {
 800480c:	e181      	b.n	8004b12 <main+0x632>
 800480e:	bf00      	nop
 8004810:	08007f60 	.word	0x08007f60
 8004814:	080080bc 	.word	0x080080bc
 8004818:	08007f7c 	.word	0x08007f7c
 800481c:	080080c8 	.word	0x080080c8
 8004820:	080080d4 	.word	0x080080d4
 8004824:	080080e0 	.word	0x080080e0
 8004828:	080080ec 	.word	0x080080ec
 800482c:	4f000000 	.word	0x4f000000
 8004830:	3e4ccccd 	.word	0x3e4ccccd
 8004834:	3ba3d70a 	.word	0x3ba3d70a
 8004838:	08004301 	.word	0x08004301
			/*
			 * Generate uniformly distributed selection of XOR-AND inputs and
			 * ground truth outputs
			 */

			k = k + 1;
 800483c:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8004840:	3301      	adds	r3, #1
 8004842:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
			if (k > 7){
 8004846:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 800484a:	2b07      	cmp	r3, #7
 800484c:	dd02      	ble.n	8004854 <main+0x374>
				k = 0;
 800484e:	2300      	movs	r3, #0
 8004850:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
			}

			generate_xorand(x, y, k);
 8004854:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 8004858:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800485c:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8004860:	4618      	mov	r0, r3
 8004862:	f7fe fd25 	bl	80032b0 <generate_xorand>

			/*
			 * Train network on input and ground truth
			 */

			train_ann(&net, x, y);
 8004866:	f507 72f0 	add.w	r2, r7, #480	@ 0x1e0
 800486a:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 800486e:	463b      	mov	r3, r7
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff fb4e 	bl	8003f12 <train_ann>
			 * After completion of a number of epochs, N_REPORT
			 * perform neural network test execution, display
			 * resulting outputs and output error
			 */

			if (i % N_REPORT_XOR_AND == 0 || i == 0 || ((i < 500) && (i % 100 == 0)) ) {
 8004876:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 800487a:	4bb7      	ldr	r3, [pc, #732]	@ (8004b58 <main+0x678>)
 800487c:	fb83 1302 	smull	r1, r3, r3, r2
 8004880:	1199      	asrs	r1, r3, #6
 8004882:	17d3      	asrs	r3, r2, #31
 8004884:	1acb      	subs	r3, r1, r3
 8004886:	21c8      	movs	r1, #200	@ 0xc8
 8004888:	fb01 f303 	mul.w	r3, r1, r3
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d018      	beq.n	80048c4 <main+0x3e4>
 8004892:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d014      	beq.n	80048c4 <main+0x3e4>
 800489a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 800489e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80048a2:	f280 8125 	bge.w	8004af0 <main+0x610>
 80048a6:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 80048aa:	4bab      	ldr	r3, [pc, #684]	@ (8004b58 <main+0x678>)
 80048ac:	fb83 1302 	smull	r1, r3, r3, r2
 80048b0:	1159      	asrs	r1, r3, #5
 80048b2:	17d3      	asrs	r3, r2, #31
 80048b4:	1acb      	subs	r3, r1, r3
 80048b6:	2164      	movs	r1, #100	@ 0x64
 80048b8:	fb01 f303 	mul.w	r3, r1, r3
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f040 8116 	bne.w	8004af0 <main+0x610>
				printf("\n\n        Epoch: %i\n", i);
 80048c4:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 80048c8:	48a4      	ldr	r0, [pc, #656]	@ (8004b5c <main+0x67c>)
 80048ca:	f001 f835 	bl	8005938 <iprintf>
				printf("    Ground         Network\n");
 80048ce:	48a4      	ldr	r0, [pc, #656]	@ (8004b60 <main+0x680>)
 80048d0:	f001 f8a2 	bl	8005a18 <puts>
				printf("    Truth          Outputs\n");
 80048d4:	48a3      	ldr	r0, [pc, #652]	@ (8004b64 <main+0x684>)
 80048d6:	f001 f89f 	bl	8005a18 <puts>
				printf("   1	  2       1      2\n");
 80048da:	48a3      	ldr	r0, [pc, #652]	@ (8004b68 <main+0x688>)
 80048dc:	f001 f89c 	bl	8005a18 <puts>
				printf("_____________________________\n");
 80048e0:	48a2      	ldr	r0, [pc, #648]	@ (8004b6c <main+0x68c>)
 80048e2:	f001 f899 	bl	8005a18 <puts>
				net_error = 0;
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
				/*
				 * Execute trained network and compute Output Error
				 * with Ground Truth supplied in ground_truth array
				 */

				run_ann(&net, x0);
 80048ee:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80048f2:	463b      	mov	r3, r7
 80048f4:	4611      	mov	r1, r2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fc6d 	bl	80041d6 <run_ann>
				ground_truth[0] = 0.0;
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
				ground_truth[1] = 0.0;
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
				Output_Error(2, &net, ground_truth, &error);
 800490c:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8004910:	f507 726b 	add.w	r2, r7, #940	@ 0x3ac
 8004914:	4639      	mov	r1, r7
 8004916:	2002      	movs	r0, #2
 8004918:	f7fe fdc2 	bl	80034a0 <Output_Error>
				net_error = net_error + error;
 800491c:	edd7 7aea 	vldr	s15, [r7, #936]	@ 0x3a8
 8004920:	ed97 7aef 	vldr	s14, [r7, #956]	@ 0x3bc
 8004924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004928:	edc7 7aef 	vstr	s15, [r7, #956]	@ 0x3bc

				run_ann(&net, x1);
 800492c:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8004930:	463b      	mov	r3, r7
 8004932:	4611      	mov	r1, r2
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fc4e 	bl	80041d6 <run_ann>
				ground_truth[0] = 0.0;
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
				ground_truth[1] = 1.0;
 8004942:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004946:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
				Output_Error(2, &net, ground_truth, &error);
 800494a:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 800494e:	f507 726b 	add.w	r2, r7, #940	@ 0x3ac
 8004952:	4639      	mov	r1, r7
 8004954:	2002      	movs	r0, #2
 8004956:	f7fe fda3 	bl	80034a0 <Output_Error>
				net_error = net_error + error;
 800495a:	edd7 7aea 	vldr	s15, [r7, #936]	@ 0x3a8
 800495e:	ed97 7aef 	vldr	s14, [r7, #956]	@ 0x3bc
 8004962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004966:	edc7 7aef 	vstr	s15, [r7, #956]	@ 0x3bc

				run_ann(&net, x2);
 800496a:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800496e:	463b      	mov	r3, r7
 8004970:	4611      	mov	r1, r2
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff fc2f 	bl	80041d6 <run_ann>
				ground_truth[0] = 1.0;
 8004978:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800497c:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
				ground_truth[1] = 1.0;
 8004980:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004984:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
				Output_Error(2, &net, ground_truth, &error);
 8004988:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 800498c:	f507 726b 	add.w	r2, r7, #940	@ 0x3ac
 8004990:	4639      	mov	r1, r7
 8004992:	2002      	movs	r0, #2
 8004994:	f7fe fd84 	bl	80034a0 <Output_Error>
				net_error = net_error + error;
 8004998:	edd7 7aea 	vldr	s15, [r7, #936]	@ 0x3a8
 800499c:	ed97 7aef 	vldr	s14, [r7, #956]	@ 0x3bc
 80049a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049a4:	edc7 7aef 	vstr	s15, [r7, #956]	@ 0x3bc

				run_ann(&net, x3);
 80049a8:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80049ac:	463b      	mov	r3, r7
 80049ae:	4611      	mov	r1, r2
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fc10 	bl	80041d6 <run_ann>
				ground_truth[0] = 1.0;
 80049b6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80049ba:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
				ground_truth[1] = 0.0;
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
				Output_Error(2, &net, ground_truth, &error);
 80049c6:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80049ca:	f507 726b 	add.w	r2, r7, #940	@ 0x3ac
 80049ce:	4639      	mov	r1, r7
 80049d0:	2002      	movs	r0, #2
 80049d2:	f7fe fd65 	bl	80034a0 <Output_Error>
				net_error = net_error + error;
 80049d6:	edd7 7aea 	vldr	s15, [r7, #936]	@ 0x3a8
 80049da:	ed97 7aef 	vldr	s14, [r7, #956]	@ 0x3bc
 80049de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049e2:	edc7 7aef 	vstr	s15, [r7, #956]	@ 0x3bc

				run_ann(&net, x4);
 80049e6:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80049ea:	463b      	mov	r3, r7
 80049ec:	4611      	mov	r1, r2
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fbf1 	bl	80041d6 <run_ann>
				ground_truth[0] = 1.0;
 80049f4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80049f8:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
				ground_truth[1] = 0.0;
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
				Output_Error(2, &net, ground_truth, &error);
 8004a04:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8004a08:	f507 726b 	add.w	r2, r7, #940	@ 0x3ac
 8004a0c:	4639      	mov	r1, r7
 8004a0e:	2002      	movs	r0, #2
 8004a10:	f7fe fd46 	bl	80034a0 <Output_Error>
				net_error = net_error + error;
 8004a14:	edd7 7aea 	vldr	s15, [r7, #936]	@ 0x3a8
 8004a18:	ed97 7aef 	vldr	s14, [r7, #956]	@ 0x3bc
 8004a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a20:	edc7 7aef 	vstr	s15, [r7, #956]	@ 0x3bc

				run_ann(&net, x5);
 8004a24:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8004a28:	463b      	mov	r3, r7
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fbd2 	bl	80041d6 <run_ann>
				ground_truth[0] = 1.0;
 8004a32:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004a36:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
				ground_truth[1] = 1.0;
 8004a3a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004a3e:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
				Output_Error(2, &net, ground_truth, &error);
 8004a42:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8004a46:	f507 726b 	add.w	r2, r7, #940	@ 0x3ac
 8004a4a:	4639      	mov	r1, r7
 8004a4c:	2002      	movs	r0, #2
 8004a4e:	f7fe fd27 	bl	80034a0 <Output_Error>
				net_error = net_error + error;
 8004a52:	edd7 7aea 	vldr	s15, [r7, #936]	@ 0x3a8
 8004a56:	ed97 7aef 	vldr	s14, [r7, #956]	@ 0x3bc
 8004a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a5e:	edc7 7aef 	vstr	s15, [r7, #956]	@ 0x3bc

				run_ann(&net, x6);
 8004a62:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8004a66:	463b      	mov	r3, r7
 8004a68:	4611      	mov	r1, r2
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff fbb3 	bl	80041d6 <run_ann>
				ground_truth[0] = 0.0;
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
				ground_truth[1] = 1.0;
 8004a78:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004a7c:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
				Output_Error(2, &net, ground_truth, &error);
 8004a80:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8004a84:	f507 726b 	add.w	r2, r7, #940	@ 0x3ac
 8004a88:	4639      	mov	r1, r7
 8004a8a:	2002      	movs	r0, #2
 8004a8c:	f7fe fd08 	bl	80034a0 <Output_Error>
				net_error = net_error + error;
 8004a90:	edd7 7aea 	vldr	s15, [r7, #936]	@ 0x3a8
 8004a94:	ed97 7aef 	vldr	s14, [r7, #956]	@ 0x3bc
 8004a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a9c:	edc7 7aef 	vstr	s15, [r7, #956]	@ 0x3bc

				run_ann(&net, x7);
 8004aa0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8004aa4:	463b      	mov	r3, r7
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fb94 	bl	80041d6 <run_ann>
				ground_truth[0] = 0.0;
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
				ground_truth[1] = 0.0;
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
				Output_Error(2, &net, ground_truth, &error);
 8004abe:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8004ac2:	f507 726b 	add.w	r2, r7, #940	@ 0x3ac
 8004ac6:	4639      	mov	r1, r7
 8004ac8:	2002      	movs	r0, #2
 8004aca:	f7fe fce9 	bl	80034a0 <Output_Error>
				net_error = net_error + error;
 8004ace:	edd7 7aea 	vldr	s15, [r7, #936]	@ 0x3a8
 8004ad2:	ed97 7aef 	vldr	s14, [r7, #956]	@ 0x3bc
 8004ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ada:	edc7 7aef 	vstr	s15, [r7, #956]	@ 0x3bc

				printf("\nTotal Mean Squared Error: %0.3f", net_error);
 8004ade:	f8d7 03bc 	ldr.w	r0, [r7, #956]	@ 0x3bc
 8004ae2:	f7fb fd35 	bl	8000550 <__aeabi_f2d>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4821      	ldr	r0, [pc, #132]	@ (8004b70 <main+0x690>)
 8004aec:	f000 ff24 	bl	8005938 <iprintf>
			}

			/* Exit train and test cycles if test error is less than 1 percent */
			if (net_error < 0.01){
 8004af0:	f8d7 03bc 	ldr.w	r0, [r7, #956]	@ 0x3bc
 8004af4:	f7fb fd2c 	bl	8000550 <__aeabi_f2d>
 8004af8:	a315      	add	r3, pc, #84	@ (adr r3, 8004b50 <main+0x670>)
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	f7fb fff1 	bl	8000ae4 <__aeabi_dcmplt>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d110      	bne.n	8004b2a <main+0x64a>
				break;
			}

			i++;
 8004b08:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
		while (i < N_EPOCH_XOR_AND && UserButtonPressed == 0) {
 8004b12:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8004b16:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004b1a:	da07      	bge.n	8004b2c <main+0x64c>
 8004b1c:	4b15      	ldr	r3, [pc, #84]	@ (8004b74 <main+0x694>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f43f ae8a 	beq.w	800483c <main+0x35c>
 8004b28:	e000      	b.n	8004b2c <main+0x64c>
				break;
 8004b2a:	bf00      	nop
		}

		printf("\n\n\nTrain and Test Complete at Epoch: %i with Total Error: %0.3f\n", i, net_error);
 8004b2c:	f8d7 03bc 	ldr.w	r0, [r7, #956]	@ 0x3bc
 8004b30:	f7fb fd0e 	bl	8000550 <__aeabi_f2d>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 8004b3c:	480e      	ldr	r0, [pc, #56]	@ (8004b78 <main+0x698>)
 8004b3e:	f000 fefb 	bl	8005938 <iprintf>
		printf("\n\nPress User Button to Repeat\n");
 8004b42:	480e      	ldr	r0, [pc, #56]	@ (8004b7c <main+0x69c>)
 8004b44:	f000 ff68 	bl	8005a18 <puts>
		User_Button_Wait();
 8004b48:	f000 f8be 	bl	8004cc8 <User_Button_Wait>
		init_ann(&net);
 8004b4c:	e654      	b.n	80047f8 <main+0x318>
 8004b4e:	bf00      	nop
 8004b50:	47ae147b 	.word	0x47ae147b
 8004b54:	3f847ae1 	.word	0x3f847ae1
 8004b58:	51eb851f 	.word	0x51eb851f
 8004b5c:	08007fac 	.word	0x08007fac
 8004b60:	08007fc4 	.word	0x08007fc4
 8004b64:	08007fe0 	.word	0x08007fe0
 8004b68:	08007ffc 	.word	0x08007ffc
 8004b6c:	08008014 	.word	0x08008014
 8004b70:	08008034 	.word	0x08008034
 8004b74:	20000354 	.word	0x20000354
 8004b78:	08008058 	.word	0x08008058
 8004b7c:	0800809c 	.word	0x0800809c

08004b80 <SystemClock_Config>:
 * @retval None
 */


void SystemClock_Config(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b0a0      	sub	sp, #128	@ 0x80
 8004b84:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b86:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	605a      	str	r2, [r3, #4]
 8004b90:	609a      	str	r2, [r3, #8]
 8004b92:	60da      	str	r2, [r3, #12]
 8004b94:	611a      	str	r2, [r3, #16]
 8004b96:	615a      	str	r2, [r3, #20]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b98:	f107 0308 	add.w	r3, r7, #8
 8004b9c:	2260      	movs	r2, #96	@ 0x60
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 ff41 	bl	8005a28 <memset>

	/* Enable voltage range 1 for frequency above 100 Mhz */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8004c60 <SystemClock_Config+0xe0>)
 8004ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bac:	4a2c      	ldr	r2, [pc, #176]	@ (8004c60 <SystemClock_Config+0xe0>)
 8004bae:	f043 0304 	orr.w	r3, r3, #4
 8004bb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8004c60 <SystemClock_Config+0xe0>)
 8004bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	607b      	str	r3, [r7, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bc4:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8004bc8:	f7fd f806 	bl	8001bd8 <HAL_PWREx_ControlVoltageScaling>

	/* Switch to SMPS regulator instead of LDO */
	HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY);
 8004bcc:	2002      	movs	r0, #2
 8004bce:	f7fd f885 	bl	8001cdc <HAL_PWREx_ConfigSupply>

	__HAL_RCC_PWR_CLK_DISABLE();
 8004bd2:	4b23      	ldr	r3, [pc, #140]	@ (8004c60 <SystemClock_Config+0xe0>)
 8004bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bd8:	4a21      	ldr	r2, [pc, #132]	@ (8004c60 <SystemClock_Config+0xe0>)
 8004bda:	f023 0304 	bic.w	r3, r3, #4
 8004bde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

	/* MSI Oscillator enabled at reset (4Mhz), activate PLL with MSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004be2:	2310      	movs	r3, #16
 8004be4:	60bb      	str	r3, [r7, #8]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004be6:	2301      	movs	r3, #1
 8004be8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8004bea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8004c00:	2301      	movs	r3, #1
 8004c02:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLN = 80;
 8004c04:	2350      	movs	r3, #80	@ 0x50
 8004c06:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = 2;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLP = 2;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8004c10:	2302      	movs	r3, #2
 8004c12:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLFRACN= 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	667b      	str	r3, [r7, #100]	@ 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c18:	f107 0308 	add.w	r3, r7, #8
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fd f8ad 	bl	8001d7c <HAL_RCC_OscConfig>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d000      	beq.n	8004c2a <SystemClock_Config+0xaa>
	{
		/* Initialization Error */
		while(1);
 8004c28:	e7fe      	b.n	8004c28 <SystemClock_Config+0xa8>
	}

	/* Select PLL as system clock source and configure bus clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8004c2a:	231f      	movs	r3, #31
 8004c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
			RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_PCLK3);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	66fb      	str	r3, [r7, #108]	@ 0x6c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c32:	2300      	movs	r3, #0
 8004c34:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004c36:	2300      	movs	r3, #0
 8004c38:	677b      	str	r3, [r7, #116]	@ 0x74
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	67fb      	str	r3, [r7, #124]	@ 0x7c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004c42:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004c46:	2104      	movs	r1, #4
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fd ff6d 	bl	8002b28 <HAL_RCC_ClockConfig>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d000      	beq.n	8004c56 <SystemClock_Config+0xd6>
	{
		/* Initialization Error */
		while(1);
 8004c54:	e7fe      	b.n	8004c54 <SystemClock_Config+0xd4>
	}
}
 8004c56:	bf00      	nop
 8004c58:	3780      	adds	r7, #128	@ 0x80
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	46020c00 	.word	0x46020c00

08004c64 <CACHE_Enable>:
 * @brief  Enable ICACHE with 1-way set-associative configuration.
 * @param  None
 * @retval None
 */
static void CACHE_Enable(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
	/* Configure ICACHE associativity mode */
	HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY);
 8004c68:	2000      	movs	r0, #0
 8004c6a:	f7fc ff85 	bl	8001b78 <HAL_ICACHE_ConfigAssociativityMode>

	/* Enable ICACHE */
	HAL_ICACHE_Enable();
 8004c6e:	f7fc ffa3 	bl	8001bb8 <HAL_ICACHE_Enable>
}
 8004c72:	bf00      	nop
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	71fb      	strb	r3, [r7, #7]
	if (Button == BUTTON_USER)
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d102      	bne.n	8004c8e <BSP_PB_Callback+0x16>
	{
		UserButtonPressed = SET;
 8004c88:	4b04      	ldr	r3, [pc, #16]	@ (8004c9c <BSP_PB_Callback+0x24>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	701a      	strb	r2, [r3, #0]
	}
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20000354 	.word	0x20000354

08004ca0 <Ms_Button_Init>:
	return result;

}

int32_t Ms_Button_Init(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
	int32_t  result  = 0;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	607b      	str	r3, [r7, #4]
	/* Initialize user button */
	if (BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI) != BSP_ERROR_NONE) result--;
 8004caa:	2101      	movs	r1, #1
 8004cac:	2000      	movs	r0, #0
 8004cae:	f7fb ffcf 	bl	8000c50 <BSP_PB_Init>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <Ms_Button_Init+0x1e>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	607b      	str	r3, [r7, #4]
	return result;
 8004cbe:	687b      	ldr	r3, [r7, #4]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <User_Button_Wait>:
	UserButtonPressed = RESET;
	printf("\n");
}

void User_Button_Wait()
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
	printf("\n");
 8004ccc:	200a      	movs	r0, #10
 8004cce:	f000 fe45 	bl	800595c <putchar>
	UserButtonPressed = RESET;
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cfc <User_Button_Wait+0x34>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	701a      	strb	r2, [r3, #0]
	while (UserButtonPressed == 0)
 8004cd8:	e002      	b.n	8004ce0 <User_Button_Wait+0x18>
	{
		HAL_Delay(10);
 8004cda:	200a      	movs	r0, #10
 8004cdc:	f7fc f96c 	bl	8000fb8 <HAL_Delay>
	while (UserButtonPressed == 0)
 8004ce0:	4b06      	ldr	r3, [pc, #24]	@ (8004cfc <User_Button_Wait+0x34>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f7      	beq.n	8004cda <User_Button_Wait+0x12>
	}
	UserButtonPressed = RESET;
 8004cea:	4b04      	ldr	r3, [pc, #16]	@ (8004cfc <User_Button_Wait+0x34>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]
	printf("\n");
 8004cf0:	200a      	movs	r0, #10
 8004cf2:	f000 fe33 	bl	800595c <putchar>
}
 8004cf6:	bf00      	nop
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000354 	.word	0x20000354

08004d00 <HAL_MspInit>:
/**
  * @brief  Initialize the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
}
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	af00      	add	r7, sp, #0
}
 8004d12:	bf00      	nop
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004d20:	e7fe      	b.n	8004d20 <HardFault_Handler+0x4>

08004d22 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004d22:	b480      	push	{r7}
 8004d24:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004d26:	e7fe      	b.n	8004d26 <MemManage_Handler+0x4>

08004d28 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004d2c:	e7fe      	b.n	8004d2c <BusFault_Handler+0x4>

08004d2e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004d32:	e7fe      	b.n	8004d32 <UsageFault_Handler+0x4>

08004d34 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
}
 8004d38:	bf00      	nop
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004d42:	b480      	push	{r7}
 8004d44:	af00      	add	r7, sp, #0
  while (1)
 8004d46:	e7fe      	b.n	8004d46 <DebugMon_Handler+0x4>

08004d48 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  while (1)
 8004d4c:	e7fe      	b.n	8004d4c <PendSV_Handler+0x4>

08004d4e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8004d52:	f7fc f911 	bl	8000f78 <HAL_IncTick>
}
 8004d56:	bf00      	nop
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <GPDMA1_Channel0_IRQHandler>:
  * @brief  This function handles GPDMA_Channel0 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0, AUDIO_IN_DEVICE_DIGITAL_MIC2);
 8004d5e:	2102      	movs	r1, #2
 8004d60:	2000      	movs	r0, #0
 8004d62:	f7fb ffff 	bl	8000d64 <BSP_AUDIO_IN_IRQHandler>
}
 8004d66:	bf00      	nop
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <GPDMA1_Channel6_IRQHandler>:
  * @brief  This function handles GPDMA_Channel6 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel6_IRQHandler(void)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0, AUDIO_IN_DEVICE_DIGITAL_MIC1);
 8004d6e:	2101      	movs	r1, #1
 8004d70:	2000      	movs	r0, #0
 8004d72:	f7fb fff7 	bl	8000d64 <BSP_AUDIO_IN_IRQHandler>
} 
 8004d76:	bf00      	nop
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <EXTI13_IRQHandler>:
  * @brief  This function handles EXTI13 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI13_IRQHandler(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&hpb_exti[0]);
 8004d80:	4802      	ldr	r0, [pc, #8]	@ (8004d8c <EXTI13_IRQHandler+0x10>)
 8004d82:	f7fc fcd9 	bl	8001738 <HAL_EXTI_IRQHandler>
}
 8004d86:	bf00      	nop
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000204 	.word	0x20000204

08004d90 <DCMI_PSSI_IRQHandler>:
  * @brief  This function handles DCMI_PSSI interrupt request.
  * @param  None
  * @retval None
  */
void DCMI_PSSI_IRQHandler(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 8004d94:	4802      	ldr	r0, [pc, #8]	@ (8004da0 <DCMI_PSSI_IRQHandler+0x10>)
 8004d96:	f7fc fa43 	bl	8001220 <HAL_DCMI_IRQHandler>
}
 8004d9a:	bf00      	nop
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000300 	.word	0x20000300

08004da4 <GPDMA1_Channel12_IRQHandler>:
  * @brief  This function handles GPDMA_Channel12 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 8004da8:	4b03      	ldr	r3, [pc, #12]	@ (8004db8 <GPDMA1_Channel12_IRQHandler+0x14>)
 8004daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fc fb0f 	bl	80013d0 <HAL_DMA_IRQHandler>
}
 8004db2:	bf00      	nop
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000300 	.word	0x20000300

08004dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004dc4:	4a14      	ldr	r2, [pc, #80]	@ (8004e18 <_sbrk+0x5c>)
 8004dc6:	4b15      	ldr	r3, [pc, #84]	@ (8004e1c <_sbrk+0x60>)
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004dd0:	4b13      	ldr	r3, [pc, #76]	@ (8004e20 <_sbrk+0x64>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d102      	bne.n	8004dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004dd8:	4b11      	ldr	r3, [pc, #68]	@ (8004e20 <_sbrk+0x64>)
 8004dda:	4a12      	ldr	r2, [pc, #72]	@ (8004e24 <_sbrk+0x68>)
 8004ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dde:	4b10      	ldr	r3, [pc, #64]	@ (8004e20 <_sbrk+0x64>)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4413      	add	r3, r2
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d207      	bcs.n	8004dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004dec:	f000 fe28 	bl	8005a40 <__errno>
 8004df0:	4603      	mov	r3, r0
 8004df2:	220c      	movs	r2, #12
 8004df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004df6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004dfa:	e009      	b.n	8004e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004dfc:	4b08      	ldr	r3, [pc, #32]	@ (8004e20 <_sbrk+0x64>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e02:	4b07      	ldr	r3, [pc, #28]	@ (8004e20 <_sbrk+0x64>)
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4413      	add	r3, r2
 8004e0a:	4a05      	ldr	r2, [pc, #20]	@ (8004e20 <_sbrk+0x64>)
 8004e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	200c0000 	.word	0x200c0000
 8004e1c:	00001000 	.word	0x00001000
 8004e20:	20000358 	.word	0x20000358
 8004e24:	20000558 	.word	0x20000558

08004e28 <__cvt>:
 8004e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e2c:	ec57 6b10 	vmov	r6, r7, d0
 8004e30:	2f00      	cmp	r7, #0
 8004e32:	460c      	mov	r4, r1
 8004e34:	4619      	mov	r1, r3
 8004e36:	463b      	mov	r3, r7
 8004e38:	bfb4      	ite	lt
 8004e3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004e3e:	2300      	movge	r3, #0
 8004e40:	4691      	mov	r9, r2
 8004e42:	bfbf      	itttt	lt
 8004e44:	4632      	movlt	r2, r6
 8004e46:	461f      	movlt	r7, r3
 8004e48:	232d      	movlt	r3, #45	@ 0x2d
 8004e4a:	4616      	movlt	r6, r2
 8004e4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004e50:	700b      	strb	r3, [r1, #0]
 8004e52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e54:	f023 0820 	bic.w	r8, r3, #32
 8004e58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e5c:	d005      	beq.n	8004e6a <__cvt+0x42>
 8004e5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004e62:	d100      	bne.n	8004e66 <__cvt+0x3e>
 8004e64:	3401      	adds	r4, #1
 8004e66:	2102      	movs	r1, #2
 8004e68:	e000      	b.n	8004e6c <__cvt+0x44>
 8004e6a:	2103      	movs	r1, #3
 8004e6c:	ab03      	add	r3, sp, #12
 8004e6e:	4622      	mov	r2, r4
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	ab02      	add	r3, sp, #8
 8004e74:	ec47 6b10 	vmov	d0, r6, r7
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	4653      	mov	r3, sl
 8004e7c:	f000 fed4 	bl	8005c28 <_dtoa_r>
 8004e80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004e84:	4605      	mov	r5, r0
 8004e86:	d119      	bne.n	8004ebc <__cvt+0x94>
 8004e88:	f019 0f01 	tst.w	r9, #1
 8004e8c:	d00e      	beq.n	8004eac <__cvt+0x84>
 8004e8e:	eb00 0904 	add.w	r9, r0, r4
 8004e92:	2200      	movs	r2, #0
 8004e94:	2300      	movs	r3, #0
 8004e96:	4630      	mov	r0, r6
 8004e98:	4639      	mov	r1, r7
 8004e9a:	f7fb fe19 	bl	8000ad0 <__aeabi_dcmpeq>
 8004e9e:	b108      	cbz	r0, 8004ea4 <__cvt+0x7c>
 8004ea0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ea4:	2230      	movs	r2, #48	@ 0x30
 8004ea6:	9b03      	ldr	r3, [sp, #12]
 8004ea8:	454b      	cmp	r3, r9
 8004eaa:	d31e      	bcc.n	8004eea <__cvt+0xc2>
 8004eac:	9b03      	ldr	r3, [sp, #12]
 8004eae:	4628      	mov	r0, r5
 8004eb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004eb2:	1b5b      	subs	r3, r3, r5
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	b004      	add	sp, #16
 8004eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ebc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ec0:	eb00 0904 	add.w	r9, r0, r4
 8004ec4:	d1e5      	bne.n	8004e92 <__cvt+0x6a>
 8004ec6:	7803      	ldrb	r3, [r0, #0]
 8004ec8:	2b30      	cmp	r3, #48	@ 0x30
 8004eca:	d10a      	bne.n	8004ee2 <__cvt+0xba>
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2300      	movs	r3, #0
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	4639      	mov	r1, r7
 8004ed4:	f7fb fdfc 	bl	8000ad0 <__aeabi_dcmpeq>
 8004ed8:	b918      	cbnz	r0, 8004ee2 <__cvt+0xba>
 8004eda:	f1c4 0401 	rsb	r4, r4, #1
 8004ede:	f8ca 4000 	str.w	r4, [sl]
 8004ee2:	f8da 3000 	ldr.w	r3, [sl]
 8004ee6:	4499      	add	r9, r3
 8004ee8:	e7d3      	b.n	8004e92 <__cvt+0x6a>
 8004eea:	1c59      	adds	r1, r3, #1
 8004eec:	9103      	str	r1, [sp, #12]
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	e7d9      	b.n	8004ea6 <__cvt+0x7e>

08004ef2 <__exponent>:
 8004ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ef4:	2900      	cmp	r1, #0
 8004ef6:	7002      	strb	r2, [r0, #0]
 8004ef8:	bfba      	itte	lt
 8004efa:	4249      	neglt	r1, r1
 8004efc:	232d      	movlt	r3, #45	@ 0x2d
 8004efe:	232b      	movge	r3, #43	@ 0x2b
 8004f00:	2909      	cmp	r1, #9
 8004f02:	7043      	strb	r3, [r0, #1]
 8004f04:	dd28      	ble.n	8004f58 <__exponent+0x66>
 8004f06:	f10d 0307 	add.w	r3, sp, #7
 8004f0a:	270a      	movs	r7, #10
 8004f0c:	461d      	mov	r5, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	fbb1 f6f7 	udiv	r6, r1, r7
 8004f16:	fb07 1416 	mls	r4, r7, r6, r1
 8004f1a:	3430      	adds	r4, #48	@ 0x30
 8004f1c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004f20:	460c      	mov	r4, r1
 8004f22:	4631      	mov	r1, r6
 8004f24:	2c63      	cmp	r4, #99	@ 0x63
 8004f26:	dcf2      	bgt.n	8004f0e <__exponent+0x1c>
 8004f28:	3130      	adds	r1, #48	@ 0x30
 8004f2a:	1e94      	subs	r4, r2, #2
 8004f2c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004f30:	1c41      	adds	r1, r0, #1
 8004f32:	4623      	mov	r3, r4
 8004f34:	42ab      	cmp	r3, r5
 8004f36:	d30a      	bcc.n	8004f4e <__exponent+0x5c>
 8004f38:	f10d 0309 	add.w	r3, sp, #9
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	42ac      	cmp	r4, r5
 8004f40:	bf88      	it	hi
 8004f42:	2300      	movhi	r3, #0
 8004f44:	3302      	adds	r3, #2
 8004f46:	4403      	add	r3, r0
 8004f48:	1a18      	subs	r0, r3, r0
 8004f4a:	b003      	add	sp, #12
 8004f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f4e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004f52:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004f56:	e7ed      	b.n	8004f34 <__exponent+0x42>
 8004f58:	2330      	movs	r3, #48	@ 0x30
 8004f5a:	3130      	adds	r1, #48	@ 0x30
 8004f5c:	7083      	strb	r3, [r0, #2]
 8004f5e:	1d03      	adds	r3, r0, #4
 8004f60:	70c1      	strb	r1, [r0, #3]
 8004f62:	e7f1      	b.n	8004f48 <__exponent+0x56>

08004f64 <_printf_float>:
 8004f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f68:	b08d      	sub	sp, #52	@ 0x34
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	4616      	mov	r6, r2
 8004f6e:	461f      	mov	r7, r3
 8004f70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004f74:	4605      	mov	r5, r0
 8004f76:	f000 fd5f 	bl	8005a38 <_localeconv_r>
 8004f7a:	6803      	ldr	r3, [r0, #0]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	9304      	str	r3, [sp, #16]
 8004f80:	f7fb f97a 	bl	8000278 <strlen>
 8004f84:	2300      	movs	r3, #0
 8004f86:	9005      	str	r0, [sp, #20]
 8004f88:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8004f8e:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004f92:	3307      	adds	r3, #7
 8004f94:	f8d4 b000 	ldr.w	fp, [r4]
 8004f98:	f023 0307 	bic.w	r3, r3, #7
 8004f9c:	f103 0208 	add.w	r2, r3, #8
 8004fa0:	f8c8 2000 	str.w	r2, [r8]
 8004fa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fa8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004fb0:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fb4:	9307      	str	r3, [sp, #28]
 8004fb6:	4b9d      	ldr	r3, [pc, #628]	@ (800522c <_printf_float+0x2c8>)
 8004fb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fbc:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004fc0:	f7fb fdb8 	bl	8000b34 <__aeabi_dcmpun>
 8004fc4:	bb70      	cbnz	r0, 8005024 <_printf_float+0xc0>
 8004fc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fca:	4b98      	ldr	r3, [pc, #608]	@ (800522c <_printf_float+0x2c8>)
 8004fcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fd0:	f7fb fd92 	bl	8000af8 <__aeabi_dcmple>
 8004fd4:	bb30      	cbnz	r0, 8005024 <_printf_float+0xc0>
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	2300      	movs	r3, #0
 8004fda:	4640      	mov	r0, r8
 8004fdc:	4649      	mov	r1, r9
 8004fde:	f7fb fd81 	bl	8000ae4 <__aeabi_dcmplt>
 8004fe2:	b110      	cbz	r0, 8004fea <_printf_float+0x86>
 8004fe4:	232d      	movs	r3, #45	@ 0x2d
 8004fe6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fea:	4a91      	ldr	r2, [pc, #580]	@ (8005230 <_printf_float+0x2cc>)
 8004fec:	4b91      	ldr	r3, [pc, #580]	@ (8005234 <_printf_float+0x2d0>)
 8004fee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004ff2:	bf94      	ite	ls
 8004ff4:	4690      	movls	r8, r2
 8004ff6:	4698      	movhi	r8, r3
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	f04f 0900 	mov.w	r9, #0
 8004ffe:	6123      	str	r3, [r4, #16]
 8005000:	f02b 0304 	bic.w	r3, fp, #4
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	4633      	mov	r3, r6
 8005008:	aa0b      	add	r2, sp, #44	@ 0x2c
 800500a:	4621      	mov	r1, r4
 800500c:	4628      	mov	r0, r5
 800500e:	9700      	str	r7, [sp, #0]
 8005010:	f000 f9d2 	bl	80053b8 <_printf_common>
 8005014:	3001      	adds	r0, #1
 8005016:	f040 808d 	bne.w	8005134 <_printf_float+0x1d0>
 800501a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800501e:	b00d      	add	sp, #52	@ 0x34
 8005020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005024:	4642      	mov	r2, r8
 8005026:	464b      	mov	r3, r9
 8005028:	4640      	mov	r0, r8
 800502a:	4649      	mov	r1, r9
 800502c:	f7fb fd82 	bl	8000b34 <__aeabi_dcmpun>
 8005030:	b140      	cbz	r0, 8005044 <_printf_float+0xe0>
 8005032:	464b      	mov	r3, r9
 8005034:	4a80      	ldr	r2, [pc, #512]	@ (8005238 <_printf_float+0x2d4>)
 8005036:	2b00      	cmp	r3, #0
 8005038:	bfbc      	itt	lt
 800503a:	232d      	movlt	r3, #45	@ 0x2d
 800503c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005040:	4b7e      	ldr	r3, [pc, #504]	@ (800523c <_printf_float+0x2d8>)
 8005042:	e7d4      	b.n	8004fee <_printf_float+0x8a>
 8005044:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005048:	6863      	ldr	r3, [r4, #4]
 800504a:	9206      	str	r2, [sp, #24]
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	d13b      	bne.n	80050c8 <_printf_float+0x164>
 8005050:	2306      	movs	r3, #6
 8005052:	6063      	str	r3, [r4, #4]
 8005054:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005058:	2300      	movs	r3, #0
 800505a:	4628      	mov	r0, r5
 800505c:	6022      	str	r2, [r4, #0]
 800505e:	9303      	str	r3, [sp, #12]
 8005060:	ab0a      	add	r3, sp, #40	@ 0x28
 8005062:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005066:	ab09      	add	r3, sp, #36	@ 0x24
 8005068:	ec49 8b10 	vmov	d0, r8, r9
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005072:	6861      	ldr	r1, [r4, #4]
 8005074:	f7ff fed8 	bl	8004e28 <__cvt>
 8005078:	9b06      	ldr	r3, [sp, #24]
 800507a:	4680      	mov	r8, r0
 800507c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800507e:	2b47      	cmp	r3, #71	@ 0x47
 8005080:	d129      	bne.n	80050d6 <_printf_float+0x172>
 8005082:	1cc8      	adds	r0, r1, #3
 8005084:	db02      	blt.n	800508c <_printf_float+0x128>
 8005086:	6863      	ldr	r3, [r4, #4]
 8005088:	4299      	cmp	r1, r3
 800508a:	dd41      	ble.n	8005110 <_printf_float+0x1ac>
 800508c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005090:	fa5f fa8a 	uxtb.w	sl, sl
 8005094:	3901      	subs	r1, #1
 8005096:	4652      	mov	r2, sl
 8005098:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800509c:	9109      	str	r1, [sp, #36]	@ 0x24
 800509e:	f7ff ff28 	bl	8004ef2 <__exponent>
 80050a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80050a4:	4681      	mov	r9, r0
 80050a6:	1813      	adds	r3, r2, r0
 80050a8:	2a01      	cmp	r2, #1
 80050aa:	6123      	str	r3, [r4, #16]
 80050ac:	dc02      	bgt.n	80050b4 <_printf_float+0x150>
 80050ae:	6822      	ldr	r2, [r4, #0]
 80050b0:	07d2      	lsls	r2, r2, #31
 80050b2:	d501      	bpl.n	80050b8 <_printf_float+0x154>
 80050b4:	3301      	adds	r3, #1
 80050b6:	6123      	str	r3, [r4, #16]
 80050b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0a2      	beq.n	8005006 <_printf_float+0xa2>
 80050c0:	232d      	movs	r3, #45	@ 0x2d
 80050c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050c6:	e79e      	b.n	8005006 <_printf_float+0xa2>
 80050c8:	9a06      	ldr	r2, [sp, #24]
 80050ca:	2a47      	cmp	r2, #71	@ 0x47
 80050cc:	d1c2      	bne.n	8005054 <_printf_float+0xf0>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1c0      	bne.n	8005054 <_printf_float+0xf0>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e7bd      	b.n	8005052 <_printf_float+0xee>
 80050d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80050da:	d9db      	bls.n	8005094 <_printf_float+0x130>
 80050dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80050e0:	d118      	bne.n	8005114 <_printf_float+0x1b0>
 80050e2:	2900      	cmp	r1, #0
 80050e4:	6863      	ldr	r3, [r4, #4]
 80050e6:	dd0b      	ble.n	8005100 <_printf_float+0x19c>
 80050e8:	6121      	str	r1, [r4, #16]
 80050ea:	b913      	cbnz	r3, 80050f2 <_printf_float+0x18e>
 80050ec:	6822      	ldr	r2, [r4, #0]
 80050ee:	07d0      	lsls	r0, r2, #31
 80050f0:	d502      	bpl.n	80050f8 <_printf_float+0x194>
 80050f2:	3301      	adds	r3, #1
 80050f4:	440b      	add	r3, r1
 80050f6:	6123      	str	r3, [r4, #16]
 80050f8:	f04f 0900 	mov.w	r9, #0
 80050fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80050fe:	e7db      	b.n	80050b8 <_printf_float+0x154>
 8005100:	b913      	cbnz	r3, 8005108 <_printf_float+0x1a4>
 8005102:	6822      	ldr	r2, [r4, #0]
 8005104:	07d2      	lsls	r2, r2, #31
 8005106:	d501      	bpl.n	800510c <_printf_float+0x1a8>
 8005108:	3302      	adds	r3, #2
 800510a:	e7f4      	b.n	80050f6 <_printf_float+0x192>
 800510c:	2301      	movs	r3, #1
 800510e:	e7f2      	b.n	80050f6 <_printf_float+0x192>
 8005110:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005116:	4299      	cmp	r1, r3
 8005118:	db05      	blt.n	8005126 <_printf_float+0x1c2>
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	6121      	str	r1, [r4, #16]
 800511e:	07d8      	lsls	r0, r3, #31
 8005120:	d5ea      	bpl.n	80050f8 <_printf_float+0x194>
 8005122:	1c4b      	adds	r3, r1, #1
 8005124:	e7e7      	b.n	80050f6 <_printf_float+0x192>
 8005126:	2900      	cmp	r1, #0
 8005128:	bfd4      	ite	le
 800512a:	f1c1 0202 	rsble	r2, r1, #2
 800512e:	2201      	movgt	r2, #1
 8005130:	4413      	add	r3, r2
 8005132:	e7e0      	b.n	80050f6 <_printf_float+0x192>
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	055a      	lsls	r2, r3, #21
 8005138:	d407      	bmi.n	800514a <_printf_float+0x1e6>
 800513a:	6923      	ldr	r3, [r4, #16]
 800513c:	4642      	mov	r2, r8
 800513e:	4631      	mov	r1, r6
 8005140:	4628      	mov	r0, r5
 8005142:	47b8      	blx	r7
 8005144:	3001      	adds	r0, #1
 8005146:	d12b      	bne.n	80051a0 <_printf_float+0x23c>
 8005148:	e767      	b.n	800501a <_printf_float+0xb6>
 800514a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800514e:	f240 80dd 	bls.w	800530c <_printf_float+0x3a8>
 8005152:	2200      	movs	r2, #0
 8005154:	2300      	movs	r3, #0
 8005156:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800515a:	f7fb fcb9 	bl	8000ad0 <__aeabi_dcmpeq>
 800515e:	2800      	cmp	r0, #0
 8005160:	d033      	beq.n	80051ca <_printf_float+0x266>
 8005162:	2301      	movs	r3, #1
 8005164:	4a36      	ldr	r2, [pc, #216]	@ (8005240 <_printf_float+0x2dc>)
 8005166:	4631      	mov	r1, r6
 8005168:	4628      	mov	r0, r5
 800516a:	47b8      	blx	r7
 800516c:	3001      	adds	r0, #1
 800516e:	f43f af54 	beq.w	800501a <_printf_float+0xb6>
 8005172:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005176:	4543      	cmp	r3, r8
 8005178:	db02      	blt.n	8005180 <_printf_float+0x21c>
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	07d8      	lsls	r0, r3, #31
 800517e:	d50f      	bpl.n	80051a0 <_printf_float+0x23c>
 8005180:	4631      	mov	r1, r6
 8005182:	4628      	mov	r0, r5
 8005184:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005188:	47b8      	blx	r7
 800518a:	3001      	adds	r0, #1
 800518c:	f43f af45 	beq.w	800501a <_printf_float+0xb6>
 8005190:	f04f 0900 	mov.w	r9, #0
 8005194:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005198:	f104 0a1a 	add.w	sl, r4, #26
 800519c:	45c8      	cmp	r8, r9
 800519e:	dc09      	bgt.n	80051b4 <_printf_float+0x250>
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	079b      	lsls	r3, r3, #30
 80051a4:	f100 8103 	bmi.w	80053ae <_printf_float+0x44a>
 80051a8:	68e0      	ldr	r0, [r4, #12]
 80051aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051ac:	4298      	cmp	r0, r3
 80051ae:	bfb8      	it	lt
 80051b0:	4618      	movlt	r0, r3
 80051b2:	e734      	b.n	800501e <_printf_float+0xba>
 80051b4:	2301      	movs	r3, #1
 80051b6:	4652      	mov	r2, sl
 80051b8:	4631      	mov	r1, r6
 80051ba:	4628      	mov	r0, r5
 80051bc:	47b8      	blx	r7
 80051be:	3001      	adds	r0, #1
 80051c0:	f43f af2b 	beq.w	800501a <_printf_float+0xb6>
 80051c4:	f109 0901 	add.w	r9, r9, #1
 80051c8:	e7e8      	b.n	800519c <_printf_float+0x238>
 80051ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	dc39      	bgt.n	8005244 <_printf_float+0x2e0>
 80051d0:	2301      	movs	r3, #1
 80051d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005240 <_printf_float+0x2dc>)
 80051d4:	4631      	mov	r1, r6
 80051d6:	4628      	mov	r0, r5
 80051d8:	47b8      	blx	r7
 80051da:	3001      	adds	r0, #1
 80051dc:	f43f af1d 	beq.w	800501a <_printf_float+0xb6>
 80051e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80051e4:	ea59 0303 	orrs.w	r3, r9, r3
 80051e8:	d102      	bne.n	80051f0 <_printf_float+0x28c>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	07d9      	lsls	r1, r3, #31
 80051ee:	d5d7      	bpl.n	80051a0 <_printf_float+0x23c>
 80051f0:	4631      	mov	r1, r6
 80051f2:	4628      	mov	r0, r5
 80051f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051f8:	47b8      	blx	r7
 80051fa:	3001      	adds	r0, #1
 80051fc:	f43f af0d 	beq.w	800501a <_printf_float+0xb6>
 8005200:	f04f 0a00 	mov.w	sl, #0
 8005204:	f104 0b1a 	add.w	fp, r4, #26
 8005208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800520a:	425b      	negs	r3, r3
 800520c:	4553      	cmp	r3, sl
 800520e:	dc01      	bgt.n	8005214 <_printf_float+0x2b0>
 8005210:	464b      	mov	r3, r9
 8005212:	e793      	b.n	800513c <_printf_float+0x1d8>
 8005214:	2301      	movs	r3, #1
 8005216:	465a      	mov	r2, fp
 8005218:	4631      	mov	r1, r6
 800521a:	4628      	mov	r0, r5
 800521c:	47b8      	blx	r7
 800521e:	3001      	adds	r0, #1
 8005220:	f43f aefb 	beq.w	800501a <_printf_float+0xb6>
 8005224:	f10a 0a01 	add.w	sl, sl, #1
 8005228:	e7ee      	b.n	8005208 <_printf_float+0x2a4>
 800522a:	bf00      	nop
 800522c:	7fefffff 	.word	0x7fefffff
 8005230:	080081f8 	.word	0x080081f8
 8005234:	080081fc 	.word	0x080081fc
 8005238:	08008200 	.word	0x08008200
 800523c:	08008204 	.word	0x08008204
 8005240:	08008208 	.word	0x08008208
 8005244:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005246:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800524a:	4553      	cmp	r3, sl
 800524c:	bfa8      	it	ge
 800524e:	4653      	movge	r3, sl
 8005250:	2b00      	cmp	r3, #0
 8005252:	4699      	mov	r9, r3
 8005254:	dc36      	bgt.n	80052c4 <_printf_float+0x360>
 8005256:	f04f 0b00 	mov.w	fp, #0
 800525a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800525e:	f104 021a 	add.w	r2, r4, #26
 8005262:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005264:	9306      	str	r3, [sp, #24]
 8005266:	eba3 0309 	sub.w	r3, r3, r9
 800526a:	455b      	cmp	r3, fp
 800526c:	dc31      	bgt.n	80052d2 <_printf_float+0x36e>
 800526e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005270:	459a      	cmp	sl, r3
 8005272:	dc3a      	bgt.n	80052ea <_printf_float+0x386>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	07da      	lsls	r2, r3, #31
 8005278:	d437      	bmi.n	80052ea <_printf_float+0x386>
 800527a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800527c:	ebaa 0903 	sub.w	r9, sl, r3
 8005280:	9b06      	ldr	r3, [sp, #24]
 8005282:	ebaa 0303 	sub.w	r3, sl, r3
 8005286:	4599      	cmp	r9, r3
 8005288:	bfa8      	it	ge
 800528a:	4699      	movge	r9, r3
 800528c:	f1b9 0f00 	cmp.w	r9, #0
 8005290:	dc33      	bgt.n	80052fa <_printf_float+0x396>
 8005292:	f04f 0800 	mov.w	r8, #0
 8005296:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800529a:	f104 0b1a 	add.w	fp, r4, #26
 800529e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052a0:	ebaa 0303 	sub.w	r3, sl, r3
 80052a4:	eba3 0309 	sub.w	r3, r3, r9
 80052a8:	4543      	cmp	r3, r8
 80052aa:	f77f af79 	ble.w	80051a0 <_printf_float+0x23c>
 80052ae:	2301      	movs	r3, #1
 80052b0:	465a      	mov	r2, fp
 80052b2:	4631      	mov	r1, r6
 80052b4:	4628      	mov	r0, r5
 80052b6:	47b8      	blx	r7
 80052b8:	3001      	adds	r0, #1
 80052ba:	f43f aeae 	beq.w	800501a <_printf_float+0xb6>
 80052be:	f108 0801 	add.w	r8, r8, #1
 80052c2:	e7ec      	b.n	800529e <_printf_float+0x33a>
 80052c4:	4642      	mov	r2, r8
 80052c6:	4631      	mov	r1, r6
 80052c8:	4628      	mov	r0, r5
 80052ca:	47b8      	blx	r7
 80052cc:	3001      	adds	r0, #1
 80052ce:	d1c2      	bne.n	8005256 <_printf_float+0x2f2>
 80052d0:	e6a3      	b.n	800501a <_printf_float+0xb6>
 80052d2:	2301      	movs	r3, #1
 80052d4:	4631      	mov	r1, r6
 80052d6:	4628      	mov	r0, r5
 80052d8:	9206      	str	r2, [sp, #24]
 80052da:	47b8      	blx	r7
 80052dc:	3001      	adds	r0, #1
 80052de:	f43f ae9c 	beq.w	800501a <_printf_float+0xb6>
 80052e2:	f10b 0b01 	add.w	fp, fp, #1
 80052e6:	9a06      	ldr	r2, [sp, #24]
 80052e8:	e7bb      	b.n	8005262 <_printf_float+0x2fe>
 80052ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052ee:	4631      	mov	r1, r6
 80052f0:	4628      	mov	r0, r5
 80052f2:	47b8      	blx	r7
 80052f4:	3001      	adds	r0, #1
 80052f6:	d1c0      	bne.n	800527a <_printf_float+0x316>
 80052f8:	e68f      	b.n	800501a <_printf_float+0xb6>
 80052fa:	9a06      	ldr	r2, [sp, #24]
 80052fc:	464b      	mov	r3, r9
 80052fe:	4631      	mov	r1, r6
 8005300:	4628      	mov	r0, r5
 8005302:	4442      	add	r2, r8
 8005304:	47b8      	blx	r7
 8005306:	3001      	adds	r0, #1
 8005308:	d1c3      	bne.n	8005292 <_printf_float+0x32e>
 800530a:	e686      	b.n	800501a <_printf_float+0xb6>
 800530c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005310:	f1ba 0f01 	cmp.w	sl, #1
 8005314:	dc01      	bgt.n	800531a <_printf_float+0x3b6>
 8005316:	07db      	lsls	r3, r3, #31
 8005318:	d536      	bpl.n	8005388 <_printf_float+0x424>
 800531a:	2301      	movs	r3, #1
 800531c:	4642      	mov	r2, r8
 800531e:	4631      	mov	r1, r6
 8005320:	4628      	mov	r0, r5
 8005322:	47b8      	blx	r7
 8005324:	3001      	adds	r0, #1
 8005326:	f43f ae78 	beq.w	800501a <_printf_float+0xb6>
 800532a:	4631      	mov	r1, r6
 800532c:	4628      	mov	r0, r5
 800532e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005332:	47b8      	blx	r7
 8005334:	3001      	adds	r0, #1
 8005336:	f43f ae70 	beq.w	800501a <_printf_float+0xb6>
 800533a:	2200      	movs	r2, #0
 800533c:	2300      	movs	r3, #0
 800533e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005342:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005346:	f7fb fbc3 	bl	8000ad0 <__aeabi_dcmpeq>
 800534a:	b9c0      	cbnz	r0, 800537e <_printf_float+0x41a>
 800534c:	4653      	mov	r3, sl
 800534e:	f108 0201 	add.w	r2, r8, #1
 8005352:	4631      	mov	r1, r6
 8005354:	4628      	mov	r0, r5
 8005356:	47b8      	blx	r7
 8005358:	3001      	adds	r0, #1
 800535a:	d10c      	bne.n	8005376 <_printf_float+0x412>
 800535c:	e65d      	b.n	800501a <_printf_float+0xb6>
 800535e:	2301      	movs	r3, #1
 8005360:	465a      	mov	r2, fp
 8005362:	4631      	mov	r1, r6
 8005364:	4628      	mov	r0, r5
 8005366:	47b8      	blx	r7
 8005368:	3001      	adds	r0, #1
 800536a:	f43f ae56 	beq.w	800501a <_printf_float+0xb6>
 800536e:	f108 0801 	add.w	r8, r8, #1
 8005372:	45d0      	cmp	r8, sl
 8005374:	dbf3      	blt.n	800535e <_printf_float+0x3fa>
 8005376:	464b      	mov	r3, r9
 8005378:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800537c:	e6df      	b.n	800513e <_printf_float+0x1da>
 800537e:	f04f 0800 	mov.w	r8, #0
 8005382:	f104 0b1a 	add.w	fp, r4, #26
 8005386:	e7f4      	b.n	8005372 <_printf_float+0x40e>
 8005388:	2301      	movs	r3, #1
 800538a:	4642      	mov	r2, r8
 800538c:	e7e1      	b.n	8005352 <_printf_float+0x3ee>
 800538e:	2301      	movs	r3, #1
 8005390:	464a      	mov	r2, r9
 8005392:	4631      	mov	r1, r6
 8005394:	4628      	mov	r0, r5
 8005396:	47b8      	blx	r7
 8005398:	3001      	adds	r0, #1
 800539a:	f43f ae3e 	beq.w	800501a <_printf_float+0xb6>
 800539e:	f108 0801 	add.w	r8, r8, #1
 80053a2:	68e3      	ldr	r3, [r4, #12]
 80053a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80053a6:	1a5b      	subs	r3, r3, r1
 80053a8:	4543      	cmp	r3, r8
 80053aa:	dcf0      	bgt.n	800538e <_printf_float+0x42a>
 80053ac:	e6fc      	b.n	80051a8 <_printf_float+0x244>
 80053ae:	f04f 0800 	mov.w	r8, #0
 80053b2:	f104 0919 	add.w	r9, r4, #25
 80053b6:	e7f4      	b.n	80053a2 <_printf_float+0x43e>

080053b8 <_printf_common>:
 80053b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053bc:	4616      	mov	r6, r2
 80053be:	4698      	mov	r8, r3
 80053c0:	688a      	ldr	r2, [r1, #8]
 80053c2:	4607      	mov	r7, r0
 80053c4:	690b      	ldr	r3, [r1, #16]
 80053c6:	460c      	mov	r4, r1
 80053c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053cc:	4293      	cmp	r3, r2
 80053ce:	bfb8      	it	lt
 80053d0:	4613      	movlt	r3, r2
 80053d2:	6033      	str	r3, [r6, #0]
 80053d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80053d8:	b10a      	cbz	r2, 80053de <_printf_common+0x26>
 80053da:	3301      	adds	r3, #1
 80053dc:	6033      	str	r3, [r6, #0]
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	0699      	lsls	r1, r3, #26
 80053e2:	bf42      	ittt	mi
 80053e4:	6833      	ldrmi	r3, [r6, #0]
 80053e6:	3302      	addmi	r3, #2
 80053e8:	6033      	strmi	r3, [r6, #0]
 80053ea:	6825      	ldr	r5, [r4, #0]
 80053ec:	f015 0506 	ands.w	r5, r5, #6
 80053f0:	d106      	bne.n	8005400 <_printf_common+0x48>
 80053f2:	f104 0a19 	add.w	sl, r4, #25
 80053f6:	68e3      	ldr	r3, [r4, #12]
 80053f8:	6832      	ldr	r2, [r6, #0]
 80053fa:	1a9b      	subs	r3, r3, r2
 80053fc:	42ab      	cmp	r3, r5
 80053fe:	dc2b      	bgt.n	8005458 <_printf_common+0xa0>
 8005400:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005404:	6822      	ldr	r2, [r4, #0]
 8005406:	3b00      	subs	r3, #0
 8005408:	bf18      	it	ne
 800540a:	2301      	movne	r3, #1
 800540c:	0692      	lsls	r2, r2, #26
 800540e:	d430      	bmi.n	8005472 <_printf_common+0xba>
 8005410:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005414:	4641      	mov	r1, r8
 8005416:	4638      	mov	r0, r7
 8005418:	47c8      	blx	r9
 800541a:	3001      	adds	r0, #1
 800541c:	d023      	beq.n	8005466 <_printf_common+0xae>
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	341a      	adds	r4, #26
 8005422:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8005426:	f003 0306 	and.w	r3, r3, #6
 800542a:	2b04      	cmp	r3, #4
 800542c:	bf0a      	itet	eq
 800542e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8005432:	2500      	movne	r5, #0
 8005434:	6833      	ldreq	r3, [r6, #0]
 8005436:	f04f 0600 	mov.w	r6, #0
 800543a:	bf08      	it	eq
 800543c:	1aed      	subeq	r5, r5, r3
 800543e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005442:	bf08      	it	eq
 8005444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005448:	4293      	cmp	r3, r2
 800544a:	bfc4      	itt	gt
 800544c:	1a9b      	subgt	r3, r3, r2
 800544e:	18ed      	addgt	r5, r5, r3
 8005450:	42b5      	cmp	r5, r6
 8005452:	d11a      	bne.n	800548a <_printf_common+0xd2>
 8005454:	2000      	movs	r0, #0
 8005456:	e008      	b.n	800546a <_printf_common+0xb2>
 8005458:	2301      	movs	r3, #1
 800545a:	4652      	mov	r2, sl
 800545c:	4641      	mov	r1, r8
 800545e:	4638      	mov	r0, r7
 8005460:	47c8      	blx	r9
 8005462:	3001      	adds	r0, #1
 8005464:	d103      	bne.n	800546e <_printf_common+0xb6>
 8005466:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800546a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800546e:	3501      	adds	r5, #1
 8005470:	e7c1      	b.n	80053f6 <_printf_common+0x3e>
 8005472:	18e1      	adds	r1, r4, r3
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	2030      	movs	r0, #48	@ 0x30
 8005478:	3302      	adds	r3, #2
 800547a:	4422      	add	r2, r4
 800547c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005480:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005484:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005488:	e7c2      	b.n	8005410 <_printf_common+0x58>
 800548a:	2301      	movs	r3, #1
 800548c:	4622      	mov	r2, r4
 800548e:	4641      	mov	r1, r8
 8005490:	4638      	mov	r0, r7
 8005492:	47c8      	blx	r9
 8005494:	3001      	adds	r0, #1
 8005496:	d0e6      	beq.n	8005466 <_printf_common+0xae>
 8005498:	3601      	adds	r6, #1
 800549a:	e7d9      	b.n	8005450 <_printf_common+0x98>

0800549c <_printf_i>:
 800549c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054a0:	7e0f      	ldrb	r7, [r1, #24]
 80054a2:	4691      	mov	r9, r2
 80054a4:	4680      	mov	r8, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	2f78      	cmp	r7, #120	@ 0x78
 80054aa:	469a      	mov	sl, r3
 80054ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054b2:	d807      	bhi.n	80054c4 <_printf_i+0x28>
 80054b4:	2f62      	cmp	r7, #98	@ 0x62
 80054b6:	d80a      	bhi.n	80054ce <_printf_i+0x32>
 80054b8:	2f00      	cmp	r7, #0
 80054ba:	f000 80d2 	beq.w	8005662 <_printf_i+0x1c6>
 80054be:	2f58      	cmp	r7, #88	@ 0x58
 80054c0:	f000 80b9 	beq.w	8005636 <_printf_i+0x19a>
 80054c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054cc:	e03a      	b.n	8005544 <_printf_i+0xa8>
 80054ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054d2:	2b15      	cmp	r3, #21
 80054d4:	d8f6      	bhi.n	80054c4 <_printf_i+0x28>
 80054d6:	a101      	add	r1, pc, #4	@ (adr r1, 80054dc <_printf_i+0x40>)
 80054d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054dc:	08005535 	.word	0x08005535
 80054e0:	08005549 	.word	0x08005549
 80054e4:	080054c5 	.word	0x080054c5
 80054e8:	080054c5 	.word	0x080054c5
 80054ec:	080054c5 	.word	0x080054c5
 80054f0:	080054c5 	.word	0x080054c5
 80054f4:	08005549 	.word	0x08005549
 80054f8:	080054c5 	.word	0x080054c5
 80054fc:	080054c5 	.word	0x080054c5
 8005500:	080054c5 	.word	0x080054c5
 8005504:	080054c5 	.word	0x080054c5
 8005508:	08005649 	.word	0x08005649
 800550c:	08005573 	.word	0x08005573
 8005510:	08005603 	.word	0x08005603
 8005514:	080054c5 	.word	0x080054c5
 8005518:	080054c5 	.word	0x080054c5
 800551c:	0800566b 	.word	0x0800566b
 8005520:	080054c5 	.word	0x080054c5
 8005524:	08005573 	.word	0x08005573
 8005528:	080054c5 	.word	0x080054c5
 800552c:	080054c5 	.word	0x080054c5
 8005530:	0800560b 	.word	0x0800560b
 8005534:	6833      	ldr	r3, [r6, #0]
 8005536:	1d1a      	adds	r2, r3, #4
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6032      	str	r2, [r6, #0]
 800553c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005544:	2301      	movs	r3, #1
 8005546:	e09d      	b.n	8005684 <_printf_i+0x1e8>
 8005548:	6833      	ldr	r3, [r6, #0]
 800554a:	6820      	ldr	r0, [r4, #0]
 800554c:	1d19      	adds	r1, r3, #4
 800554e:	6031      	str	r1, [r6, #0]
 8005550:	0606      	lsls	r6, r0, #24
 8005552:	d501      	bpl.n	8005558 <_printf_i+0xbc>
 8005554:	681d      	ldr	r5, [r3, #0]
 8005556:	e003      	b.n	8005560 <_printf_i+0xc4>
 8005558:	0645      	lsls	r5, r0, #25
 800555a:	d5fb      	bpl.n	8005554 <_printf_i+0xb8>
 800555c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005560:	2d00      	cmp	r5, #0
 8005562:	da03      	bge.n	800556c <_printf_i+0xd0>
 8005564:	232d      	movs	r3, #45	@ 0x2d
 8005566:	426d      	negs	r5, r5
 8005568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800556c:	4859      	ldr	r0, [pc, #356]	@ (80056d4 <_printf_i+0x238>)
 800556e:	230a      	movs	r3, #10
 8005570:	e011      	b.n	8005596 <_printf_i+0xfa>
 8005572:	6821      	ldr	r1, [r4, #0]
 8005574:	6833      	ldr	r3, [r6, #0]
 8005576:	0608      	lsls	r0, r1, #24
 8005578:	f853 5b04 	ldr.w	r5, [r3], #4
 800557c:	d402      	bmi.n	8005584 <_printf_i+0xe8>
 800557e:	0649      	lsls	r1, r1, #25
 8005580:	bf48      	it	mi
 8005582:	b2ad      	uxthmi	r5, r5
 8005584:	2f6f      	cmp	r7, #111	@ 0x6f
 8005586:	6033      	str	r3, [r6, #0]
 8005588:	4852      	ldr	r0, [pc, #328]	@ (80056d4 <_printf_i+0x238>)
 800558a:	bf14      	ite	ne
 800558c:	230a      	movne	r3, #10
 800558e:	2308      	moveq	r3, #8
 8005590:	2100      	movs	r1, #0
 8005592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005596:	6866      	ldr	r6, [r4, #4]
 8005598:	2e00      	cmp	r6, #0
 800559a:	60a6      	str	r6, [r4, #8]
 800559c:	bfa2      	ittt	ge
 800559e:	6821      	ldrge	r1, [r4, #0]
 80055a0:	f021 0104 	bicge.w	r1, r1, #4
 80055a4:	6021      	strge	r1, [r4, #0]
 80055a6:	b90d      	cbnz	r5, 80055ac <_printf_i+0x110>
 80055a8:	2e00      	cmp	r6, #0
 80055aa:	d04b      	beq.n	8005644 <_printf_i+0x1a8>
 80055ac:	4616      	mov	r6, r2
 80055ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80055b2:	fb03 5711 	mls	r7, r3, r1, r5
 80055b6:	5dc7      	ldrb	r7, [r0, r7]
 80055b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055bc:	462f      	mov	r7, r5
 80055be:	460d      	mov	r5, r1
 80055c0:	42bb      	cmp	r3, r7
 80055c2:	d9f4      	bls.n	80055ae <_printf_i+0x112>
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d10b      	bne.n	80055e0 <_printf_i+0x144>
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	07df      	lsls	r7, r3, #31
 80055cc:	d508      	bpl.n	80055e0 <_printf_i+0x144>
 80055ce:	6923      	ldr	r3, [r4, #16]
 80055d0:	6861      	ldr	r1, [r4, #4]
 80055d2:	4299      	cmp	r1, r3
 80055d4:	bfde      	ittt	le
 80055d6:	2330      	movle	r3, #48	@ 0x30
 80055d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055dc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80055e0:	1b92      	subs	r2, r2, r6
 80055e2:	6122      	str	r2, [r4, #16]
 80055e4:	464b      	mov	r3, r9
 80055e6:	aa03      	add	r2, sp, #12
 80055e8:	4621      	mov	r1, r4
 80055ea:	4640      	mov	r0, r8
 80055ec:	f8cd a000 	str.w	sl, [sp]
 80055f0:	f7ff fee2 	bl	80053b8 <_printf_common>
 80055f4:	3001      	adds	r0, #1
 80055f6:	d14a      	bne.n	800568e <_printf_i+0x1f2>
 80055f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055fc:	b004      	add	sp, #16
 80055fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	f043 0320 	orr.w	r3, r3, #32
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	2778      	movs	r7, #120	@ 0x78
 800560c:	4832      	ldr	r0, [pc, #200]	@ (80056d8 <_printf_i+0x23c>)
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005614:	061f      	lsls	r7, r3, #24
 8005616:	6831      	ldr	r1, [r6, #0]
 8005618:	f851 5b04 	ldr.w	r5, [r1], #4
 800561c:	d402      	bmi.n	8005624 <_printf_i+0x188>
 800561e:	065f      	lsls	r7, r3, #25
 8005620:	bf48      	it	mi
 8005622:	b2ad      	uxthmi	r5, r5
 8005624:	6031      	str	r1, [r6, #0]
 8005626:	07d9      	lsls	r1, r3, #31
 8005628:	bf44      	itt	mi
 800562a:	f043 0320 	orrmi.w	r3, r3, #32
 800562e:	6023      	strmi	r3, [r4, #0]
 8005630:	b11d      	cbz	r5, 800563a <_printf_i+0x19e>
 8005632:	2310      	movs	r3, #16
 8005634:	e7ac      	b.n	8005590 <_printf_i+0xf4>
 8005636:	4827      	ldr	r0, [pc, #156]	@ (80056d4 <_printf_i+0x238>)
 8005638:	e7e9      	b.n	800560e <_printf_i+0x172>
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	f023 0320 	bic.w	r3, r3, #32
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	e7f6      	b.n	8005632 <_printf_i+0x196>
 8005644:	4616      	mov	r6, r2
 8005646:	e7bd      	b.n	80055c4 <_printf_i+0x128>
 8005648:	6833      	ldr	r3, [r6, #0]
 800564a:	6825      	ldr	r5, [r4, #0]
 800564c:	1d18      	adds	r0, r3, #4
 800564e:	6961      	ldr	r1, [r4, #20]
 8005650:	6030      	str	r0, [r6, #0]
 8005652:	062e      	lsls	r6, r5, #24
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	d501      	bpl.n	800565c <_printf_i+0x1c0>
 8005658:	6019      	str	r1, [r3, #0]
 800565a:	e002      	b.n	8005662 <_printf_i+0x1c6>
 800565c:	0668      	lsls	r0, r5, #25
 800565e:	d5fb      	bpl.n	8005658 <_printf_i+0x1bc>
 8005660:	8019      	strh	r1, [r3, #0]
 8005662:	2300      	movs	r3, #0
 8005664:	4616      	mov	r6, r2
 8005666:	6123      	str	r3, [r4, #16]
 8005668:	e7bc      	b.n	80055e4 <_printf_i+0x148>
 800566a:	6833      	ldr	r3, [r6, #0]
 800566c:	2100      	movs	r1, #0
 800566e:	1d1a      	adds	r2, r3, #4
 8005670:	6032      	str	r2, [r6, #0]
 8005672:	681e      	ldr	r6, [r3, #0]
 8005674:	6862      	ldr	r2, [r4, #4]
 8005676:	4630      	mov	r0, r6
 8005678:	f000 fa0f 	bl	8005a9a <memchr>
 800567c:	b108      	cbz	r0, 8005682 <_printf_i+0x1e6>
 800567e:	1b80      	subs	r0, r0, r6
 8005680:	6060      	str	r0, [r4, #4]
 8005682:	6863      	ldr	r3, [r4, #4]
 8005684:	6123      	str	r3, [r4, #16]
 8005686:	2300      	movs	r3, #0
 8005688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800568c:	e7aa      	b.n	80055e4 <_printf_i+0x148>
 800568e:	6923      	ldr	r3, [r4, #16]
 8005690:	4632      	mov	r2, r6
 8005692:	4649      	mov	r1, r9
 8005694:	4640      	mov	r0, r8
 8005696:	47d0      	blx	sl
 8005698:	3001      	adds	r0, #1
 800569a:	d0ad      	beq.n	80055f8 <_printf_i+0x15c>
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	079b      	lsls	r3, r3, #30
 80056a0:	d413      	bmi.n	80056ca <_printf_i+0x22e>
 80056a2:	68e0      	ldr	r0, [r4, #12]
 80056a4:	9b03      	ldr	r3, [sp, #12]
 80056a6:	4298      	cmp	r0, r3
 80056a8:	bfb8      	it	lt
 80056aa:	4618      	movlt	r0, r3
 80056ac:	e7a6      	b.n	80055fc <_printf_i+0x160>
 80056ae:	2301      	movs	r3, #1
 80056b0:	4632      	mov	r2, r6
 80056b2:	4649      	mov	r1, r9
 80056b4:	4640      	mov	r0, r8
 80056b6:	47d0      	blx	sl
 80056b8:	3001      	adds	r0, #1
 80056ba:	d09d      	beq.n	80055f8 <_printf_i+0x15c>
 80056bc:	3501      	adds	r5, #1
 80056be:	68e3      	ldr	r3, [r4, #12]
 80056c0:	9903      	ldr	r1, [sp, #12]
 80056c2:	1a5b      	subs	r3, r3, r1
 80056c4:	42ab      	cmp	r3, r5
 80056c6:	dcf2      	bgt.n	80056ae <_printf_i+0x212>
 80056c8:	e7eb      	b.n	80056a2 <_printf_i+0x206>
 80056ca:	2500      	movs	r5, #0
 80056cc:	f104 0619 	add.w	r6, r4, #25
 80056d0:	e7f5      	b.n	80056be <_printf_i+0x222>
 80056d2:	bf00      	nop
 80056d4:	0800820a 	.word	0x0800820a
 80056d8:	0800821b 	.word	0x0800821b

080056dc <srand>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4b10      	ldr	r3, [pc, #64]	@ (8005720 <srand+0x44>)
 80056e0:	4604      	mov	r4, r0
 80056e2:	681d      	ldr	r5, [r3, #0]
 80056e4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80056e6:	b9b3      	cbnz	r3, 8005716 <srand+0x3a>
 80056e8:	2018      	movs	r0, #24
 80056ea:	f001 f9a3 	bl	8006a34 <malloc>
 80056ee:	4602      	mov	r2, r0
 80056f0:	6328      	str	r0, [r5, #48]	@ 0x30
 80056f2:	b920      	cbnz	r0, 80056fe <srand+0x22>
 80056f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005724 <srand+0x48>)
 80056f6:	2146      	movs	r1, #70	@ 0x46
 80056f8:	480b      	ldr	r0, [pc, #44]	@ (8005728 <srand+0x4c>)
 80056fa:	f000 f9e9 	bl	8005ad0 <__assert_func>
 80056fe:	490b      	ldr	r1, [pc, #44]	@ (800572c <srand+0x50>)
 8005700:	4b0b      	ldr	r3, [pc, #44]	@ (8005730 <srand+0x54>)
 8005702:	e9c0 1300 	strd	r1, r3, [r0]
 8005706:	4b0b      	ldr	r3, [pc, #44]	@ (8005734 <srand+0x58>)
 8005708:	2100      	movs	r1, #0
 800570a:	6083      	str	r3, [r0, #8]
 800570c:	230b      	movs	r3, #11
 800570e:	8183      	strh	r3, [r0, #12]
 8005710:	2001      	movs	r0, #1
 8005712:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005716:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005718:	2200      	movs	r2, #0
 800571a:	611c      	str	r4, [r3, #16]
 800571c:	615a      	str	r2, [r3, #20]
 800571e:	bd38      	pop	{r3, r4, r5, pc}
 8005720:	20000024 	.word	0x20000024
 8005724:	0800822c 	.word	0x0800822c
 8005728:	08008243 	.word	0x08008243
 800572c:	abcd330e 	.word	0xabcd330e
 8005730:	e66d1234 	.word	0xe66d1234
 8005734:	0005deec 	.word	0x0005deec

08005738 <rand>:
 8005738:	4b16      	ldr	r3, [pc, #88]	@ (8005794 <rand+0x5c>)
 800573a:	b510      	push	{r4, lr}
 800573c:	681c      	ldr	r4, [r3, #0]
 800573e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005740:	b9b3      	cbnz	r3, 8005770 <rand+0x38>
 8005742:	2018      	movs	r0, #24
 8005744:	f001 f976 	bl	8006a34 <malloc>
 8005748:	4602      	mov	r2, r0
 800574a:	6320      	str	r0, [r4, #48]	@ 0x30
 800574c:	b920      	cbnz	r0, 8005758 <rand+0x20>
 800574e:	4b12      	ldr	r3, [pc, #72]	@ (8005798 <rand+0x60>)
 8005750:	2152      	movs	r1, #82	@ 0x52
 8005752:	4812      	ldr	r0, [pc, #72]	@ (800579c <rand+0x64>)
 8005754:	f000 f9bc 	bl	8005ad0 <__assert_func>
 8005758:	4911      	ldr	r1, [pc, #68]	@ (80057a0 <rand+0x68>)
 800575a:	4b12      	ldr	r3, [pc, #72]	@ (80057a4 <rand+0x6c>)
 800575c:	e9c0 1300 	strd	r1, r3, [r0]
 8005760:	4b11      	ldr	r3, [pc, #68]	@ (80057a8 <rand+0x70>)
 8005762:	2100      	movs	r1, #0
 8005764:	6083      	str	r3, [r0, #8]
 8005766:	230b      	movs	r3, #11
 8005768:	8183      	strh	r3, [r0, #12]
 800576a:	2001      	movs	r0, #1
 800576c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005770:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005772:	480e      	ldr	r0, [pc, #56]	@ (80057ac <rand+0x74>)
 8005774:	690b      	ldr	r3, [r1, #16]
 8005776:	694c      	ldr	r4, [r1, #20]
 8005778:	4a0d      	ldr	r2, [pc, #52]	@ (80057b0 <rand+0x78>)
 800577a:	4358      	muls	r0, r3
 800577c:	fb02 0004 	mla	r0, r2, r4, r0
 8005780:	fba3 3202 	umull	r3, r2, r3, r2
 8005784:	3301      	adds	r3, #1
 8005786:	eb40 0002 	adc.w	r0, r0, r2
 800578a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800578e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005792:	bd10      	pop	{r4, pc}
 8005794:	20000024 	.word	0x20000024
 8005798:	0800822c 	.word	0x0800822c
 800579c:	08008243 	.word	0x08008243
 80057a0:	abcd330e 	.word	0xabcd330e
 80057a4:	e66d1234 	.word	0xe66d1234
 80057a8:	0005deec 	.word	0x0005deec
 80057ac:	5851f42d 	.word	0x5851f42d
 80057b0:	4c957f2d 	.word	0x4c957f2d

080057b4 <std>:
 80057b4:	2300      	movs	r3, #0
 80057b6:	b510      	push	{r4, lr}
 80057b8:	4604      	mov	r4, r0
 80057ba:	6083      	str	r3, [r0, #8]
 80057bc:	8181      	strh	r1, [r0, #12]
 80057be:	4619      	mov	r1, r3
 80057c0:	6643      	str	r3, [r0, #100]	@ 0x64
 80057c2:	81c2      	strh	r2, [r0, #14]
 80057c4:	2208      	movs	r2, #8
 80057c6:	6183      	str	r3, [r0, #24]
 80057c8:	e9c0 3300 	strd	r3, r3, [r0]
 80057cc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057d0:	305c      	adds	r0, #92	@ 0x5c
 80057d2:	f000 f929 	bl	8005a28 <memset>
 80057d6:	4b0d      	ldr	r3, [pc, #52]	@ (800580c <std+0x58>)
 80057d8:	6224      	str	r4, [r4, #32]
 80057da:	6263      	str	r3, [r4, #36]	@ 0x24
 80057dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005810 <std+0x5c>)
 80057de:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005814 <std+0x60>)
 80057e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005818 <std+0x64>)
 80057e6:	6323      	str	r3, [r4, #48]	@ 0x30
 80057e8:	4b0c      	ldr	r3, [pc, #48]	@ (800581c <std+0x68>)
 80057ea:	429c      	cmp	r4, r3
 80057ec:	d006      	beq.n	80057fc <std+0x48>
 80057ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057f2:	4294      	cmp	r4, r2
 80057f4:	d002      	beq.n	80057fc <std+0x48>
 80057f6:	33d0      	adds	r3, #208	@ 0xd0
 80057f8:	429c      	cmp	r4, r3
 80057fa:	d105      	bne.n	8005808 <std+0x54>
 80057fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005804:	f000 b946 	b.w	8005a94 <__retarget_lock_init_recursive>
 8005808:	bd10      	pop	{r4, pc}
 800580a:	bf00      	nop
 800580c:	08007409 	.word	0x08007409
 8005810:	0800742b 	.word	0x0800742b
 8005814:	08007463 	.word	0x08007463
 8005818:	08007487 	.word	0x08007487
 800581c:	2000035c 	.word	0x2000035c

08005820 <stdio_exit_handler>:
 8005820:	4a02      	ldr	r2, [pc, #8]	@ (800582c <stdio_exit_handler+0xc>)
 8005822:	4903      	ldr	r1, [pc, #12]	@ (8005830 <stdio_exit_handler+0x10>)
 8005824:	4803      	ldr	r0, [pc, #12]	@ (8005834 <stdio_exit_handler+0x14>)
 8005826:	f000 b869 	b.w	80058fc <_fwalk_sglue>
 800582a:	bf00      	nop
 800582c:	20000018 	.word	0x20000018
 8005830:	08006c91 	.word	0x08006c91
 8005834:	20000028 	.word	0x20000028

08005838 <cleanup_stdio>:
 8005838:	6841      	ldr	r1, [r0, #4]
 800583a:	4b0c      	ldr	r3, [pc, #48]	@ (800586c <cleanup_stdio+0x34>)
 800583c:	4299      	cmp	r1, r3
 800583e:	b510      	push	{r4, lr}
 8005840:	4604      	mov	r4, r0
 8005842:	d001      	beq.n	8005848 <cleanup_stdio+0x10>
 8005844:	f001 fa24 	bl	8006c90 <_fflush_r>
 8005848:	68a1      	ldr	r1, [r4, #8]
 800584a:	4b09      	ldr	r3, [pc, #36]	@ (8005870 <cleanup_stdio+0x38>)
 800584c:	4299      	cmp	r1, r3
 800584e:	d002      	beq.n	8005856 <cleanup_stdio+0x1e>
 8005850:	4620      	mov	r0, r4
 8005852:	f001 fa1d 	bl	8006c90 <_fflush_r>
 8005856:	68e1      	ldr	r1, [r4, #12]
 8005858:	4b06      	ldr	r3, [pc, #24]	@ (8005874 <cleanup_stdio+0x3c>)
 800585a:	4299      	cmp	r1, r3
 800585c:	d004      	beq.n	8005868 <cleanup_stdio+0x30>
 800585e:	4620      	mov	r0, r4
 8005860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005864:	f001 ba14 	b.w	8006c90 <_fflush_r>
 8005868:	bd10      	pop	{r4, pc}
 800586a:	bf00      	nop
 800586c:	2000035c 	.word	0x2000035c
 8005870:	200003c4 	.word	0x200003c4
 8005874:	2000042c 	.word	0x2000042c

08005878 <global_stdio_init.part.0>:
 8005878:	b510      	push	{r4, lr}
 800587a:	4b0b      	ldr	r3, [pc, #44]	@ (80058a8 <global_stdio_init.part.0+0x30>)
 800587c:	2104      	movs	r1, #4
 800587e:	4c0b      	ldr	r4, [pc, #44]	@ (80058ac <global_stdio_init.part.0+0x34>)
 8005880:	4a0b      	ldr	r2, [pc, #44]	@ (80058b0 <global_stdio_init.part.0+0x38>)
 8005882:	4620      	mov	r0, r4
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	2200      	movs	r2, #0
 8005888:	f7ff ff94 	bl	80057b4 <std>
 800588c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005890:	2201      	movs	r2, #1
 8005892:	2109      	movs	r1, #9
 8005894:	f7ff ff8e 	bl	80057b4 <std>
 8005898:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800589c:	2202      	movs	r2, #2
 800589e:	2112      	movs	r1, #18
 80058a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a4:	f7ff bf86 	b.w	80057b4 <std>
 80058a8:	20000494 	.word	0x20000494
 80058ac:	2000035c 	.word	0x2000035c
 80058b0:	08005821 	.word	0x08005821

080058b4 <__sfp_lock_acquire>:
 80058b4:	4801      	ldr	r0, [pc, #4]	@ (80058bc <__sfp_lock_acquire+0x8>)
 80058b6:	f000 b8ee 	b.w	8005a96 <__retarget_lock_acquire_recursive>
 80058ba:	bf00      	nop
 80058bc:	20000499 	.word	0x20000499

080058c0 <__sfp_lock_release>:
 80058c0:	4801      	ldr	r0, [pc, #4]	@ (80058c8 <__sfp_lock_release+0x8>)
 80058c2:	f000 b8e9 	b.w	8005a98 <__retarget_lock_release_recursive>
 80058c6:	bf00      	nop
 80058c8:	20000499 	.word	0x20000499

080058cc <__sinit>:
 80058cc:	b510      	push	{r4, lr}
 80058ce:	4604      	mov	r4, r0
 80058d0:	f7ff fff0 	bl	80058b4 <__sfp_lock_acquire>
 80058d4:	6a23      	ldr	r3, [r4, #32]
 80058d6:	b11b      	cbz	r3, 80058e0 <__sinit+0x14>
 80058d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058dc:	f7ff bff0 	b.w	80058c0 <__sfp_lock_release>
 80058e0:	4b04      	ldr	r3, [pc, #16]	@ (80058f4 <__sinit+0x28>)
 80058e2:	6223      	str	r3, [r4, #32]
 80058e4:	4b04      	ldr	r3, [pc, #16]	@ (80058f8 <__sinit+0x2c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1f5      	bne.n	80058d8 <__sinit+0xc>
 80058ec:	f7ff ffc4 	bl	8005878 <global_stdio_init.part.0>
 80058f0:	e7f2      	b.n	80058d8 <__sinit+0xc>
 80058f2:	bf00      	nop
 80058f4:	08005839 	.word	0x08005839
 80058f8:	20000494 	.word	0x20000494

080058fc <_fwalk_sglue>:
 80058fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005900:	4607      	mov	r7, r0
 8005902:	4688      	mov	r8, r1
 8005904:	4614      	mov	r4, r2
 8005906:	2600      	movs	r6, #0
 8005908:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800590c:	f1b9 0901 	subs.w	r9, r9, #1
 8005910:	d505      	bpl.n	800591e <_fwalk_sglue+0x22>
 8005912:	6824      	ldr	r4, [r4, #0]
 8005914:	2c00      	cmp	r4, #0
 8005916:	d1f7      	bne.n	8005908 <_fwalk_sglue+0xc>
 8005918:	4630      	mov	r0, r6
 800591a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800591e:	89ab      	ldrh	r3, [r5, #12]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d907      	bls.n	8005934 <_fwalk_sglue+0x38>
 8005924:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005928:	3301      	adds	r3, #1
 800592a:	d003      	beq.n	8005934 <_fwalk_sglue+0x38>
 800592c:	4629      	mov	r1, r5
 800592e:	4638      	mov	r0, r7
 8005930:	47c0      	blx	r8
 8005932:	4306      	orrs	r6, r0
 8005934:	3568      	adds	r5, #104	@ 0x68
 8005936:	e7e9      	b.n	800590c <_fwalk_sglue+0x10>

08005938 <iprintf>:
 8005938:	b40f      	push	{r0, r1, r2, r3}
 800593a:	b507      	push	{r0, r1, r2, lr}
 800593c:	4906      	ldr	r1, [pc, #24]	@ (8005958 <iprintf+0x20>)
 800593e:	ab04      	add	r3, sp, #16
 8005940:	6808      	ldr	r0, [r1, #0]
 8005942:	f853 2b04 	ldr.w	r2, [r3], #4
 8005946:	6881      	ldr	r1, [r0, #8]
 8005948:	9301      	str	r3, [sp, #4]
 800594a:	f000 ff5b 	bl	8006804 <_vfiprintf_r>
 800594e:	b003      	add	sp, #12
 8005950:	f85d eb04 	ldr.w	lr, [sp], #4
 8005954:	b004      	add	sp, #16
 8005956:	4770      	bx	lr
 8005958:	20000024 	.word	0x20000024

0800595c <putchar>:
 800595c:	4b02      	ldr	r3, [pc, #8]	@ (8005968 <putchar+0xc>)
 800595e:	4601      	mov	r1, r0
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	6882      	ldr	r2, [r0, #8]
 8005964:	f001 be9b 	b.w	800769e <_putc_r>
 8005968:	20000024 	.word	0x20000024

0800596c <_puts_r>:
 800596c:	6a03      	ldr	r3, [r0, #32]
 800596e:	b570      	push	{r4, r5, r6, lr}
 8005970:	4605      	mov	r5, r0
 8005972:	460e      	mov	r6, r1
 8005974:	6884      	ldr	r4, [r0, #8]
 8005976:	b90b      	cbnz	r3, 800597c <_puts_r+0x10>
 8005978:	f7ff ffa8 	bl	80058cc <__sinit>
 800597c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800597e:	07db      	lsls	r3, r3, #31
 8005980:	d405      	bmi.n	800598e <_puts_r+0x22>
 8005982:	89a3      	ldrh	r3, [r4, #12]
 8005984:	0598      	lsls	r0, r3, #22
 8005986:	d402      	bmi.n	800598e <_puts_r+0x22>
 8005988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800598a:	f000 f884 	bl	8005a96 <__retarget_lock_acquire_recursive>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	0719      	lsls	r1, r3, #28
 8005992:	d502      	bpl.n	800599a <_puts_r+0x2e>
 8005994:	6923      	ldr	r3, [r4, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d135      	bne.n	8005a06 <_puts_r+0x9a>
 800599a:	4621      	mov	r1, r4
 800599c:	4628      	mov	r0, r5
 800599e:	f001 fdc7 	bl	8007530 <__swsetup_r>
 80059a2:	b380      	cbz	r0, 8005a06 <_puts_r+0x9a>
 80059a4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80059a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059aa:	07da      	lsls	r2, r3, #31
 80059ac:	d405      	bmi.n	80059ba <_puts_r+0x4e>
 80059ae:	89a3      	ldrh	r3, [r4, #12]
 80059b0:	059b      	lsls	r3, r3, #22
 80059b2:	d402      	bmi.n	80059ba <_puts_r+0x4e>
 80059b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059b6:	f000 f86f 	bl	8005a98 <__retarget_lock_release_recursive>
 80059ba:	4628      	mov	r0, r5
 80059bc:	bd70      	pop	{r4, r5, r6, pc}
 80059be:	2b00      	cmp	r3, #0
 80059c0:	da04      	bge.n	80059cc <_puts_r+0x60>
 80059c2:	69a2      	ldr	r2, [r4, #24]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	dc17      	bgt.n	80059f8 <_puts_r+0x8c>
 80059c8:	290a      	cmp	r1, #10
 80059ca:	d015      	beq.n	80059f8 <_puts_r+0x8c>
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	6022      	str	r2, [r4, #0]
 80059d2:	7019      	strb	r1, [r3, #0]
 80059d4:	68a3      	ldr	r3, [r4, #8]
 80059d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059da:	3b01      	subs	r3, #1
 80059dc:	60a3      	str	r3, [r4, #8]
 80059de:	2900      	cmp	r1, #0
 80059e0:	d1ed      	bne.n	80059be <_puts_r+0x52>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	da11      	bge.n	8005a0a <_puts_r+0x9e>
 80059e6:	4622      	mov	r2, r4
 80059e8:	210a      	movs	r1, #10
 80059ea:	4628      	mov	r0, r5
 80059ec:	f001 fd62 	bl	80074b4 <__swbuf_r>
 80059f0:	3001      	adds	r0, #1
 80059f2:	d0d7      	beq.n	80059a4 <_puts_r+0x38>
 80059f4:	250a      	movs	r5, #10
 80059f6:	e7d7      	b.n	80059a8 <_puts_r+0x3c>
 80059f8:	4622      	mov	r2, r4
 80059fa:	4628      	mov	r0, r5
 80059fc:	f001 fd5a 	bl	80074b4 <__swbuf_r>
 8005a00:	3001      	adds	r0, #1
 8005a02:	d1e7      	bne.n	80059d4 <_puts_r+0x68>
 8005a04:	e7ce      	b.n	80059a4 <_puts_r+0x38>
 8005a06:	3e01      	subs	r6, #1
 8005a08:	e7e4      	b.n	80059d4 <_puts_r+0x68>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	6022      	str	r2, [r4, #0]
 8005a10:	220a      	movs	r2, #10
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	e7ee      	b.n	80059f4 <_puts_r+0x88>
	...

08005a18 <puts>:
 8005a18:	4b02      	ldr	r3, [pc, #8]	@ (8005a24 <puts+0xc>)
 8005a1a:	4601      	mov	r1, r0
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	f7ff bfa5 	b.w	800596c <_puts_r>
 8005a22:	bf00      	nop
 8005a24:	20000024 	.word	0x20000024

08005a28 <memset>:
 8005a28:	4402      	add	r2, r0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d100      	bne.n	8005a32 <memset+0xa>
 8005a30:	4770      	bx	lr
 8005a32:	f803 1b01 	strb.w	r1, [r3], #1
 8005a36:	e7f9      	b.n	8005a2c <memset+0x4>

08005a38 <_localeconv_r>:
 8005a38:	4800      	ldr	r0, [pc, #0]	@ (8005a3c <_localeconv_r+0x4>)
 8005a3a:	4770      	bx	lr
 8005a3c:	20000164 	.word	0x20000164

08005a40 <__errno>:
 8005a40:	4b01      	ldr	r3, [pc, #4]	@ (8005a48 <__errno+0x8>)
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	20000024 	.word	0x20000024

08005a4c <__libc_init_array>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8005a84 <__libc_init_array+0x38>)
 8005a50:	2600      	movs	r6, #0
 8005a52:	4c0d      	ldr	r4, [pc, #52]	@ (8005a88 <__libc_init_array+0x3c>)
 8005a54:	1b64      	subs	r4, r4, r5
 8005a56:	10a4      	asrs	r4, r4, #2
 8005a58:	42a6      	cmp	r6, r4
 8005a5a:	d109      	bne.n	8005a70 <__libc_init_array+0x24>
 8005a5c:	4d0b      	ldr	r5, [pc, #44]	@ (8005a8c <__libc_init_array+0x40>)
 8005a5e:	2600      	movs	r6, #0
 8005a60:	4c0b      	ldr	r4, [pc, #44]	@ (8005a90 <__libc_init_array+0x44>)
 8005a62:	f002 fa61 	bl	8007f28 <_init>
 8005a66:	1b64      	subs	r4, r4, r5
 8005a68:	10a4      	asrs	r4, r4, #2
 8005a6a:	42a6      	cmp	r6, r4
 8005a6c:	d105      	bne.n	8005a7a <__libc_init_array+0x2e>
 8005a6e:	bd70      	pop	{r4, r5, r6, pc}
 8005a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a74:	3601      	adds	r6, #1
 8005a76:	4798      	blx	r3
 8005a78:	e7ee      	b.n	8005a58 <__libc_init_array+0xc>
 8005a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a7e:	3601      	adds	r6, #1
 8005a80:	4798      	blx	r3
 8005a82:	e7f2      	b.n	8005a6a <__libc_init_array+0x1e>
 8005a84:	080085e8 	.word	0x080085e8
 8005a88:	080085e8 	.word	0x080085e8
 8005a8c:	080085e8 	.word	0x080085e8
 8005a90:	080085ec 	.word	0x080085ec

08005a94 <__retarget_lock_init_recursive>:
 8005a94:	4770      	bx	lr

08005a96 <__retarget_lock_acquire_recursive>:
 8005a96:	4770      	bx	lr

08005a98 <__retarget_lock_release_recursive>:
 8005a98:	4770      	bx	lr

08005a9a <memchr>:
 8005a9a:	b2c9      	uxtb	r1, r1
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	4402      	add	r2, r0
 8005aa0:	b510      	push	{r4, lr}
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	d101      	bne.n	8005aac <memchr+0x12>
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	e003      	b.n	8005ab4 <memchr+0x1a>
 8005aac:	7804      	ldrb	r4, [r0, #0]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	428c      	cmp	r4, r1
 8005ab2:	d1f6      	bne.n	8005aa2 <memchr+0x8>
 8005ab4:	bd10      	pop	{r4, pc}

08005ab6 <memcpy>:
 8005ab6:	440a      	add	r2, r1
 8005ab8:	1e43      	subs	r3, r0, #1
 8005aba:	4291      	cmp	r1, r2
 8005abc:	d100      	bne.n	8005ac0 <memcpy+0xa>
 8005abe:	4770      	bx	lr
 8005ac0:	b510      	push	{r4, lr}
 8005ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ac6:	4291      	cmp	r1, r2
 8005ac8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005acc:	d1f9      	bne.n	8005ac2 <memcpy+0xc>
 8005ace:	bd10      	pop	{r4, pc}

08005ad0 <__assert_func>:
 8005ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ad2:	4614      	mov	r4, r2
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4b09      	ldr	r3, [pc, #36]	@ (8005afc <__assert_func+0x2c>)
 8005ad8:	4605      	mov	r5, r0
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68d8      	ldr	r0, [r3, #12]
 8005ade:	b954      	cbnz	r4, 8005af6 <__assert_func+0x26>
 8005ae0:	4b07      	ldr	r3, [pc, #28]	@ (8005b00 <__assert_func+0x30>)
 8005ae2:	461c      	mov	r4, r3
 8005ae4:	9100      	str	r1, [sp, #0]
 8005ae6:	4907      	ldr	r1, [pc, #28]	@ (8005b04 <__assert_func+0x34>)
 8005ae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005aec:	462b      	mov	r3, r5
 8005aee:	f001 fccf 	bl	8007490 <fiprintf>
 8005af2:	f001 fe81 	bl	80077f8 <abort>
 8005af6:	4b04      	ldr	r3, [pc, #16]	@ (8005b08 <__assert_func+0x38>)
 8005af8:	e7f4      	b.n	8005ae4 <__assert_func+0x14>
 8005afa:	bf00      	nop
 8005afc:	20000024 	.word	0x20000024
 8005b00:	080082d6 	.word	0x080082d6
 8005b04:	080082a8 	.word	0x080082a8
 8005b08:	0800829b 	.word	0x0800829b

08005b0c <quorem>:
 8005b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	6903      	ldr	r3, [r0, #16]
 8005b12:	4607      	mov	r7, r0
 8005b14:	690c      	ldr	r4, [r1, #16]
 8005b16:	42a3      	cmp	r3, r4
 8005b18:	f2c0 8083 	blt.w	8005c22 <quorem+0x116>
 8005b1c:	3c01      	subs	r4, #1
 8005b1e:	f100 0514 	add.w	r5, r0, #20
 8005b22:	f101 0814 	add.w	r8, r1, #20
 8005b26:	00a3      	lsls	r3, r4, #2
 8005b28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b36:	9301      	str	r3, [sp, #4]
 8005b38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b44:	d331      	bcc.n	8005baa <quorem+0x9e>
 8005b46:	f04f 0a00 	mov.w	sl, #0
 8005b4a:	46c4      	mov	ip, r8
 8005b4c:	46ae      	mov	lr, r5
 8005b4e:	46d3      	mov	fp, sl
 8005b50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b54:	b298      	uxth	r0, r3
 8005b56:	45e1      	cmp	r9, ip
 8005b58:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8005b5c:	fb06 a000 	mla	r0, r6, r0, sl
 8005b60:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8005b64:	b280      	uxth	r0, r0
 8005b66:	fb06 2303 	mla	r3, r6, r3, r2
 8005b6a:	f8de 2000 	ldr.w	r2, [lr]
 8005b6e:	b292      	uxth	r2, r2
 8005b70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b74:	eba2 0200 	sub.w	r2, r2, r0
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f8de 0000 	ldr.w	r0, [lr]
 8005b7e:	445a      	add	r2, fp
 8005b80:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b84:	b292      	uxth	r2, r2
 8005b86:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b8a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b8e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b92:	f84e 2b04 	str.w	r2, [lr], #4
 8005b96:	d2db      	bcs.n	8005b50 <quorem+0x44>
 8005b98:	9b00      	ldr	r3, [sp, #0]
 8005b9a:	58eb      	ldr	r3, [r5, r3]
 8005b9c:	b92b      	cbnz	r3, 8005baa <quorem+0x9e>
 8005b9e:	9b01      	ldr	r3, [sp, #4]
 8005ba0:	3b04      	subs	r3, #4
 8005ba2:	429d      	cmp	r5, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	d330      	bcc.n	8005c0a <quorem+0xfe>
 8005ba8:	613c      	str	r4, [r7, #16]
 8005baa:	4638      	mov	r0, r7
 8005bac:	f001 fb20 	bl	80071f0 <__mcmp>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	db26      	blt.n	8005c02 <quorem+0xf6>
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bbc:	f8d1 c000 	ldr.w	ip, [r1]
 8005bc0:	fa1f fe82 	uxth.w	lr, r2
 8005bc4:	45c1      	cmp	r9, r8
 8005bc6:	fa1f f38c 	uxth.w	r3, ip
 8005bca:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8005bce:	eba3 030e 	sub.w	r3, r3, lr
 8005bd2:	4403      	add	r3, r0
 8005bd4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005be2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005be6:	f841 3b04 	str.w	r3, [r1], #4
 8005bea:	d2e5      	bcs.n	8005bb8 <quorem+0xac>
 8005bec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bf0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bf4:	b922      	cbnz	r2, 8005c00 <quorem+0xf4>
 8005bf6:	3b04      	subs	r3, #4
 8005bf8:	429d      	cmp	r5, r3
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	d30b      	bcc.n	8005c16 <quorem+0x10a>
 8005bfe:	613c      	str	r4, [r7, #16]
 8005c00:	3601      	adds	r6, #1
 8005c02:	4630      	mov	r0, r6
 8005c04:	b003      	add	sp, #12
 8005c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c0a:	6812      	ldr	r2, [r2, #0]
 8005c0c:	3b04      	subs	r3, #4
 8005c0e:	2a00      	cmp	r2, #0
 8005c10:	d1ca      	bne.n	8005ba8 <quorem+0x9c>
 8005c12:	3c01      	subs	r4, #1
 8005c14:	e7c5      	b.n	8005ba2 <quorem+0x96>
 8005c16:	6812      	ldr	r2, [r2, #0]
 8005c18:	3b04      	subs	r3, #4
 8005c1a:	2a00      	cmp	r2, #0
 8005c1c:	d1ef      	bne.n	8005bfe <quorem+0xf2>
 8005c1e:	3c01      	subs	r4, #1
 8005c20:	e7ea      	b.n	8005bf8 <quorem+0xec>
 8005c22:	2000      	movs	r0, #0
 8005c24:	e7ee      	b.n	8005c04 <quorem+0xf8>
	...

08005c28 <_dtoa_r>:
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	69c7      	ldr	r7, [r0, #28]
 8005c2e:	b099      	sub	sp, #100	@ 0x64
 8005c30:	4683      	mov	fp, r0
 8005c32:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005c34:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c36:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c3a:	ec55 4b10 	vmov	r4, r5, d0
 8005c3e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005c42:	b97f      	cbnz	r7, 8005c64 <_dtoa_r+0x3c>
 8005c44:	2010      	movs	r0, #16
 8005c46:	f000 fef5 	bl	8006a34 <malloc>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c50:	b920      	cbnz	r0, 8005c5c <_dtoa_r+0x34>
 8005c52:	4ba7      	ldr	r3, [pc, #668]	@ (8005ef0 <_dtoa_r+0x2c8>)
 8005c54:	21ef      	movs	r1, #239	@ 0xef
 8005c56:	48a7      	ldr	r0, [pc, #668]	@ (8005ef4 <_dtoa_r+0x2cc>)
 8005c58:	f7ff ff3a 	bl	8005ad0 <__assert_func>
 8005c5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c60:	6007      	str	r7, [r0, #0]
 8005c62:	60c7      	str	r7, [r0, #12]
 8005c64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c68:	6819      	ldr	r1, [r3, #0]
 8005c6a:	b159      	cbz	r1, 8005c84 <_dtoa_r+0x5c>
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	2301      	movs	r3, #1
 8005c70:	4658      	mov	r0, fp
 8005c72:	4093      	lsls	r3, r2
 8005c74:	604a      	str	r2, [r1, #4]
 8005c76:	608b      	str	r3, [r1, #8]
 8005c78:	f001 f87e 	bl	8006d78 <_Bfree>
 8005c7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	1e2b      	subs	r3, r5, #0
 8005c86:	bfb7      	itett	lt
 8005c88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c8c:	2300      	movge	r3, #0
 8005c8e:	2201      	movlt	r2, #1
 8005c90:	9303      	strlt	r3, [sp, #12]
 8005c92:	bfa8      	it	ge
 8005c94:	6033      	strge	r3, [r6, #0]
 8005c96:	9f03      	ldr	r7, [sp, #12]
 8005c98:	4b97      	ldr	r3, [pc, #604]	@ (8005ef8 <_dtoa_r+0x2d0>)
 8005c9a:	bfb8      	it	lt
 8005c9c:	6032      	strlt	r2, [r6, #0]
 8005c9e:	43bb      	bics	r3, r7
 8005ca0:	d112      	bne.n	8005cc8 <_dtoa_r+0xa0>
 8005ca2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005ca6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005cae:	4323      	orrs	r3, r4
 8005cb0:	f000 854c 	beq.w	800674c <_dtoa_r+0xb24>
 8005cb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cb6:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005f0c <_dtoa_r+0x2e4>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 854e 	beq.w	800675c <_dtoa_r+0xb34>
 8005cc0:	f10a 0303 	add.w	r3, sl, #3
 8005cc4:	f000 bd48 	b.w	8006758 <_dtoa_r+0xb30>
 8005cc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2300      	movs	r3, #0
 8005cd0:	ec51 0b17 	vmov	r0, r1, d7
 8005cd4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005cd8:	f7fa fefa 	bl	8000ad0 <__aeabi_dcmpeq>
 8005cdc:	4680      	mov	r8, r0
 8005cde:	b158      	cbz	r0, 8005cf8 <_dtoa_r+0xd0>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ce8:	b113      	cbz	r3, 8005cf0 <_dtoa_r+0xc8>
 8005cea:	4b84      	ldr	r3, [pc, #528]	@ (8005efc <_dtoa_r+0x2d4>)
 8005cec:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8005f10 <_dtoa_r+0x2e8>
 8005cf4:	f000 bd32 	b.w	800675c <_dtoa_r+0xb34>
 8005cf8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005cfc:	aa16      	add	r2, sp, #88	@ 0x58
 8005cfe:	a917      	add	r1, sp, #92	@ 0x5c
 8005d00:	4658      	mov	r0, fp
 8005d02:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005d06:	f001 fb27 	bl	8007358 <__d2b>
 8005d0a:	4681      	mov	r9, r0
 8005d0c:	2e00      	cmp	r6, #0
 8005d0e:	d075      	beq.n	8005dfc <_dtoa_r+0x1d4>
 8005d10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d12:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d16:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005d1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d1e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d26:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	4b74      	ldr	r3, [pc, #464]	@ (8005f00 <_dtoa_r+0x2d8>)
 8005d30:	f7fa faae 	bl	8000290 <__aeabi_dsub>
 8005d34:	a368      	add	r3, pc, #416	@ (adr r3, 8005ed8 <_dtoa_r+0x2b0>)
 8005d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3a:	f7fa fc61 	bl	8000600 <__aeabi_dmul>
 8005d3e:	a368      	add	r3, pc, #416	@ (adr r3, 8005ee0 <_dtoa_r+0x2b8>)
 8005d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d44:	f7fa faa6 	bl	8000294 <__adddf3>
 8005d48:	4604      	mov	r4, r0
 8005d4a:	460d      	mov	r5, r1
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	f7fa fbed 	bl	800052c <__aeabi_i2d>
 8005d52:	a365      	add	r3, pc, #404	@ (adr r3, 8005ee8 <_dtoa_r+0x2c0>)
 8005d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d58:	f7fa fc52 	bl	8000600 <__aeabi_dmul>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4620      	mov	r0, r4
 8005d62:	4629      	mov	r1, r5
 8005d64:	f7fa fa96 	bl	8000294 <__adddf3>
 8005d68:	4604      	mov	r4, r0
 8005d6a:	460d      	mov	r5, r1
 8005d6c:	f7fa fef8 	bl	8000b60 <__aeabi_d2iz>
 8005d70:	2200      	movs	r2, #0
 8005d72:	4607      	mov	r7, r0
 8005d74:	2300      	movs	r3, #0
 8005d76:	4620      	mov	r0, r4
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f7fa feb3 	bl	8000ae4 <__aeabi_dcmplt>
 8005d7e:	b140      	cbz	r0, 8005d92 <_dtoa_r+0x16a>
 8005d80:	4638      	mov	r0, r7
 8005d82:	f7fa fbd3 	bl	800052c <__aeabi_i2d>
 8005d86:	4622      	mov	r2, r4
 8005d88:	462b      	mov	r3, r5
 8005d8a:	f7fa fea1 	bl	8000ad0 <__aeabi_dcmpeq>
 8005d8e:	b900      	cbnz	r0, 8005d92 <_dtoa_r+0x16a>
 8005d90:	3f01      	subs	r7, #1
 8005d92:	2f16      	cmp	r7, #22
 8005d94:	d851      	bhi.n	8005e3a <_dtoa_r+0x212>
 8005d96:	4b5b      	ldr	r3, [pc, #364]	@ (8005f04 <_dtoa_r+0x2dc>)
 8005d98:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	f7fa fe9e 	bl	8000ae4 <__aeabi_dcmplt>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d048      	beq.n	8005e3e <_dtoa_r+0x216>
 8005dac:	3f01      	subs	r7, #1
 8005dae:	2300      	movs	r3, #0
 8005db0:	9312      	str	r3, [sp, #72]	@ 0x48
 8005db2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005db4:	1b9b      	subs	r3, r3, r6
 8005db6:	1e5a      	subs	r2, r3, #1
 8005db8:	bf46      	itte	mi
 8005dba:	f1c3 0801 	rsbmi	r8, r3, #1
 8005dbe:	2300      	movmi	r3, #0
 8005dc0:	f04f 0800 	movpl.w	r8, #0
 8005dc4:	9208      	str	r2, [sp, #32]
 8005dc6:	bf48      	it	mi
 8005dc8:	9308      	strmi	r3, [sp, #32]
 8005dca:	2f00      	cmp	r7, #0
 8005dcc:	db39      	blt.n	8005e42 <_dtoa_r+0x21a>
 8005dce:	9b08      	ldr	r3, [sp, #32]
 8005dd0:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005dd2:	443b      	add	r3, r7
 8005dd4:	9308      	str	r3, [sp, #32]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ddc:	2b09      	cmp	r3, #9
 8005dde:	d864      	bhi.n	8005eaa <_dtoa_r+0x282>
 8005de0:	2b05      	cmp	r3, #5
 8005de2:	bfc5      	ittet	gt
 8005de4:	3b04      	subgt	r3, #4
 8005de6:	2400      	movgt	r4, #0
 8005de8:	2401      	movle	r4, #1
 8005dea:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dee:	3b02      	subs	r3, #2
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d865      	bhi.n	8005ec0 <_dtoa_r+0x298>
 8005df4:	e8df f003 	tbb	[pc, r3]
 8005df8:	5737392c 	.word	0x5737392c
 8005dfc:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005e00:	441e      	add	r6, r3
 8005e02:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	bfc9      	itett	gt
 8005e0a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e0e:	f1c3 0320 	rsble	r3, r3, #32
 8005e12:	409f      	lslgt	r7, r3
 8005e14:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e18:	bfd8      	it	le
 8005e1a:	fa04 f003 	lslle.w	r0, r4, r3
 8005e1e:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 8005e22:	bfc4      	itt	gt
 8005e24:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e28:	ea47 0003 	orrgt.w	r0, r7, r3
 8005e2c:	f7fa fb6e 	bl	800050c <__aeabi_ui2d>
 8005e30:	2201      	movs	r2, #1
 8005e32:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e36:	9214      	str	r2, [sp, #80]	@ 0x50
 8005e38:	e777      	b.n	8005d2a <_dtoa_r+0x102>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e7b8      	b.n	8005db0 <_dtoa_r+0x188>
 8005e3e:	9012      	str	r0, [sp, #72]	@ 0x48
 8005e40:	e7b7      	b.n	8005db2 <_dtoa_r+0x18a>
 8005e42:	427b      	negs	r3, r7
 8005e44:	eba8 0807 	sub.w	r8, r8, r7
 8005e48:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e4e:	e7c4      	b.n	8005dda <_dtoa_r+0x1b2>
 8005e50:	2300      	movs	r3, #0
 8005e52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	dc35      	bgt.n	8005ec6 <_dtoa_r+0x29e>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	9307      	str	r3, [sp, #28]
 8005e62:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e64:	e00b      	b.n	8005e7e <_dtoa_r+0x256>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e7f3      	b.n	8005e52 <_dtoa_r+0x22a>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e70:	18fb      	adds	r3, r7, r3
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	9307      	str	r3, [sp, #28]
 8005e7a:	bfb8      	it	lt
 8005e7c:	2301      	movlt	r3, #1
 8005e7e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e82:	2100      	movs	r1, #0
 8005e84:	2204      	movs	r2, #4
 8005e86:	f102 0514 	add.w	r5, r2, #20
 8005e8a:	429d      	cmp	r5, r3
 8005e8c:	d91f      	bls.n	8005ece <_dtoa_r+0x2a6>
 8005e8e:	6041      	str	r1, [r0, #4]
 8005e90:	4658      	mov	r0, fp
 8005e92:	f000 ff31 	bl	8006cf8 <_Balloc>
 8005e96:	4682      	mov	sl, r0
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d13b      	bne.n	8005f14 <_dtoa_r+0x2ec>
 8005e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005f08 <_dtoa_r+0x2e0>)
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	f240 11af 	movw	r1, #431	@ 0x1af
 8005ea4:	e6d7      	b.n	8005c56 <_dtoa_r+0x2e>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e7e0      	b.n	8005e6c <_dtoa_r+0x244>
 8005eaa:	2401      	movs	r4, #1
 8005eac:	2300      	movs	r3, #0
 8005eae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005eb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	9307      	str	r3, [sp, #28]
 8005ebc:	2312      	movs	r3, #18
 8005ebe:	e7d0      	b.n	8005e62 <_dtoa_r+0x23a>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ec4:	e7f5      	b.n	8005eb2 <_dtoa_r+0x28a>
 8005ec6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	9307      	str	r3, [sp, #28]
 8005ecc:	e7d7      	b.n	8005e7e <_dtoa_r+0x256>
 8005ece:	3101      	adds	r1, #1
 8005ed0:	0052      	lsls	r2, r2, #1
 8005ed2:	e7d8      	b.n	8005e86 <_dtoa_r+0x25e>
 8005ed4:	f3af 8000 	nop.w
 8005ed8:	636f4361 	.word	0x636f4361
 8005edc:	3fd287a7 	.word	0x3fd287a7
 8005ee0:	8b60c8b3 	.word	0x8b60c8b3
 8005ee4:	3fc68a28 	.word	0x3fc68a28
 8005ee8:	509f79fb 	.word	0x509f79fb
 8005eec:	3fd34413 	.word	0x3fd34413
 8005ef0:	0800822c 	.word	0x0800822c
 8005ef4:	080082e4 	.word	0x080082e4
 8005ef8:	7ff00000 	.word	0x7ff00000
 8005efc:	08008209 	.word	0x08008209
 8005f00:	3ff80000 	.word	0x3ff80000
 8005f04:	080083f0 	.word	0x080083f0
 8005f08:	0800833c 	.word	0x0800833c
 8005f0c:	080082e0 	.word	0x080082e0
 8005f10:	08008208 	.word	0x08008208
 8005f14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f18:	6018      	str	r0, [r3, #0]
 8005f1a:	9b07      	ldr	r3, [sp, #28]
 8005f1c:	2b0e      	cmp	r3, #14
 8005f1e:	f200 80a4 	bhi.w	800606a <_dtoa_r+0x442>
 8005f22:	2c00      	cmp	r4, #0
 8005f24:	f000 80a1 	beq.w	800606a <_dtoa_r+0x442>
 8005f28:	2f00      	cmp	r7, #0
 8005f2a:	dd33      	ble.n	8005f94 <_dtoa_r+0x36c>
 8005f2c:	f007 020f 	and.w	r2, r7, #15
 8005f30:	4bac      	ldr	r3, [pc, #688]	@ (80061e4 <_dtoa_r+0x5bc>)
 8005f32:	05f8      	lsls	r0, r7, #23
 8005f34:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f3c:	ed93 7b00 	vldr	d7, [r3]
 8005f40:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005f44:	d516      	bpl.n	8005f74 <_dtoa_r+0x34c>
 8005f46:	4ba8      	ldr	r3, [pc, #672]	@ (80061e8 <_dtoa_r+0x5c0>)
 8005f48:	f004 040f 	and.w	r4, r4, #15
 8005f4c:	2603      	movs	r6, #3
 8005f4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f56:	f7fa fc7d 	bl	8000854 <__aeabi_ddiv>
 8005f5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f5e:	4da2      	ldr	r5, [pc, #648]	@ (80061e8 <_dtoa_r+0x5c0>)
 8005f60:	b954      	cbnz	r4, 8005f78 <_dtoa_r+0x350>
 8005f62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f6a:	f7fa fc73 	bl	8000854 <__aeabi_ddiv>
 8005f6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f72:	e028      	b.n	8005fc6 <_dtoa_r+0x39e>
 8005f74:	2602      	movs	r6, #2
 8005f76:	e7f2      	b.n	8005f5e <_dtoa_r+0x336>
 8005f78:	07e1      	lsls	r1, r4, #31
 8005f7a:	d508      	bpl.n	8005f8e <_dtoa_r+0x366>
 8005f7c:	3601      	adds	r6, #1
 8005f7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f86:	f7fa fb3b 	bl	8000600 <__aeabi_dmul>
 8005f8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f8e:	1064      	asrs	r4, r4, #1
 8005f90:	3508      	adds	r5, #8
 8005f92:	e7e5      	b.n	8005f60 <_dtoa_r+0x338>
 8005f94:	f000 80d2 	beq.w	800613c <_dtoa_r+0x514>
 8005f98:	427c      	negs	r4, r7
 8005f9a:	4b92      	ldr	r3, [pc, #584]	@ (80061e4 <_dtoa_r+0x5bc>)
 8005f9c:	4d92      	ldr	r5, [pc, #584]	@ (80061e8 <_dtoa_r+0x5c0>)
 8005f9e:	2602      	movs	r6, #2
 8005fa0:	f004 020f 	and.w	r2, r4, #15
 8005fa4:	1124      	asrs	r4, r4, #4
 8005fa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005faa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	f7fa fb25 	bl	8000600 <__aeabi_dmul>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fbc:	2c00      	cmp	r4, #0
 8005fbe:	f040 80b2 	bne.w	8006126 <_dtoa_r+0x4fe>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1d3      	bne.n	8005f6e <_dtoa_r+0x346>
 8005fc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005fc8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 80b7 	beq.w	8006140 <_dtoa_r+0x518>
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	4b85      	ldr	r3, [pc, #532]	@ (80061ec <_dtoa_r+0x5c4>)
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	4629      	mov	r1, r5
 8005fda:	f7fa fd83 	bl	8000ae4 <__aeabi_dcmplt>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	f000 80ae 	beq.w	8006140 <_dtoa_r+0x518>
 8005fe4:	9b07      	ldr	r3, [sp, #28]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 80aa 	beq.w	8006140 <_dtoa_r+0x518>
 8005fec:	9b00      	ldr	r3, [sp, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dd37      	ble.n	8006062 <_dtoa_r+0x43a>
 8005ff2:	1e7b      	subs	r3, r7, #1
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	9304      	str	r3, [sp, #16]
 8005ffc:	3601      	adds	r6, #1
 8005ffe:	4b7c      	ldr	r3, [pc, #496]	@ (80061f0 <_dtoa_r+0x5c8>)
 8006000:	f7fa fafe 	bl	8000600 <__aeabi_dmul>
 8006004:	9c00      	ldr	r4, [sp, #0]
 8006006:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800600a:	4630      	mov	r0, r6
 800600c:	f7fa fa8e 	bl	800052c <__aeabi_i2d>
 8006010:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006014:	f7fa faf4 	bl	8000600 <__aeabi_dmul>
 8006018:	2200      	movs	r2, #0
 800601a:	4b76      	ldr	r3, [pc, #472]	@ (80061f4 <_dtoa_r+0x5cc>)
 800601c:	f7fa f93a 	bl	8000294 <__adddf3>
 8006020:	4605      	mov	r5, r0
 8006022:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006026:	2c00      	cmp	r4, #0
 8006028:	f040 808d 	bne.w	8006146 <_dtoa_r+0x51e>
 800602c:	2200      	movs	r2, #0
 800602e:	4b72      	ldr	r3, [pc, #456]	@ (80061f8 <_dtoa_r+0x5d0>)
 8006030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006034:	f7fa f92c 	bl	8000290 <__aeabi_dsub>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006040:	462a      	mov	r2, r5
 8006042:	4633      	mov	r3, r6
 8006044:	f7fa fd6c 	bl	8000b20 <__aeabi_dcmpgt>
 8006048:	2800      	cmp	r0, #0
 800604a:	f040 828b 	bne.w	8006564 <_dtoa_r+0x93c>
 800604e:	462a      	mov	r2, r5
 8006050:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006058:	f7fa fd44 	bl	8000ae4 <__aeabi_dcmplt>
 800605c:	2800      	cmp	r0, #0
 800605e:	f040 8128 	bne.w	80062b2 <_dtoa_r+0x68a>
 8006062:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006066:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800606a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800606c:	2b00      	cmp	r3, #0
 800606e:	f2c0 815a 	blt.w	8006326 <_dtoa_r+0x6fe>
 8006072:	2f0e      	cmp	r7, #14
 8006074:	f300 8157 	bgt.w	8006326 <_dtoa_r+0x6fe>
 8006078:	4b5a      	ldr	r3, [pc, #360]	@ (80061e4 <_dtoa_r+0x5bc>)
 800607a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800607e:	ed93 7b00 	vldr	d7, [r3]
 8006082:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006084:	2b00      	cmp	r3, #0
 8006086:	ed8d 7b00 	vstr	d7, [sp]
 800608a:	da03      	bge.n	8006094 <_dtoa_r+0x46c>
 800608c:	9b07      	ldr	r3, [sp, #28]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f340 8101 	ble.w	8006296 <_dtoa_r+0x66e>
 8006094:	4656      	mov	r6, sl
 8006096:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800609a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800609e:	4620      	mov	r0, r4
 80060a0:	4629      	mov	r1, r5
 80060a2:	f7fa fbd7 	bl	8000854 <__aeabi_ddiv>
 80060a6:	f7fa fd5b 	bl	8000b60 <__aeabi_d2iz>
 80060aa:	4680      	mov	r8, r0
 80060ac:	f7fa fa3e 	bl	800052c <__aeabi_i2d>
 80060b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060b4:	f7fa faa4 	bl	8000600 <__aeabi_dmul>
 80060b8:	4602      	mov	r2, r0
 80060ba:	4620      	mov	r0, r4
 80060bc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80060c0:	460b      	mov	r3, r1
 80060c2:	4629      	mov	r1, r5
 80060c4:	f7fa f8e4 	bl	8000290 <__aeabi_dsub>
 80060c8:	9d07      	ldr	r5, [sp, #28]
 80060ca:	f806 4b01 	strb.w	r4, [r6], #1
 80060ce:	eba6 040a 	sub.w	r4, r6, sl
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	42a5      	cmp	r5, r4
 80060d8:	f040 8117 	bne.w	800630a <_dtoa_r+0x6e2>
 80060dc:	f7fa f8da 	bl	8000294 <__adddf3>
 80060e0:	4604      	mov	r4, r0
 80060e2:	460d      	mov	r5, r1
 80060e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060e8:	f7fa fd1a 	bl	8000b20 <__aeabi_dcmpgt>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	f040 80f9 	bne.w	80062e4 <_dtoa_r+0x6bc>
 80060f2:	4620      	mov	r0, r4
 80060f4:	4629      	mov	r1, r5
 80060f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060fa:	f7fa fce9 	bl	8000ad0 <__aeabi_dcmpeq>
 80060fe:	b118      	cbz	r0, 8006108 <_dtoa_r+0x4e0>
 8006100:	f018 0f01 	tst.w	r8, #1
 8006104:	f040 80ee 	bne.w	80062e4 <_dtoa_r+0x6bc>
 8006108:	4649      	mov	r1, r9
 800610a:	4658      	mov	r0, fp
 800610c:	f000 fe34 	bl	8006d78 <_Bfree>
 8006110:	2300      	movs	r3, #0
 8006112:	3701      	adds	r7, #1
 8006114:	7033      	strb	r3, [r6, #0]
 8006116:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006118:	601f      	str	r7, [r3, #0]
 800611a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 831d 	beq.w	800675c <_dtoa_r+0xb34>
 8006122:	601e      	str	r6, [r3, #0]
 8006124:	e31a      	b.n	800675c <_dtoa_r+0xb34>
 8006126:	07e2      	lsls	r2, r4, #31
 8006128:	d505      	bpl.n	8006136 <_dtoa_r+0x50e>
 800612a:	3601      	adds	r6, #1
 800612c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006130:	f7fa fa66 	bl	8000600 <__aeabi_dmul>
 8006134:	2301      	movs	r3, #1
 8006136:	1064      	asrs	r4, r4, #1
 8006138:	3508      	adds	r5, #8
 800613a:	e73f      	b.n	8005fbc <_dtoa_r+0x394>
 800613c:	2602      	movs	r6, #2
 800613e:	e742      	b.n	8005fc6 <_dtoa_r+0x39e>
 8006140:	9c07      	ldr	r4, [sp, #28]
 8006142:	9704      	str	r7, [sp, #16]
 8006144:	e761      	b.n	800600a <_dtoa_r+0x3e2>
 8006146:	4b27      	ldr	r3, [pc, #156]	@ (80061e4 <_dtoa_r+0x5bc>)
 8006148:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800614a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800614e:	4454      	add	r4, sl
 8006150:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006154:	2900      	cmp	r1, #0
 8006156:	d053      	beq.n	8006200 <_dtoa_r+0x5d8>
 8006158:	2000      	movs	r0, #0
 800615a:	4928      	ldr	r1, [pc, #160]	@ (80061fc <_dtoa_r+0x5d4>)
 800615c:	f7fa fb7a 	bl	8000854 <__aeabi_ddiv>
 8006160:	4633      	mov	r3, r6
 8006162:	4656      	mov	r6, sl
 8006164:	462a      	mov	r2, r5
 8006166:	f7fa f893 	bl	8000290 <__aeabi_dsub>
 800616a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800616e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006172:	f7fa fcf5 	bl	8000b60 <__aeabi_d2iz>
 8006176:	4605      	mov	r5, r0
 8006178:	f7fa f9d8 	bl	800052c <__aeabi_i2d>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	3530      	adds	r5, #48	@ 0x30
 8006182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006186:	f7fa f883 	bl	8000290 <__aeabi_dsub>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	f806 5b01 	strb.w	r5, [r6], #1
 8006192:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006196:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800619a:	f7fa fca3 	bl	8000ae4 <__aeabi_dcmplt>
 800619e:	2800      	cmp	r0, #0
 80061a0:	d171      	bne.n	8006286 <_dtoa_r+0x65e>
 80061a2:	2000      	movs	r0, #0
 80061a4:	4911      	ldr	r1, [pc, #68]	@ (80061ec <_dtoa_r+0x5c4>)
 80061a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061aa:	f7fa f871 	bl	8000290 <__aeabi_dsub>
 80061ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061b2:	f7fa fc97 	bl	8000ae4 <__aeabi_dcmplt>
 80061b6:	2800      	cmp	r0, #0
 80061b8:	f040 8095 	bne.w	80062e6 <_dtoa_r+0x6be>
 80061bc:	42a6      	cmp	r6, r4
 80061be:	f43f af50 	beq.w	8006062 <_dtoa_r+0x43a>
 80061c2:	2200      	movs	r2, #0
 80061c4:	4b0a      	ldr	r3, [pc, #40]	@ (80061f0 <_dtoa_r+0x5c8>)
 80061c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061ca:	f7fa fa19 	bl	8000600 <__aeabi_dmul>
 80061ce:	2200      	movs	r2, #0
 80061d0:	4b07      	ldr	r3, [pc, #28]	@ (80061f0 <_dtoa_r+0x5c8>)
 80061d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061da:	f7fa fa11 	bl	8000600 <__aeabi_dmul>
 80061de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061e2:	e7c4      	b.n	800616e <_dtoa_r+0x546>
 80061e4:	080083f0 	.word	0x080083f0
 80061e8:	080083c8 	.word	0x080083c8
 80061ec:	3ff00000 	.word	0x3ff00000
 80061f0:	40240000 	.word	0x40240000
 80061f4:	401c0000 	.word	0x401c0000
 80061f8:	40140000 	.word	0x40140000
 80061fc:	3fe00000 	.word	0x3fe00000
 8006200:	4631      	mov	r1, r6
 8006202:	4656      	mov	r6, sl
 8006204:	4628      	mov	r0, r5
 8006206:	f7fa f9fb 	bl	8000600 <__aeabi_dmul>
 800620a:	9415      	str	r4, [sp, #84]	@ 0x54
 800620c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006210:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006214:	f7fa fca4 	bl	8000b60 <__aeabi_d2iz>
 8006218:	4605      	mov	r5, r0
 800621a:	f7fa f987 	bl	800052c <__aeabi_i2d>
 800621e:	4602      	mov	r2, r0
 8006220:	3530      	adds	r5, #48	@ 0x30
 8006222:	460b      	mov	r3, r1
 8006224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006228:	f7fa f832 	bl	8000290 <__aeabi_dsub>
 800622c:	f806 5b01 	strb.w	r5, [r6], #1
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	42a6      	cmp	r6, r4
 8006236:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800623a:	f04f 0200 	mov.w	r2, #0
 800623e:	d124      	bne.n	800628a <_dtoa_r+0x662>
 8006240:	4bac      	ldr	r3, [pc, #688]	@ (80064f4 <_dtoa_r+0x8cc>)
 8006242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006246:	f7fa f825 	bl	8000294 <__adddf3>
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006252:	f7fa fc65 	bl	8000b20 <__aeabi_dcmpgt>
 8006256:	2800      	cmp	r0, #0
 8006258:	d145      	bne.n	80062e6 <_dtoa_r+0x6be>
 800625a:	2000      	movs	r0, #0
 800625c:	49a5      	ldr	r1, [pc, #660]	@ (80064f4 <_dtoa_r+0x8cc>)
 800625e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006262:	f7fa f815 	bl	8000290 <__aeabi_dsub>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800626e:	f7fa fc39 	bl	8000ae4 <__aeabi_dcmplt>
 8006272:	2800      	cmp	r0, #0
 8006274:	f43f aef5 	beq.w	8006062 <_dtoa_r+0x43a>
 8006278:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800627a:	1e73      	subs	r3, r6, #1
 800627c:	9315      	str	r3, [sp, #84]	@ 0x54
 800627e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006282:	2b30      	cmp	r3, #48	@ 0x30
 8006284:	d0f8      	beq.n	8006278 <_dtoa_r+0x650>
 8006286:	9f04      	ldr	r7, [sp, #16]
 8006288:	e73e      	b.n	8006108 <_dtoa_r+0x4e0>
 800628a:	4b9b      	ldr	r3, [pc, #620]	@ (80064f8 <_dtoa_r+0x8d0>)
 800628c:	f7fa f9b8 	bl	8000600 <__aeabi_dmul>
 8006290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006294:	e7bc      	b.n	8006210 <_dtoa_r+0x5e8>
 8006296:	d10c      	bne.n	80062b2 <_dtoa_r+0x68a>
 8006298:	2200      	movs	r2, #0
 800629a:	4b98      	ldr	r3, [pc, #608]	@ (80064fc <_dtoa_r+0x8d4>)
 800629c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062a0:	f7fa f9ae 	bl	8000600 <__aeabi_dmul>
 80062a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062a8:	f7fa fc30 	bl	8000b0c <__aeabi_dcmpge>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	f000 8157 	beq.w	8006560 <_dtoa_r+0x938>
 80062b2:	2400      	movs	r4, #0
 80062b4:	4625      	mov	r5, r4
 80062b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062b8:	4656      	mov	r6, sl
 80062ba:	43db      	mvns	r3, r3
 80062bc:	9304      	str	r3, [sp, #16]
 80062be:	2700      	movs	r7, #0
 80062c0:	4621      	mov	r1, r4
 80062c2:	4658      	mov	r0, fp
 80062c4:	f000 fd58 	bl	8006d78 <_Bfree>
 80062c8:	2d00      	cmp	r5, #0
 80062ca:	d0dc      	beq.n	8006286 <_dtoa_r+0x65e>
 80062cc:	b12f      	cbz	r7, 80062da <_dtoa_r+0x6b2>
 80062ce:	42af      	cmp	r7, r5
 80062d0:	d003      	beq.n	80062da <_dtoa_r+0x6b2>
 80062d2:	4639      	mov	r1, r7
 80062d4:	4658      	mov	r0, fp
 80062d6:	f000 fd4f 	bl	8006d78 <_Bfree>
 80062da:	4629      	mov	r1, r5
 80062dc:	4658      	mov	r0, fp
 80062de:	f000 fd4b 	bl	8006d78 <_Bfree>
 80062e2:	e7d0      	b.n	8006286 <_dtoa_r+0x65e>
 80062e4:	9704      	str	r7, [sp, #16]
 80062e6:	4633      	mov	r3, r6
 80062e8:	461e      	mov	r6, r3
 80062ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062ee:	2a39      	cmp	r2, #57	@ 0x39
 80062f0:	d107      	bne.n	8006302 <_dtoa_r+0x6da>
 80062f2:	459a      	cmp	sl, r3
 80062f4:	d1f8      	bne.n	80062e8 <_dtoa_r+0x6c0>
 80062f6:	9a04      	ldr	r2, [sp, #16]
 80062f8:	3201      	adds	r2, #1
 80062fa:	9204      	str	r2, [sp, #16]
 80062fc:	2230      	movs	r2, #48	@ 0x30
 80062fe:	f88a 2000 	strb.w	r2, [sl]
 8006302:	781a      	ldrb	r2, [r3, #0]
 8006304:	3201      	adds	r2, #1
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	e7bd      	b.n	8006286 <_dtoa_r+0x65e>
 800630a:	2200      	movs	r2, #0
 800630c:	4b7a      	ldr	r3, [pc, #488]	@ (80064f8 <_dtoa_r+0x8d0>)
 800630e:	f7fa f977 	bl	8000600 <__aeabi_dmul>
 8006312:	2200      	movs	r2, #0
 8006314:	2300      	movs	r3, #0
 8006316:	4604      	mov	r4, r0
 8006318:	460d      	mov	r5, r1
 800631a:	f7fa fbd9 	bl	8000ad0 <__aeabi_dcmpeq>
 800631e:	2800      	cmp	r0, #0
 8006320:	f43f aebb 	beq.w	800609a <_dtoa_r+0x472>
 8006324:	e6f0      	b.n	8006108 <_dtoa_r+0x4e0>
 8006326:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006328:	2a00      	cmp	r2, #0
 800632a:	f000 80db 	beq.w	80064e4 <_dtoa_r+0x8bc>
 800632e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006330:	2a01      	cmp	r2, #1
 8006332:	f300 80bf 	bgt.w	80064b4 <_dtoa_r+0x88c>
 8006336:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006338:	2a00      	cmp	r2, #0
 800633a:	f000 80b7 	beq.w	80064ac <_dtoa_r+0x884>
 800633e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006342:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006344:	4646      	mov	r6, r8
 8006346:	9a08      	ldr	r2, [sp, #32]
 8006348:	2101      	movs	r1, #1
 800634a:	4658      	mov	r0, fp
 800634c:	4498      	add	r8, r3
 800634e:	441a      	add	r2, r3
 8006350:	9208      	str	r2, [sp, #32]
 8006352:	f000 fdc7 	bl	8006ee4 <__i2b>
 8006356:	4605      	mov	r5, r0
 8006358:	b15e      	cbz	r6, 8006372 <_dtoa_r+0x74a>
 800635a:	9b08      	ldr	r3, [sp, #32]
 800635c:	2b00      	cmp	r3, #0
 800635e:	dd08      	ble.n	8006372 <_dtoa_r+0x74a>
 8006360:	42b3      	cmp	r3, r6
 8006362:	9a08      	ldr	r2, [sp, #32]
 8006364:	bfa8      	it	ge
 8006366:	4633      	movge	r3, r6
 8006368:	eba8 0803 	sub.w	r8, r8, r3
 800636c:	1af6      	subs	r6, r6, r3
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	9308      	str	r3, [sp, #32]
 8006372:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006374:	b1f3      	cbz	r3, 80063b4 <_dtoa_r+0x78c>
 8006376:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 80b7 	beq.w	80064ec <_dtoa_r+0x8c4>
 800637e:	b18c      	cbz	r4, 80063a4 <_dtoa_r+0x77c>
 8006380:	4629      	mov	r1, r5
 8006382:	4622      	mov	r2, r4
 8006384:	4658      	mov	r0, fp
 8006386:	f000 fe6d 	bl	8007064 <__pow5mult>
 800638a:	464a      	mov	r2, r9
 800638c:	4601      	mov	r1, r0
 800638e:	4605      	mov	r5, r0
 8006390:	4658      	mov	r0, fp
 8006392:	f000 fdbd 	bl	8006f10 <__multiply>
 8006396:	4649      	mov	r1, r9
 8006398:	9004      	str	r0, [sp, #16]
 800639a:	4658      	mov	r0, fp
 800639c:	f000 fcec 	bl	8006d78 <_Bfree>
 80063a0:	9b04      	ldr	r3, [sp, #16]
 80063a2:	4699      	mov	r9, r3
 80063a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063a6:	1b1a      	subs	r2, r3, r4
 80063a8:	d004      	beq.n	80063b4 <_dtoa_r+0x78c>
 80063aa:	4649      	mov	r1, r9
 80063ac:	4658      	mov	r0, fp
 80063ae:	f000 fe59 	bl	8007064 <__pow5mult>
 80063b2:	4681      	mov	r9, r0
 80063b4:	2101      	movs	r1, #1
 80063b6:	4658      	mov	r0, fp
 80063b8:	f000 fd94 	bl	8006ee4 <__i2b>
 80063bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063be:	4604      	mov	r4, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 81cf 	beq.w	8006764 <_dtoa_r+0xb3c>
 80063c6:	461a      	mov	r2, r3
 80063c8:	4601      	mov	r1, r0
 80063ca:	4658      	mov	r0, fp
 80063cc:	f000 fe4a 	bl	8007064 <__pow5mult>
 80063d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063d2:	4604      	mov	r4, r0
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	f300 8095 	bgt.w	8006504 <_dtoa_r+0x8dc>
 80063da:	9b02      	ldr	r3, [sp, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f040 8087 	bne.w	80064f0 <_dtoa_r+0x8c8>
 80063e2:	9b03      	ldr	r3, [sp, #12]
 80063e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f040 8089 	bne.w	8006500 <_dtoa_r+0x8d8>
 80063ee:	9b03      	ldr	r3, [sp, #12]
 80063f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063f4:	0d1b      	lsrs	r3, r3, #20
 80063f6:	051b      	lsls	r3, r3, #20
 80063f8:	b12b      	cbz	r3, 8006406 <_dtoa_r+0x7de>
 80063fa:	9b08      	ldr	r3, [sp, #32]
 80063fc:	f108 0801 	add.w	r8, r8, #1
 8006400:	3301      	adds	r3, #1
 8006402:	9308      	str	r3, [sp, #32]
 8006404:	2301      	movs	r3, #1
 8006406:	930a      	str	r3, [sp, #40]	@ 0x28
 8006408:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 81b0 	beq.w	8006770 <_dtoa_r+0xb48>
 8006410:	6923      	ldr	r3, [r4, #16]
 8006412:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006416:	6918      	ldr	r0, [r3, #16]
 8006418:	f000 fd18 	bl	8006e4c <__hi0bits>
 800641c:	f1c0 0020 	rsb	r0, r0, #32
 8006420:	9b08      	ldr	r3, [sp, #32]
 8006422:	4418      	add	r0, r3
 8006424:	f010 001f 	ands.w	r0, r0, #31
 8006428:	d077      	beq.n	800651a <_dtoa_r+0x8f2>
 800642a:	f1c0 0320 	rsb	r3, r0, #32
 800642e:	2b04      	cmp	r3, #4
 8006430:	dd6b      	ble.n	800650a <_dtoa_r+0x8e2>
 8006432:	f1c0 001c 	rsb	r0, r0, #28
 8006436:	9b08      	ldr	r3, [sp, #32]
 8006438:	4480      	add	r8, r0
 800643a:	4403      	add	r3, r0
 800643c:	4406      	add	r6, r0
 800643e:	9308      	str	r3, [sp, #32]
 8006440:	f1b8 0f00 	cmp.w	r8, #0
 8006444:	dd05      	ble.n	8006452 <_dtoa_r+0x82a>
 8006446:	4649      	mov	r1, r9
 8006448:	4642      	mov	r2, r8
 800644a:	4658      	mov	r0, fp
 800644c:	f000 fe64 	bl	8007118 <__lshift>
 8006450:	4681      	mov	r9, r0
 8006452:	9b08      	ldr	r3, [sp, #32]
 8006454:	2b00      	cmp	r3, #0
 8006456:	dd05      	ble.n	8006464 <_dtoa_r+0x83c>
 8006458:	4621      	mov	r1, r4
 800645a:	461a      	mov	r2, r3
 800645c:	4658      	mov	r0, fp
 800645e:	f000 fe5b 	bl	8007118 <__lshift>
 8006462:	4604      	mov	r4, r0
 8006464:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006466:	2b00      	cmp	r3, #0
 8006468:	d059      	beq.n	800651e <_dtoa_r+0x8f6>
 800646a:	4621      	mov	r1, r4
 800646c:	4648      	mov	r0, r9
 800646e:	f000 febf 	bl	80071f0 <__mcmp>
 8006472:	2800      	cmp	r0, #0
 8006474:	da53      	bge.n	800651e <_dtoa_r+0x8f6>
 8006476:	1e7b      	subs	r3, r7, #1
 8006478:	4649      	mov	r1, r9
 800647a:	220a      	movs	r2, #10
 800647c:	4658      	mov	r0, fp
 800647e:	9304      	str	r3, [sp, #16]
 8006480:	2300      	movs	r3, #0
 8006482:	f000 fc9b 	bl	8006dbc <__multadd>
 8006486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006488:	4681      	mov	r9, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 8172 	beq.w	8006774 <_dtoa_r+0xb4c>
 8006490:	2300      	movs	r3, #0
 8006492:	4629      	mov	r1, r5
 8006494:	220a      	movs	r2, #10
 8006496:	4658      	mov	r0, fp
 8006498:	f000 fc90 	bl	8006dbc <__multadd>
 800649c:	9b00      	ldr	r3, [sp, #0]
 800649e:	4605      	mov	r5, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	dc67      	bgt.n	8006574 <_dtoa_r+0x94c>
 80064a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	dc41      	bgt.n	800652e <_dtoa_r+0x906>
 80064aa:	e063      	b.n	8006574 <_dtoa_r+0x94c>
 80064ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80064ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064b2:	e746      	b.n	8006342 <_dtoa_r+0x71a>
 80064b4:	9b07      	ldr	r3, [sp, #28]
 80064b6:	1e5c      	subs	r4, r3, #1
 80064b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064ba:	42a3      	cmp	r3, r4
 80064bc:	bfb7      	itett	lt
 80064be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80064c0:	1b1c      	subge	r4, r3, r4
 80064c2:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80064c4:	1ae3      	sublt	r3, r4, r3
 80064c6:	bfbe      	ittt	lt
 80064c8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80064ca:	2400      	movlt	r4, #0
 80064cc:	18d2      	addlt	r2, r2, r3
 80064ce:	9b07      	ldr	r3, [sp, #28]
 80064d0:	bfb8      	it	lt
 80064d2:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	bfb5      	itete	lt
 80064d8:	eba8 0603 	sublt.w	r6, r8, r3
 80064dc:	4646      	movge	r6, r8
 80064de:	2300      	movlt	r3, #0
 80064e0:	9b07      	ldrge	r3, [sp, #28]
 80064e2:	e730      	b.n	8006346 <_dtoa_r+0x71e>
 80064e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064e6:	4646      	mov	r6, r8
 80064e8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80064ea:	e735      	b.n	8006358 <_dtoa_r+0x730>
 80064ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064ee:	e75c      	b.n	80063aa <_dtoa_r+0x782>
 80064f0:	2300      	movs	r3, #0
 80064f2:	e788      	b.n	8006406 <_dtoa_r+0x7de>
 80064f4:	3fe00000 	.word	0x3fe00000
 80064f8:	40240000 	.word	0x40240000
 80064fc:	40140000 	.word	0x40140000
 8006500:	9b02      	ldr	r3, [sp, #8]
 8006502:	e780      	b.n	8006406 <_dtoa_r+0x7de>
 8006504:	2300      	movs	r3, #0
 8006506:	930a      	str	r3, [sp, #40]	@ 0x28
 8006508:	e782      	b.n	8006410 <_dtoa_r+0x7e8>
 800650a:	d099      	beq.n	8006440 <_dtoa_r+0x818>
 800650c:	331c      	adds	r3, #28
 800650e:	9a08      	ldr	r2, [sp, #32]
 8006510:	441a      	add	r2, r3
 8006512:	4498      	add	r8, r3
 8006514:	441e      	add	r6, r3
 8006516:	9208      	str	r2, [sp, #32]
 8006518:	e792      	b.n	8006440 <_dtoa_r+0x818>
 800651a:	4603      	mov	r3, r0
 800651c:	e7f6      	b.n	800650c <_dtoa_r+0x8e4>
 800651e:	9b07      	ldr	r3, [sp, #28]
 8006520:	9704      	str	r7, [sp, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	dc20      	bgt.n	8006568 <_dtoa_r+0x940>
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800652a:	2b02      	cmp	r3, #2
 800652c:	dd1e      	ble.n	800656c <_dtoa_r+0x944>
 800652e:	9b00      	ldr	r3, [sp, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	f47f aec0 	bne.w	80062b6 <_dtoa_r+0x68e>
 8006536:	4621      	mov	r1, r4
 8006538:	2205      	movs	r2, #5
 800653a:	4658      	mov	r0, fp
 800653c:	f000 fc3e 	bl	8006dbc <__multadd>
 8006540:	4601      	mov	r1, r0
 8006542:	4604      	mov	r4, r0
 8006544:	4648      	mov	r0, r9
 8006546:	f000 fe53 	bl	80071f0 <__mcmp>
 800654a:	2800      	cmp	r0, #0
 800654c:	f77f aeb3 	ble.w	80062b6 <_dtoa_r+0x68e>
 8006550:	2331      	movs	r3, #49	@ 0x31
 8006552:	4656      	mov	r6, sl
 8006554:	f806 3b01 	strb.w	r3, [r6], #1
 8006558:	9b04      	ldr	r3, [sp, #16]
 800655a:	3301      	adds	r3, #1
 800655c:	9304      	str	r3, [sp, #16]
 800655e:	e6ae      	b.n	80062be <_dtoa_r+0x696>
 8006560:	9c07      	ldr	r4, [sp, #28]
 8006562:	9704      	str	r7, [sp, #16]
 8006564:	4625      	mov	r5, r4
 8006566:	e7f3      	b.n	8006550 <_dtoa_r+0x928>
 8006568:	9b07      	ldr	r3, [sp, #28]
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8104 	beq.w	800677c <_dtoa_r+0xb54>
 8006574:	2e00      	cmp	r6, #0
 8006576:	dd05      	ble.n	8006584 <_dtoa_r+0x95c>
 8006578:	4629      	mov	r1, r5
 800657a:	4632      	mov	r2, r6
 800657c:	4658      	mov	r0, fp
 800657e:	f000 fdcb 	bl	8007118 <__lshift>
 8006582:	4605      	mov	r5, r0
 8006584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006586:	2b00      	cmp	r3, #0
 8006588:	d05a      	beq.n	8006640 <_dtoa_r+0xa18>
 800658a:	6869      	ldr	r1, [r5, #4]
 800658c:	4658      	mov	r0, fp
 800658e:	f000 fbb3 	bl	8006cf8 <_Balloc>
 8006592:	4606      	mov	r6, r0
 8006594:	b928      	cbnz	r0, 80065a2 <_dtoa_r+0x97a>
 8006596:	4b84      	ldr	r3, [pc, #528]	@ (80067a8 <_dtoa_r+0xb80>)
 8006598:	4602      	mov	r2, r0
 800659a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800659e:	f7ff bb5a 	b.w	8005c56 <_dtoa_r+0x2e>
 80065a2:	692a      	ldr	r2, [r5, #16]
 80065a4:	f105 010c 	add.w	r1, r5, #12
 80065a8:	300c      	adds	r0, #12
 80065aa:	3202      	adds	r2, #2
 80065ac:	0092      	lsls	r2, r2, #2
 80065ae:	f7ff fa82 	bl	8005ab6 <memcpy>
 80065b2:	2201      	movs	r2, #1
 80065b4:	4631      	mov	r1, r6
 80065b6:	4658      	mov	r0, fp
 80065b8:	f000 fdae 	bl	8007118 <__lshift>
 80065bc:	f10a 0301 	add.w	r3, sl, #1
 80065c0:	462f      	mov	r7, r5
 80065c2:	4605      	mov	r5, r0
 80065c4:	9307      	str	r3, [sp, #28]
 80065c6:	9b00      	ldr	r3, [sp, #0]
 80065c8:	4453      	add	r3, sl
 80065ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065cc:	9b02      	ldr	r3, [sp, #8]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80065d4:	9b07      	ldr	r3, [sp, #28]
 80065d6:	4621      	mov	r1, r4
 80065d8:	4648      	mov	r0, r9
 80065da:	3b01      	subs	r3, #1
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	f7ff fa95 	bl	8005b0c <quorem>
 80065e2:	4639      	mov	r1, r7
 80065e4:	9002      	str	r0, [sp, #8]
 80065e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065ea:	4648      	mov	r0, r9
 80065ec:	f000 fe00 	bl	80071f0 <__mcmp>
 80065f0:	462a      	mov	r2, r5
 80065f2:	9008      	str	r0, [sp, #32]
 80065f4:	4621      	mov	r1, r4
 80065f6:	4658      	mov	r0, fp
 80065f8:	f000 fe16 	bl	8007228 <__mdiff>
 80065fc:	68c2      	ldr	r2, [r0, #12]
 80065fe:	4606      	mov	r6, r0
 8006600:	bb02      	cbnz	r2, 8006644 <_dtoa_r+0xa1c>
 8006602:	4601      	mov	r1, r0
 8006604:	4648      	mov	r0, r9
 8006606:	f000 fdf3 	bl	80071f0 <__mcmp>
 800660a:	4602      	mov	r2, r0
 800660c:	4631      	mov	r1, r6
 800660e:	4658      	mov	r0, fp
 8006610:	920e      	str	r2, [sp, #56]	@ 0x38
 8006612:	f000 fbb1 	bl	8006d78 <_Bfree>
 8006616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006618:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800661a:	9e07      	ldr	r6, [sp, #28]
 800661c:	ea43 0102 	orr.w	r1, r3, r2
 8006620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006622:	4319      	orrs	r1, r3
 8006624:	d110      	bne.n	8006648 <_dtoa_r+0xa20>
 8006626:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800662a:	d029      	beq.n	8006680 <_dtoa_r+0xa58>
 800662c:	9b08      	ldr	r3, [sp, #32]
 800662e:	2b00      	cmp	r3, #0
 8006630:	dd02      	ble.n	8006638 <_dtoa_r+0xa10>
 8006632:	9b02      	ldr	r3, [sp, #8]
 8006634:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006638:	9b00      	ldr	r3, [sp, #0]
 800663a:	f883 8000 	strb.w	r8, [r3]
 800663e:	e63f      	b.n	80062c0 <_dtoa_r+0x698>
 8006640:	4628      	mov	r0, r5
 8006642:	e7bb      	b.n	80065bc <_dtoa_r+0x994>
 8006644:	2201      	movs	r2, #1
 8006646:	e7e1      	b.n	800660c <_dtoa_r+0x9e4>
 8006648:	9b08      	ldr	r3, [sp, #32]
 800664a:	2b00      	cmp	r3, #0
 800664c:	db04      	blt.n	8006658 <_dtoa_r+0xa30>
 800664e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006650:	430b      	orrs	r3, r1
 8006652:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006654:	430b      	orrs	r3, r1
 8006656:	d120      	bne.n	800669a <_dtoa_r+0xa72>
 8006658:	2a00      	cmp	r2, #0
 800665a:	dded      	ble.n	8006638 <_dtoa_r+0xa10>
 800665c:	4649      	mov	r1, r9
 800665e:	2201      	movs	r2, #1
 8006660:	4658      	mov	r0, fp
 8006662:	f000 fd59 	bl	8007118 <__lshift>
 8006666:	4621      	mov	r1, r4
 8006668:	4681      	mov	r9, r0
 800666a:	f000 fdc1 	bl	80071f0 <__mcmp>
 800666e:	2800      	cmp	r0, #0
 8006670:	dc03      	bgt.n	800667a <_dtoa_r+0xa52>
 8006672:	d1e1      	bne.n	8006638 <_dtoa_r+0xa10>
 8006674:	f018 0f01 	tst.w	r8, #1
 8006678:	d0de      	beq.n	8006638 <_dtoa_r+0xa10>
 800667a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800667e:	d1d8      	bne.n	8006632 <_dtoa_r+0xa0a>
 8006680:	2339      	movs	r3, #57	@ 0x39
 8006682:	9a00      	ldr	r2, [sp, #0]
 8006684:	7013      	strb	r3, [r2, #0]
 8006686:	4633      	mov	r3, r6
 8006688:	461e      	mov	r6, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006690:	2a39      	cmp	r2, #57	@ 0x39
 8006692:	d052      	beq.n	800673a <_dtoa_r+0xb12>
 8006694:	3201      	adds	r2, #1
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	e612      	b.n	80062c0 <_dtoa_r+0x698>
 800669a:	2a00      	cmp	r2, #0
 800669c:	dd07      	ble.n	80066ae <_dtoa_r+0xa86>
 800669e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80066a2:	d0ed      	beq.n	8006680 <_dtoa_r+0xa58>
 80066a4:	f108 0301 	add.w	r3, r8, #1
 80066a8:	9a00      	ldr	r2, [sp, #0]
 80066aa:	7013      	strb	r3, [r2, #0]
 80066ac:	e608      	b.n	80062c0 <_dtoa_r+0x698>
 80066ae:	9b07      	ldr	r3, [sp, #28]
 80066b0:	9a07      	ldr	r2, [sp, #28]
 80066b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80066b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d028      	beq.n	800670e <_dtoa_r+0xae6>
 80066bc:	4649      	mov	r1, r9
 80066be:	2300      	movs	r3, #0
 80066c0:	220a      	movs	r2, #10
 80066c2:	4658      	mov	r0, fp
 80066c4:	f000 fb7a 	bl	8006dbc <__multadd>
 80066c8:	42af      	cmp	r7, r5
 80066ca:	4681      	mov	r9, r0
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	f04f 020a 	mov.w	r2, #10
 80066d4:	4639      	mov	r1, r7
 80066d6:	4658      	mov	r0, fp
 80066d8:	d107      	bne.n	80066ea <_dtoa_r+0xac2>
 80066da:	f000 fb6f 	bl	8006dbc <__multadd>
 80066de:	4607      	mov	r7, r0
 80066e0:	4605      	mov	r5, r0
 80066e2:	9b07      	ldr	r3, [sp, #28]
 80066e4:	3301      	adds	r3, #1
 80066e6:	9307      	str	r3, [sp, #28]
 80066e8:	e774      	b.n	80065d4 <_dtoa_r+0x9ac>
 80066ea:	f000 fb67 	bl	8006dbc <__multadd>
 80066ee:	4629      	mov	r1, r5
 80066f0:	4607      	mov	r7, r0
 80066f2:	2300      	movs	r3, #0
 80066f4:	220a      	movs	r2, #10
 80066f6:	4658      	mov	r0, fp
 80066f8:	f000 fb60 	bl	8006dbc <__multadd>
 80066fc:	4605      	mov	r5, r0
 80066fe:	e7f0      	b.n	80066e2 <_dtoa_r+0xaba>
 8006700:	9b00      	ldr	r3, [sp, #0]
 8006702:	2700      	movs	r7, #0
 8006704:	2b00      	cmp	r3, #0
 8006706:	bfcc      	ite	gt
 8006708:	461e      	movgt	r6, r3
 800670a:	2601      	movle	r6, #1
 800670c:	4456      	add	r6, sl
 800670e:	4649      	mov	r1, r9
 8006710:	2201      	movs	r2, #1
 8006712:	4658      	mov	r0, fp
 8006714:	f000 fd00 	bl	8007118 <__lshift>
 8006718:	4621      	mov	r1, r4
 800671a:	4681      	mov	r9, r0
 800671c:	f000 fd68 	bl	80071f0 <__mcmp>
 8006720:	2800      	cmp	r0, #0
 8006722:	dcb0      	bgt.n	8006686 <_dtoa_r+0xa5e>
 8006724:	d102      	bne.n	800672c <_dtoa_r+0xb04>
 8006726:	f018 0f01 	tst.w	r8, #1
 800672a:	d1ac      	bne.n	8006686 <_dtoa_r+0xa5e>
 800672c:	4633      	mov	r3, r6
 800672e:	461e      	mov	r6, r3
 8006730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006734:	2a30      	cmp	r2, #48	@ 0x30
 8006736:	d0fa      	beq.n	800672e <_dtoa_r+0xb06>
 8006738:	e5c2      	b.n	80062c0 <_dtoa_r+0x698>
 800673a:	459a      	cmp	sl, r3
 800673c:	d1a4      	bne.n	8006688 <_dtoa_r+0xa60>
 800673e:	9b04      	ldr	r3, [sp, #16]
 8006740:	3301      	adds	r3, #1
 8006742:	9304      	str	r3, [sp, #16]
 8006744:	2331      	movs	r3, #49	@ 0x31
 8006746:	f88a 3000 	strb.w	r3, [sl]
 800674a:	e5b9      	b.n	80062c0 <_dtoa_r+0x698>
 800674c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800674e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80067ac <_dtoa_r+0xb84>
 8006752:	b11b      	cbz	r3, 800675c <_dtoa_r+0xb34>
 8006754:	f10a 0308 	add.w	r3, sl, #8
 8006758:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800675a:	6013      	str	r3, [r2, #0]
 800675c:	4650      	mov	r0, sl
 800675e:	b019      	add	sp, #100	@ 0x64
 8006760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006766:	2b01      	cmp	r3, #1
 8006768:	f77f ae37 	ble.w	80063da <_dtoa_r+0x7b2>
 800676c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800676e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006770:	2001      	movs	r0, #1
 8006772:	e655      	b.n	8006420 <_dtoa_r+0x7f8>
 8006774:	9b00      	ldr	r3, [sp, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f77f aed6 	ble.w	8006528 <_dtoa_r+0x900>
 800677c:	4656      	mov	r6, sl
 800677e:	4621      	mov	r1, r4
 8006780:	4648      	mov	r0, r9
 8006782:	f7ff f9c3 	bl	8005b0c <quorem>
 8006786:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800678a:	9b00      	ldr	r3, [sp, #0]
 800678c:	f806 8b01 	strb.w	r8, [r6], #1
 8006790:	eba6 020a 	sub.w	r2, r6, sl
 8006794:	4293      	cmp	r3, r2
 8006796:	ddb3      	ble.n	8006700 <_dtoa_r+0xad8>
 8006798:	4649      	mov	r1, r9
 800679a:	2300      	movs	r3, #0
 800679c:	220a      	movs	r2, #10
 800679e:	4658      	mov	r0, fp
 80067a0:	f000 fb0c 	bl	8006dbc <__multadd>
 80067a4:	4681      	mov	r9, r0
 80067a6:	e7ea      	b.n	800677e <_dtoa_r+0xb56>
 80067a8:	0800833c 	.word	0x0800833c
 80067ac:	080082d7 	.word	0x080082d7

080067b0 <__sfputc_r>:
 80067b0:	6893      	ldr	r3, [r2, #8]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	6093      	str	r3, [r2, #8]
 80067b8:	b410      	push	{r4}
 80067ba:	da08      	bge.n	80067ce <__sfputc_r+0x1e>
 80067bc:	6994      	ldr	r4, [r2, #24]
 80067be:	42a3      	cmp	r3, r4
 80067c0:	db01      	blt.n	80067c6 <__sfputc_r+0x16>
 80067c2:	290a      	cmp	r1, #10
 80067c4:	d103      	bne.n	80067ce <__sfputc_r+0x1e>
 80067c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ca:	f000 be73 	b.w	80074b4 <__swbuf_r>
 80067ce:	6813      	ldr	r3, [r2, #0]
 80067d0:	1c58      	adds	r0, r3, #1
 80067d2:	6010      	str	r0, [r2, #0]
 80067d4:	4608      	mov	r0, r1
 80067d6:	7019      	strb	r1, [r3, #0]
 80067d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067dc:	4770      	bx	lr

080067de <__sfputs_r>:
 80067de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e0:	4606      	mov	r6, r0
 80067e2:	460f      	mov	r7, r1
 80067e4:	4614      	mov	r4, r2
 80067e6:	18d5      	adds	r5, r2, r3
 80067e8:	42ac      	cmp	r4, r5
 80067ea:	d101      	bne.n	80067f0 <__sfputs_r+0x12>
 80067ec:	2000      	movs	r0, #0
 80067ee:	e007      	b.n	8006800 <__sfputs_r+0x22>
 80067f0:	463a      	mov	r2, r7
 80067f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f6:	4630      	mov	r0, r6
 80067f8:	f7ff ffda 	bl	80067b0 <__sfputc_r>
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	d1f3      	bne.n	80067e8 <__sfputs_r+0xa>
 8006800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006804 <_vfiprintf_r>:
 8006804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006808:	460d      	mov	r5, r1
 800680a:	b09d      	sub	sp, #116	@ 0x74
 800680c:	4614      	mov	r4, r2
 800680e:	4698      	mov	r8, r3
 8006810:	4606      	mov	r6, r0
 8006812:	b118      	cbz	r0, 800681c <_vfiprintf_r+0x18>
 8006814:	6a03      	ldr	r3, [r0, #32]
 8006816:	b90b      	cbnz	r3, 800681c <_vfiprintf_r+0x18>
 8006818:	f7ff f858 	bl	80058cc <__sinit>
 800681c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800681e:	07d9      	lsls	r1, r3, #31
 8006820:	d405      	bmi.n	800682e <_vfiprintf_r+0x2a>
 8006822:	89ab      	ldrh	r3, [r5, #12]
 8006824:	059a      	lsls	r2, r3, #22
 8006826:	d402      	bmi.n	800682e <_vfiprintf_r+0x2a>
 8006828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800682a:	f7ff f934 	bl	8005a96 <__retarget_lock_acquire_recursive>
 800682e:	89ab      	ldrh	r3, [r5, #12]
 8006830:	071b      	lsls	r3, r3, #28
 8006832:	d501      	bpl.n	8006838 <_vfiprintf_r+0x34>
 8006834:	692b      	ldr	r3, [r5, #16]
 8006836:	b99b      	cbnz	r3, 8006860 <_vfiprintf_r+0x5c>
 8006838:	4629      	mov	r1, r5
 800683a:	4630      	mov	r0, r6
 800683c:	f000 fe78 	bl	8007530 <__swsetup_r>
 8006840:	b170      	cbz	r0, 8006860 <_vfiprintf_r+0x5c>
 8006842:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006844:	07dc      	lsls	r4, r3, #31
 8006846:	d504      	bpl.n	8006852 <_vfiprintf_r+0x4e>
 8006848:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800684c:	b01d      	add	sp, #116	@ 0x74
 800684e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006852:	89ab      	ldrh	r3, [r5, #12]
 8006854:	0598      	lsls	r0, r3, #22
 8006856:	d4f7      	bmi.n	8006848 <_vfiprintf_r+0x44>
 8006858:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800685a:	f7ff f91d 	bl	8005a98 <__retarget_lock_release_recursive>
 800685e:	e7f3      	b.n	8006848 <_vfiprintf_r+0x44>
 8006860:	2300      	movs	r3, #0
 8006862:	f8cd 800c 	str.w	r8, [sp, #12]
 8006866:	f04f 0901 	mov.w	r9, #1
 800686a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8006a20 <_vfiprintf_r+0x21c>
 800686e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006870:	2320      	movs	r3, #32
 8006872:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006876:	2330      	movs	r3, #48	@ 0x30
 8006878:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800687c:	4623      	mov	r3, r4
 800687e:	469a      	mov	sl, r3
 8006880:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006884:	b10a      	cbz	r2, 800688a <_vfiprintf_r+0x86>
 8006886:	2a25      	cmp	r2, #37	@ 0x25
 8006888:	d1f9      	bne.n	800687e <_vfiprintf_r+0x7a>
 800688a:	ebba 0b04 	subs.w	fp, sl, r4
 800688e:	d00b      	beq.n	80068a8 <_vfiprintf_r+0xa4>
 8006890:	465b      	mov	r3, fp
 8006892:	4622      	mov	r2, r4
 8006894:	4629      	mov	r1, r5
 8006896:	4630      	mov	r0, r6
 8006898:	f7ff ffa1 	bl	80067de <__sfputs_r>
 800689c:	3001      	adds	r0, #1
 800689e:	f000 80a7 	beq.w	80069f0 <_vfiprintf_r+0x1ec>
 80068a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068a4:	445a      	add	r2, fp
 80068a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80068a8:	f89a 3000 	ldrb.w	r3, [sl]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 809f 	beq.w	80069f0 <_vfiprintf_r+0x1ec>
 80068b2:	2300      	movs	r3, #0
 80068b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068b8:	f10a 0a01 	add.w	sl, sl, #1
 80068bc:	9304      	str	r3, [sp, #16]
 80068be:	9307      	str	r3, [sp, #28]
 80068c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80068c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068ca:	4654      	mov	r4, sl
 80068cc:	2205      	movs	r2, #5
 80068ce:	4854      	ldr	r0, [pc, #336]	@ (8006a20 <_vfiprintf_r+0x21c>)
 80068d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068d4:	f7ff f8e1 	bl	8005a9a <memchr>
 80068d8:	9a04      	ldr	r2, [sp, #16]
 80068da:	b9d8      	cbnz	r0, 8006914 <_vfiprintf_r+0x110>
 80068dc:	06d1      	lsls	r1, r2, #27
 80068de:	bf44      	itt	mi
 80068e0:	2320      	movmi	r3, #32
 80068e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068e6:	0713      	lsls	r3, r2, #28
 80068e8:	bf44      	itt	mi
 80068ea:	232b      	movmi	r3, #43	@ 0x2b
 80068ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068f0:	f89a 3000 	ldrb.w	r3, [sl]
 80068f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80068f6:	d015      	beq.n	8006924 <_vfiprintf_r+0x120>
 80068f8:	9a07      	ldr	r2, [sp, #28]
 80068fa:	4654      	mov	r4, sl
 80068fc:	2000      	movs	r0, #0
 80068fe:	f04f 0c0a 	mov.w	ip, #10
 8006902:	4621      	mov	r1, r4
 8006904:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006908:	3b30      	subs	r3, #48	@ 0x30
 800690a:	2b09      	cmp	r3, #9
 800690c:	d94b      	bls.n	80069a6 <_vfiprintf_r+0x1a2>
 800690e:	b1b0      	cbz	r0, 800693e <_vfiprintf_r+0x13a>
 8006910:	9207      	str	r2, [sp, #28]
 8006912:	e014      	b.n	800693e <_vfiprintf_r+0x13a>
 8006914:	eba0 0308 	sub.w	r3, r0, r8
 8006918:	46a2      	mov	sl, r4
 800691a:	fa09 f303 	lsl.w	r3, r9, r3
 800691e:	4313      	orrs	r3, r2
 8006920:	9304      	str	r3, [sp, #16]
 8006922:	e7d2      	b.n	80068ca <_vfiprintf_r+0xc6>
 8006924:	9b03      	ldr	r3, [sp, #12]
 8006926:	1d19      	adds	r1, r3, #4
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	9103      	str	r1, [sp, #12]
 800692e:	bfbb      	ittet	lt
 8006930:	425b      	neglt	r3, r3
 8006932:	f042 0202 	orrlt.w	r2, r2, #2
 8006936:	9307      	strge	r3, [sp, #28]
 8006938:	9307      	strlt	r3, [sp, #28]
 800693a:	bfb8      	it	lt
 800693c:	9204      	strlt	r2, [sp, #16]
 800693e:	7823      	ldrb	r3, [r4, #0]
 8006940:	2b2e      	cmp	r3, #46	@ 0x2e
 8006942:	d10a      	bne.n	800695a <_vfiprintf_r+0x156>
 8006944:	7863      	ldrb	r3, [r4, #1]
 8006946:	2b2a      	cmp	r3, #42	@ 0x2a
 8006948:	d132      	bne.n	80069b0 <_vfiprintf_r+0x1ac>
 800694a:	9b03      	ldr	r3, [sp, #12]
 800694c:	3402      	adds	r4, #2
 800694e:	1d1a      	adds	r2, r3, #4
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006956:	9203      	str	r2, [sp, #12]
 8006958:	9305      	str	r3, [sp, #20]
 800695a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006a30 <_vfiprintf_r+0x22c>
 800695e:	2203      	movs	r2, #3
 8006960:	7821      	ldrb	r1, [r4, #0]
 8006962:	4650      	mov	r0, sl
 8006964:	f7ff f899 	bl	8005a9a <memchr>
 8006968:	b138      	cbz	r0, 800697a <_vfiprintf_r+0x176>
 800696a:	eba0 000a 	sub.w	r0, r0, sl
 800696e:	2240      	movs	r2, #64	@ 0x40
 8006970:	9b04      	ldr	r3, [sp, #16]
 8006972:	3401      	adds	r4, #1
 8006974:	4082      	lsls	r2, r0
 8006976:	4313      	orrs	r3, r2
 8006978:	9304      	str	r3, [sp, #16]
 800697a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800697e:	2206      	movs	r2, #6
 8006980:	4828      	ldr	r0, [pc, #160]	@ (8006a24 <_vfiprintf_r+0x220>)
 8006982:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006986:	f7ff f888 	bl	8005a9a <memchr>
 800698a:	2800      	cmp	r0, #0
 800698c:	d03f      	beq.n	8006a0e <_vfiprintf_r+0x20a>
 800698e:	4b26      	ldr	r3, [pc, #152]	@ (8006a28 <_vfiprintf_r+0x224>)
 8006990:	bb1b      	cbnz	r3, 80069da <_vfiprintf_r+0x1d6>
 8006992:	9b03      	ldr	r3, [sp, #12]
 8006994:	3307      	adds	r3, #7
 8006996:	f023 0307 	bic.w	r3, r3, #7
 800699a:	3308      	adds	r3, #8
 800699c:	9303      	str	r3, [sp, #12]
 800699e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a0:	443b      	add	r3, r7
 80069a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80069a4:	e76a      	b.n	800687c <_vfiprintf_r+0x78>
 80069a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80069aa:	460c      	mov	r4, r1
 80069ac:	2001      	movs	r0, #1
 80069ae:	e7a8      	b.n	8006902 <_vfiprintf_r+0xfe>
 80069b0:	2300      	movs	r3, #0
 80069b2:	3401      	adds	r4, #1
 80069b4:	f04f 0c0a 	mov.w	ip, #10
 80069b8:	4619      	mov	r1, r3
 80069ba:	9305      	str	r3, [sp, #20]
 80069bc:	4620      	mov	r0, r4
 80069be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069c2:	3a30      	subs	r2, #48	@ 0x30
 80069c4:	2a09      	cmp	r2, #9
 80069c6:	d903      	bls.n	80069d0 <_vfiprintf_r+0x1cc>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d0c6      	beq.n	800695a <_vfiprintf_r+0x156>
 80069cc:	9105      	str	r1, [sp, #20]
 80069ce:	e7c4      	b.n	800695a <_vfiprintf_r+0x156>
 80069d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80069d4:	4604      	mov	r4, r0
 80069d6:	2301      	movs	r3, #1
 80069d8:	e7f0      	b.n	80069bc <_vfiprintf_r+0x1b8>
 80069da:	ab03      	add	r3, sp, #12
 80069dc:	462a      	mov	r2, r5
 80069de:	a904      	add	r1, sp, #16
 80069e0:	4630      	mov	r0, r6
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	4b11      	ldr	r3, [pc, #68]	@ (8006a2c <_vfiprintf_r+0x228>)
 80069e6:	f7fe fabd 	bl	8004f64 <_printf_float>
 80069ea:	4607      	mov	r7, r0
 80069ec:	1c78      	adds	r0, r7, #1
 80069ee:	d1d6      	bne.n	800699e <_vfiprintf_r+0x19a>
 80069f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069f2:	07d9      	lsls	r1, r3, #31
 80069f4:	d405      	bmi.n	8006a02 <_vfiprintf_r+0x1fe>
 80069f6:	89ab      	ldrh	r3, [r5, #12]
 80069f8:	059a      	lsls	r2, r3, #22
 80069fa:	d402      	bmi.n	8006a02 <_vfiprintf_r+0x1fe>
 80069fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069fe:	f7ff f84b 	bl	8005a98 <__retarget_lock_release_recursive>
 8006a02:	89ab      	ldrh	r3, [r5, #12]
 8006a04:	065b      	lsls	r3, r3, #25
 8006a06:	f53f af1f 	bmi.w	8006848 <_vfiprintf_r+0x44>
 8006a0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a0c:	e71e      	b.n	800684c <_vfiprintf_r+0x48>
 8006a0e:	ab03      	add	r3, sp, #12
 8006a10:	462a      	mov	r2, r5
 8006a12:	a904      	add	r1, sp, #16
 8006a14:	4630      	mov	r0, r6
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	4b04      	ldr	r3, [pc, #16]	@ (8006a2c <_vfiprintf_r+0x228>)
 8006a1a:	f7fe fd3f 	bl	800549c <_printf_i>
 8006a1e:	e7e4      	b.n	80069ea <_vfiprintf_r+0x1e6>
 8006a20:	0800834d 	.word	0x0800834d
 8006a24:	08008357 	.word	0x08008357
 8006a28:	08004f65 	.word	0x08004f65
 8006a2c:	080067df 	.word	0x080067df
 8006a30:	08008353 	.word	0x08008353

08006a34 <malloc>:
 8006a34:	4b02      	ldr	r3, [pc, #8]	@ (8006a40 <malloc+0xc>)
 8006a36:	4601      	mov	r1, r0
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	f000 b825 	b.w	8006a88 <_malloc_r>
 8006a3e:	bf00      	nop
 8006a40:	20000024 	.word	0x20000024

08006a44 <sbrk_aligned>:
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	4e0f      	ldr	r6, [pc, #60]	@ (8006a84 <sbrk_aligned+0x40>)
 8006a48:	460c      	mov	r4, r1
 8006a4a:	4605      	mov	r5, r0
 8006a4c:	6831      	ldr	r1, [r6, #0]
 8006a4e:	b911      	cbnz	r1, 8006a56 <sbrk_aligned+0x12>
 8006a50:	f000 feb0 	bl	80077b4 <_sbrk_r>
 8006a54:	6030      	str	r0, [r6, #0]
 8006a56:	4621      	mov	r1, r4
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f000 feab 	bl	80077b4 <_sbrk_r>
 8006a5e:	1c43      	adds	r3, r0, #1
 8006a60:	d103      	bne.n	8006a6a <sbrk_aligned+0x26>
 8006a62:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006a66:	4620      	mov	r0, r4
 8006a68:	bd70      	pop	{r4, r5, r6, pc}
 8006a6a:	1cc4      	adds	r4, r0, #3
 8006a6c:	f024 0403 	bic.w	r4, r4, #3
 8006a70:	42a0      	cmp	r0, r4
 8006a72:	d0f8      	beq.n	8006a66 <sbrk_aligned+0x22>
 8006a74:	1a21      	subs	r1, r4, r0
 8006a76:	4628      	mov	r0, r5
 8006a78:	f000 fe9c 	bl	80077b4 <_sbrk_r>
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d1f2      	bne.n	8006a66 <sbrk_aligned+0x22>
 8006a80:	e7ef      	b.n	8006a62 <sbrk_aligned+0x1e>
 8006a82:	bf00      	nop
 8006a84:	2000049c 	.word	0x2000049c

08006a88 <_malloc_r>:
 8006a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a8c:	1ccd      	adds	r5, r1, #3
 8006a8e:	4606      	mov	r6, r0
 8006a90:	f025 0503 	bic.w	r5, r5, #3
 8006a94:	3508      	adds	r5, #8
 8006a96:	2d0c      	cmp	r5, #12
 8006a98:	bf38      	it	cc
 8006a9a:	250c      	movcc	r5, #12
 8006a9c:	2d00      	cmp	r5, #0
 8006a9e:	db01      	blt.n	8006aa4 <_malloc_r+0x1c>
 8006aa0:	42a9      	cmp	r1, r5
 8006aa2:	d904      	bls.n	8006aae <_malloc_r+0x26>
 8006aa4:	230c      	movs	r3, #12
 8006aa6:	6033      	str	r3, [r6, #0]
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b84 <_malloc_r+0xfc>
 8006ab2:	f000 f915 	bl	8006ce0 <__malloc_lock>
 8006ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8006aba:	461c      	mov	r4, r3
 8006abc:	bb44      	cbnz	r4, 8006b10 <_malloc_r+0x88>
 8006abe:	4629      	mov	r1, r5
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f7ff ffbf 	bl	8006a44 <sbrk_aligned>
 8006ac6:	1c43      	adds	r3, r0, #1
 8006ac8:	4604      	mov	r4, r0
 8006aca:	d158      	bne.n	8006b7e <_malloc_r+0xf6>
 8006acc:	f8d8 4000 	ldr.w	r4, [r8]
 8006ad0:	4627      	mov	r7, r4
 8006ad2:	2f00      	cmp	r7, #0
 8006ad4:	d143      	bne.n	8006b5e <_malloc_r+0xd6>
 8006ad6:	2c00      	cmp	r4, #0
 8006ad8:	d04b      	beq.n	8006b72 <_malloc_r+0xea>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	4639      	mov	r1, r7
 8006ade:	4630      	mov	r0, r6
 8006ae0:	eb04 0903 	add.w	r9, r4, r3
 8006ae4:	f000 fe66 	bl	80077b4 <_sbrk_r>
 8006ae8:	4581      	cmp	r9, r0
 8006aea:	d142      	bne.n	8006b72 <_malloc_r+0xea>
 8006aec:	6821      	ldr	r1, [r4, #0]
 8006aee:	4630      	mov	r0, r6
 8006af0:	1a6d      	subs	r5, r5, r1
 8006af2:	4629      	mov	r1, r5
 8006af4:	f7ff ffa6 	bl	8006a44 <sbrk_aligned>
 8006af8:	3001      	adds	r0, #1
 8006afa:	d03a      	beq.n	8006b72 <_malloc_r+0xea>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	442b      	add	r3, r5
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	f8d8 3000 	ldr.w	r3, [r8]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	bb62      	cbnz	r2, 8006b64 <_malloc_r+0xdc>
 8006b0a:	f8c8 7000 	str.w	r7, [r8]
 8006b0e:	e00f      	b.n	8006b30 <_malloc_r+0xa8>
 8006b10:	6822      	ldr	r2, [r4, #0]
 8006b12:	1b52      	subs	r2, r2, r5
 8006b14:	d420      	bmi.n	8006b58 <_malloc_r+0xd0>
 8006b16:	2a0b      	cmp	r2, #11
 8006b18:	d917      	bls.n	8006b4a <_malloc_r+0xc2>
 8006b1a:	1961      	adds	r1, r4, r5
 8006b1c:	42a3      	cmp	r3, r4
 8006b1e:	6025      	str	r5, [r4, #0]
 8006b20:	bf18      	it	ne
 8006b22:	6059      	strne	r1, [r3, #4]
 8006b24:	6863      	ldr	r3, [r4, #4]
 8006b26:	bf08      	it	eq
 8006b28:	f8c8 1000 	streq.w	r1, [r8]
 8006b2c:	5162      	str	r2, [r4, r5]
 8006b2e:	604b      	str	r3, [r1, #4]
 8006b30:	4630      	mov	r0, r6
 8006b32:	f000 f8db 	bl	8006cec <__malloc_unlock>
 8006b36:	f104 000b 	add.w	r0, r4, #11
 8006b3a:	1d23      	adds	r3, r4, #4
 8006b3c:	f020 0007 	bic.w	r0, r0, #7
 8006b40:	1ac2      	subs	r2, r0, r3
 8006b42:	bf1c      	itt	ne
 8006b44:	1a1b      	subne	r3, r3, r0
 8006b46:	50a3      	strne	r3, [r4, r2]
 8006b48:	e7af      	b.n	8006aaa <_malloc_r+0x22>
 8006b4a:	6862      	ldr	r2, [r4, #4]
 8006b4c:	42a3      	cmp	r3, r4
 8006b4e:	bf0c      	ite	eq
 8006b50:	f8c8 2000 	streq.w	r2, [r8]
 8006b54:	605a      	strne	r2, [r3, #4]
 8006b56:	e7eb      	b.n	8006b30 <_malloc_r+0xa8>
 8006b58:	4623      	mov	r3, r4
 8006b5a:	6864      	ldr	r4, [r4, #4]
 8006b5c:	e7ae      	b.n	8006abc <_malloc_r+0x34>
 8006b5e:	463c      	mov	r4, r7
 8006b60:	687f      	ldr	r7, [r7, #4]
 8006b62:	e7b6      	b.n	8006ad2 <_malloc_r+0x4a>
 8006b64:	461a      	mov	r2, r3
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	42a3      	cmp	r3, r4
 8006b6a:	d1fb      	bne.n	8006b64 <_malloc_r+0xdc>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	6053      	str	r3, [r2, #4]
 8006b70:	e7de      	b.n	8006b30 <_malloc_r+0xa8>
 8006b72:	230c      	movs	r3, #12
 8006b74:	4630      	mov	r0, r6
 8006b76:	6033      	str	r3, [r6, #0]
 8006b78:	f000 f8b8 	bl	8006cec <__malloc_unlock>
 8006b7c:	e794      	b.n	8006aa8 <_malloc_r+0x20>
 8006b7e:	6005      	str	r5, [r0, #0]
 8006b80:	e7d6      	b.n	8006b30 <_malloc_r+0xa8>
 8006b82:	bf00      	nop
 8006b84:	200004a0 	.word	0x200004a0

08006b88 <__sflush_r>:
 8006b88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b90:	0716      	lsls	r6, r2, #28
 8006b92:	4605      	mov	r5, r0
 8006b94:	460c      	mov	r4, r1
 8006b96:	d454      	bmi.n	8006c42 <__sflush_r+0xba>
 8006b98:	684b      	ldr	r3, [r1, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	dc02      	bgt.n	8006ba4 <__sflush_r+0x1c>
 8006b9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	dd48      	ble.n	8006c36 <__sflush_r+0xae>
 8006ba4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ba6:	2e00      	cmp	r6, #0
 8006ba8:	d045      	beq.n	8006c36 <__sflush_r+0xae>
 8006baa:	2300      	movs	r3, #0
 8006bac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006bb0:	682f      	ldr	r7, [r5, #0]
 8006bb2:	6a21      	ldr	r1, [r4, #32]
 8006bb4:	602b      	str	r3, [r5, #0]
 8006bb6:	d030      	beq.n	8006c1a <__sflush_r+0x92>
 8006bb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	0759      	lsls	r1, r3, #29
 8006bbe:	d505      	bpl.n	8006bcc <__sflush_r+0x44>
 8006bc0:	6863      	ldr	r3, [r4, #4]
 8006bc2:	1ad2      	subs	r2, r2, r3
 8006bc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006bc6:	b10b      	cbz	r3, 8006bcc <__sflush_r+0x44>
 8006bc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006bca:	1ad2      	subs	r2, r2, r3
 8006bcc:	2300      	movs	r3, #0
 8006bce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006bd0:	6a21      	ldr	r1, [r4, #32]
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	47b0      	blx	r6
 8006bd6:	1c43      	adds	r3, r0, #1
 8006bd8:	89a3      	ldrh	r3, [r4, #12]
 8006bda:	d106      	bne.n	8006bea <__sflush_r+0x62>
 8006bdc:	6829      	ldr	r1, [r5, #0]
 8006bde:	291d      	cmp	r1, #29
 8006be0:	d82b      	bhi.n	8006c3a <__sflush_r+0xb2>
 8006be2:	4a2a      	ldr	r2, [pc, #168]	@ (8006c8c <__sflush_r+0x104>)
 8006be4:	410a      	asrs	r2, r1
 8006be6:	07d6      	lsls	r6, r2, #31
 8006be8:	d427      	bmi.n	8006c3a <__sflush_r+0xb2>
 8006bea:	2200      	movs	r2, #0
 8006bec:	04d9      	lsls	r1, r3, #19
 8006bee:	6062      	str	r2, [r4, #4]
 8006bf0:	6922      	ldr	r2, [r4, #16]
 8006bf2:	6022      	str	r2, [r4, #0]
 8006bf4:	d504      	bpl.n	8006c00 <__sflush_r+0x78>
 8006bf6:	1c42      	adds	r2, r0, #1
 8006bf8:	d101      	bne.n	8006bfe <__sflush_r+0x76>
 8006bfa:	682b      	ldr	r3, [r5, #0]
 8006bfc:	b903      	cbnz	r3, 8006c00 <__sflush_r+0x78>
 8006bfe:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c02:	602f      	str	r7, [r5, #0]
 8006c04:	b1b9      	cbz	r1, 8006c36 <__sflush_r+0xae>
 8006c06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c0a:	4299      	cmp	r1, r3
 8006c0c:	d002      	beq.n	8006c14 <__sflush_r+0x8c>
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 fe0e 	bl	8007830 <_free_r>
 8006c14:	2300      	movs	r3, #0
 8006c16:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c18:	e00d      	b.n	8006c36 <__sflush_r+0xae>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	47b0      	blx	r6
 8006c20:	4602      	mov	r2, r0
 8006c22:	1c50      	adds	r0, r2, #1
 8006c24:	d1c9      	bne.n	8006bba <__sflush_r+0x32>
 8006c26:	682b      	ldr	r3, [r5, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d0c6      	beq.n	8006bba <__sflush_r+0x32>
 8006c2c:	2b1d      	cmp	r3, #29
 8006c2e:	d001      	beq.n	8006c34 <__sflush_r+0xac>
 8006c30:	2b16      	cmp	r3, #22
 8006c32:	d11d      	bne.n	8006c70 <__sflush_r+0xe8>
 8006c34:	602f      	str	r7, [r5, #0]
 8006c36:	2000      	movs	r0, #0
 8006c38:	e021      	b.n	8006c7e <__sflush_r+0xf6>
 8006c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c3e:	b21b      	sxth	r3, r3
 8006c40:	e01a      	b.n	8006c78 <__sflush_r+0xf0>
 8006c42:	690f      	ldr	r7, [r1, #16]
 8006c44:	2f00      	cmp	r7, #0
 8006c46:	d0f6      	beq.n	8006c36 <__sflush_r+0xae>
 8006c48:	0793      	lsls	r3, r2, #30
 8006c4a:	680e      	ldr	r6, [r1, #0]
 8006c4c:	600f      	str	r7, [r1, #0]
 8006c4e:	bf0c      	ite	eq
 8006c50:	694b      	ldreq	r3, [r1, #20]
 8006c52:	2300      	movne	r3, #0
 8006c54:	eba6 0807 	sub.w	r8, r6, r7
 8006c58:	608b      	str	r3, [r1, #8]
 8006c5a:	f1b8 0f00 	cmp.w	r8, #0
 8006c5e:	ddea      	ble.n	8006c36 <__sflush_r+0xae>
 8006c60:	4643      	mov	r3, r8
 8006c62:	463a      	mov	r2, r7
 8006c64:	6a21      	ldr	r1, [r4, #32]
 8006c66:	4628      	mov	r0, r5
 8006c68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c6a:	47b0      	blx	r6
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	dc08      	bgt.n	8006c82 <__sflush_r+0xfa>
 8006c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c7c:	81a3      	strh	r3, [r4, #12]
 8006c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c82:	4407      	add	r7, r0
 8006c84:	eba8 0800 	sub.w	r8, r8, r0
 8006c88:	e7e7      	b.n	8006c5a <__sflush_r+0xd2>
 8006c8a:	bf00      	nop
 8006c8c:	dfbffffe 	.word	0xdfbffffe

08006c90 <_fflush_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	690b      	ldr	r3, [r1, #16]
 8006c94:	4605      	mov	r5, r0
 8006c96:	460c      	mov	r4, r1
 8006c98:	b913      	cbnz	r3, 8006ca0 <_fflush_r+0x10>
 8006c9a:	2500      	movs	r5, #0
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	b118      	cbz	r0, 8006caa <_fflush_r+0x1a>
 8006ca2:	6a03      	ldr	r3, [r0, #32]
 8006ca4:	b90b      	cbnz	r3, 8006caa <_fflush_r+0x1a>
 8006ca6:	f7fe fe11 	bl	80058cc <__sinit>
 8006caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d0f3      	beq.n	8006c9a <_fflush_r+0xa>
 8006cb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006cb4:	07d0      	lsls	r0, r2, #31
 8006cb6:	d404      	bmi.n	8006cc2 <_fflush_r+0x32>
 8006cb8:	0599      	lsls	r1, r3, #22
 8006cba:	d402      	bmi.n	8006cc2 <_fflush_r+0x32>
 8006cbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cbe:	f7fe feea 	bl	8005a96 <__retarget_lock_acquire_recursive>
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	f7ff ff5f 	bl	8006b88 <__sflush_r>
 8006cca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ccc:	4605      	mov	r5, r0
 8006cce:	07da      	lsls	r2, r3, #31
 8006cd0:	d4e4      	bmi.n	8006c9c <_fflush_r+0xc>
 8006cd2:	89a3      	ldrh	r3, [r4, #12]
 8006cd4:	059b      	lsls	r3, r3, #22
 8006cd6:	d4e1      	bmi.n	8006c9c <_fflush_r+0xc>
 8006cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cda:	f7fe fedd 	bl	8005a98 <__retarget_lock_release_recursive>
 8006cde:	e7dd      	b.n	8006c9c <_fflush_r+0xc>

08006ce0 <__malloc_lock>:
 8006ce0:	4801      	ldr	r0, [pc, #4]	@ (8006ce8 <__malloc_lock+0x8>)
 8006ce2:	f7fe bed8 	b.w	8005a96 <__retarget_lock_acquire_recursive>
 8006ce6:	bf00      	nop
 8006ce8:	20000498 	.word	0x20000498

08006cec <__malloc_unlock>:
 8006cec:	4801      	ldr	r0, [pc, #4]	@ (8006cf4 <__malloc_unlock+0x8>)
 8006cee:	f7fe bed3 	b.w	8005a98 <__retarget_lock_release_recursive>
 8006cf2:	bf00      	nop
 8006cf4:	20000498 	.word	0x20000498

08006cf8 <_Balloc>:
 8006cf8:	b570      	push	{r4, r5, r6, lr}
 8006cfa:	69c6      	ldr	r6, [r0, #28]
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	460d      	mov	r5, r1
 8006d00:	b976      	cbnz	r6, 8006d20 <_Balloc+0x28>
 8006d02:	2010      	movs	r0, #16
 8006d04:	f7ff fe96 	bl	8006a34 <malloc>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	61e0      	str	r0, [r4, #28]
 8006d0c:	b920      	cbnz	r0, 8006d18 <_Balloc+0x20>
 8006d0e:	4b18      	ldr	r3, [pc, #96]	@ (8006d70 <_Balloc+0x78>)
 8006d10:	216b      	movs	r1, #107	@ 0x6b
 8006d12:	4818      	ldr	r0, [pc, #96]	@ (8006d74 <_Balloc+0x7c>)
 8006d14:	f7fe fedc 	bl	8005ad0 <__assert_func>
 8006d18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d1c:	6006      	str	r6, [r0, #0]
 8006d1e:	60c6      	str	r6, [r0, #12]
 8006d20:	69e6      	ldr	r6, [r4, #28]
 8006d22:	68f3      	ldr	r3, [r6, #12]
 8006d24:	b183      	cbz	r3, 8006d48 <_Balloc+0x50>
 8006d26:	69e3      	ldr	r3, [r4, #28]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d2e:	b9b8      	cbnz	r0, 8006d60 <_Balloc+0x68>
 8006d30:	2101      	movs	r1, #1
 8006d32:	4620      	mov	r0, r4
 8006d34:	fa01 f605 	lsl.w	r6, r1, r5
 8006d38:	1d72      	adds	r2, r6, #5
 8006d3a:	0092      	lsls	r2, r2, #2
 8006d3c:	f000 fd63 	bl	8007806 <_calloc_r>
 8006d40:	b160      	cbz	r0, 8006d5c <_Balloc+0x64>
 8006d42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d46:	e00e      	b.n	8006d66 <_Balloc+0x6e>
 8006d48:	2221      	movs	r2, #33	@ 0x21
 8006d4a:	2104      	movs	r1, #4
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f000 fd5a 	bl	8007806 <_calloc_r>
 8006d52:	69e3      	ldr	r3, [r4, #28]
 8006d54:	60f0      	str	r0, [r6, #12]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e4      	bne.n	8006d26 <_Balloc+0x2e>
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	bd70      	pop	{r4, r5, r6, pc}
 8006d60:	6802      	ldr	r2, [r0, #0]
 8006d62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d66:	2300      	movs	r3, #0
 8006d68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d6c:	e7f7      	b.n	8006d5e <_Balloc+0x66>
 8006d6e:	bf00      	nop
 8006d70:	0800822c 	.word	0x0800822c
 8006d74:	0800835e 	.word	0x0800835e

08006d78 <_Bfree>:
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	69c6      	ldr	r6, [r0, #28]
 8006d7c:	4605      	mov	r5, r0
 8006d7e:	460c      	mov	r4, r1
 8006d80:	b976      	cbnz	r6, 8006da0 <_Bfree+0x28>
 8006d82:	2010      	movs	r0, #16
 8006d84:	f7ff fe56 	bl	8006a34 <malloc>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	61e8      	str	r0, [r5, #28]
 8006d8c:	b920      	cbnz	r0, 8006d98 <_Bfree+0x20>
 8006d8e:	4b09      	ldr	r3, [pc, #36]	@ (8006db4 <_Bfree+0x3c>)
 8006d90:	218f      	movs	r1, #143	@ 0x8f
 8006d92:	4809      	ldr	r0, [pc, #36]	@ (8006db8 <_Bfree+0x40>)
 8006d94:	f7fe fe9c 	bl	8005ad0 <__assert_func>
 8006d98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d9c:	6006      	str	r6, [r0, #0]
 8006d9e:	60c6      	str	r6, [r0, #12]
 8006da0:	b13c      	cbz	r4, 8006db2 <_Bfree+0x3a>
 8006da2:	69eb      	ldr	r3, [r5, #28]
 8006da4:	6862      	ldr	r2, [r4, #4]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dac:	6021      	str	r1, [r4, #0]
 8006dae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006db2:	bd70      	pop	{r4, r5, r6, pc}
 8006db4:	0800822c 	.word	0x0800822c
 8006db8:	0800835e 	.word	0x0800835e

08006dbc <__multadd>:
 8006dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc0:	f101 0c14 	add.w	ip, r1, #20
 8006dc4:	4607      	mov	r7, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	461e      	mov	r6, r3
 8006dca:	690d      	ldr	r5, [r1, #16]
 8006dcc:	2000      	movs	r0, #0
 8006dce:	f8dc 3000 	ldr.w	r3, [ip]
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	b299      	uxth	r1, r3
 8006dd6:	4285      	cmp	r5, r0
 8006dd8:	fb02 6101 	mla	r1, r2, r1, r6
 8006ddc:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006de0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8006de4:	b289      	uxth	r1, r1
 8006de6:	fb02 3306 	mla	r3, r2, r6, r3
 8006dea:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006dee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006df2:	f84c 1b04 	str.w	r1, [ip], #4
 8006df6:	dcea      	bgt.n	8006dce <__multadd+0x12>
 8006df8:	b30e      	cbz	r6, 8006e3e <__multadd+0x82>
 8006dfa:	68a3      	ldr	r3, [r4, #8]
 8006dfc:	42ab      	cmp	r3, r5
 8006dfe:	dc19      	bgt.n	8006e34 <__multadd+0x78>
 8006e00:	6861      	ldr	r1, [r4, #4]
 8006e02:	4638      	mov	r0, r7
 8006e04:	3101      	adds	r1, #1
 8006e06:	f7ff ff77 	bl	8006cf8 <_Balloc>
 8006e0a:	4680      	mov	r8, r0
 8006e0c:	b928      	cbnz	r0, 8006e1a <__multadd+0x5e>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	4b0c      	ldr	r3, [pc, #48]	@ (8006e44 <__multadd+0x88>)
 8006e12:	21ba      	movs	r1, #186	@ 0xba
 8006e14:	480c      	ldr	r0, [pc, #48]	@ (8006e48 <__multadd+0x8c>)
 8006e16:	f7fe fe5b 	bl	8005ad0 <__assert_func>
 8006e1a:	6922      	ldr	r2, [r4, #16]
 8006e1c:	f104 010c 	add.w	r1, r4, #12
 8006e20:	300c      	adds	r0, #12
 8006e22:	3202      	adds	r2, #2
 8006e24:	0092      	lsls	r2, r2, #2
 8006e26:	f7fe fe46 	bl	8005ab6 <memcpy>
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	4644      	mov	r4, r8
 8006e2e:	4638      	mov	r0, r7
 8006e30:	f7ff ffa2 	bl	8006d78 <_Bfree>
 8006e34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e38:	3501      	adds	r5, #1
 8006e3a:	615e      	str	r6, [r3, #20]
 8006e3c:	6125      	str	r5, [r4, #16]
 8006e3e:	4620      	mov	r0, r4
 8006e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e44:	0800833c 	.word	0x0800833c
 8006e48:	0800835e 	.word	0x0800835e

08006e4c <__hi0bits>:
 8006e4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006e50:	4603      	mov	r3, r0
 8006e52:	bf36      	itet	cc
 8006e54:	0403      	lslcc	r3, r0, #16
 8006e56:	2000      	movcs	r0, #0
 8006e58:	2010      	movcc	r0, #16
 8006e5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e5e:	bf3c      	itt	cc
 8006e60:	021b      	lslcc	r3, r3, #8
 8006e62:	3008      	addcc	r0, #8
 8006e64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e68:	bf3c      	itt	cc
 8006e6a:	011b      	lslcc	r3, r3, #4
 8006e6c:	3004      	addcc	r0, #4
 8006e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e72:	bf3c      	itt	cc
 8006e74:	009b      	lslcc	r3, r3, #2
 8006e76:	3002      	addcc	r0, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	db05      	blt.n	8006e88 <__hi0bits+0x3c>
 8006e7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006e80:	f100 0001 	add.w	r0, r0, #1
 8006e84:	bf08      	it	eq
 8006e86:	2020      	moveq	r0, #32
 8006e88:	4770      	bx	lr

08006e8a <__lo0bits>:
 8006e8a:	6803      	ldr	r3, [r0, #0]
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	f013 0007 	ands.w	r0, r3, #7
 8006e92:	d00b      	beq.n	8006eac <__lo0bits+0x22>
 8006e94:	07d9      	lsls	r1, r3, #31
 8006e96:	d421      	bmi.n	8006edc <__lo0bits+0x52>
 8006e98:	0798      	lsls	r0, r3, #30
 8006e9a:	bf47      	ittee	mi
 8006e9c:	085b      	lsrmi	r3, r3, #1
 8006e9e:	2001      	movmi	r0, #1
 8006ea0:	089b      	lsrpl	r3, r3, #2
 8006ea2:	2002      	movpl	r0, #2
 8006ea4:	bf4c      	ite	mi
 8006ea6:	6013      	strmi	r3, [r2, #0]
 8006ea8:	6013      	strpl	r3, [r2, #0]
 8006eaa:	4770      	bx	lr
 8006eac:	b299      	uxth	r1, r3
 8006eae:	b909      	cbnz	r1, 8006eb4 <__lo0bits+0x2a>
 8006eb0:	0c1b      	lsrs	r3, r3, #16
 8006eb2:	2010      	movs	r0, #16
 8006eb4:	b2d9      	uxtb	r1, r3
 8006eb6:	b909      	cbnz	r1, 8006ebc <__lo0bits+0x32>
 8006eb8:	3008      	adds	r0, #8
 8006eba:	0a1b      	lsrs	r3, r3, #8
 8006ebc:	0719      	lsls	r1, r3, #28
 8006ebe:	bf04      	itt	eq
 8006ec0:	091b      	lsreq	r3, r3, #4
 8006ec2:	3004      	addeq	r0, #4
 8006ec4:	0799      	lsls	r1, r3, #30
 8006ec6:	bf04      	itt	eq
 8006ec8:	089b      	lsreq	r3, r3, #2
 8006eca:	3002      	addeq	r0, #2
 8006ecc:	07d9      	lsls	r1, r3, #31
 8006ece:	d403      	bmi.n	8006ed8 <__lo0bits+0x4e>
 8006ed0:	085b      	lsrs	r3, r3, #1
 8006ed2:	f100 0001 	add.w	r0, r0, #1
 8006ed6:	d003      	beq.n	8006ee0 <__lo0bits+0x56>
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	4770      	bx	lr
 8006edc:	2000      	movs	r0, #0
 8006ede:	4770      	bx	lr
 8006ee0:	2020      	movs	r0, #32
 8006ee2:	4770      	bx	lr

08006ee4 <__i2b>:
 8006ee4:	b510      	push	{r4, lr}
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	2101      	movs	r1, #1
 8006eea:	f7ff ff05 	bl	8006cf8 <_Balloc>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	b928      	cbnz	r0, 8006efe <__i2b+0x1a>
 8006ef2:	4b05      	ldr	r3, [pc, #20]	@ (8006f08 <__i2b+0x24>)
 8006ef4:	f240 1145 	movw	r1, #325	@ 0x145
 8006ef8:	4804      	ldr	r0, [pc, #16]	@ (8006f0c <__i2b+0x28>)
 8006efa:	f7fe fde9 	bl	8005ad0 <__assert_func>
 8006efe:	2301      	movs	r3, #1
 8006f00:	6144      	str	r4, [r0, #20]
 8006f02:	6103      	str	r3, [r0, #16]
 8006f04:	bd10      	pop	{r4, pc}
 8006f06:	bf00      	nop
 8006f08:	0800833c 	.word	0x0800833c
 8006f0c:	0800835e 	.word	0x0800835e

08006f10 <__multiply>:
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	4614      	mov	r4, r2
 8006f16:	690a      	ldr	r2, [r1, #16]
 8006f18:	460f      	mov	r7, r1
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	6923      	ldr	r3, [r4, #16]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	bfa2      	ittt	ge
 8006f22:	4623      	movge	r3, r4
 8006f24:	460c      	movge	r4, r1
 8006f26:	461f      	movge	r7, r3
 8006f28:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006f2c:	68a3      	ldr	r3, [r4, #8]
 8006f2e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006f32:	6861      	ldr	r1, [r4, #4]
 8006f34:	eb0a 0609 	add.w	r6, sl, r9
 8006f38:	42b3      	cmp	r3, r6
 8006f3a:	bfb8      	it	lt
 8006f3c:	3101      	addlt	r1, #1
 8006f3e:	f7ff fedb 	bl	8006cf8 <_Balloc>
 8006f42:	b930      	cbnz	r0, 8006f52 <__multiply+0x42>
 8006f44:	4602      	mov	r2, r0
 8006f46:	4b45      	ldr	r3, [pc, #276]	@ (800705c <__multiply+0x14c>)
 8006f48:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006f4c:	4844      	ldr	r0, [pc, #272]	@ (8007060 <__multiply+0x150>)
 8006f4e:	f7fe fdbf 	bl	8005ad0 <__assert_func>
 8006f52:	f100 0514 	add.w	r5, r0, #20
 8006f56:	2200      	movs	r2, #0
 8006f58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f5c:	462b      	mov	r3, r5
 8006f5e:	4543      	cmp	r3, r8
 8006f60:	d321      	bcc.n	8006fa6 <__multiply+0x96>
 8006f62:	f107 0114 	add.w	r1, r7, #20
 8006f66:	f104 0214 	add.w	r2, r4, #20
 8006f6a:	f104 0715 	add.w	r7, r4, #21
 8006f6e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006f72:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006f76:	9302      	str	r3, [sp, #8]
 8006f78:	1b13      	subs	r3, r2, r4
 8006f7a:	3b15      	subs	r3, #21
 8006f7c:	f023 0303 	bic.w	r3, r3, #3
 8006f80:	3304      	adds	r3, #4
 8006f82:	42ba      	cmp	r2, r7
 8006f84:	bf38      	it	cc
 8006f86:	2304      	movcc	r3, #4
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	9b02      	ldr	r3, [sp, #8]
 8006f8c:	9103      	str	r1, [sp, #12]
 8006f8e:	428b      	cmp	r3, r1
 8006f90:	d80c      	bhi.n	8006fac <__multiply+0x9c>
 8006f92:	2e00      	cmp	r6, #0
 8006f94:	dd03      	ble.n	8006f9e <__multiply+0x8e>
 8006f96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d05b      	beq.n	8007056 <__multiply+0x146>
 8006f9e:	6106      	str	r6, [r0, #16]
 8006fa0:	b005      	add	sp, #20
 8006fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa6:	f843 2b04 	str.w	r2, [r3], #4
 8006faa:	e7d8      	b.n	8006f5e <__multiply+0x4e>
 8006fac:	f8b1 a000 	ldrh.w	sl, [r1]
 8006fb0:	f1ba 0f00 	cmp.w	sl, #0
 8006fb4:	d024      	beq.n	8007000 <__multiply+0xf0>
 8006fb6:	f104 0e14 	add.w	lr, r4, #20
 8006fba:	46a9      	mov	r9, r5
 8006fbc:	f04f 0c00 	mov.w	ip, #0
 8006fc0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006fc4:	f8d9 3000 	ldr.w	r3, [r9]
 8006fc8:	fa1f fb87 	uxth.w	fp, r7
 8006fcc:	4572      	cmp	r2, lr
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	fb0a 330b 	mla	r3, sl, fp, r3
 8006fd4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006fd8:	f8d9 7000 	ldr.w	r7, [r9]
 8006fdc:	4463      	add	r3, ip
 8006fde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006fe2:	fb0a c70b 	mla	r7, sl, fp, ip
 8006fe6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006ff0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006ff4:	f849 3b04 	str.w	r3, [r9], #4
 8006ff8:	d8e2      	bhi.n	8006fc0 <__multiply+0xb0>
 8006ffa:	9b01      	ldr	r3, [sp, #4]
 8006ffc:	f845 c003 	str.w	ip, [r5, r3]
 8007000:	9b03      	ldr	r3, [sp, #12]
 8007002:	3104      	adds	r1, #4
 8007004:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007008:	f1b9 0f00 	cmp.w	r9, #0
 800700c:	d021      	beq.n	8007052 <__multiply+0x142>
 800700e:	682b      	ldr	r3, [r5, #0]
 8007010:	f104 0c14 	add.w	ip, r4, #20
 8007014:	46ae      	mov	lr, r5
 8007016:	f04f 0a00 	mov.w	sl, #0
 800701a:	f8bc b000 	ldrh.w	fp, [ip]
 800701e:	b29b      	uxth	r3, r3
 8007020:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007024:	fb09 770b 	mla	r7, r9, fp, r7
 8007028:	4457      	add	r7, sl
 800702a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800702e:	f84e 3b04 	str.w	r3, [lr], #4
 8007032:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007036:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800703a:	f8be 3000 	ldrh.w	r3, [lr]
 800703e:	4562      	cmp	r2, ip
 8007040:	fb09 330a 	mla	r3, r9, sl, r3
 8007044:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007048:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800704c:	d8e5      	bhi.n	800701a <__multiply+0x10a>
 800704e:	9f01      	ldr	r7, [sp, #4]
 8007050:	51eb      	str	r3, [r5, r7]
 8007052:	3504      	adds	r5, #4
 8007054:	e799      	b.n	8006f8a <__multiply+0x7a>
 8007056:	3e01      	subs	r6, #1
 8007058:	e79b      	b.n	8006f92 <__multiply+0x82>
 800705a:	bf00      	nop
 800705c:	0800833c 	.word	0x0800833c
 8007060:	0800835e 	.word	0x0800835e

08007064 <__pow5mult>:
 8007064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007068:	4615      	mov	r5, r2
 800706a:	f012 0203 	ands.w	r2, r2, #3
 800706e:	4607      	mov	r7, r0
 8007070:	460e      	mov	r6, r1
 8007072:	d007      	beq.n	8007084 <__pow5mult+0x20>
 8007074:	3a01      	subs	r2, #1
 8007076:	4c25      	ldr	r4, [pc, #148]	@ (800710c <__pow5mult+0xa8>)
 8007078:	2300      	movs	r3, #0
 800707a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800707e:	f7ff fe9d 	bl	8006dbc <__multadd>
 8007082:	4606      	mov	r6, r0
 8007084:	10ad      	asrs	r5, r5, #2
 8007086:	d03d      	beq.n	8007104 <__pow5mult+0xa0>
 8007088:	69fc      	ldr	r4, [r7, #28]
 800708a:	b97c      	cbnz	r4, 80070ac <__pow5mult+0x48>
 800708c:	2010      	movs	r0, #16
 800708e:	f7ff fcd1 	bl	8006a34 <malloc>
 8007092:	4602      	mov	r2, r0
 8007094:	61f8      	str	r0, [r7, #28]
 8007096:	b928      	cbnz	r0, 80070a4 <__pow5mult+0x40>
 8007098:	4b1d      	ldr	r3, [pc, #116]	@ (8007110 <__pow5mult+0xac>)
 800709a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800709e:	481d      	ldr	r0, [pc, #116]	@ (8007114 <__pow5mult+0xb0>)
 80070a0:	f7fe fd16 	bl	8005ad0 <__assert_func>
 80070a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070a8:	6004      	str	r4, [r0, #0]
 80070aa:	60c4      	str	r4, [r0, #12]
 80070ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80070b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070b4:	b94c      	cbnz	r4, 80070ca <__pow5mult+0x66>
 80070b6:	f240 2171 	movw	r1, #625	@ 0x271
 80070ba:	4638      	mov	r0, r7
 80070bc:	f7ff ff12 	bl	8006ee4 <__i2b>
 80070c0:	2300      	movs	r3, #0
 80070c2:	4604      	mov	r4, r0
 80070c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80070c8:	6003      	str	r3, [r0, #0]
 80070ca:	f04f 0900 	mov.w	r9, #0
 80070ce:	07eb      	lsls	r3, r5, #31
 80070d0:	d50a      	bpl.n	80070e8 <__pow5mult+0x84>
 80070d2:	4631      	mov	r1, r6
 80070d4:	4622      	mov	r2, r4
 80070d6:	4638      	mov	r0, r7
 80070d8:	f7ff ff1a 	bl	8006f10 <__multiply>
 80070dc:	4680      	mov	r8, r0
 80070de:	4631      	mov	r1, r6
 80070e0:	4638      	mov	r0, r7
 80070e2:	4646      	mov	r6, r8
 80070e4:	f7ff fe48 	bl	8006d78 <_Bfree>
 80070e8:	106d      	asrs	r5, r5, #1
 80070ea:	d00b      	beq.n	8007104 <__pow5mult+0xa0>
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	b938      	cbnz	r0, 8007100 <__pow5mult+0x9c>
 80070f0:	4622      	mov	r2, r4
 80070f2:	4621      	mov	r1, r4
 80070f4:	4638      	mov	r0, r7
 80070f6:	f7ff ff0b 	bl	8006f10 <__multiply>
 80070fa:	6020      	str	r0, [r4, #0]
 80070fc:	f8c0 9000 	str.w	r9, [r0]
 8007100:	4604      	mov	r4, r0
 8007102:	e7e4      	b.n	80070ce <__pow5mult+0x6a>
 8007104:	4630      	mov	r0, r6
 8007106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710a:	bf00      	nop
 800710c:	080083b8 	.word	0x080083b8
 8007110:	0800822c 	.word	0x0800822c
 8007114:	0800835e 	.word	0x0800835e

08007118 <__lshift>:
 8007118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800711c:	460c      	mov	r4, r1
 800711e:	4607      	mov	r7, r0
 8007120:	4691      	mov	r9, r2
 8007122:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007126:	6923      	ldr	r3, [r4, #16]
 8007128:	6849      	ldr	r1, [r1, #4]
 800712a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800712e:	68a3      	ldr	r3, [r4, #8]
 8007130:	f108 0601 	add.w	r6, r8, #1
 8007134:	42b3      	cmp	r3, r6
 8007136:	db0b      	blt.n	8007150 <__lshift+0x38>
 8007138:	4638      	mov	r0, r7
 800713a:	f7ff fddd 	bl	8006cf8 <_Balloc>
 800713e:	4605      	mov	r5, r0
 8007140:	b948      	cbnz	r0, 8007156 <__lshift+0x3e>
 8007142:	4602      	mov	r2, r0
 8007144:	4b28      	ldr	r3, [pc, #160]	@ (80071e8 <__lshift+0xd0>)
 8007146:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800714a:	4828      	ldr	r0, [pc, #160]	@ (80071ec <__lshift+0xd4>)
 800714c:	f7fe fcc0 	bl	8005ad0 <__assert_func>
 8007150:	3101      	adds	r1, #1
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	e7ee      	b.n	8007134 <__lshift+0x1c>
 8007156:	2300      	movs	r3, #0
 8007158:	f100 0114 	add.w	r1, r0, #20
 800715c:	f100 0210 	add.w	r2, r0, #16
 8007160:	4618      	mov	r0, r3
 8007162:	4553      	cmp	r3, sl
 8007164:	db33      	blt.n	80071ce <__lshift+0xb6>
 8007166:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800716a:	f104 0314 	add.w	r3, r4, #20
 800716e:	6920      	ldr	r0, [r4, #16]
 8007170:	f019 091f 	ands.w	r9, r9, #31
 8007174:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007178:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800717c:	d02b      	beq.n	80071d6 <__lshift+0xbe>
 800717e:	f1c9 0e20 	rsb	lr, r9, #32
 8007182:	468a      	mov	sl, r1
 8007184:	2200      	movs	r2, #0
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	fa00 f009 	lsl.w	r0, r0, r9
 800718c:	4310      	orrs	r0, r2
 800718e:	f84a 0b04 	str.w	r0, [sl], #4
 8007192:	f853 2b04 	ldr.w	r2, [r3], #4
 8007196:	459c      	cmp	ip, r3
 8007198:	fa22 f20e 	lsr.w	r2, r2, lr
 800719c:	d8f3      	bhi.n	8007186 <__lshift+0x6e>
 800719e:	ebac 0304 	sub.w	r3, ip, r4
 80071a2:	f104 0015 	add.w	r0, r4, #21
 80071a6:	3b15      	subs	r3, #21
 80071a8:	f023 0303 	bic.w	r3, r3, #3
 80071ac:	3304      	adds	r3, #4
 80071ae:	4584      	cmp	ip, r0
 80071b0:	bf38      	it	cc
 80071b2:	2304      	movcc	r3, #4
 80071b4:	50ca      	str	r2, [r1, r3]
 80071b6:	b10a      	cbz	r2, 80071bc <__lshift+0xa4>
 80071b8:	f108 0602 	add.w	r6, r8, #2
 80071bc:	3e01      	subs	r6, #1
 80071be:	4638      	mov	r0, r7
 80071c0:	4621      	mov	r1, r4
 80071c2:	612e      	str	r6, [r5, #16]
 80071c4:	f7ff fdd8 	bl	8006d78 <_Bfree>
 80071c8:	4628      	mov	r0, r5
 80071ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ce:	3301      	adds	r3, #1
 80071d0:	f842 0f04 	str.w	r0, [r2, #4]!
 80071d4:	e7c5      	b.n	8007162 <__lshift+0x4a>
 80071d6:	3904      	subs	r1, #4
 80071d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071dc:	459c      	cmp	ip, r3
 80071de:	f841 2f04 	str.w	r2, [r1, #4]!
 80071e2:	d8f9      	bhi.n	80071d8 <__lshift+0xc0>
 80071e4:	e7ea      	b.n	80071bc <__lshift+0xa4>
 80071e6:	bf00      	nop
 80071e8:	0800833c 	.word	0x0800833c
 80071ec:	0800835e 	.word	0x0800835e

080071f0 <__mcmp>:
 80071f0:	4603      	mov	r3, r0
 80071f2:	690a      	ldr	r2, [r1, #16]
 80071f4:	6900      	ldr	r0, [r0, #16]
 80071f6:	1a80      	subs	r0, r0, r2
 80071f8:	b530      	push	{r4, r5, lr}
 80071fa:	d10e      	bne.n	800721a <__mcmp+0x2a>
 80071fc:	3314      	adds	r3, #20
 80071fe:	3114      	adds	r1, #20
 8007200:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007204:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007208:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800720c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007210:	4295      	cmp	r5, r2
 8007212:	d003      	beq.n	800721c <__mcmp+0x2c>
 8007214:	d205      	bcs.n	8007222 <__mcmp+0x32>
 8007216:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800721a:	bd30      	pop	{r4, r5, pc}
 800721c:	42a3      	cmp	r3, r4
 800721e:	d3f3      	bcc.n	8007208 <__mcmp+0x18>
 8007220:	e7fb      	b.n	800721a <__mcmp+0x2a>
 8007222:	2001      	movs	r0, #1
 8007224:	e7f9      	b.n	800721a <__mcmp+0x2a>
	...

08007228 <__mdiff>:
 8007228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722c:	4689      	mov	r9, r1
 800722e:	4606      	mov	r6, r0
 8007230:	4611      	mov	r1, r2
 8007232:	4614      	mov	r4, r2
 8007234:	4648      	mov	r0, r9
 8007236:	f7ff ffdb 	bl	80071f0 <__mcmp>
 800723a:	1e05      	subs	r5, r0, #0
 800723c:	d112      	bne.n	8007264 <__mdiff+0x3c>
 800723e:	4629      	mov	r1, r5
 8007240:	4630      	mov	r0, r6
 8007242:	f7ff fd59 	bl	8006cf8 <_Balloc>
 8007246:	4602      	mov	r2, r0
 8007248:	b928      	cbnz	r0, 8007256 <__mdiff+0x2e>
 800724a:	4b41      	ldr	r3, [pc, #260]	@ (8007350 <__mdiff+0x128>)
 800724c:	f240 2137 	movw	r1, #567	@ 0x237
 8007250:	4840      	ldr	r0, [pc, #256]	@ (8007354 <__mdiff+0x12c>)
 8007252:	f7fe fc3d 	bl	8005ad0 <__assert_func>
 8007256:	2301      	movs	r3, #1
 8007258:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800725c:	4610      	mov	r0, r2
 800725e:	b003      	add	sp, #12
 8007260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007264:	bfbc      	itt	lt
 8007266:	464b      	movlt	r3, r9
 8007268:	46a1      	movlt	r9, r4
 800726a:	4630      	mov	r0, r6
 800726c:	bfb8      	it	lt
 800726e:	2501      	movlt	r5, #1
 8007270:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007274:	bfb4      	ite	lt
 8007276:	461c      	movlt	r4, r3
 8007278:	2500      	movge	r5, #0
 800727a:	f7ff fd3d 	bl	8006cf8 <_Balloc>
 800727e:	4602      	mov	r2, r0
 8007280:	b918      	cbnz	r0, 800728a <__mdiff+0x62>
 8007282:	4b33      	ldr	r3, [pc, #204]	@ (8007350 <__mdiff+0x128>)
 8007284:	f240 2145 	movw	r1, #581	@ 0x245
 8007288:	e7e2      	b.n	8007250 <__mdiff+0x28>
 800728a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800728e:	f104 0e14 	add.w	lr, r4, #20
 8007292:	6926      	ldr	r6, [r4, #16]
 8007294:	f100 0b14 	add.w	fp, r0, #20
 8007298:	60c5      	str	r5, [r0, #12]
 800729a:	f109 0514 	add.w	r5, r9, #20
 800729e:	f109 0310 	add.w	r3, r9, #16
 80072a2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80072a6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80072aa:	46d9      	mov	r9, fp
 80072ac:	f04f 0c00 	mov.w	ip, #0
 80072b0:	9301      	str	r3, [sp, #4]
 80072b2:	9b01      	ldr	r3, [sp, #4]
 80072b4:	f85e 0b04 	ldr.w	r0, [lr], #4
 80072b8:	f853 af04 	ldr.w	sl, [r3, #4]!
 80072bc:	4576      	cmp	r6, lr
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	fa1f f38a 	uxth.w	r3, sl
 80072c4:	4619      	mov	r1, r3
 80072c6:	b283      	uxth	r3, r0
 80072c8:	ea4f 4010 	mov.w	r0, r0, lsr #16
 80072cc:	eba1 0303 	sub.w	r3, r1, r3
 80072d0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80072d4:	4463      	add	r3, ip
 80072d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80072da:	b29b      	uxth	r3, r3
 80072dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80072e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80072e4:	f849 3b04 	str.w	r3, [r9], #4
 80072e8:	d8e3      	bhi.n	80072b2 <__mdiff+0x8a>
 80072ea:	1b33      	subs	r3, r6, r4
 80072ec:	3415      	adds	r4, #21
 80072ee:	3b15      	subs	r3, #21
 80072f0:	f023 0303 	bic.w	r3, r3, #3
 80072f4:	3304      	adds	r3, #4
 80072f6:	42a6      	cmp	r6, r4
 80072f8:	bf38      	it	cc
 80072fa:	2304      	movcc	r3, #4
 80072fc:	441d      	add	r5, r3
 80072fe:	445b      	add	r3, fp
 8007300:	462c      	mov	r4, r5
 8007302:	461e      	mov	r6, r3
 8007304:	4544      	cmp	r4, r8
 8007306:	d30e      	bcc.n	8007326 <__mdiff+0xfe>
 8007308:	f108 0103 	add.w	r1, r8, #3
 800730c:	1b49      	subs	r1, r1, r5
 800730e:	3d03      	subs	r5, #3
 8007310:	f021 0103 	bic.w	r1, r1, #3
 8007314:	45a8      	cmp	r8, r5
 8007316:	bf38      	it	cc
 8007318:	2100      	movcc	r1, #0
 800731a:	440b      	add	r3, r1
 800731c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007320:	b199      	cbz	r1, 800734a <__mdiff+0x122>
 8007322:	6117      	str	r7, [r2, #16]
 8007324:	e79a      	b.n	800725c <__mdiff+0x34>
 8007326:	f854 1b04 	ldr.w	r1, [r4], #4
 800732a:	46e6      	mov	lr, ip
 800732c:	fa1f fc81 	uxth.w	ip, r1
 8007330:	0c08      	lsrs	r0, r1, #16
 8007332:	4471      	add	r1, lr
 8007334:	44f4      	add	ip, lr
 8007336:	b289      	uxth	r1, r1
 8007338:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800733c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007340:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007344:	f846 1b04 	str.w	r1, [r6], #4
 8007348:	e7dc      	b.n	8007304 <__mdiff+0xdc>
 800734a:	3f01      	subs	r7, #1
 800734c:	e7e6      	b.n	800731c <__mdiff+0xf4>
 800734e:	bf00      	nop
 8007350:	0800833c 	.word	0x0800833c
 8007354:	0800835e 	.word	0x0800835e

08007358 <__d2b>:
 8007358:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800735c:	460f      	mov	r7, r1
 800735e:	2101      	movs	r1, #1
 8007360:	4616      	mov	r6, r2
 8007362:	ec59 8b10 	vmov	r8, r9, d0
 8007366:	f7ff fcc7 	bl	8006cf8 <_Balloc>
 800736a:	4604      	mov	r4, r0
 800736c:	b930      	cbnz	r0, 800737c <__d2b+0x24>
 800736e:	4602      	mov	r2, r0
 8007370:	4b23      	ldr	r3, [pc, #140]	@ (8007400 <__d2b+0xa8>)
 8007372:	f240 310f 	movw	r1, #783	@ 0x30f
 8007376:	4823      	ldr	r0, [pc, #140]	@ (8007404 <__d2b+0xac>)
 8007378:	f7fe fbaa 	bl	8005ad0 <__assert_func>
 800737c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007380:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007384:	b10d      	cbz	r5, 800738a <__d2b+0x32>
 8007386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800738a:	9301      	str	r3, [sp, #4]
 800738c:	f1b8 0300 	subs.w	r3, r8, #0
 8007390:	d023      	beq.n	80073da <__d2b+0x82>
 8007392:	4668      	mov	r0, sp
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	f7ff fd78 	bl	8006e8a <__lo0bits>
 800739a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800739e:	b1d0      	cbz	r0, 80073d6 <__d2b+0x7e>
 80073a0:	f1c0 0320 	rsb	r3, r0, #32
 80073a4:	fa02 f303 	lsl.w	r3, r2, r3
 80073a8:	40c2      	lsrs	r2, r0
 80073aa:	430b      	orrs	r3, r1
 80073ac:	9201      	str	r2, [sp, #4]
 80073ae:	6163      	str	r3, [r4, #20]
 80073b0:	9b01      	ldr	r3, [sp, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	61a3      	str	r3, [r4, #24]
 80073b6:	bf0c      	ite	eq
 80073b8:	2201      	moveq	r2, #1
 80073ba:	2202      	movne	r2, #2
 80073bc:	6122      	str	r2, [r4, #16]
 80073be:	b1a5      	cbz	r5, 80073ea <__d2b+0x92>
 80073c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80073c4:	4405      	add	r5, r0
 80073c6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80073ca:	603d      	str	r5, [r7, #0]
 80073cc:	6030      	str	r0, [r6, #0]
 80073ce:	4620      	mov	r0, r4
 80073d0:	b003      	add	sp, #12
 80073d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073d6:	6161      	str	r1, [r4, #20]
 80073d8:	e7ea      	b.n	80073b0 <__d2b+0x58>
 80073da:	a801      	add	r0, sp, #4
 80073dc:	f7ff fd55 	bl	8006e8a <__lo0bits>
 80073e0:	9b01      	ldr	r3, [sp, #4]
 80073e2:	3020      	adds	r0, #32
 80073e4:	2201      	movs	r2, #1
 80073e6:	6163      	str	r3, [r4, #20]
 80073e8:	e7e8      	b.n	80073bc <__d2b+0x64>
 80073ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80073ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073f2:	6038      	str	r0, [r7, #0]
 80073f4:	6918      	ldr	r0, [r3, #16]
 80073f6:	f7ff fd29 	bl	8006e4c <__hi0bits>
 80073fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073fe:	e7e5      	b.n	80073cc <__d2b+0x74>
 8007400:	0800833c 	.word	0x0800833c
 8007404:	0800835e 	.word	0x0800835e

08007408 <__sread>:
 8007408:	b510      	push	{r4, lr}
 800740a:	460c      	mov	r4, r1
 800740c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007410:	f000 f9be 	bl	8007790 <_read_r>
 8007414:	2800      	cmp	r0, #0
 8007416:	bfab      	itete	ge
 8007418:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800741a:	89a3      	ldrhlt	r3, [r4, #12]
 800741c:	181b      	addge	r3, r3, r0
 800741e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007422:	bfac      	ite	ge
 8007424:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007426:	81a3      	strhlt	r3, [r4, #12]
 8007428:	bd10      	pop	{r4, pc}

0800742a <__swrite>:
 800742a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800742e:	461f      	mov	r7, r3
 8007430:	898b      	ldrh	r3, [r1, #12]
 8007432:	4605      	mov	r5, r0
 8007434:	460c      	mov	r4, r1
 8007436:	05db      	lsls	r3, r3, #23
 8007438:	4616      	mov	r6, r2
 800743a:	d505      	bpl.n	8007448 <__swrite+0x1e>
 800743c:	2302      	movs	r3, #2
 800743e:	2200      	movs	r2, #0
 8007440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007444:	f000 f992 	bl	800776c <_lseek_r>
 8007448:	89a3      	ldrh	r3, [r4, #12]
 800744a:	4632      	mov	r2, r6
 800744c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007450:	4628      	mov	r0, r5
 8007452:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007456:	81a3      	strh	r3, [r4, #12]
 8007458:	463b      	mov	r3, r7
 800745a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800745e:	f000 b9b9 	b.w	80077d4 <_write_r>

08007462 <__sseek>:
 8007462:	b510      	push	{r4, lr}
 8007464:	460c      	mov	r4, r1
 8007466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800746a:	f000 f97f 	bl	800776c <_lseek_r>
 800746e:	1c43      	adds	r3, r0, #1
 8007470:	89a3      	ldrh	r3, [r4, #12]
 8007472:	bf15      	itete	ne
 8007474:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007476:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800747a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800747e:	81a3      	strheq	r3, [r4, #12]
 8007480:	bf18      	it	ne
 8007482:	81a3      	strhne	r3, [r4, #12]
 8007484:	bd10      	pop	{r4, pc}

08007486 <__sclose>:
 8007486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800748a:	f000 b93d 	b.w	8007708 <_close_r>
	...

08007490 <fiprintf>:
 8007490:	b40e      	push	{r1, r2, r3}
 8007492:	b503      	push	{r0, r1, lr}
 8007494:	ab03      	add	r3, sp, #12
 8007496:	4601      	mov	r1, r0
 8007498:	4805      	ldr	r0, [pc, #20]	@ (80074b0 <fiprintf+0x20>)
 800749a:	f853 2b04 	ldr.w	r2, [r3], #4
 800749e:	6800      	ldr	r0, [r0, #0]
 80074a0:	9301      	str	r3, [sp, #4]
 80074a2:	f7ff f9af 	bl	8006804 <_vfiprintf_r>
 80074a6:	b002      	add	sp, #8
 80074a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074ac:	b003      	add	sp, #12
 80074ae:	4770      	bx	lr
 80074b0:	20000024 	.word	0x20000024

080074b4 <__swbuf_r>:
 80074b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b6:	460e      	mov	r6, r1
 80074b8:	4614      	mov	r4, r2
 80074ba:	4605      	mov	r5, r0
 80074bc:	b118      	cbz	r0, 80074c6 <__swbuf_r+0x12>
 80074be:	6a03      	ldr	r3, [r0, #32]
 80074c0:	b90b      	cbnz	r3, 80074c6 <__swbuf_r+0x12>
 80074c2:	f7fe fa03 	bl	80058cc <__sinit>
 80074c6:	69a3      	ldr	r3, [r4, #24]
 80074c8:	60a3      	str	r3, [r4, #8]
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	071a      	lsls	r2, r3, #28
 80074ce:	d501      	bpl.n	80074d4 <__swbuf_r+0x20>
 80074d0:	6923      	ldr	r3, [r4, #16]
 80074d2:	b943      	cbnz	r3, 80074e6 <__swbuf_r+0x32>
 80074d4:	4621      	mov	r1, r4
 80074d6:	4628      	mov	r0, r5
 80074d8:	f000 f82a 	bl	8007530 <__swsetup_r>
 80074dc:	b118      	cbz	r0, 80074e6 <__swbuf_r+0x32>
 80074de:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80074e2:	4638      	mov	r0, r7
 80074e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	b2f6      	uxtb	r6, r6
 80074ea:	6922      	ldr	r2, [r4, #16]
 80074ec:	4637      	mov	r7, r6
 80074ee:	1a98      	subs	r0, r3, r2
 80074f0:	6963      	ldr	r3, [r4, #20]
 80074f2:	4283      	cmp	r3, r0
 80074f4:	dc05      	bgt.n	8007502 <__swbuf_r+0x4e>
 80074f6:	4621      	mov	r1, r4
 80074f8:	4628      	mov	r0, r5
 80074fa:	f7ff fbc9 	bl	8006c90 <_fflush_r>
 80074fe:	2800      	cmp	r0, #0
 8007500:	d1ed      	bne.n	80074de <__swbuf_r+0x2a>
 8007502:	68a3      	ldr	r3, [r4, #8]
 8007504:	3b01      	subs	r3, #1
 8007506:	60a3      	str	r3, [r4, #8]
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	6022      	str	r2, [r4, #0]
 800750e:	701e      	strb	r6, [r3, #0]
 8007510:	1c43      	adds	r3, r0, #1
 8007512:	6962      	ldr	r2, [r4, #20]
 8007514:	429a      	cmp	r2, r3
 8007516:	d004      	beq.n	8007522 <__swbuf_r+0x6e>
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	07db      	lsls	r3, r3, #31
 800751c:	d5e1      	bpl.n	80074e2 <__swbuf_r+0x2e>
 800751e:	2e0a      	cmp	r6, #10
 8007520:	d1df      	bne.n	80074e2 <__swbuf_r+0x2e>
 8007522:	4621      	mov	r1, r4
 8007524:	4628      	mov	r0, r5
 8007526:	f7ff fbb3 	bl	8006c90 <_fflush_r>
 800752a:	2800      	cmp	r0, #0
 800752c:	d0d9      	beq.n	80074e2 <__swbuf_r+0x2e>
 800752e:	e7d6      	b.n	80074de <__swbuf_r+0x2a>

08007530 <__swsetup_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4b29      	ldr	r3, [pc, #164]	@ (80075d8 <__swsetup_r+0xa8>)
 8007534:	4605      	mov	r5, r0
 8007536:	460c      	mov	r4, r1
 8007538:	6818      	ldr	r0, [r3, #0]
 800753a:	b118      	cbz	r0, 8007544 <__swsetup_r+0x14>
 800753c:	6a03      	ldr	r3, [r0, #32]
 800753e:	b90b      	cbnz	r3, 8007544 <__swsetup_r+0x14>
 8007540:	f7fe f9c4 	bl	80058cc <__sinit>
 8007544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007548:	0719      	lsls	r1, r3, #28
 800754a:	d422      	bmi.n	8007592 <__swsetup_r+0x62>
 800754c:	06da      	lsls	r2, r3, #27
 800754e:	d407      	bmi.n	8007560 <__swsetup_r+0x30>
 8007550:	2209      	movs	r2, #9
 8007552:	602a      	str	r2, [r5, #0]
 8007554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800755c:	81a3      	strh	r3, [r4, #12]
 800755e:	e033      	b.n	80075c8 <__swsetup_r+0x98>
 8007560:	0758      	lsls	r0, r3, #29
 8007562:	d512      	bpl.n	800758a <__swsetup_r+0x5a>
 8007564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007566:	b141      	cbz	r1, 800757a <__swsetup_r+0x4a>
 8007568:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800756c:	4299      	cmp	r1, r3
 800756e:	d002      	beq.n	8007576 <__swsetup_r+0x46>
 8007570:	4628      	mov	r0, r5
 8007572:	f000 f95d 	bl	8007830 <_free_r>
 8007576:	2300      	movs	r3, #0
 8007578:	6363      	str	r3, [r4, #52]	@ 0x34
 800757a:	89a3      	ldrh	r3, [r4, #12]
 800757c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007580:	81a3      	strh	r3, [r4, #12]
 8007582:	2300      	movs	r3, #0
 8007584:	6063      	str	r3, [r4, #4]
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	f043 0308 	orr.w	r3, r3, #8
 8007590:	81a3      	strh	r3, [r4, #12]
 8007592:	6923      	ldr	r3, [r4, #16]
 8007594:	b94b      	cbnz	r3, 80075aa <__swsetup_r+0x7a>
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800759c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075a0:	d003      	beq.n	80075aa <__swsetup_r+0x7a>
 80075a2:	4621      	mov	r1, r4
 80075a4:	4628      	mov	r0, r5
 80075a6:	f000 f83e 	bl	8007626 <__smakebuf_r>
 80075aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ae:	f013 0201 	ands.w	r2, r3, #1
 80075b2:	d00a      	beq.n	80075ca <__swsetup_r+0x9a>
 80075b4:	2200      	movs	r2, #0
 80075b6:	60a2      	str	r2, [r4, #8]
 80075b8:	6962      	ldr	r2, [r4, #20]
 80075ba:	4252      	negs	r2, r2
 80075bc:	61a2      	str	r2, [r4, #24]
 80075be:	6922      	ldr	r2, [r4, #16]
 80075c0:	b942      	cbnz	r2, 80075d4 <__swsetup_r+0xa4>
 80075c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80075c6:	d1c5      	bne.n	8007554 <__swsetup_r+0x24>
 80075c8:	bd38      	pop	{r3, r4, r5, pc}
 80075ca:	0799      	lsls	r1, r3, #30
 80075cc:	bf58      	it	pl
 80075ce:	6962      	ldrpl	r2, [r4, #20]
 80075d0:	60a2      	str	r2, [r4, #8]
 80075d2:	e7f4      	b.n	80075be <__swsetup_r+0x8e>
 80075d4:	2000      	movs	r0, #0
 80075d6:	e7f7      	b.n	80075c8 <__swsetup_r+0x98>
 80075d8:	20000024 	.word	0x20000024

080075dc <__swhatbuf_r>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	460c      	mov	r4, r1
 80075e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075e4:	b096      	sub	sp, #88	@ 0x58
 80075e6:	4615      	mov	r5, r2
 80075e8:	2900      	cmp	r1, #0
 80075ea:	461e      	mov	r6, r3
 80075ec:	da0c      	bge.n	8007608 <__swhatbuf_r+0x2c>
 80075ee:	89a3      	ldrh	r3, [r4, #12]
 80075f0:	2100      	movs	r1, #0
 80075f2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80075f6:	bf14      	ite	ne
 80075f8:	2340      	movne	r3, #64	@ 0x40
 80075fa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80075fe:	2000      	movs	r0, #0
 8007600:	6031      	str	r1, [r6, #0]
 8007602:	602b      	str	r3, [r5, #0]
 8007604:	b016      	add	sp, #88	@ 0x58
 8007606:	bd70      	pop	{r4, r5, r6, pc}
 8007608:	466a      	mov	r2, sp
 800760a:	f000 f88d 	bl	8007728 <_fstat_r>
 800760e:	2800      	cmp	r0, #0
 8007610:	dbed      	blt.n	80075ee <__swhatbuf_r+0x12>
 8007612:	9901      	ldr	r1, [sp, #4]
 8007614:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007618:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800761c:	4259      	negs	r1, r3
 800761e:	4159      	adcs	r1, r3
 8007620:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007624:	e7eb      	b.n	80075fe <__swhatbuf_r+0x22>

08007626 <__smakebuf_r>:
 8007626:	898b      	ldrh	r3, [r1, #12]
 8007628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800762a:	079d      	lsls	r5, r3, #30
 800762c:	4606      	mov	r6, r0
 800762e:	460c      	mov	r4, r1
 8007630:	d507      	bpl.n	8007642 <__smakebuf_r+0x1c>
 8007632:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007636:	6023      	str	r3, [r4, #0]
 8007638:	6123      	str	r3, [r4, #16]
 800763a:	2301      	movs	r3, #1
 800763c:	6163      	str	r3, [r4, #20]
 800763e:	b003      	add	sp, #12
 8007640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007642:	ab01      	add	r3, sp, #4
 8007644:	466a      	mov	r2, sp
 8007646:	f7ff ffc9 	bl	80075dc <__swhatbuf_r>
 800764a:	9f00      	ldr	r7, [sp, #0]
 800764c:	4605      	mov	r5, r0
 800764e:	4630      	mov	r0, r6
 8007650:	4639      	mov	r1, r7
 8007652:	f7ff fa19 	bl	8006a88 <_malloc_r>
 8007656:	b948      	cbnz	r0, 800766c <__smakebuf_r+0x46>
 8007658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800765c:	059a      	lsls	r2, r3, #22
 800765e:	d4ee      	bmi.n	800763e <__smakebuf_r+0x18>
 8007660:	f023 0303 	bic.w	r3, r3, #3
 8007664:	f043 0302 	orr.w	r3, r3, #2
 8007668:	81a3      	strh	r3, [r4, #12]
 800766a:	e7e2      	b.n	8007632 <__smakebuf_r+0xc>
 800766c:	89a3      	ldrh	r3, [r4, #12]
 800766e:	6020      	str	r0, [r4, #0]
 8007670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007674:	81a3      	strh	r3, [r4, #12]
 8007676:	9b01      	ldr	r3, [sp, #4]
 8007678:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800767c:	b15b      	cbz	r3, 8007696 <__smakebuf_r+0x70>
 800767e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007682:	4630      	mov	r0, r6
 8007684:	f000 f862 	bl	800774c <_isatty_r>
 8007688:	b128      	cbz	r0, 8007696 <__smakebuf_r+0x70>
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	f023 0303 	bic.w	r3, r3, #3
 8007690:	f043 0301 	orr.w	r3, r3, #1
 8007694:	81a3      	strh	r3, [r4, #12]
 8007696:	89a3      	ldrh	r3, [r4, #12]
 8007698:	431d      	orrs	r5, r3
 800769a:	81a5      	strh	r5, [r4, #12]
 800769c:	e7cf      	b.n	800763e <__smakebuf_r+0x18>

0800769e <_putc_r>:
 800769e:	b570      	push	{r4, r5, r6, lr}
 80076a0:	460d      	mov	r5, r1
 80076a2:	4614      	mov	r4, r2
 80076a4:	4606      	mov	r6, r0
 80076a6:	b118      	cbz	r0, 80076b0 <_putc_r+0x12>
 80076a8:	6a03      	ldr	r3, [r0, #32]
 80076aa:	b90b      	cbnz	r3, 80076b0 <_putc_r+0x12>
 80076ac:	f7fe f90e 	bl	80058cc <__sinit>
 80076b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076b2:	07d8      	lsls	r0, r3, #31
 80076b4:	d405      	bmi.n	80076c2 <_putc_r+0x24>
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	0599      	lsls	r1, r3, #22
 80076ba:	d402      	bmi.n	80076c2 <_putc_r+0x24>
 80076bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076be:	f7fe f9ea 	bl	8005a96 <__retarget_lock_acquire_recursive>
 80076c2:	68a3      	ldr	r3, [r4, #8]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	60a3      	str	r3, [r4, #8]
 80076ca:	da05      	bge.n	80076d8 <_putc_r+0x3a>
 80076cc:	69a2      	ldr	r2, [r4, #24]
 80076ce:	4293      	cmp	r3, r2
 80076d0:	db12      	blt.n	80076f8 <_putc_r+0x5a>
 80076d2:	b2eb      	uxtb	r3, r5
 80076d4:	2b0a      	cmp	r3, #10
 80076d6:	d00f      	beq.n	80076f8 <_putc_r+0x5a>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	6022      	str	r2, [r4, #0]
 80076de:	701d      	strb	r5, [r3, #0]
 80076e0:	b2ed      	uxtb	r5, r5
 80076e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076e4:	07da      	lsls	r2, r3, #31
 80076e6:	d405      	bmi.n	80076f4 <_putc_r+0x56>
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	059b      	lsls	r3, r3, #22
 80076ec:	d402      	bmi.n	80076f4 <_putc_r+0x56>
 80076ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076f0:	f7fe f9d2 	bl	8005a98 <__retarget_lock_release_recursive>
 80076f4:	4628      	mov	r0, r5
 80076f6:	bd70      	pop	{r4, r5, r6, pc}
 80076f8:	4629      	mov	r1, r5
 80076fa:	4622      	mov	r2, r4
 80076fc:	4630      	mov	r0, r6
 80076fe:	f7ff fed9 	bl	80074b4 <__swbuf_r>
 8007702:	4605      	mov	r5, r0
 8007704:	e7ed      	b.n	80076e2 <_putc_r+0x44>
	...

08007708 <_close_r>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	2300      	movs	r3, #0
 800770c:	4d05      	ldr	r5, [pc, #20]	@ (8007724 <_close_r+0x1c>)
 800770e:	4604      	mov	r4, r0
 8007710:	4608      	mov	r0, r1
 8007712:	602b      	str	r3, [r5, #0]
 8007714:	f000 fa36 	bl	8007b84 <_close>
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	d102      	bne.n	8007722 <_close_r+0x1a>
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	b103      	cbz	r3, 8007722 <_close_r+0x1a>
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	bd38      	pop	{r3, r4, r5, pc}
 8007724:	200004a4 	.word	0x200004a4

08007728 <_fstat_r>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	2300      	movs	r3, #0
 800772c:	4d06      	ldr	r5, [pc, #24]	@ (8007748 <_fstat_r+0x20>)
 800772e:	4604      	mov	r4, r0
 8007730:	4608      	mov	r0, r1
 8007732:	4611      	mov	r1, r2
 8007734:	602b      	str	r3, [r5, #0]
 8007736:	f000 fa6a 	bl	8007c0e <_fstat>
 800773a:	1c43      	adds	r3, r0, #1
 800773c:	d102      	bne.n	8007744 <_fstat_r+0x1c>
 800773e:	682b      	ldr	r3, [r5, #0]
 8007740:	b103      	cbz	r3, 8007744 <_fstat_r+0x1c>
 8007742:	6023      	str	r3, [r4, #0]
 8007744:	bd38      	pop	{r3, r4, r5, pc}
 8007746:	bf00      	nop
 8007748:	200004a4 	.word	0x200004a4

0800774c <_isatty_r>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	2300      	movs	r3, #0
 8007750:	4d05      	ldr	r5, [pc, #20]	@ (8007768 <_isatty_r+0x1c>)
 8007752:	4604      	mov	r4, r0
 8007754:	4608      	mov	r0, r1
 8007756:	602b      	str	r3, [r5, #0]
 8007758:	f000 fbc8 	bl	8007eec <_isatty>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d102      	bne.n	8007766 <_isatty_r+0x1a>
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	b103      	cbz	r3, 8007766 <_isatty_r+0x1a>
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	bd38      	pop	{r3, r4, r5, pc}
 8007768:	200004a4 	.word	0x200004a4

0800776c <_lseek_r>:
 800776c:	b538      	push	{r3, r4, r5, lr}
 800776e:	4604      	mov	r4, r0
 8007770:	4d06      	ldr	r5, [pc, #24]	@ (800778c <_lseek_r+0x20>)
 8007772:	4608      	mov	r0, r1
 8007774:	4611      	mov	r1, r2
 8007776:	2200      	movs	r2, #0
 8007778:	602a      	str	r2, [r5, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	f000 f9c3 	bl	8007b06 <_lseek>
 8007780:	1c43      	adds	r3, r0, #1
 8007782:	d102      	bne.n	800778a <_lseek_r+0x1e>
 8007784:	682b      	ldr	r3, [r5, #0]
 8007786:	b103      	cbz	r3, 800778a <_lseek_r+0x1e>
 8007788:	6023      	str	r3, [r4, #0]
 800778a:	bd38      	pop	{r3, r4, r5, pc}
 800778c:	200004a4 	.word	0x200004a4

08007790 <_read_r>:
 8007790:	b538      	push	{r3, r4, r5, lr}
 8007792:	4604      	mov	r4, r0
 8007794:	4d06      	ldr	r5, [pc, #24]	@ (80077b0 <_read_r+0x20>)
 8007796:	4608      	mov	r0, r1
 8007798:	4611      	mov	r1, r2
 800779a:	2200      	movs	r2, #0
 800779c:	602a      	str	r2, [r5, #0]
 800779e:	461a      	mov	r2, r3
 80077a0:	f000 f95b 	bl	8007a5a <_read>
 80077a4:	1c43      	adds	r3, r0, #1
 80077a6:	d102      	bne.n	80077ae <_read_r+0x1e>
 80077a8:	682b      	ldr	r3, [r5, #0]
 80077aa:	b103      	cbz	r3, 80077ae <_read_r+0x1e>
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
 80077b0:	200004a4 	.word	0x200004a4

080077b4 <_sbrk_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	2300      	movs	r3, #0
 80077b8:	4d05      	ldr	r5, [pc, #20]	@ (80077d0 <_sbrk_r+0x1c>)
 80077ba:	4604      	mov	r4, r0
 80077bc:	4608      	mov	r0, r1
 80077be:	602b      	str	r3, [r5, #0]
 80077c0:	f7fd fafc 	bl	8004dbc <_sbrk>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_sbrk_r+0x1a>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_sbrk_r+0x1a>
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	200004a4 	.word	0x200004a4

080077d4 <_write_r>:
 80077d4:	b538      	push	{r3, r4, r5, lr}
 80077d6:	4604      	mov	r4, r0
 80077d8:	4d06      	ldr	r5, [pc, #24]	@ (80077f4 <_write_r+0x20>)
 80077da:	4608      	mov	r0, r1
 80077dc:	4611      	mov	r1, r2
 80077de:	2200      	movs	r2, #0
 80077e0:	602a      	str	r2, [r5, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	f000 f9a1 	bl	8007b2a <_write>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d102      	bne.n	80077f2 <_write_r+0x1e>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	b103      	cbz	r3, 80077f2 <_write_r+0x1e>
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	200004a4 	.word	0x200004a4

080077f8 <abort>:
 80077f8:	2006      	movs	r0, #6
 80077fa:	b508      	push	{r3, lr}
 80077fc:	f000 f8aa 	bl	8007954 <raise>
 8007800:	2001      	movs	r0, #1
 8007802:	f000 f8c3 	bl	800798c <_exit>

08007806 <_calloc_r>:
 8007806:	b570      	push	{r4, r5, r6, lr}
 8007808:	fba1 5402 	umull	r5, r4, r1, r2
 800780c:	b93c      	cbnz	r4, 800781e <_calloc_r+0x18>
 800780e:	4629      	mov	r1, r5
 8007810:	f7ff f93a 	bl	8006a88 <_malloc_r>
 8007814:	4606      	mov	r6, r0
 8007816:	b928      	cbnz	r0, 8007824 <_calloc_r+0x1e>
 8007818:	2600      	movs	r6, #0
 800781a:	4630      	mov	r0, r6
 800781c:	bd70      	pop	{r4, r5, r6, pc}
 800781e:	220c      	movs	r2, #12
 8007820:	6002      	str	r2, [r0, #0]
 8007822:	e7f9      	b.n	8007818 <_calloc_r+0x12>
 8007824:	462a      	mov	r2, r5
 8007826:	4621      	mov	r1, r4
 8007828:	f7fe f8fe 	bl	8005a28 <memset>
 800782c:	e7f5      	b.n	800781a <_calloc_r+0x14>
	...

08007830 <_free_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4605      	mov	r5, r0
 8007834:	2900      	cmp	r1, #0
 8007836:	d041      	beq.n	80078bc <_free_r+0x8c>
 8007838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800783c:	1f0c      	subs	r4, r1, #4
 800783e:	2b00      	cmp	r3, #0
 8007840:	bfb8      	it	lt
 8007842:	18e4      	addlt	r4, r4, r3
 8007844:	f7ff fa4c 	bl	8006ce0 <__malloc_lock>
 8007848:	4a1d      	ldr	r2, [pc, #116]	@ (80078c0 <_free_r+0x90>)
 800784a:	6813      	ldr	r3, [r2, #0]
 800784c:	b933      	cbnz	r3, 800785c <_free_r+0x2c>
 800784e:	6063      	str	r3, [r4, #4]
 8007850:	6014      	str	r4, [r2, #0]
 8007852:	4628      	mov	r0, r5
 8007854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007858:	f7ff ba48 	b.w	8006cec <__malloc_unlock>
 800785c:	42a3      	cmp	r3, r4
 800785e:	d908      	bls.n	8007872 <_free_r+0x42>
 8007860:	6820      	ldr	r0, [r4, #0]
 8007862:	1821      	adds	r1, r4, r0
 8007864:	428b      	cmp	r3, r1
 8007866:	bf01      	itttt	eq
 8007868:	6819      	ldreq	r1, [r3, #0]
 800786a:	685b      	ldreq	r3, [r3, #4]
 800786c:	1809      	addeq	r1, r1, r0
 800786e:	6021      	streq	r1, [r4, #0]
 8007870:	e7ed      	b.n	800784e <_free_r+0x1e>
 8007872:	461a      	mov	r2, r3
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	b10b      	cbz	r3, 800787c <_free_r+0x4c>
 8007878:	42a3      	cmp	r3, r4
 800787a:	d9fa      	bls.n	8007872 <_free_r+0x42>
 800787c:	6811      	ldr	r1, [r2, #0]
 800787e:	1850      	adds	r0, r2, r1
 8007880:	42a0      	cmp	r0, r4
 8007882:	d10b      	bne.n	800789c <_free_r+0x6c>
 8007884:	6820      	ldr	r0, [r4, #0]
 8007886:	4401      	add	r1, r0
 8007888:	1850      	adds	r0, r2, r1
 800788a:	6011      	str	r1, [r2, #0]
 800788c:	4283      	cmp	r3, r0
 800788e:	d1e0      	bne.n	8007852 <_free_r+0x22>
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	4408      	add	r0, r1
 8007896:	6053      	str	r3, [r2, #4]
 8007898:	6010      	str	r0, [r2, #0]
 800789a:	e7da      	b.n	8007852 <_free_r+0x22>
 800789c:	d902      	bls.n	80078a4 <_free_r+0x74>
 800789e:	230c      	movs	r3, #12
 80078a0:	602b      	str	r3, [r5, #0]
 80078a2:	e7d6      	b.n	8007852 <_free_r+0x22>
 80078a4:	6820      	ldr	r0, [r4, #0]
 80078a6:	1821      	adds	r1, r4, r0
 80078a8:	428b      	cmp	r3, r1
 80078aa:	bf02      	ittt	eq
 80078ac:	6819      	ldreq	r1, [r3, #0]
 80078ae:	685b      	ldreq	r3, [r3, #4]
 80078b0:	1809      	addeq	r1, r1, r0
 80078b2:	6063      	str	r3, [r4, #4]
 80078b4:	bf08      	it	eq
 80078b6:	6021      	streq	r1, [r4, #0]
 80078b8:	6054      	str	r4, [r2, #4]
 80078ba:	e7ca      	b.n	8007852 <_free_r+0x22>
 80078bc:	bd38      	pop	{r3, r4, r5, pc}
 80078be:	bf00      	nop
 80078c0:	200004a0 	.word	0x200004a0

080078c4 <__ascii_mbtowc>:
 80078c4:	b082      	sub	sp, #8
 80078c6:	b901      	cbnz	r1, 80078ca <__ascii_mbtowc+0x6>
 80078c8:	a901      	add	r1, sp, #4
 80078ca:	b142      	cbz	r2, 80078de <__ascii_mbtowc+0x1a>
 80078cc:	b14b      	cbz	r3, 80078e2 <__ascii_mbtowc+0x1e>
 80078ce:	7813      	ldrb	r3, [r2, #0]
 80078d0:	600b      	str	r3, [r1, #0]
 80078d2:	7812      	ldrb	r2, [r2, #0]
 80078d4:	1e10      	subs	r0, r2, #0
 80078d6:	bf18      	it	ne
 80078d8:	2001      	movne	r0, #1
 80078da:	b002      	add	sp, #8
 80078dc:	4770      	bx	lr
 80078de:	4610      	mov	r0, r2
 80078e0:	e7fb      	b.n	80078da <__ascii_mbtowc+0x16>
 80078e2:	f06f 0001 	mvn.w	r0, #1
 80078e6:	e7f8      	b.n	80078da <__ascii_mbtowc+0x16>

080078e8 <__ascii_wctomb>:
 80078e8:	4603      	mov	r3, r0
 80078ea:	4608      	mov	r0, r1
 80078ec:	b141      	cbz	r1, 8007900 <__ascii_wctomb+0x18>
 80078ee:	2aff      	cmp	r2, #255	@ 0xff
 80078f0:	d904      	bls.n	80078fc <__ascii_wctomb+0x14>
 80078f2:	228a      	movs	r2, #138	@ 0x8a
 80078f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	4770      	bx	lr
 80078fc:	2001      	movs	r0, #1
 80078fe:	700a      	strb	r2, [r1, #0]
 8007900:	4770      	bx	lr

08007902 <_raise_r>:
 8007902:	291f      	cmp	r1, #31
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4605      	mov	r5, r0
 8007908:	460c      	mov	r4, r1
 800790a:	d904      	bls.n	8007916 <_raise_r+0x14>
 800790c:	2316      	movs	r3, #22
 800790e:	6003      	str	r3, [r0, #0]
 8007910:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007914:	bd38      	pop	{r3, r4, r5, pc}
 8007916:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007918:	b112      	cbz	r2, 8007920 <_raise_r+0x1e>
 800791a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800791e:	b94b      	cbnz	r3, 8007934 <_raise_r+0x32>
 8007920:	4628      	mov	r0, r5
 8007922:	f000 f831 	bl	8007988 <_getpid_r>
 8007926:	4622      	mov	r2, r4
 8007928:	4601      	mov	r1, r0
 800792a:	4628      	mov	r0, r5
 800792c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007930:	f000 b818 	b.w	8007964 <_kill_r>
 8007934:	2b01      	cmp	r3, #1
 8007936:	d00a      	beq.n	800794e <_raise_r+0x4c>
 8007938:	1c59      	adds	r1, r3, #1
 800793a:	d103      	bne.n	8007944 <_raise_r+0x42>
 800793c:	2316      	movs	r3, #22
 800793e:	6003      	str	r3, [r0, #0]
 8007940:	2001      	movs	r0, #1
 8007942:	e7e7      	b.n	8007914 <_raise_r+0x12>
 8007944:	2100      	movs	r1, #0
 8007946:	4620      	mov	r0, r4
 8007948:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800794c:	4798      	blx	r3
 800794e:	2000      	movs	r0, #0
 8007950:	e7e0      	b.n	8007914 <_raise_r+0x12>
	...

08007954 <raise>:
 8007954:	4b02      	ldr	r3, [pc, #8]	@ (8007960 <raise+0xc>)
 8007956:	4601      	mov	r1, r0
 8007958:	6818      	ldr	r0, [r3, #0]
 800795a:	f7ff bfd2 	b.w	8007902 <_raise_r>
 800795e:	bf00      	nop
 8007960:	20000024 	.word	0x20000024

08007964 <_kill_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	2300      	movs	r3, #0
 8007968:	4d06      	ldr	r5, [pc, #24]	@ (8007984 <_kill_r+0x20>)
 800796a:	4604      	mov	r4, r0
 800796c:	4608      	mov	r0, r1
 800796e:	4611      	mov	r1, r2
 8007970:	602b      	str	r3, [r5, #0]
 8007972:	f000 f829 	bl	80079c8 <_kill>
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	d102      	bne.n	8007980 <_kill_r+0x1c>
 800797a:	682b      	ldr	r3, [r5, #0]
 800797c:	b103      	cbz	r3, 8007980 <_kill_r+0x1c>
 800797e:	6023      	str	r3, [r4, #0]
 8007980:	bd38      	pop	{r3, r4, r5, pc}
 8007982:	bf00      	nop
 8007984:	200004a4 	.word	0x200004a4

08007988 <_getpid_r>:
 8007988:	f000 b91e 	b.w	8007bc8 <_getpid>

0800798c <_exit>:
 800798c:	4601      	mov	r1, r0
 800798e:	4a03      	ldr	r2, [pc, #12]	@ (800799c <_exit+0x10>)
 8007990:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007994:	b508      	push	{r3, lr}
 8007996:	f000 f803 	bl	80079a0 <_kill_shared>
 800799a:	bf00      	nop
 800799c:	00020026 	.word	0x00020026

080079a0 <_kill_shared>:
 80079a0:	b507      	push	{r0, r1, r2, lr}
 80079a2:	e9cd 2100 	strd	r2, r1, [sp]
 80079a6:	f000 fa29 	bl	8007dfc <_has_ext_exit_extended>
 80079aa:	2800      	cmp	r0, #0
 80079ac:	bf0c      	ite	eq
 80079ae:	2418      	moveq	r4, #24
 80079b0:	2420      	movne	r4, #32
 80079b2:	f000 fa23 	bl	8007dfc <_has_ext_exit_extended>
 80079b6:	b120      	cbz	r0, 80079c2 <_kill_shared+0x22>
 80079b8:	466d      	mov	r5, sp
 80079ba:	4620      	mov	r0, r4
 80079bc:	4629      	mov	r1, r5
 80079be:	beab      	bkpt	0x00ab
 80079c0:	4604      	mov	r4, r0
 80079c2:	9d00      	ldr	r5, [sp, #0]
 80079c4:	e7f9      	b.n	80079ba <_kill_shared+0x1a>
	...

080079c8 <_kill>:
 80079c8:	2906      	cmp	r1, #6
 80079ca:	b508      	push	{r3, lr}
 80079cc:	bf0c      	ite	eq
 80079ce:	4a02      	ldreq	r2, [pc, #8]	@ (80079d8 <_kill+0x10>)
 80079d0:	4a02      	ldrne	r2, [pc, #8]	@ (80079dc <_kill+0x14>)
 80079d2:	f7ff ffe5 	bl	80079a0 <_kill_shared>
 80079d6:	bf00      	nop
 80079d8:	00020023 	.word	0x00020023
 80079dc:	00020026 	.word	0x00020026

080079e0 <findslot>:
 80079e0:	4b0a      	ldr	r3, [pc, #40]	@ (8007a0c <findslot+0x2c>)
 80079e2:	b510      	push	{r4, lr}
 80079e4:	4604      	mov	r4, r0
 80079e6:	6818      	ldr	r0, [r3, #0]
 80079e8:	b118      	cbz	r0, 80079f2 <findslot+0x12>
 80079ea:	6a03      	ldr	r3, [r0, #32]
 80079ec:	b90b      	cbnz	r3, 80079f2 <findslot+0x12>
 80079ee:	f7fd ff6d 	bl	80058cc <__sinit>
 80079f2:	2c13      	cmp	r4, #19
 80079f4:	d807      	bhi.n	8007a06 <findslot+0x26>
 80079f6:	4806      	ldr	r0, [pc, #24]	@ (8007a10 <findslot+0x30>)
 80079f8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80079fc:	3201      	adds	r2, #1
 80079fe:	d002      	beq.n	8007a06 <findslot+0x26>
 8007a00:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007a04:	bd10      	pop	{r4, pc}
 8007a06:	2000      	movs	r0, #0
 8007a08:	e7fc      	b.n	8007a04 <findslot+0x24>
 8007a0a:	bf00      	nop
 8007a0c:	20000024 	.word	0x20000024
 8007a10:	200004b4 	.word	0x200004b4

08007a14 <error>:
 8007a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a16:	4604      	mov	r4, r0
 8007a18:	2613      	movs	r6, #19
 8007a1a:	f7fe f811 	bl	8005a40 <__errno>
 8007a1e:	2700      	movs	r7, #0
 8007a20:	4605      	mov	r5, r0
 8007a22:	4630      	mov	r0, r6
 8007a24:	4639      	mov	r1, r7
 8007a26:	beab      	bkpt	0x00ab
 8007a28:	4606      	mov	r6, r0
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	602e      	str	r6, [r5, #0]
 8007a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a30 <checkerror>:
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d101      	bne.n	8007a38 <checkerror+0x8>
 8007a34:	f7ff bfee 	b.w	8007a14 <error>
 8007a38:	4770      	bx	lr

08007a3a <_swiread>:
 8007a3a:	b530      	push	{r4, r5, lr}
 8007a3c:	b085      	sub	sp, #20
 8007a3e:	2406      	movs	r4, #6
 8007a40:	ad01      	add	r5, sp, #4
 8007a42:	9203      	str	r2, [sp, #12]
 8007a44:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007a48:	4620      	mov	r0, r4
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	beab      	bkpt	0x00ab
 8007a4e:	4604      	mov	r4, r0
 8007a50:	4620      	mov	r0, r4
 8007a52:	f7ff ffed 	bl	8007a30 <checkerror>
 8007a56:	b005      	add	sp, #20
 8007a58:	bd30      	pop	{r4, r5, pc}

08007a5a <_read>:
 8007a5a:	b570      	push	{r4, r5, r6, lr}
 8007a5c:	460e      	mov	r6, r1
 8007a5e:	4614      	mov	r4, r2
 8007a60:	f7ff ffbe 	bl	80079e0 <findslot>
 8007a64:	4605      	mov	r5, r0
 8007a66:	b930      	cbnz	r0, 8007a76 <_read+0x1c>
 8007a68:	f7fd ffea 	bl	8005a40 <__errno>
 8007a6c:	2309      	movs	r3, #9
 8007a6e:	6003      	str	r3, [r0, #0]
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a74:	bd70      	pop	{r4, r5, r6, pc}
 8007a76:	4622      	mov	r2, r4
 8007a78:	4631      	mov	r1, r6
 8007a7a:	6800      	ldr	r0, [r0, #0]
 8007a7c:	f7ff ffdd 	bl	8007a3a <_swiread>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	d0f5      	beq.n	8007a70 <_read+0x16>
 8007a84:	686b      	ldr	r3, [r5, #4]
 8007a86:	1a20      	subs	r0, r4, r0
 8007a88:	4403      	add	r3, r0
 8007a8a:	606b      	str	r3, [r5, #4]
 8007a8c:	e7f2      	b.n	8007a74 <_read+0x1a>

08007a8e <_swilseek>:
 8007a8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a90:	460c      	mov	r4, r1
 8007a92:	4616      	mov	r6, r2
 8007a94:	f7ff ffa4 	bl	80079e0 <findslot>
 8007a98:	4605      	mov	r5, r0
 8007a9a:	b940      	cbnz	r0, 8007aae <_swilseek+0x20>
 8007a9c:	f7fd ffd0 	bl	8005a40 <__errno>
 8007aa0:	2309      	movs	r3, #9
 8007aa2:	6003      	str	r3, [r0, #0]
 8007aa4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	b003      	add	sp, #12
 8007aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aae:	2e02      	cmp	r6, #2
 8007ab0:	d903      	bls.n	8007aba <_swilseek+0x2c>
 8007ab2:	f7fd ffc5 	bl	8005a40 <__errno>
 8007ab6:	2316      	movs	r3, #22
 8007ab8:	e7f3      	b.n	8007aa2 <_swilseek+0x14>
 8007aba:	2e01      	cmp	r6, #1
 8007abc:	d112      	bne.n	8007ae4 <_swilseek+0x56>
 8007abe:	6843      	ldr	r3, [r0, #4]
 8007ac0:	18e4      	adds	r4, r4, r3
 8007ac2:	d4f6      	bmi.n	8007ab2 <_swilseek+0x24>
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	260a      	movs	r6, #10
 8007ac8:	466f      	mov	r7, sp
 8007aca:	e9cd 3400 	strd	r3, r4, [sp]
 8007ace:	4630      	mov	r0, r6
 8007ad0:	4639      	mov	r1, r7
 8007ad2:	beab      	bkpt	0x00ab
 8007ad4:	4606      	mov	r6, r0
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	f7ff ffaa 	bl	8007a30 <checkerror>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	dbe1      	blt.n	8007aa4 <_swilseek+0x16>
 8007ae0:	606c      	str	r4, [r5, #4]
 8007ae2:	e7e1      	b.n	8007aa8 <_swilseek+0x1a>
 8007ae4:	2e02      	cmp	r6, #2
 8007ae6:	6803      	ldr	r3, [r0, #0]
 8007ae8:	d1ec      	bne.n	8007ac4 <_swilseek+0x36>
 8007aea:	260c      	movs	r6, #12
 8007aec:	466f      	mov	r7, sp
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	4630      	mov	r0, r6
 8007af2:	4639      	mov	r1, r7
 8007af4:	beab      	bkpt	0x00ab
 8007af6:	4606      	mov	r6, r0
 8007af8:	4630      	mov	r0, r6
 8007afa:	f7ff ff99 	bl	8007a30 <checkerror>
 8007afe:	1c43      	adds	r3, r0, #1
 8007b00:	d0d0      	beq.n	8007aa4 <_swilseek+0x16>
 8007b02:	4404      	add	r4, r0
 8007b04:	e7de      	b.n	8007ac4 <_swilseek+0x36>

08007b06 <_lseek>:
 8007b06:	f7ff bfc2 	b.w	8007a8e <_swilseek>

08007b0a <_swiwrite>:
 8007b0a:	b530      	push	{r4, r5, lr}
 8007b0c:	b085      	sub	sp, #20
 8007b0e:	2405      	movs	r4, #5
 8007b10:	ad01      	add	r5, sp, #4
 8007b12:	9203      	str	r2, [sp, #12]
 8007b14:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007b18:	4620      	mov	r0, r4
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	beab      	bkpt	0x00ab
 8007b1e:	4604      	mov	r4, r0
 8007b20:	4620      	mov	r0, r4
 8007b22:	f7ff ff85 	bl	8007a30 <checkerror>
 8007b26:	b005      	add	sp, #20
 8007b28:	bd30      	pop	{r4, r5, pc}

08007b2a <_write>:
 8007b2a:	b570      	push	{r4, r5, r6, lr}
 8007b2c:	460e      	mov	r6, r1
 8007b2e:	4615      	mov	r5, r2
 8007b30:	f7ff ff56 	bl	80079e0 <findslot>
 8007b34:	4604      	mov	r4, r0
 8007b36:	b930      	cbnz	r0, 8007b46 <_write+0x1c>
 8007b38:	f7fd ff82 	bl	8005a40 <__errno>
 8007b3c:	2309      	movs	r3, #9
 8007b3e:	6003      	str	r3, [r0, #0]
 8007b40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b44:	bd70      	pop	{r4, r5, r6, pc}
 8007b46:	462a      	mov	r2, r5
 8007b48:	4631      	mov	r1, r6
 8007b4a:	6800      	ldr	r0, [r0, #0]
 8007b4c:	f7ff ffdd 	bl	8007b0a <_swiwrite>
 8007b50:	1e03      	subs	r3, r0, #0
 8007b52:	dbf5      	blt.n	8007b40 <_write+0x16>
 8007b54:	6862      	ldr	r2, [r4, #4]
 8007b56:	1ae8      	subs	r0, r5, r3
 8007b58:	42ab      	cmp	r3, r5
 8007b5a:	4402      	add	r2, r0
 8007b5c:	6062      	str	r2, [r4, #4]
 8007b5e:	d1f1      	bne.n	8007b44 <_write+0x1a>
 8007b60:	2000      	movs	r0, #0
 8007b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b66:	f7ff bf55 	b.w	8007a14 <error>

08007b6a <_swiclose>:
 8007b6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b6c:	2402      	movs	r4, #2
 8007b6e:	ad01      	add	r5, sp, #4
 8007b70:	9001      	str	r0, [sp, #4]
 8007b72:	4620      	mov	r0, r4
 8007b74:	4629      	mov	r1, r5
 8007b76:	beab      	bkpt	0x00ab
 8007b78:	4604      	mov	r4, r0
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f7ff ff58 	bl	8007a30 <checkerror>
 8007b80:	b003      	add	sp, #12
 8007b82:	bd30      	pop	{r4, r5, pc}

08007b84 <_close>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	4605      	mov	r5, r0
 8007b88:	f7ff ff2a 	bl	80079e0 <findslot>
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	b930      	cbnz	r0, 8007b9e <_close+0x1a>
 8007b90:	f7fd ff56 	bl	8005a40 <__errno>
 8007b94:	2309      	movs	r3, #9
 8007b96:	6003      	str	r3, [r0, #0]
 8007b98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b9c:	bd38      	pop	{r3, r4, r5, pc}
 8007b9e:	3d01      	subs	r5, #1
 8007ba0:	2d01      	cmp	r5, #1
 8007ba2:	d809      	bhi.n	8007bb8 <_close+0x34>
 8007ba4:	4b07      	ldr	r3, [pc, #28]	@ (8007bc4 <_close+0x40>)
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d104      	bne.n	8007bb8 <_close+0x34>
 8007bae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	6023      	str	r3, [r4, #0]
 8007bb6:	e7f1      	b.n	8007b9c <_close+0x18>
 8007bb8:	6820      	ldr	r0, [r4, #0]
 8007bba:	f7ff ffd6 	bl	8007b6a <_swiclose>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d0f5      	beq.n	8007bae <_close+0x2a>
 8007bc2:	e7eb      	b.n	8007b9c <_close+0x18>
 8007bc4:	200004b4 	.word	0x200004b4

08007bc8 <_getpid>:
 8007bc8:	2001      	movs	r0, #1
 8007bca:	4770      	bx	lr

08007bcc <_swistat>:
 8007bcc:	b570      	push	{r4, r5, r6, lr}
 8007bce:	460c      	mov	r4, r1
 8007bd0:	f7ff ff06 	bl	80079e0 <findslot>
 8007bd4:	4605      	mov	r5, r0
 8007bd6:	b930      	cbnz	r0, 8007be6 <_swistat+0x1a>
 8007bd8:	f7fd ff32 	bl	8005a40 <__errno>
 8007bdc:	2309      	movs	r3, #9
 8007bde:	6003      	str	r3, [r0, #0]
 8007be0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007be4:	bd70      	pop	{r4, r5, r6, pc}
 8007be6:	6863      	ldr	r3, [r4, #4]
 8007be8:	260c      	movs	r6, #12
 8007bea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007bee:	6063      	str	r3, [r4, #4]
 8007bf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bf4:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	beab      	bkpt	0x00ab
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f7ff ff16 	bl	8007a30 <checkerror>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d0eb      	beq.n	8007be0 <_swistat+0x14>
 8007c08:	6120      	str	r0, [r4, #16]
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	e7ea      	b.n	8007be4 <_swistat+0x18>

08007c0e <_fstat>:
 8007c0e:	460b      	mov	r3, r1
 8007c10:	2258      	movs	r2, #88	@ 0x58
 8007c12:	2100      	movs	r1, #0
 8007c14:	b510      	push	{r4, lr}
 8007c16:	4604      	mov	r4, r0
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fd ff05 	bl	8005a28 <memset>
 8007c1e:	4601      	mov	r1, r0
 8007c20:	4620      	mov	r0, r4
 8007c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c26:	f7ff bfd1 	b.w	8007bcc <_swistat>

08007c2a <_stat>:
 8007c2a:	b538      	push	{r3, r4, r5, lr}
 8007c2c:	460d      	mov	r5, r1
 8007c2e:	4604      	mov	r4, r0
 8007c30:	2258      	movs	r2, #88	@ 0x58
 8007c32:	2100      	movs	r1, #0
 8007c34:	4628      	mov	r0, r5
 8007c36:	f7fd fef7 	bl	8005a28 <memset>
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	f000 f811 	bl	8007c64 <_swiopen>
 8007c42:	1c43      	adds	r3, r0, #1
 8007c44:	4604      	mov	r4, r0
 8007c46:	d00b      	beq.n	8007c60 <_stat+0x36>
 8007c48:	686b      	ldr	r3, [r5, #4]
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007c50:	606b      	str	r3, [r5, #4]
 8007c52:	f7ff ffbb 	bl	8007bcc <_swistat>
 8007c56:	4605      	mov	r5, r0
 8007c58:	4620      	mov	r0, r4
 8007c5a:	462c      	mov	r4, r5
 8007c5c:	f7ff ff92 	bl	8007b84 <_close>
 8007c60:	4620      	mov	r0, r4
 8007c62:	bd38      	pop	{r3, r4, r5, pc}

08007c64 <_swiopen>:
 8007c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c68:	4682      	mov	sl, r0
 8007c6a:	b096      	sub	sp, #88	@ 0x58
 8007c6c:	460e      	mov	r6, r1
 8007c6e:	2400      	movs	r4, #0
 8007c70:	4f27      	ldr	r7, [pc, #156]	@ (8007d10 <_swiopen+0xac>)
 8007c72:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8007c76:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	d00c      	beq.n	8007c98 <_swiopen+0x34>
 8007c7e:	3401      	adds	r4, #1
 8007c80:	2c14      	cmp	r4, #20
 8007c82:	d1f6      	bne.n	8007c72 <_swiopen+0xe>
 8007c84:	f7fd fedc 	bl	8005a40 <__errno>
 8007c88:	2318      	movs	r3, #24
 8007c8a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007c8e:	6003      	str	r3, [r0, #0]
 8007c90:	4620      	mov	r0, r4
 8007c92:	b016      	add	sp, #88	@ 0x58
 8007c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c98:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8007c9c:	46e9      	mov	r9, sp
 8007c9e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007ca2:	d109      	bne.n	8007cb8 <_swiopen+0x54>
 8007ca4:	4649      	mov	r1, r9
 8007ca6:	4650      	mov	r0, sl
 8007ca8:	f7ff ffbf 	bl	8007c2a <_stat>
 8007cac:	3001      	adds	r0, #1
 8007cae:	d003      	beq.n	8007cb8 <_swiopen+0x54>
 8007cb0:	f7fd fec6 	bl	8005a40 <__errno>
 8007cb4:	2311      	movs	r3, #17
 8007cb6:	e7e8      	b.n	8007c8a <_swiopen+0x26>
 8007cb8:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8007cbc:	f240 6301 	movw	r3, #1537	@ 0x601
 8007cc0:	07b2      	lsls	r2, r6, #30
 8007cc2:	4650      	mov	r0, sl
 8007cc4:	f8cd a000 	str.w	sl, [sp]
 8007cc8:	bf48      	it	mi
 8007cca:	f045 0502 	orrmi.w	r5, r5, #2
 8007cce:	421e      	tst	r6, r3
 8007cd0:	bf18      	it	ne
 8007cd2:	f045 0504 	orrne.w	r5, r5, #4
 8007cd6:	0733      	lsls	r3, r6, #28
 8007cd8:	bf44      	itt	mi
 8007cda:	f025 0504 	bicmi.w	r5, r5, #4
 8007cde:	f045 0508 	orrmi.w	r5, r5, #8
 8007ce2:	f7f8 fac9 	bl	8000278 <strlen>
 8007ce6:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8007cea:	2501      	movs	r5, #1
 8007cec:	4628      	mov	r0, r5
 8007cee:	4649      	mov	r1, r9
 8007cf0:	beab      	bkpt	0x00ab
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	2d00      	cmp	r5, #0
 8007cf6:	db05      	blt.n	8007d04 <_swiopen+0xa0>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8007cfe:	4447      	add	r7, r8
 8007d00:	607b      	str	r3, [r7, #4]
 8007d02:	e7c5      	b.n	8007c90 <_swiopen+0x2c>
 8007d04:	4628      	mov	r0, r5
 8007d06:	f7ff fe85 	bl	8007a14 <error>
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	e7c0      	b.n	8007c90 <_swiopen+0x2c>
 8007d0e:	bf00      	nop
 8007d10:	200004b4 	.word	0x200004b4

08007d14 <_get_semihosting_exts>:
 8007d14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d18:	4606      	mov	r6, r0
 8007d1a:	4615      	mov	r5, r2
 8007d1c:	460f      	mov	r7, r1
 8007d1e:	4829      	ldr	r0, [pc, #164]	@ (8007dc4 <_get_semihosting_exts+0xb0>)
 8007d20:	2100      	movs	r1, #0
 8007d22:	f7ff ff9f 	bl	8007c64 <_swiopen>
 8007d26:	4604      	mov	r4, r0
 8007d28:	462a      	mov	r2, r5
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f7fd fe7b 	bl	8005a28 <memset>
 8007d32:	1c63      	adds	r3, r4, #1
 8007d34:	d014      	beq.n	8007d60 <_get_semihosting_exts+0x4c>
 8007d36:	4620      	mov	r0, r4
 8007d38:	f04f 080c 	mov.w	r8, #12
 8007d3c:	f7ff fe50 	bl	80079e0 <findslot>
 8007d40:	4681      	mov	r9, r0
 8007d42:	4640      	mov	r0, r8
 8007d44:	4649      	mov	r1, r9
 8007d46:	beab      	bkpt	0x00ab
 8007d48:	4680      	mov	r8, r0
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	f7ff fe70 	bl	8007a30 <checkerror>
 8007d50:	2803      	cmp	r0, #3
 8007d52:	dd02      	ble.n	8007d5a <_get_semihosting_exts+0x46>
 8007d54:	1ec3      	subs	r3, r0, #3
 8007d56:	42ab      	cmp	r3, r5
 8007d58:	dc07      	bgt.n	8007d6a <_get_semihosting_exts+0x56>
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f7ff ff12 	bl	8007b84 <_close>
 8007d60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d64:	b003      	add	sp, #12
 8007d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d6a:	2204      	movs	r2, #4
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	eb0d 0102 	add.w	r1, sp, r2
 8007d72:	f7ff fe72 	bl	8007a5a <_read>
 8007d76:	2803      	cmp	r0, #3
 8007d78:	ddef      	ble.n	8007d5a <_get_semihosting_exts+0x46>
 8007d7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007d7e:	2b53      	cmp	r3, #83	@ 0x53
 8007d80:	d1eb      	bne.n	8007d5a <_get_semihosting_exts+0x46>
 8007d82:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007d86:	2b48      	cmp	r3, #72	@ 0x48
 8007d88:	d1e7      	bne.n	8007d5a <_get_semihosting_exts+0x46>
 8007d8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007d8e:	2b46      	cmp	r3, #70	@ 0x46
 8007d90:	d1e3      	bne.n	8007d5a <_get_semihosting_exts+0x46>
 8007d92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007d96:	2b42      	cmp	r3, #66	@ 0x42
 8007d98:	d1df      	bne.n	8007d5a <_get_semihosting_exts+0x46>
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f7ff fe75 	bl	8007a8e <_swilseek>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	dbd8      	blt.n	8007d5a <_get_semihosting_exts+0x46>
 8007da8:	462a      	mov	r2, r5
 8007daa:	4631      	mov	r1, r6
 8007dac:	4620      	mov	r0, r4
 8007dae:	f7ff fe54 	bl	8007a5a <_read>
 8007db2:	4605      	mov	r5, r0
 8007db4:	4620      	mov	r0, r4
 8007db6:	f7ff fee5 	bl	8007b84 <_close>
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f7ff fe38 	bl	8007a30 <checkerror>
 8007dc0:	e7d0      	b.n	8007d64 <_get_semihosting_exts+0x50>
 8007dc2:	bf00      	nop
 8007dc4:	080085c3 	.word	0x080085c3

08007dc8 <initialise_semihosting_exts>:
 8007dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dca:	2100      	movs	r1, #0
 8007dcc:	2201      	movs	r2, #1
 8007dce:	4d09      	ldr	r5, [pc, #36]	@ (8007df4 <initialise_semihosting_exts+0x2c>)
 8007dd0:	a801      	add	r0, sp, #4
 8007dd2:	4c09      	ldr	r4, [pc, #36]	@ (8007df8 <initialise_semihosting_exts+0x30>)
 8007dd4:	6029      	str	r1, [r5, #0]
 8007dd6:	6022      	str	r2, [r4, #0]
 8007dd8:	f7ff ff9c 	bl	8007d14 <_get_semihosting_exts>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	dd07      	ble.n	8007df0 <initialise_semihosting_exts+0x28>
 8007de0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007de4:	f003 0201 	and.w	r2, r3, #1
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	602a      	str	r2, [r5, #0]
 8007dee:	6023      	str	r3, [r4, #0]
 8007df0:	b003      	add	sp, #12
 8007df2:	bd30      	pop	{r4, r5, pc}
 8007df4:	200001e4 	.word	0x200001e4
 8007df8:	200001e0 	.word	0x200001e0

08007dfc <_has_ext_exit_extended>:
 8007dfc:	b510      	push	{r4, lr}
 8007dfe:	4c04      	ldr	r4, [pc, #16]	@ (8007e10 <_has_ext_exit_extended+0x14>)
 8007e00:	6823      	ldr	r3, [r4, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	da01      	bge.n	8007e0a <_has_ext_exit_extended+0xe>
 8007e06:	f7ff ffdf 	bl	8007dc8 <initialise_semihosting_exts>
 8007e0a:	6820      	ldr	r0, [r4, #0]
 8007e0c:	bd10      	pop	{r4, pc}
 8007e0e:	bf00      	nop
 8007e10:	200001e4 	.word	0x200001e4

08007e14 <_has_ext_stdout_stderr>:
 8007e14:	b510      	push	{r4, lr}
 8007e16:	4c04      	ldr	r4, [pc, #16]	@ (8007e28 <_has_ext_stdout_stderr+0x14>)
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	da01      	bge.n	8007e22 <_has_ext_stdout_stderr+0xe>
 8007e1e:	f7ff ffd3 	bl	8007dc8 <initialise_semihosting_exts>
 8007e22:	6820      	ldr	r0, [r4, #0]
 8007e24:	bd10      	pop	{r4, pc}
 8007e26:	bf00      	nop
 8007e28:	200001e0 	.word	0x200001e0

08007e2c <initialise_monitor_handles>:
 8007e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e30:	2303      	movs	r3, #3
 8007e32:	b085      	sub	sp, #20
 8007e34:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8007ee4 <initialise_monitor_handles+0xb8>
 8007e38:	2400      	movs	r4, #0
 8007e3a:	af01      	add	r7, sp, #4
 8007e3c:	2501      	movs	r5, #1
 8007e3e:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e42:	9303      	str	r3, [sp, #12]
 8007e44:	9402      	str	r4, [sp, #8]
 8007e46:	4628      	mov	r0, r5
 8007e48:	4639      	mov	r1, r7
 8007e4a:	beab      	bkpt	0x00ab
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8007ee8 <initialise_monitor_handles+0xbc>
 8007e52:	4623      	mov	r3, r4
 8007e54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e58:	4c1f      	ldr	r4, [pc, #124]	@ (8007ed8 <initialise_monitor_handles+0xac>)
 8007e5a:	f8c8 5000 	str.w	r5, [r8]
 8007e5e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8007e62:	3301      	adds	r3, #1
 8007e64:	2b14      	cmp	r3, #20
 8007e66:	d1fa      	bne.n	8007e5e <initialise_monitor_handles+0x32>
 8007e68:	4d1c      	ldr	r5, [pc, #112]	@ (8007edc <initialise_monitor_handles+0xb0>)
 8007e6a:	f7ff ffd3 	bl	8007e14 <_has_ext_stdout_stderr>
 8007e6e:	b1d0      	cbz	r0, 8007ea6 <initialise_monitor_handles+0x7a>
 8007e70:	f04f 0a03 	mov.w	sl, #3
 8007e74:	2304      	movs	r3, #4
 8007e76:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e7a:	2601      	movs	r6, #1
 8007e7c:	f8cd a00c 	str.w	sl, [sp, #12]
 8007e80:	9302      	str	r3, [sp, #8]
 8007e82:	4630      	mov	r0, r6
 8007e84:	4639      	mov	r1, r7
 8007e86:	beab      	bkpt	0x00ab
 8007e88:	4683      	mov	fp, r0
 8007e8a:	4b15      	ldr	r3, [pc, #84]	@ (8007ee0 <initialise_monitor_handles+0xb4>)
 8007e8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e90:	f8c3 b000 	str.w	fp, [r3]
 8007e94:	2308      	movs	r3, #8
 8007e96:	f8cd a00c 	str.w	sl, [sp, #12]
 8007e9a:	9302      	str	r3, [sp, #8]
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	4639      	mov	r1, r7
 8007ea0:	beab      	bkpt	0x00ab
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	602e      	str	r6, [r5, #0]
 8007ea6:	682b      	ldr	r3, [r5, #0]
 8007ea8:	2600      	movs	r6, #0
 8007eaa:	3301      	adds	r3, #1
 8007eac:	6066      	str	r6, [r4, #4]
 8007eae:	bf02      	ittt	eq
 8007eb0:	4b0b      	ldreq	r3, [pc, #44]	@ (8007ee0 <initialise_monitor_handles+0xb4>)
 8007eb2:	681b      	ldreq	r3, [r3, #0]
 8007eb4:	602b      	streq	r3, [r5, #0]
 8007eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8007eba:	6023      	str	r3, [r4, #0]
 8007ebc:	f7ff ffaa 	bl	8007e14 <_has_ext_stdout_stderr>
 8007ec0:	b130      	cbz	r0, 8007ed0 <initialise_monitor_handles+0xa4>
 8007ec2:	4b07      	ldr	r3, [pc, #28]	@ (8007ee0 <initialise_monitor_handles+0xb4>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8007eca:	682b      	ldr	r3, [r5, #0]
 8007ecc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007ed0:	b005      	add	sp, #20
 8007ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed6:	bf00      	nop
 8007ed8:	200004b4 	.word	0x200004b4
 8007edc:	200004a8 	.word	0x200004a8
 8007ee0:	200004ac 	.word	0x200004ac
 8007ee4:	080085d9 	.word	0x080085d9
 8007ee8:	200004b0 	.word	0x200004b0

08007eec <_isatty>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	f7ff fd77 	bl	80079e0 <findslot>
 8007ef2:	2409      	movs	r4, #9
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	b920      	cbnz	r0, 8007f02 <_isatty+0x16>
 8007ef8:	f7fd fda2 	bl	8005a40 <__errno>
 8007efc:	6004      	str	r4, [r0, #0]
 8007efe:	2000      	movs	r0, #0
 8007f00:	bd70      	pop	{r4, r5, r6, pc}
 8007f02:	4620      	mov	r0, r4
 8007f04:	4629      	mov	r1, r5
 8007f06:	beab      	bkpt	0x00ab
 8007f08:	4604      	mov	r4, r0
 8007f0a:	2c01      	cmp	r4, #1
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	d0f7      	beq.n	8007f00 <_isatty+0x14>
 8007f10:	f7fd fd96 	bl	8005a40 <__errno>
 8007f14:	2513      	movs	r5, #19
 8007f16:	4604      	mov	r4, r0
 8007f18:	2600      	movs	r6, #0
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	beab      	bkpt	0x00ab
 8007f20:	4605      	mov	r5, r0
 8007f22:	6025      	str	r5, [r4, #0]
 8007f24:	e7eb      	b.n	8007efe <_isatty+0x12>
	...

08007f28 <_init>:
 8007f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2a:	bf00      	nop
 8007f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f2e:	bc08      	pop	{r3}
 8007f30:	469e      	mov	lr, r3
 8007f32:	4770      	bx	lr

08007f34 <_fini>:
 8007f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f36:	bf00      	nop
 8007f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3a:	bc08      	pop	{r3}
 8007f3c:	469e      	mov	lr, r3
 8007f3e:	4770      	bx	lr
